{"meta":{"title":"王秀文","subtitle":null,"description":null,"author":"williamwong","url":"https://wangxiuwen.github.io","root":"/"},"pages":[],"posts":[{"title":"友情链接","slug":"links","date":"2020-11-29T01:42:08.779Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"links/","link":"","permalink":"https://wangxiuwen.github.io/links/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Repositories","slug":"repository","date":"2020-11-29T01:42:08.779Z","updated":"2020-11-29T01:42:08.779Z","comments":false,"path":"repository/","link":"","permalink":"https://wangxiuwen.github.io/repository/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"网址导航","slug":"site-navs","date":"2020-11-29T01:42:08.779Z","updated":"2020-11-29T01:42:08.779Z","comments":false,"path":"site-navs/","link":"","permalink":"https://wangxiuwen.github.io/site-navs/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"标签","slug":"tags","date":"2020-11-29T01:42:08.779Z","updated":"2020-11-29T01:42:08.779Z","comments":false,"path":"tags/","link":"","permalink":"https://wangxiuwen.github.io/tags/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"helm tls 证书配置","slug":"topics/tech/helm-tls-conf","date":"2020-11-29T01:42:08.779Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"topics/tech/helm-tls-conf/","link":"","permalink":"https://wangxiuwen.github.io/topics/tech/helm-tls-conf/","excerpt":"","text":"helm tls 证书配置1234export HELM_TLS_ENABLE=trueexport HELM_TLS_CA_CERT=/etc/kubernetes/pki/ca.pemexport HELM_TLS_CERT=/etc/kubernetes/pki/admin.pemexport HELM_TLS_KEY=/etc/kubernetes/pki/admin-key.pem","categories":[],"tags":[]},{"title":"分类","slug":"categories","date":"2020-11-29T01:42:08.743Z","updated":"2020-11-29T01:42:08.743Z","comments":false,"path":"categories/","link":"","permalink":"https://wangxiuwen.github.io/categories/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"test","slug":"test","date":"2019-10-20T00:54:32.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"test/","link":"","permalink":"https://wangxiuwen.github.io/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"github 修改语言统计","slug":"topics/tech/github-修改语言统计","date":"2019-10-19T13:01:00.000Z","updated":"2020-11-29T01:42:08.779Z","comments":false,"path":"topics/tech/github-修改语言统计/","link":"","permalink":"https://wangxiuwen.github.io/topics/tech/github-%E4%BF%AE%E6%94%B9%E8%AF%AD%E8%A8%80%E7%BB%9F%E8%AE%A1/","excerpt":"","text":"参考地址:https://www.cnblogs.com/kavlez/p/4214112.html","categories":[],"tags":[]},{"title":"home","slug":"home","date":"2019-10-17T13:18:18.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"home/","link":"","permalink":"https://wangxiuwen.github.io/home/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello, 我是王秀文","slug":"about","date":"2019-10-17T06:13:13.000Z","updated":"2020-11-29T01:42:08.743Z","comments":false,"path":"about/","link":"","permalink":"https://wangxiuwen.github.io/about/","excerpt":"","text":"Hakuna Matata 🔨 技术栈常用语言:nodejsgopythonjava🐚 shell数据库:redismysqlmongodb搜索引擎:elasticsearch消息队列:kafka大数据处理:spark网关:nginxCI/CD:gitlab-ci/jenkinsansible容器/云原生:dockerk8s(istio/envoy) 🐌 技术博客https://wangxiuwen.com 🏡 业余爱好🎸 弹吉他📷 摄影 📟 联系我📲 微信: wangxiuwenwen✉️ wangxiuwen@wangxiuwen.com🐱 github","categories":[],"tags":[]},{"title":"docsify 文档网站","slug":"history/tech/5da1a5a3a24691a906b2e1df","date":"2019-10-11T22:06:27.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5da1a5a3a24691a906b2e1df/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5da1a5a3a24691a906b2e1df/","excerpt":"","text":"https://docsify.js.org/#/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"eslint 设置","slug":"history/tech/5da07c76a24691a906b2e1de","date":"2019-10-11T00:58:30.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5da07c76a24691a906b2e1de/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5da07c76a24691a906b2e1de/","excerpt":"","text":"vscode设置：1234567891011&quot;files.autoSave&quot;:&quot;off&quot;,&quot;eslint.validate&quot;: [ &quot;javascript&quot;, &quot;javascriptreact&quot;, &quot;html&quot;, &#123; &quot;language&quot;: &quot;vue&quot;, &quot;autoFix&quot;: true &#125; ], &quot;eslint.options&quot;: &#123; &quot;plugins&quot;: [&quot;html&quot;] &#125;饿了么 eslint：https://www.npmjs.com/package/eslint-config-elemefevue 的 eslint:https://github.com/vuejs/eslint-config-vue","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ios 13 黑暗模式 关闭","slug":"history/tech/5d9eaf494d5e95b106b9f3fd","date":"2019-10-10T04:10:49.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d9eaf494d5e95b106b9f3fd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d9eaf494d5e95b106b9f3fd/","excerpt":"","text":"12还没适配完又不想给用户看，可以先暂时全局关闭暗黑模式：在 Info.plist 文件中，添加 key 为 User Interface Style，类型为 String，value 设置为 Light 即可。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"mysql 没有grant权限","slug":"history/tech/5d9ec3f5a24691a906b2e1dd","date":"2019-10-09T17:39:01.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d9ec3f5a24691a906b2e1dd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d9ec3f5a24691a906b2e1dd/","excerpt":"","text":"123show grants for root@&quot;%&quot;;GRANT Grant Option ON *.* TO `root`@`%`;ERROR 1045 (28000): Access denied解决：123select user,host,Grant_priv from user; update mysql.user set Grant_priv=&quot;Y&quot; where user=&quot;root&quot; and host=&quot;%&quot;;GRANT Grant Option ON *.* TO `root`@`%`;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"xxx.app 已损坏","slug":"history/tech/5d89878b97d8821c4793c589","date":"2019-09-24T03:03:39.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d89878b97d8821c4793c589/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d89878b97d8821c4793c589/","excerpt":"","text":"1sudo spctl --master-disable","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu安装 BCM4312 无线驱动","slug":"history/tech/5d86399397d8821c4793c588","date":"2019-09-21T02:54:11.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d86399397d8821c4793c588/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d86399397d8821c4793c588/","excerpt":"","text":"123lshw -C networksudo apt-get updatesudo apt-get install bcmwl-kernel-source参考资料:https://askubuntu.com/questions/11993/how-do-i-install-bcm4312-wireless-drivers","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 安装ffpmeg","slug":"history/tech/5d85dcc397d8821c4793c587","date":"2019-09-20T20:18:11.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d85dcc397d8821c4793c587/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d85dcc397d8821c4793c587/","excerpt":"","text":"123add-apt-repository ppa:djcj/hybridapt-get updateapt-get install ffmpeg","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"树莓派usb硬盘休眠","slug":"history/tech/5d7999fa97d8821c4793c586","date":"2019-09-12T01:06:02.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d7999fa97d8821c4793c586/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d7999fa97d8821c4793c586/","excerpt":"","text":"http://sg.danny.cz/sg/sdparm.html12sdparm --flexible --command=stop /dev/sda crontab -l | &#123; cat; echo &quot;/10 * * * * sdparm --command=stop /dev/sda&quot;; &#125; | sudo crontab -","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mac python3 安装","slug":"history/tech/5d77ac3807cfaf0c4726b5e1","date":"2019-09-10T01:59:20.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d77ac3807cfaf0c4726b5e1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d77ac3807cfaf0c4726b5e1/","excerpt":"","text":"1brew install python","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 python3.6","slug":"history/tech/5d7772ec97d8821c4793c585","date":"2019-09-09T21:54:52.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d7772ec97d8821c4793c585/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d7772ec97d8821c4793c585/","excerpt":"","text":"12345678910sudo yum updatesudo yum install yum-utilssudo yum groupinstall developmentsudo yum install https://centos7.iuscommunity.org/ius-release.rpmsudo yum install python36usudo yum install python36u-pipsudo yum install python36u-develpython3.6 -Vpython3.6 -m venv venvhttps://janikarhunen.fi/how-to-install-python-3-6-1-on-centos-7","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 更新 gcc","slug":"history/tech/5d77691397d8821c4793c584","date":"2019-09-09T21:12:51.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d77691397d8821c4793c584/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d77691397d8821c4793c584/","excerpt":"","text":"错误：1ImportError: /lib64/libstdc++.so.6: version `CXXABI_1.3.8&apos; not found (required by /opt/python/python-3.7.3/lib/python3.7/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so)12345678yum install gmp-devel mpfr-devel libmpc-devel wgetwget https://ftp.gnu.org/gnu/gcc/gcc-8.3.0/gcc-8.3.0.tar.gztar xf gcc-8.3.0.tar.gzcd gcc-8.3.0mkdir build &amp;&amp; cd build../configure --enable-languages=c,c++ --disable-multilibmake &amp;&amp; make installexport LD_LIBRARY_PATH=/usr/local/lib64:$&#123;LD_LIBRARY_PATH&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"jupyter notebook 安装","slug":"history/tech/5d77640c07cfaf0c4726b5e0","date":"2019-09-09T20:51:24.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d77640c07cfaf0c4726b5e0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d77640c07cfaf0c4726b5e0/","excerpt":"","text":"1234567brew install pythonpython3 -m venv venvsource venv/bin/activatepip3 install jupyterpython3 -m ipykernel install --user --name=venvjupyter kernelspec list # 查看可用的 kerneljupyter notebook","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"容器原理","slug":"history/tech/5d6f6bfff955c36b073a37ef","date":"2019-09-03T19:47:11.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d6f6bfff955c36b073a37ef/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d6f6bfff955c36b073a37ef/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243#define _GNU_SOURCE#include &lt;sys/mount.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/wait.h&gt;#include &lt;stdio.h&gt;#include &lt;sched.h&gt;#include &lt;signal.h&gt;#include &lt;unistd.h&gt;#define STACK_SIZE (1024 * 1024)static char container_stack[STACK_SIZE];char* const container_args[] = &#123; &quot;/bin/bash&quot;, NULL&#125;;//int container_main(void* arg)//&#123;// printf(&quot;Container - inside the container!\\n&quot;);// execv(container_args[0], container_args);// printf(&quot;Something&apos;s wrong!\\n&quot;);// return 1;//&#125;int container_main(void* arg)&#123; printf(&quot;Container - inside the container!\\n&quot;); // 如果你的机器的根目录的挂载类型是shared，那必须先重新挂载根目录 mount(&quot;&quot;, &quot;/&quot;, NULL, MS_PRIVATE, &quot;&quot;); mount(&quot;none&quot;, &quot;/tmp&quot;, &quot;tmpfs&quot;, 0, &quot;&quot;); execv(container_args[0], container_args); printf(&quot;Something&apos;s wrong!\\n&quot;); return 1;&#125;int main()&#123; printf(&quot;Parent - start a container!\\n&quot;); int container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWNS | SIGCHLD , NULL); waitpid(container_pid, NULL, 0); printf(&quot;Parent - container stopped!\\n&quot;); return 0;&#125;参考资料https://coolshell.cn/articles/17010.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"lxcfs","slug":"history/tech/5d6e2ed8f955c36b073a37ee","date":"2019-09-02T21:14:00.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d6e2ed8f955c36b073a37ee/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d6e2ed8f955c36b073a37ee/","excerpt":"","text":"https://www.lijiaocn.com/技巧/2019/01/09/kubernetes-lxcfs-docker-container.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ReactiveCocoa(RAC)的简单使用","slug":"history/tech/5d63b0d49ebd557707cbd1e1","date":"2019-08-25T22:13:40.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d63b0d49ebd557707cbd1e1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d63b0d49ebd557707cbd1e1/","excerpt":"","text":"https://www.jianshu.com/p/11149883b872","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"ReactiveCocoa(RAC)的简单使用","slug":"ReactiveCocoa-RAC-的简单使用","permalink":"https://wangxiuwen.github.io/tags/ReactiveCocoa-RAC-%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"}],"author":"baipeng"},{"title":"ios 导航条","slug":"history/tech/5d63ab989ebd557707cbd1e0","date":"2019-08-25T21:51:20.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d63ab989ebd557707cbd1e0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d63ab989ebd557707cbd1e0/","excerpt":"","text":"https://www.jianshu.com/p/bb4b0e7f40c7https://github.com/rickytan/RTRootNavigationControllerhttps://tech.meituan.com/2018/10/25/navigation-transition-solution-and-best-practice-in-meituan.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Ubuntu 18.04缺少libgconf-2.so.4","slug":"history/tech/5d5f90a39ebd557707cbd1df","date":"2019-08-22T19:07:15.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d5f90a39ebd557707cbd1df/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d5f90a39ebd557707cbd1df/","excerpt":"","text":"sudo apt -y install libgconf2-4","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"编译 rdm","slug":"history/tech/5d494ffef955c36b073a37ed","date":"2019-08-05T22:01:34.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d494ffef955c36b073a37ed/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d494ffef955c36b073a37ed/","excerpt":"","text":"编译步骤：http://docs.redisdesktop.com/en/latest/install/#build-from-source几处修改：1234567891011121314151617181920unix:macx &#123; # OSX QT += svg CONFIG += c++11 #debug: CONFIG-=app_bundle release: DESTDIR = ./../bin/osx/release #debug: DESTDIR = ./../bin/osx/debug #deployment QMAKE_INFO_PLIST = $$PWD/resources/Info.plist ICON = $$PWD/resources/rdm.icns #release &#123; #CRASHREPORTER_APP.files = $$DESTDIR/crashreporter #CRASHREPORTER_APP.path = Contents/MacOS #QMAKE_BUNDLE_DATA += CRASHREPORTER_APP #&#125;&#125;打包：1macdeployqt rdm.app -qmldir=/Users/williamwang/workspace/rdm/src/qml -dmg","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"helm 安装","slug":"history/tech/5d3ec471f955c36b073a37ec","date":"2019-07-28T22:03:29.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d3ec471f955c36b073a37ec/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d3ec471f955c36b073a37ec/","excerpt":"","text":"helm 安装官网下载二进制包安装（忽略）创建tiller的serviceaccount和clusterrolebinding12kubectl create serviceaccount --namespace kube-system tillerkubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tillertiller 安装1helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.14.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts为应用程序设置serviceAccount：1kubectl patch deploy --namespace kube-system tiller-deploy -p &apos;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&apos;查看是否安装成功1kubectl -n kube-system get pods|grep tiller","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"nodejs request 调用 微信小程序二维码生产接口注意事项","slug":"history/tech/5d3b1c749ebd557707cbd1dc","date":"2019-07-26T03:29:56.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d3b1c749ebd557707cbd1dc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d3b1c749ebd557707cbd1dc/","excerpt":"","text":"request默认会进行编码！！！最后导致的就是生成的图片打不开设置请求参数encoding: null,即可","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"CocoaPods 清华镜像","slug":"history/tech/5d2c825bf955c36b073a37eb","date":"2019-07-15T01:40:43.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d2c825bf955c36b073a37eb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d2c825bf955c36b073a37eb/","excerpt":"","text":"https://mirrors.tuna.tsinghua.edu.cn/help/CocoaPods/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos安装firefox flash插件","slug":"history/tech/5d242b206dbb8da90e6467ff","date":"2019-07-08T17:50:24.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d242b206dbb8da90e6467ff/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d242b206dbb8da90e6467ff/","excerpt":"","text":"12sudo yum -y install http://linuxdownload.adobe.com/linux/x86_64/adobe-release-x86_64-1.0-1.noarch.rpmsudo yum install flash-plugin","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"数据结构","slug":"history/tech/5d22a2dfdfd77a680816d21f","date":"2019-07-08T01:56:47.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d22a2dfdfd77a680816d21f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d22a2dfdfd77a680816d21f/","excerpt":"","text":"Chunk it up（切碎知识点）Deliberate practicing（刻意练习）刻意练习练习缺陷、不舒服、弱点地⽅不爽、枯燥Feedback（获得反馈）即时反馈主动型反馈高手代码 (GitHub, LeetCode, etc.) 切题四件套ClarificationPossible solutionscompare(time/space)optimal(加强）• Coding（多写）• Test cases被动式反馈（高手给你指点）code review教练看你打，给你反馈 算法复杂度O(1): Constant Complexity: Constant 常数复杂度O(log n): Logarithmic Complexity: 对数复杂度O(n): Linear Complexity: 线性时间复杂度O(n^2): N square Complexity 平方O(n^3): N square Complexity 立方O(2^n): Exponential Growth 指数O(n!): Factorial 阶乘","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"htop 终端显示错乱","slug":"history/tech/5d17f8b4ecb87fca693105cd","date":"2019-06-29T23:48:04.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d17f8b4ecb87fca693105cd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d17f8b4ecb87fca693105cd/","excerpt":"","text":"1export TERM=linuxhttps://superuser.com/questions/1251360/messed-layout-in-htop","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"python multiprocessing","slug":"history/tech/5d1480f888710ace07bed564","date":"2019-06-26T20:40:24.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d1480f888710ace07bed564/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d1480f888710ace07bed564/","excerpt":"","text":"https://docs.python.org/zh-cn/3.7/library/multiprocessing.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kubernets NodePort 无法访问","slug":"history/tech/5d145abc88710ace07bed563","date":"2019-06-26T17:57:16.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d145abc88710ace07bed563/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d145abc88710ace07bed563/","excerpt":"","text":"启动redis， 并以 NodePort 的方式对外暴露服务：12kubectl run redis --image=&apos;redis:alpine&apos;kubectl expose deploy/redis --port=6379 --protocol=TCP --target-port=6379 --name=redis-server-nodeport --type=NodePort 问题外部访问:31572 和:31572 时均出现失败，只有通过:31572 才可正常访问 原因为了安全起见， docker 在 1.13 版本之后，将系统iptables 中 FORWARD 链的默认策略设置为 DROP，并为连接到 docker0 网桥的容器添加了放行规则解决1iptables -P FORWARD ACCEPT","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"git log","slug":"history/tech/5d13305388710ace07bed562","date":"2019-06-25T20:44:03.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d13305388710ace07bed562/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d13305388710ace07bed562/","excerpt":"","text":"123456git log --all 查看所有分支的历史git log --all --graph 查看图形化的 log 地址git log --oneline 查看单行的简洁历史。git log --oneline -n4 查看最近的四条简洁历史。git log --oneline --all -n4 --graph 查看所有分支最近 4 条单行的图形化历史。git help --web log 跳转到git log 的帮助文档网页","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"confluence 文档","slug":"history/tech/5d13304188710ace07bed561","date":"2019-06-25T20:43:45.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d13304188710ace07bed561/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d13304188710ace07bed561/","excerpt":"","text":"https://www.cwiki.us/display/CONF6ZH/Confluence+Data+Model","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"删除过期文件","slug":"history/tech/5d1137320041a3160742a1e1","date":"2019-06-24T20:48:50.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d1137320041a3160742a1e1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d1137320041a3160742a1e1/","excerpt":"","text":"12#!/bin/bashfind /xxx/workspace -ctime +2 -exec rm -rf &#123;&#125; \\;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mysql 备份","slug":"history/tech/5d1136f60041a3160742a1e0","date":"2019-06-24T20:47:50.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d1136f60041a3160742a1e0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d1136f60041a3160742a1e0/","excerpt":"","text":"1234#!/bin/bashdate_str=$(date -d &quot;today&quot; +&quot;%Y%m%d&quot;)mysqldump -u root -h 192.168.1.111 --all-databases -p123456 &gt; /root/.sh/all_$date_str.sql","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"sbt","slug":"history/tech/5d11357c0041a3160742a1df","date":"2019-06-24T20:41:32.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d11357c0041a3160742a1df/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d11357c0041a3160742a1df/","excerpt":"","text":".sbt/repositories1234[repositories]localrepox-maven: http://repox.gtan.com:8078/repox-ivy: http://repox.gtan.com:8078/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"pureftpd","slug":"history/tech/5d1135020041a3160742a1de","date":"2019-06-24T20:39:30.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d1135020041a3160742a1de/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d1135020041a3160742a1de/","excerpt":"","text":"pureftpd","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Nginx  Nginx-Fancyindex-Theme 样式搭建","slug":"history/tech/5d11d47b88710ace07bed560","date":"2019-06-24T19:59:55.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d11d47b88710ace07bed560/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d11d47b88710ace07bed560/","excerpt":"","text":"https://www.jianshu.com/p/5b2914c19253","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Unknown encoder 'libx264'","slug":"history/tech/5d11d40988710ace07bed55f","date":"2019-06-24T19:58:01.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d11d40988710ace07bed55f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d11d40988710ace07bed55f/","excerpt":"","text":"https://www.it399.com/blog/ffmpeg/201807011724","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"IBM的k8s资料","slug":"history/tech/5d10a4203ccad3f8065c9fba","date":"2019-06-23T22:21:20.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d10a4203ccad3f8065c9fba/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d10a4203ccad3f8065c9fba/","excerpt":"","text":"https://developer.ibm.com/cn/tv/2018/opentec-k8s/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker confluence","slug":"history/tech/5d0c2892717f3b4c09d4349a","date":"2019-06-21T00:45:06.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d0c2892717f3b4c09d4349a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d0c2892717f3b4c09d4349a/","excerpt":"","text":"mysqld 配置：123456789[mysqld]default-storage-engine=INNODBbinlog_format=rowtransaction-isolation=READ-COMMITTEDinnodb_log_file_size = 2GBmax_allowed_packet = 512Mcharacter-set-server=utf8collation-server=utf8_bin// sql_mode = NO_AUTO_VALUE_ON_ZERO # 必须不指定这个启动 docker1docker-compose up -ddocker-compose.yml:123456789101112confluence: image: &apos;atlassian/confluence-server:latest&apos; restart: always container_name: confluence privileged: true environment: - CATALINA_OPTS=-Xms4G -Xmx4G ports: - &apos;8090:8090&apos; - &apos;8091:8091&apos; volumes: - &apos;/data/confluence:/var/atlassian/application-data/confluence&apos;拷贝 atlassian-extras-decoder-v2-3.4.1.jar 到本地并破解1docker cp &lt;containerId&gt;:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar ./破解文件：http://blog.i-driven.com.cn/public/confluence_crack.zip拷贝破解文件和 mysql 驱动文件123wget https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gzdocker cp ./atlassian-extras-2.4.jar &lt;containerId&gt;:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jardocker cp ./mysql-connector-java-5.1.46/mysql-connector-java-5.1.46-bin.jar &lt;containerId&gt;:/opt/atlassian/confluence/confluence/WEB-INF/lib/配置 mysql 时，选择 连接字符串：1jdbc:mysql://192.168.1.111:3306/confluence?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false如果有问题，定位到 /var/atlassian/application-data/confluence/confluence.cfg.xml, 查看 hibernate.connection.url 配置是否与上面的连接字符串一致参考资料：https://zhuanlan.zhihu.com/p/34182497https://blog.whsir.com/post-2997.htmlhttps://www.jianshu.com/p/1813bf05f71e","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"shell 编程 linux 目录中空格的问题","slug":"history/tech/5d085c32717f3b4c09d43498","date":"2019-06-18T03:36:18.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d085c32717f3b4c09d43498/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d085c32717f3b4c09d43498/","excerpt":"","text":"shell 把目录 “aa bb” 解析成了两个目录：目录 “aa” 和 “bb”问题的原因是 Linux 命令行工具和Shell都是默认以空格、Tab、回车做为值与值之间的分隔符，而不是做为文件名的一部分。可以通过修改Linux命令行工具和Shell的默认分隔符来解决1234567891011121314151617181920212223#! /bin/bashfunction read_dir()&#123; MY_SAVEIFS=$IFS # IFS=$(echo -en &quot;\\n\\b&quot;) IFS=$&apos;\\n&apos; for file in `ls $1` do if [ -d &quot;$1/$&#123;file&#125;&quot; ];then read_dir &quot;$1/$&#123;file&#125;&quot; else if [ &quot;$&#123;file##*.&#125;&quot; != &quot;mp4&quot; ];then if [ ! -f &quot;$1/$&#123;file&#125;.mp4&quot; ];then ffmpeg -y -i $1&quot;/$file&quot; -c:v libx264 -c:a copy -bsf:a aac_adtstoasc $1&quot;/$file&quot;.mp4 fi fi fi done IFS=$MY_SAVEIFS&#125;#读取第一个参数#read_dir $1read_dir /data/ts参考资料：https://blog.csdn.net/keypeople/article/details/78147288","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go Context","slug":"history/tech/5d087e64717f3b4c09d43499","date":"2019-06-17T18:02:12.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d087e64717f3b4c09d43499/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d087e64717f3b4c09d43499/","excerpt":"","text":"根 Context: 通过 context.Background() 创建子 Context: context.WithCancel(parentContext) 创建1ctx, cancel := context.WithCancel(context.Background())当前 context 被取消时 基于它的子 context 都会被取消接受取消通知 &lt;- ctx.Done()示例代码12345678910111213141516171819202122232425262728293031323334package cancelimport ( \"context\" \"fmt\" \"testing\" \"time\")func isCancelled(ctx context.Context) bool &#123; select &#123; case &lt;-ctx.Done(): return true default: return false &#125;&#125;func TestCancel(t *testing.T) &#123; ctx, cancel := context.WithCancel(context.Background()) for i := 0; i &lt; 5; i++ &#123; go func(i int, ctx context.Context) &#123; for &#123; if isCancelled(ctx) &#123; break &#125; time.Sleep(time.Millisecond * 5) &#125; fmt.Println(i, \"Cancelled\") &#125;(i, ctx) &#125; cancel() time.Sleep(time.Second * 1)&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 常见坑","slug":"history/tech/5d06f783717f3b4c09d43496","date":"2019-06-17T02:14:27.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d06f783717f3b4c09d43496/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d06f783717f3b4c09d43496/","excerpt":"","text":"数组和切片的区别容量是否可伸缩是否可以进行比较 UTF-8, unicodeunicode 是一种字符集（code point）utf-8 是 unicode 的存储实现(转换为字节序列的规则)字符“中”Unicode0x4E2DUTF-80xE4B8ADstring/[]byte[0xE4,0xB8,0xAD] 按位清零 &amp;^ LSP 接口使用原则只依赖功能最小的接口 panic vs os.Exitos.Exit 退出时不会调用 defer 指定的函数os.Exit 退出时不输出当前调用栈信息 package注意代码在 github 上的组织形式，以适应 go get。直接以代码路径开始，不要有 src Thread vs Groutine创建是默认的 stack 大小JDK1.5 以后 java Thread stack 默认为 1MGroutine 的 stack 初始化大小为2k和 KSE （Kernel Space Entity）的对应关系Java Thread 是 1:1Groutine 是 M:N 行为方法定义123456789101112131415type Employee struct &#123; Id string Name string Age int&#125;// 第一种定义方式在实例对应的方法被调用时， 实例的成员会进行值复制func (e Employee) String() string &#123; return fmt.Sprintf(\"ID:%s-Name%s-Age:%d\", e.Id, e.Name, e.Age)&#125;// 通常情况下为了避免内存拷贝我们使用第二种定义方式func (e *Employee) String() string &#123; return fmt.Sprintf(\"ID:%s/Name%s/Age:%d\", e.Id, e.Name, e.Age)&#125; channel 的关闭向关闭的 channel 发送数据，会导致 panicv,ok&lt;-channel 为 bool 值， true 表示正常接受， false 表示通道关闭所有的channel 接收者都会在 channel 关闭时， 立刻从阻塞等待中返回且上述 ok 值为 false。这个广播机制常被利用，进行向多个订阅者同时发出信号。如：退出信号。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"packtpub","slug":"history/tech/5d074be8717f3b4c09d43497","date":"2019-06-16T20:14:32.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d074be8717f3b4c09d43497/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d074be8717f3b4c09d43497/","excerpt":"","text":"https://www.packtpub.com/all-products","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":".pip.conf","slug":"history/tech/5d035f9f717f3b4c09d43495","date":"2019-06-13T20:49:35.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d035f9f717f3b4c09d43495/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d035f9f717f3b4c09d43495/","excerpt":"","text":"123456[global]# index-url=http://mirrors.aliyun.com/pypi/simple/index-url = https://pypi.python.org/simple[install]trusted-host=mirrors.aliyun.com","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"让SSH/SOCKS成为全局代理的软件们（Windows+Linux）","slug":"history/tech/5d035f52717f3b4c09d43494","date":"2019-06-13T20:48:18.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d035f52717f3b4c09d43494/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d035f52717f3b4c09d43494/","excerpt":"","text":"Windows下的有：Proxifier 下载地址ProxyCap 下载地址前者比较好用，可控规则较多。我正在使用。Linux下的有：proxychains 下载地址redsocks 下载地址tsocks 下载地址http://www.proxifier.com/http://www.proxycap.com/http://proxychains.sourceforge.net/https://github.com/darkk/redsockshttp://tsocks.sourceforge.net/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"chfs systemd脚本","slug":"history/tech/5d035f08717f3b4c09d43493","date":"2019-06-13T20:47:04.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d035f08717f3b4c09d43493/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d035f08717f3b4c09d43493/","excerpt":"","text":"123456789101112[Unit]Description=chfsAfter=network.target remote-fs.target nss-lookup.target[Service]Type=simpleExecStart=/usr/local/bin/chfs --port=8000 --path=/data/--rule=$&#123;RULE&#125;Environment=RULE=::r|time:cuiwentime:r[Install]WantedBy=multi-user.target","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux 代理设置","slug":"history/tech/5d035e9a717f3b4c09d43492","date":"2019-06-13T20:45:14.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d035e9a717f3b4c09d43492/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d035e9a717f3b4c09d43492/","excerpt":"","text":"123456789101112131415161718192021alias proxy=&quot; git config --global http.proxy socks5://127.0.0.1:2080 export http_proxy=http://127.0.0.1:7777 export https_proxy=http://127.0.0.1:7777 export all_proxy=http://127.0.0.1:7777 export no_proxy=localhost,127.0.0.0/8,::1 export HTTP_PROXY=http://127.0.0.1:7777 export HTTPS_PROXY=http://127.0.0.1:7777 export ALL_PROXY=http://127.0.0.1:7777 export NO_PROXY=localhost,127.0.0.0/8,::1&quot;alias unproxy=&quot; git config --global --unset http.proxy unset http_proxy unset https_proxy unset all_proxy unset no_proxy unset HTTP_PROXY unset HTTPS_PROXY unset ALL_PROXY unset NO_PROXY&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 邮件列表","slug":"history/tech/5d035e36717f3b4c09d43491","date":"2019-06-13T20:43:34.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d035e36717f3b4c09d43491/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d035e36717f3b4c09d43491/","excerpt":"","text":"go 邮件列表Go邮件组的地址为http://groups.google.com/group/golang-nuts 。该邮件列表对所有人公开，你 可以在这个页面上直接加入。该邮件列表的沟通语言为英语。根据我们的经验，在该邮件列表上 提出的问题通常在24小时内可以得到解决。 Go的中文邮件组为http://groups.google.com/group/golang-china。如果你更习惯中文讨论环境， 可以参与。另外，尽管http://groups.google.com/group/ecug不是以Go语言为专题，但有关Go语言 的服务端开发，也是它重要的话题之一。网站资源 Go语言的官方网站为 http://golang.org，这个网站只随着Go的主要版本发布而更新，因此并 不反映Go的新进展。如果读者希望跟进Go语言的新进展，可以到http://code.google.com/p/go/ 直接下载新代码。这里持续对Go资料进行了整理：http://github.com/wonderfo/wonderfogo/wiki。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ts 转 mp4","slug":"history/tech/5d025c5a4022836d72dd63c8","date":"2019-06-13T02:23:22.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d025c5a4022836d72dd63c8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d025c5a4022836d72dd63c8/","excerpt":"","text":"123ffmpeg -y -i video.ts -c:v libx264 -c:a copy -bsf:a aac_adtstoasc output.mp4ffmpeg -y -i &lt;in file&gt; -vcodec copy -acodec copy -vbsf h264_mp4toannexb &lt;output file&gt;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 启用 telnet","slug":"history/tech/5d01eebb4022836d72dd63c7","date":"2019-06-12T18:35:39.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5d01eebb4022836d72dd63c7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5d01eebb4022836d72dd63c7/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mesg ttyname failed Inappropriate ioctl for device","slug":"history/tech/5cfdf10b4022836d72dd63c6","date":"2019-06-09T17:56:27.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5cfdf10b4022836d72dd63c6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cfdf10b4022836d72dd63c6/","excerpt":"","text":"报错：1mesg: ttyname failed: Inappropriate ioctl for device12345vim /root/.profile替换：mesg n || true为：tty -s &amp;&amp; mesg n","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ngrok 内网穿透","slug":"history/tech/5cf73ce94022836d72dd63c3","date":"2019-06-05T03:54:17.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5cf73ce94022836d72dd63c3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cf73ce94022836d72dd63c3/","excerpt":"","text":"https://twindy.org/nginx-ngrock-net-through/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 编译安装 python3.7.3","slug":"history/tech/5cf765524022836d72dd63c5","date":"2019-06-04T18:46:42.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5cf765524022836d72dd63c5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cf765524022836d72dd63c5/","excerpt":"","text":"编译之前需要给系统安装 sqlite3，否则会报 No module named _sqlite31234yum install sqlite-devel ./configure --prefix=/opt/python/python-3.7.3 --enable-optimizationsmake -j32make installmake install 报错：1ModuleNotFoundError: No module named &apos;_ctypes&apos;解决：1yum install libffi-devel -y","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7 安装 ffmpeg","slug":"history/tech/5cf75e574022836d72dd63c4","date":"2019-06-04T18:16:55.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5cf75e574022836d72dd63c4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cf75e574022836d72dd63c4/","excerpt":"","text":"123sudo yum install epel-release -ysudo yum update -ysudo shutdown -r now安装Nux Dextop Yum 源12sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.rosudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm安装 ffmpeg1sudo yum install ffmpeg ffmpeg-devel -y","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 子系统开机启动","slug":"history/tech/5cf492704e2c765404d06dc5","date":"2019-06-03T03:22:24.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5cf492704e2c765404d06dc5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cf492704e2c765404d06dc5/","excerpt":"","text":"windows 中操作win+r(开始运行):输入:1shell: startup创建文件 wls_rclocal.vbs:12Set ws = CreateObject(&quot;Wscript.Shell&quot;)ws.run &quot;ubuntu1804 run sudo /etc/init.wsl start&quot;, vbhide 子系统中操作：在 /etc/sudoers.d 目录下面建立 nopasswd 文件：12vim /etc/sudoers.d/rc-local%sudo ALL=NOPASSWD: /etc/init.wsl写入启动命令:1vim /etc/init.wsl","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"设计网站","slug":"history/ui/5cefb0bdead834222be7595f","date":"2019-05-29T22:30:21.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5cefb0bdead834222be7595f/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5cefb0bdead834222be7595f/","excerpt":"","text":"http://www.shejidaren.com","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"redis 批量删除","slug":"history/tech/5ce7a407ead834222be7595e","date":"2019-05-23T19:57:59.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5ce7a407ead834222be7595e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ce7a407ead834222be7595e/","excerpt":"","text":"1redis-cli -n 4 keys \"5b*\" | xargs redis-cli -n 4 del","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux 关闭 swap 分区","slug":"history/tech/5ce2361148f4e4100d0e1461","date":"2019-05-19T17:07:29.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5ce2361148f4e4100d0e1461/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ce2361148f4e4100d0e1461/","excerpt":"","text":"临时生效:1sysctl -w vm.swappiness=0永久生效：12echo &quot;vm.swappiness = 0&quot;&gt;&gt; /etc/sysctl.confsysctl -p","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker 占满磁盘迁移","slug":"history/tech/5cdebec031a604f66b46a65a","date":"2019-05-17T02:01:36.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5cdebec031a604f66b46a65a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cdebec031a604f66b46a65a/","excerpt":"","text":"查看docker 使用的空间：1docker system df查找并清空 docker container 日志:1echo &quot;&quot; &gt;&gt; `find /var/lib/docker/containers/ -name *.log`迁移 /var/lib/docker :12systemctl stop dockerrsync -avz /var/lib/docker /data/docker/修改 docker.service 文件：12// 如果不知道 docker.service 文件位置，可以执行 systemctl enable docker 查看, 同时可以修改 container 日志存储参数/usr/bin/dockerd --graph=/home/docker/lib/docker --log-opt max-size=100m --log-opt max-file=1启动 docker:1systemctl start docker对于已经启动的docker容器，直接修改 docker.service 文件不起作用需要修改 /var/lib/docker/container/&lt;containerId&gt;/hostconfig.json, 在这之前，一定要先停止docker服务systemctl stop docker12345678...&quot;LogConfig&quot;: &#123; &quot;Type&quot;: &quot;json-file&quot;, &quot;Config&quot;: &#123; &quot;max-file&quot;: &quot;1&quot;,&quot;max-size&quot;: &quot;1m&quot; &#125; &#125;,...","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ruby","slug":"history/tech/5cdccfa831a604f66b46a657","date":"2019-05-16T02:49:12.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cdccfa831a604f66b46a657/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cdccfa831a604f66b46a657/","excerpt":"","text":"windows 安装：1https://rubyinstaller.org/downloads/国内源：1https://gems.ruby-china.com/入门：1https://ruby-china.github.io/rails-guides/getting_started.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7 安装 mysql5.7","slug":"history/tech/5cdd14fa31a604f66b46a659","date":"2019-05-15T19:44:58.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/tech/5cdd14fa31a604f66b46a659/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cdd14fa31a604f66b46a659/","excerpt":"","text":"123456wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpmyum localinstall mysql57-community-release-el7-11.noarch.rpmyum repolist enabled | grep &quot;mysql.*-community.*&quot;yum install -y mysql-community-serversystemctl enable mysqldsystemctl start mysqld1234567891011grep &apos;temporary password&apos; /var/log/mysqld.logmysql -uroot -pALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass1!&apos;; 或set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;MyNewPass1!&apos;); mysql&gt; use mysql;mysql&gt; update user set password=PASSWORD(&apos;MyNewPass2!&apos;) where user=&apos;root&apos;;mysql&gt; flush privileges;参考链接：https://www.jianshu.com/p/1dab9a4d0d5f","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"gitlab docker-compose 文件","slug":"history/tech/5cdd147231a604f66b46a658","date":"2019-05-15T19:42:42.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cdd147231a604f66b46a658/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cdd147231a604f66b46a658/","excerpt":"","text":"1234567891011121314151617gitlab_11: image: &apos;gitlab/gitlab-ce:11.0.1-ce.0&apos; restart: always container_name: gitlab_11 privileged: true hostname: &apos;gitlab.xxx.com&apos; environment: GITLAB_OMNIBUS_CONFIG: | external_url &apos;http://gitlab.xxx.com&apos; ports: - &apos;4080:80&apos; - &apos;4443:443&apos; - &apos;4022:22&apos; volumes: - &apos;/etc/gitlab/gitlab-ce-11.0.1-ce.0:/etc/gitlab&apos; - &apos;/var/log/gitlab/gitlab-ce-11.0.1-ce.0:/var/log/gitlab&apos; - &apos;/data/gitlab/gitlab-ce-11.0.1-ce.0:/var/opt/gitlab&apos;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s 监控 prometheus","slug":"history/tech/5cdbc0f831a604f66b46a656","date":"2019-05-14T19:34:16.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cdbc0f831a604f66b46a656/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cdbc0f831a604f66b46a656/","excerpt":"","text":"Prometheus 通过各种 exporter 暴露数据，并由 prometheus server 定时去拉数据，然后存储。Prometheus Operator, 尽管该项目还处于 Beta 阶段，但是它给在 K8S 中搭建基于 Prometheus 的监控提供了很大的便利 创建 namespace：1kubectl apply -f namespace.yamlnamespace.yml1234apiVersion: v1kind: Namespacemetadata: name: monitoring RBACrbac.yaml:1234567891011121314151617181920212223242526272829303132333435363738apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: prometheusroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: prometheussubjects:- kind: ServiceAccount name: prometheus-k8s namespace: monitoring---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: prometheusrules:- apiGroups: [&quot;&quot;] resources: - nodes - nodes/proxy - services - endpoints - pods verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]- apiGroups: [&quot;&quot;] resources: - configmaps verbs: [&quot;get&quot;]- nonResourceURLs: [&quot;/metrics&quot;] verbs: [&quot;get&quot;]---apiVersion: v1kind: ServiceAccountmetadata: name: prometheus-k8s namespace: monitoring 创建 Promethes 的配置文件其中的内容主要参考 Prometheus 官方提供的示例 和 Prometheus 官方文档rbac.yaml:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146apiVersion: v1kind: ConfigMapmetadata: name: prometheus-core namespace: monitoringdata: prometheus.yaml: | global: scrape_interval: 30s scrape_timeout: 30s scrape_configs: - job_name: &apos;kubernetes-apiservers&apos; kubernetes_sd_configs: - role: endpoints scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token relabel_configs: - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name] action: keep regex: default;kubernetes;https # Scrape config for nodes (kubelet). - job_name: &apos;kubernetes-nodes&apos; scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token kubernetes_sd_configs: - role: node relabel_configs: - action: labelmap regex: __meta_kubernetes_node_label_(.+) - target_label: __address__ replacement: kubernetes.default.svc:443 - source_labels: [__meta_kubernetes_node_name] regex: (.+) target_label: __metrics_path__ replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics # Scrape config for Kubelet cAdvisor. - job_name: &apos;kubernetes-cadvisor&apos; scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token kubernetes_sd_configs: - role: node relabel_configs: - action: labelmap regex: __meta_kubernetes_node_label_(.+) - target_label: __address__ replacement: kubernetes.default.svc:443 - source_labels: [__meta_kubernetes_node_name] regex: (.+) target_label: __metrics_path__ replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor - job_name: &apos;kubernetes-service-endpoints&apos; kubernetes_sd_configs: - role: endpoints relabel_configs: - action: labelmap regex: __meta_kubernetes_service_label_(.+) - source_labels: [__meta_kubernetes_namespace] action: replace target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_service_name] action: replace target_label: kubernetes_name - job_name: &apos;kubernetes-services&apos; metrics_path: /probe params: module: [http_2xx] kubernetes_sd_configs: - role: service relabel_configs: - source_labels: [__address__] target_label: __param_target - target_label: __address__ replacement: blackbox-exporter.example.com:9115 - source_labels: [__param_target] target_label: instance - action: labelmap regex: __meta_kubernetes_service_label_(.+) - source_labels: [__meta_kubernetes_namespace] target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_service_name] target_label: kubernetes_name - job_name: &apos;kubernetes-ingresses&apos; metrics_path: /probe params: module: [http_2xx] kubernetes_sd_configs: - role: ingress relabel_configs: - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path] regex: (.+);(.+);(.+) replacement: $&#123;1&#125;://$&#123;2&#125;$&#123;3&#125; target_label: __param_target - target_label: __address__ replacement: blackbox-exporter.example.com:9115 - source_labels: [__param_target] target_label: instance - action: labelmap regex: __meta_kubernetes_ingress_label_(.+) - source_labels: [__meta_kubernetes_namespace] target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_ingress_name] target_label: kubernetes_name - job_name: &apos;kubernetes-pods&apos; kubernetes_sd_configs: - role: pod relabel_configs: - action: labelmap regex: __meta_kubernetes_pod_label_(.+) - source_labels: [__meta_kubernetes_namespace] action: replace target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_pod_name] action: replace target_label: kubernetes_pod_name 部署 Prometheusprometheus.yaml:12345678910111213141516171819202122232425262728293031323334353637383940414243444546apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: prometheus-core namespace: monitoring labels: app: prometheus component: corespec: replicas: 1 template: metadata: name: prometheus-main labels: app: prometheus component: core spec: serviceAccountName: prometheus-k8s containers: - name: prometheus image: taobeier/prometheus:v2.6.0 args: - &apos;--storage.tsdb.retention=24h&apos; - &apos;--storage.tsdb.path=/prometheus&apos; - &apos;--config.file=/etc/prometheus/prometheus.yaml&apos; ports: - name: webui containerPort: 9090 resources: requests: cpu: 500m memory: 500M limits: cpu: 500m memory: 500M volumeMounts: - name: data mountPath: /prometheus - name: config-volume mountPath: /etc/prometheus volumes: - name: data emptyDir: &#123;&#125; - name: config-volume configMap: name: prometheus-core 查看部署情况:1kubectl -n monitoring get all使用 Service 将 Promethes 的服务暴露出来:1234567891011121314151617apiVersion: v1kind: Servicemetadata: labels: app: prometheus component: core name: prometheus namespace: monitoringspec: ports: - protocol: TCP port: 9090 targetPort: 9090 selector: app: prometheus component: core type: NodePort 安装 Node exporternode_exporter当我们直接将 Node exporter 部署在宿主机上时，我们最起码需要保证两点：121. Promethes 服务可与它正常通信（Promethes 采用 Pull 的方式采集数据）2. 需要服务保活，如果 exporter 挂掉了，那自然就取不到数据所以我们要监控集群中所有的机器时，DaemonSet 是一种很合适的的部署方式，可直接将 Node exporter 部署至集群的每个节点上daemonSet.yaml:12345678910111213141516171819202122232425262728apiVersion: extensions/v1beta1kind: DaemonSetmetadata: name: prometheus-node-exporter namespace: monitoring labels: app: prometheus component: node-exporterspec: template: metadata: name: prometheus-node-exporter labels: app: prometheus component: node-exporter spec: tolerations: - key: node-role.kubernetes.io/master effect: NoSchedule containers: - image: taobeier/node-exporter:v0.17.0 name: prometheus-node-exporter ports: - name: prom-node-exp containerPort: 9100 hostPort: 9100 hostNetwork: true hostPID: true让 Promethes 抓取数据:这里我们直接使用了添加 annotations 的方式，让 Promethes 自动的通过 Kubernetes SD 发现我们新添加的 exporter （或者说资源）1234567891011121314151617181920apiVersion: v1kind: Servicemetadata: annotations: prometheus.io/scrape: &apos;true&apos; name: prometheus-node-exporter namespace: monitoring labels: app: prometheus component: node-exporterspec: clusterIP: None ports: - name: prometheus-node-exporter port: 9100 protocol: TCP selector: app: prometheus component: node-exporter type: ClusterIPPrometheus 支持多种 exporter 暴露各种指标，而且我们还可以使用 Grafana 作为我们监控的展示手段如果要做 Dashboard 推荐使用 Kubernetes cluster monitoring (via Prometheus) 。另外，监控其实涉及的内容很多，包括数据持久化方式。以及是否考虑与集群外的 Prometheus 集群做邦联模式等。至于应用监控，也可使用它的 SDK 来完成。参考链接：prometheusPromQLPrometheus Operator","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"一个图标库","slug":"history/tech/5cd385f831a604f66b46a653","date":"2019-05-09T01:44:24.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cd385f831a604f66b46a653/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cd385f831a604f66b46a653/","excerpt":"","text":"https://github.com/feathericons/feather#feather","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nodejs 测试","slug":"history/tech/5cd37fee31a604f66b46a652","date":"2019-05-09T01:18:38.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cd37fee31a604f66b46a652/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cd37fee31a604f66b46a652/","excerpt":"","text":"测试：12345Chai // 断言 Mocha // 测试框架superTest // 请求库nock // 模拟服务器响应nyc // 覆盖率性能：1Benchmark.js","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"冷暖色","slug":"history/shoot/5cd3c1b131a604f66b46a655","date":"2019-05-08T17:59:13.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5cd3c1b131a604f66b46a655/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5cd3c1b131a604f66b46a655/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"互补色","slug":"history/shoot/5cd3c07a31a604f66b46a654","date":"2019-05-08T17:54:02.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5cd3c07a31a604f66b46a654/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5cd3c07a31a604f66b46a654/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"docker 修改已启动的容器参数","slug":"history/tech/5cc29229c034764b2e0391f4","date":"2019-04-25T17:07:53.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cc29229c034764b2e0391f4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cc29229c034764b2e0391f4/","excerpt":"","text":"1234docker ps --no-truncservice docker stopcd /var/lib/docker/containers/1e586bf398ffb62452234bfffca43614fb5598552d107831ca1ae7a779edb420 vim config.v2.json修改后:1service docker start","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mongorestore agz","slug":"history/tech/5cc022dfad4dd4c72f84f5c7","date":"2019-04-23T20:48:31.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cc022dfad4dd4c72f84f5c7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cc022dfad4dd4c72f84f5c7/","excerpt":"","text":"123456mongorestore \\ --host 127.0.0.1 \\ --port 27017 \\ --gzip --archive=./xxx.agz \\ --nsFrom &quot;xxx.*&quot; \\ --nsTo &quot;yyy.*&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter 五线谱插件","slug":"history/tech/5cbe6fd9ad4dd4c72f84f5c6","date":"2019-04-23T01:52:25.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cbe6fd9ad4dd4c72f84f5c6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cbe6fd9ad4dd4c72f84f5c6/","excerpt":"","text":"https://github.com/AppleEducate/plugins.git","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kube-proxy","slug":"history/tech/5cb943dcad4dd4c72f84f5bb","date":"2019-04-19T03:43:24.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb943dcad4dd4c72f84f5bb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb943dcad4dd4c72f84f5bb/","excerpt":"","text":"kube-proxy 在 Linux 系统上当前支持三种模式，可通过 --proxy-mode 配置：123userspace：这是很早期的一种方案，但效率上显著不足，不推荐使用iptables：当前的默认模式。比 userspace 要快，但问题是会给机器上产生很多 iptables 规则ipvs：为了解决 iptables 的性能问题而引入，采用增量的方式进行更新iptables ：12当开始访问的时候先要经过 PREROUTING 链，转到 KUBE-SERVICES 链，当查询到匹配的规则之后，请求将转向 KUBE-SVC-SMQNAAUIAENDDGYQ 链，进而到达 KUBE-SEP-QX7VDAS5KDY6V3EV 对应于我们的 Pod。(注：为了简洁，上述 iptables 规则是部署一个 Pod 时的场景)iptables 规则实际是如何创建和维护的，参考下 proxier 的具体实现NodePort 类型的 Service 查看方式：123 kubectl -n work get allnetstat -ntlp |grep 30154 // kube-proxy 监听在此 NodePortdocker run --rm -it --network host redis:alpine redis-cli -p 30154查看当前集群的 Service 和 Endpoint:123kubectl -n work get svckubectl -n work get endpointskubectl -n work get pod -o wide扩容：123kubectl -n work scale --replicas=2 deploy/saythx-rediskubectl -n work get allkubectl -n work get endpointskube-proxy 的 session affinity:–待完成–","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"linux 删除第一行输出","slug":"history/tech/5cb932baad4dd4c72f84f5ba","date":"2019-04-19T02:30:18.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb932baad4dd4c72f84f5ba/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb932baad4dd4c72f84f5ba/","excerpt":"","text":"1awk &apos;&#123;if(NR&gt;1)print&#125;&apos;或1sed -n &apos;1!p&apos;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Ingress 使用","slug":"history/tech/5cb98e8aad4dd4c72f84f5c5","date":"2019-04-18T21:02:02.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb98e8aad4dd4c72f84f5c5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb98e8aad4dd4c72f84f5c5/","excerpt":"","text":"安装创建 Namespace1kubectl apply -f namespace.yamlnamespace.yaml:1234567apiVersion: v1kind: Namespacemetadata: name: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx创建 ConfigMap:这里创建了几个 ConfigMap，主要是给 Controller 使用123456789101112131415161718192021222324252627282930kind: ConfigMapapiVersion: v1metadata: name: nginx-configuration namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: tcp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: udp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---创建对应的 Role 和 RoleBinding:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142apiVersion: v1kind: ServiceAccountmetadata: name: nginx-ingress-serviceaccount namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRolemetadata: name: nginx-ingress-clusterrole labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - &quot;&quot; resources: - configmaps - endpoints - nodes - pods - secrets verbs: - list - watch - apiGroups: - &quot;&quot; resources: - nodes verbs: - get - apiGroups: - &quot;&quot; resources: - services verbs: - get - list - watch - apiGroups: - &quot;extensions&quot; resources: - ingresses verbs: - get - list - watch - apiGroups: - &quot;&quot; resources: - events verbs: - create - patch - apiGroups: - &quot;extensions&quot; resources: - ingresses/status verbs: - update---apiVersion: rbac.authorization.k8s.io/v1beta1kind: Rolemetadata: name: nginx-ingress-role namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - &quot;&quot; resources: - configmaps - pods - secrets - namespaces verbs: - get - apiGroups: - &quot;&quot; resources: - configmaps resourceNames: - &quot;ingress-controller-leader-nginx&quot; verbs: - get - update - apiGroups: - &quot;&quot; resources: - configmaps verbs: - create - apiGroups: - &quot;&quot; resources: - endpoints verbs: - get---apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBindingmetadata: name: nginx-ingress-role-nisa-binding namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: nginx-ingress-rolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: nginx-ingress-clusterrole-nisa-binding labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: nginx-ingress-clusterrolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---部署 NGINX Ingress Controller:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: nginx-ingress-controller namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: replicas: 1 selector: matchLabels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx template: metadata: labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx annotations: prometheus.io/port: &quot;10254&quot; prometheus.io/scrape: &quot;true&quot; spec: serviceAccountName: nginx-ingress-serviceaccount containers: - name: nginx-ingress-controller image: taobeier/nginx-ingress-controller:0.21.0 args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services - --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io securityContext: capabilities: drop: - ALL add: - NET_BIND_SERVICE # www-data -&gt; 33 runAsUser: 33 env: - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace ports: - name: http containerPort: 80 - name: https containerPort: 443 livenessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP initialDelaySeconds: 10 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 1 readinessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 1检测部署是否已经成功：1kubectl -n ingress-nginx get all 将 NGINX Ingress Controller 暴露至集群外Ingress 的作用在于将集群外的请求流量转向集群内的服务，默认情况下集群外和集群内是不互通的，所以必须将 NGINX Ingress Controller 暴露至集群外，以便让其能接受来自集群外的请求。将其暴露的方式有很多种，这里我们选择我们之前已经介绍过的 NodePort 的方式。选择它主要有以下原因：12345使用纯的 LB 实现完成服务暴露，比如 [MetalLB](https://metallb.universe.tf/)，但它还处于 Beta 阶段，尚未有大规模生产环境使用的验证。直接使用宿主机的网络，只需设置 hostNetwork: true 即可，但这个方式可能会带来安全问题。选择 External IPs 的方式，但这种方式无法保留请求的源 IP，所以并不是很好。其实我们一般会选择自己提供边缘节点的方式，不过这种方式是建立在 NodePort 的方式之上，并且需要提供额外的组件使用 ingress 实例:12345678910111213141516apiVersion: extensions/v1beta1kind: Ingressmetadata: name: example-ingress namespace: work annotations: nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;spec: rules: - host: example.ingress.io http: paths: - path: / backend: serviceName: example-frontend servicePort: 80查看 service：1kubectl -n ingress-nginx get svc","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s 扩展阅读","slug":"history/tech/5cb986b0ad4dd4c72f84f5c4","date":"2019-04-18T20:28:32.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb986b0ad4dd4c72f84f5c4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb986b0ad4dd4c72f84f5c4/","excerpt":"","text":"k8s生态K8S 网站CNCF 博客K8S 组织Docker 文档Promethes 文档Grafana 主页Fluentd 主页","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s faq","slug":"history/tech/5cb985fead4dd4c72f84f5c3","date":"2019-04-18T20:25:34.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb985fead4dd4c72f84f5c3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb985fead4dd4c72f84f5c3/","excerpt":"","text":"k8s的时区处理。时区可通过挂载宿主机配置文件/etc/localtime 完成， 或者通过设置 TZ 环境变量完成。 当然你也可以尝试用 PodPreset 来解决，只不过当前还未稳定。k8s的日志处理ELK/EFK 等技术栈都可以。 如果你是想问如何收集，那比如 daemonset 的方式 或者 挂目录写之类的都可以，看你实际习惯","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"存储卷","slug":"history/tech/5cb985aaad4dd4c72f84f5c2","date":"2019-04-18T20:24:10.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb985aaad4dd4c72f84f5c2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb985aaad4dd4c72f84f5c2/","excerpt":"","text":"官方 CSI 文档","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"Ingress","slug":"history/tech/5cb98560ad4dd4c72f84f5c1","date":"2019-04-18T20:22:56.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb98560ad4dd4c72f84f5c1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb98560ad4dd4c72f84f5c1/","excerpt":"","text":"Ingress 是什么：1kubectl explain ingressIngress 是一组允许外部请求进入集群的路由规则的集合。它可以给 Service 提供集群外部访问的 URL，负载均衡，SSL 终止等。直白点说，Ingress 就类似起到了智能路由的角色，外部流量到达 Ingress ，再由它按已经制定好的规则分发到不同的后端服务中去。看起来它很像我们使用的负载均衡器之类的。那你可能会问，Ingress 与 LoadBalancer 类型的 Service 的区别是什么呢？12345Ingress 不是一种 Service 类型Ingress 是 K8S 中的一种资源类型，我们可以直接通过 kubectl get ingress 的方式获取我们已有的 Ingress 资源。Ingress 可以有多种控制器（实现）通过之前的介绍，我们知道 K8S 中有很多的 Controller (控制器)，而这些 Controller 已经打包进了 kube-controller-manager 中，通过 --controllers 参数控制启用哪些。但是 Ingress 的 Controller 并没有包含在其中，而且有多种选择。由社区维护（或是说官方支持的）有两个：适用于 Google Cloud 的 GLBC，当你使用 GKE 的时候，便会看到它；和 NGINX Ingress Controller它是使用 ConfigMap 存储 NGINX 配置实现的。第三方的实现还有：基于 Envoy 的 Contour;F5 的 F5 BIG-IP Controller;基于 HAProxy 的 haproxy-ingress;基于 Istio 的 Control Ingress Traffic;现代化的反向代理服务器 Traefik;以及 Kong 支持的 Kong Ingress Controller for KubernetesNGINX 官方支持的 NGINX Ingress Controller这里可以看到 K8S 社区和 NGINX 都有 NGINX Ingress Controller，很多人在一开始接触 Ingress 的时候便陷入了选择的苦恼中，除去前面的那些选择外，单 NGINX 的控制器就有两个，到底应该怎么选。这里提供两点建议：可能多数人使用的都是 NGINX 而非 NGINX Plus，如果你需要会话保持（Session persistence）的话，那你应该选择 K8S 社区维护的版本即使我们平时使用 NGINX 的时候，也常常会有动态配置的需求，如果你仍然有这样的需求，那你还是继续使用 K8S 社区维护的版本（其中内置了 Lua 支持）。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"coredns","slug":"history/tech/5cb9813bad4dd4c72f84f5c0","date":"2019-04-18T20:05:15.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb9813bad4dd4c72f84f5c0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb9813bad4dd4c72f84f5c0/","excerpt":"","text":"k8s 集群内的 DNS 服务:https://github.com/kubernetes/dnscoredns 并不是默认的 DNS 服务，但是它作为 K8S 的 DNS 插件的功能已经 GA 。CoreDNS 在 K8S 1.13 版本中才正式成为 默认的 DNS 服务coredns 官方网址：https://coredns.io/coredns 内置插件:https://coredns.io/plugins/core 第三方插件:https://coredns.io/explugins/自己写插件:https://coredns.io/2016/12/19/writing-plugins-for-coredns/使用 kubeadm 创建集群时候 kubeadm init 可以传递 --feature-gates 参数，用于启用一些额外的特性在之前版本中，我们可以通过 kubeadm init --feature-gates CoreDNS=true 在创建集群时候启用 CoreDNS。而在 1.11 版本中，使用 kubeadm 创建集群时 CoreDNS 已经被默认启用，这也从侧面证明了 CoreDNS 在 K8S 中达到了生产可用的状态查看 CoreDNS 的扩展12// 主要是为了兼容 K8S 原有的 kube-dns 所以标签和 Service 的名字都还使用了 kube-dns，但实际在运行的则是 CoreDNS kubectl -n kube-system get all -l k8s-app=kube-dns -o wide使用 AlpineLinux 的镜像创建一个 Pod 并进入其中1234kubectl run alpine -it --rm --restart=&apos;Never&apos; --image=&apos;alpine&apos; sh apk add --no-cache bind-tools # 安装完 dig 命令所在包之后，使用 dig 命令进行验证/ # dig @10.32.0.2 saythx-redis.work.svc.cluster.local +noall +answer注意:1234域名解析是可跨 Namespace 的, 是全局的, 但不代表网络互通域名有特定格式 可以看到刚才我们使用的完整域名是 saythx-redis.work.svc.cluster.local , 注意开头的便是 Service 名.Namespace 名 当然，我们也可以直接通过 host 命令查询: host -t srv saythx-redis.work 配置和监控CoreDNS 使用 ConfigMap 的方式进行配置，但是如果更改了配置，Pod 重启后才会生效查看配置:1kubectl -n kube-system get configmap coredns -o yamlCorefile 便是它的配置文件，可以看到它启动了类似 kubernetes, prometheus 等插件。注意 kubernetes 插件的配置，使用的域是 cluster.local ，这也是上面我们提到域名格式时候后半部分未解释的部分。至于 prometheus 插件，则是监听在 9153 端口上提供了符合 Prometheus 标准的 metrics 接口，可用于监控等。使用 CoreDNS 代替 kube-dns 主要是为了解决一些 kube-dns 时期的问题，比如说原先 kube-dns 的时候，一个 Pod 中还需要包含 kube-dns, sidecar 和 dnsmasq 的容器，而每当 dnsmasq 出现漏洞时，就不得不让 K8S 发个安全补丁才能进行更新。CoreDNS 有丰富的插件，可以满足更多样的应用需求，同时 kubernetes 插件还包含了一些独特的功能，比如 Pod 验证之类的，可增加安全性。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"Dashboard","slug":"history/tech/5cb97c11ad4dd4c72f84f5be","date":"2019-04-18T19:43:13.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb97c11ad4dd4c72f84f5be/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb97c11ad4dd4c72f84f5be/","excerpt":"","text":"官方链接：https://github.com/kubernetes/dashboardDashboard 的后端使用了 K8S 的 client-go ，前端主要使用了 Angular安装方法：1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml查看是否安装成功:1kubectl -n kube-system get all -l k8s-app=kubernetes-dashboard以当前的部署方式，Service 使用了 ClusterIP 的类型，所以在集群外不能直接访问。我们先使用 kubectl 提供的 port-forward 功能进行访问:1kubectl -n kube-system port-forward pod/kubernetes-dashboard-67896bc598-dhdpz 8443查看 token 使用令牌登录1kubectl -n kube-system get serviceaccount -l k8s-app=kubernetes-dashboard -o yaml查看 serviceaccount 可以看到其中有配置 secrets, 查看该 secret 详情获得 Token:1kubectl -n kube-system describe secrets kubernetes-dashboard-token-6ck2l权限报错：1configmaps is forbidden: User &quot;system:serviceaccount:kube-system:kubernetes-dashboard&quot; cannot list resource &quot;configmaps&quot; in API group &quot;&quot; in the namespace &quot;default&quot; 。授权:创建 ServiceAccount：12345apiVersion: v1kind: ServiceAccountmetadata: name: admin-user namespace: kube-system创建 RoleBinding: 这里为了方便直接绑定了 cluster-admin 的 ClusterRole:123456789101112 apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: admin-userroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: admin-user namespace: kube-system使用以上配置创建用户和绑定，然后还是同样的办法获取 Token","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s Troubleshoot","slug":"history/tech/5cb978aead4dd4c72f84f5bd","date":"2019-04-18T19:28:46.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb978aead4dd4c72f84f5bd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb978aead4dd4c72f84f5bd/","excerpt":"","text":"应用部署问题12kubectl -n work describe pod/saythx-redis-xxx // describekubectl -n work get events // 查看 Events。kubelet 或者 kube-scheduler 等组件会接受某些事件等，event 便是用于记录集群内各处发生的事件之类的修正错误修正配置文件1kubectl apply -f redis-deployment.yaml在线修改配置12// 这种做法比较适合比较紧急或者资源是直接通过命令行创建等情况。 非特殊情况尽量不要在线修改kubectl -n work edit deploy/saythx-redis测试:123// --net host 是使用宿主机网络； --rm 表示停止完后即清除； -it 分别表示获取输入及获取 TTYdocker run --rm -it --net host redis redis-cli -p 32355127.0.0.1:32355&gt; ping另外一种排查思路:1kubectl -n work get endpoints 集群问题查看集群中节点的状态：1kubectl get node/node01 -o yaml","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Container Runtime","slug":"history/tech/5cb97052ad4dd4c72f84f5bc","date":"2019-04-18T18:53:06.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb97052ad4dd4c72f84f5bc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb97052ad4dd4c72f84f5bc/","excerpt":"","text":"为了避免 K8S 绑定于特定的容器运行时，所以便成立了 Open Container Initiative (OCI) 组织CRI 主要是基于 gRPC 实现了 RuntimeService 和 ImageService 这两个服务，可以参考 pkg/kubelet/apis/cri/runtime/v1alpha2/api.proto 中的 API 定义只要继续将 kubelet 当作 agent 的角色，而它与基于 CRI 实现的 CRI shim 服务进行通信理解即可当前使用最为广泛的是 Docker，当前还支持的主要有 runc，Containerd，runV 以及 rkt 等查看 pod 的 Events:pull 镜像, 创建镜像并启动12kubectl run redis --image=rediskubectl describe pod/redis-658d78cf9c-kl7wz参考资料：https://moelove.info/2018/11/23/runc-1.0-rc6-发布之际/https://raw.githubusercontent.com/tao12345666333/slides/master/2018.09.13-Tech-Talk-Time/Docker实战和基本原理-张晋涛.pdf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"以 Helm 部署项目","slug":"history/tech/5cb7f195027cba84434ae7bd","date":"2019-04-18T03:40:05.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb7f195027cba84434ae7bd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb7f195027cba84434ae7bd/","excerpt":"","text":"编写chart创建模板：1helm create &lt;chatname&gt;查看模板：1234567891011121314tree -a.├── charts // 依赖的 chart├── Chart.yaml├── .helmignore / /忽略掉不想包含在 chart 内的文件├── templates // chart 使用的模板文件, 中间使用 - 进行分割，避免使用驼峰式命名│ ├── deployment.yaml│ ├── _helpers.tpl│ ├── ingress.yaml│ ├── NOTES.txt // Notes.txt 文件在 helm install 完成后，会进行回显，可用于解释说明如何访问服务等│ ├── service.yaml│ └── tests│ └── test-connection.yaml└── values.yaml // 项目的一些可配置项，如镜像的名称或 tag查看 Chart 文件:123456cat &lt;chatname&gt;/Chart.yaml apiVersion: v1 appVersion: &quot;1.0&quot; description: A Helm chart for Kubernetes name: &lt;chatname&gt; version: 0.1.0Chart.yaml 字段解释:12345apiVersion：目前版本都为 v1appVersion：这是应用的版本号，需要与 apiVersion， version 等字段注意区分name: 通常要求 chart 的名字必须和它所在目录保持一致，且此字段必须version：表明当前 chart 的版本号，会直接影响 Release 的记录，且此字段必须description：描述 部署与打包123helm install &lt;chatname&gt;helm package &lt;chatname&gt; //打包helm install &lt;chatname&gt;-0.1.0.tgz参考资料：https://github.com/tao12345666333/saythx","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kubelet","slug":"history/tech/5cb87003027cba84434ae7c1","date":"2019-04-18T00:39:31.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb87003027cba84434ae7c1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb87003027cba84434ae7c1/","excerpt":"","text":"12345678910111213141516+--------------------------------------------------------+ | +---------------------+ +---------------------+ | | | kubelet | | kube-proxy | | | | | | | | | +---------------------+ +---------------------+ | | +----------------------------------------------------+ | | | Container Runtime (Docker) | | | | +---------------------+ +---------------------+ | | | | |Pod | |Pod | | | | | | +-----+ +-----+ | |+-----++-----++-----+| | | | | | |C1 | |C2 | | ||C1 ||C2 ||C3 || | | | | | | | | | | || || || || | | | | | +-----+ +-----+ | |+-----++-----++-----+| | | | | +---------------------+ +---------------------+ | | | +----------------------------------------------------+ | +--------------------------------------------------------+ 节点管理执行 kubelet --help 的时候，会看到它所支持的可配置参数，其中有一个 --register-node 参数便是用于控制是否向 kube-apiserver 注册节点的，默认是开启的当 kubeadm join 执行成功后，便可以通过 kubectl get node 查看到新加入集群中的 Node在节点上通过以下命令查看 kubelet 的状态:1systemctl status kubelet查看 Node 信息:1kubectl get nodes | awk &apos;&#123;if(NR&gt;1)print&#125;&apos;| awk &#123;&apos;print $1&apos;&#125; | xargs -I &#123;&#125; kubectl get nodes &#123;&#125; -o yaml查看配置文件:1cat /var/lib/kubelet/config.yaml配置说明:https://kubernetes.io/docs/tasks/administer-cluster/out-of-resource/1234maxPods：最大的 Pod 数healthzBindAddress 和 healthzPort：配置了健康检查所监听的地址和端口authentication 和 authorization ：认证授权相关evictionHard：涉及到 kubelet 的驱逐策略，对 Pod 调度分配之类的影响很大验证方式：1curl 127.0.0.1:10248/healthz Pod 管理kube-scheduler 处理了 Pod 应该调度至哪个 Node，而 kubelet 则是保障该 Pod 能按照预期，在对应 Node 上启动并保持工作另外 kubelet 其实还承担着清理 Node 上一些由 K8S 调度 Pod 所造成的磁盘占用之类的工作kubelet 在保障 Pod 能按预期工作，主要是做了两方面的事情：健康检查：通过 LivenessProbe 和 ReadinessProbe 探针进行检查，判断是否健康及是否已经准备好接受请求。资源监控：通过 cAdvisor 进行资源监控kubelet 的作用之一是负责镜像拉取，在镜像方面的错误主要预设了 6 种:123456ImagePullBackOffImageInspectErrorErrImagePullErrImageNeverPullRegistryUnavailableInvalidImageName","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kube-scheduler","slug":"history/tech/5cb86abb027cba84434ae7c0","date":"2019-04-18T00:16:59.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb86abb027cba84434ae7c0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb86abb027cba84434ae7c0/","excerpt":"","text":"1234567891011121314151617+----------------------------------------------------------+ | Master | | +-------------------------+ | | +-------&gt;| API Server |&lt;--------+ | | | | | | | | v +-------------------------+ v | | +----------------+ ^ +--------------------+ | | | | | | | | | | Scheduler | | | Controller Manager | | | | | | | | | | +----------------+ v +--------------------+ | | +------------------------------------------------------+ | | | | | | | Cluster state store | | | | | | | +------------------------------------------------------+ | +----------------------------------------------------------+Controller Manager 负责将集群调整至预期的状态，而 Scheduler 则是集群调度器，将预期的 Pod 资源调度到正确的 Node 节点上，进而令该 Pod 可完成启动kube-scheduler 是一个策略丰富，拓扑感知的调度程序，会显著影响可用性，性能和容量服务端二进制文件解压后，便可看到 kube-scheduler 的可执行文件。当给它传递 --help 查看其支持参数的时候，便可以看到它支持使用 --address 或者 --bind-address 等参数指定所启动的 HTTP server 所绑定的地址之类的。它和 kube-controller-manager 有点类似，同样是通过定时的向 kube-apiserver 请求获取信息，并进行处理。而他们所起到的作用并不相同从上层的角度来看，kube-scheduler 的作用就是将待调度的 Pod 调度至最佳的 Node 上，而这个过程中则需要根据不同的策略，考虑到 Node 的资源使用情况，比如端口，内存，存储等当实际进行部署操作的时候，首先会通过 kubectl 之类的客户端工具与 kube-apiserver 进行交互，在经过一系列的处理后，数据将持久化到 etcd 中；此时，kube-controller-manager 通过持续的观察，开始按照我们的配置，将集群的状态调整至预期状态；而 kube-scheduler 也在发挥作用，决定 Pod 应该调度至哪个或者哪些 Node 上；之后则通过其他组件的协作，最总将该 Pod 在相应的 Node 上部署启动 处理阶段kube-scheduler 将处理阶段主要分为三个阶段 Computing predicates，Prioritizing和 Selecting host：123456789Computing predicates：&gt;主要解决的问题是 Pod 能否调度到集群的 Node 上；主要是通过一个名为 podFitsOnNode 的函数进行实现，在检查的过程中也会先去检查下是否已经有已缓存的判断结果， 当然也会检查 Pod 是否是可调度的，以防有 Pod Affinity (亲合性) 之类的存在。Prioritizing：&gt;主要解决的问题是在上个阶段通过 findNodesThatFit 得到了 filteredNodes 的基础之上解决哪些 Node 是最优的，得到一个优先级列表 priorityList;至于优先级的部分，主要是通过下面的代码：// 给每个经过第一步筛选出来的 Node 一个 Score，再按照各种条件进行打分，最终得到一个优先级列表。 for i := range nodes { result = append(result, schedulerapi.HostPriority{Host: nodes[i].Name, Score: 0}) for j := range priorityConfigs { result[i].Score += results[j][i].Score * priorityConfigs[j].Weight } } 1234Selecting host：&gt;最通过 selectHost 最终选择 Node 调度到哪台机器上func (g *genericScheduler) selectHost(priorityList schedulerapi.HostPriorityList) (string, error) {if len(priorityList) == 0 {return “”, fmt.Errorf(“empty priorityList”)}sort.Sort(sort.Reverse(priorityList)) maxScore := priorityList[0].Score firstAfterMaxScore := sort.Search(len(priorityList), func(i int) bool { return priorityList[i].Score &lt; maxScore }) g.lastNodeIndexLock.Lock() ix := int(g.lastNodeIndex % uint64(firstAfterMaxScore)) g.lastNodeIndex++ g.lastNodeIndexLock.Unlock() return priorityList[ix].Host, nil }参考资料： &lt;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/&gt;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"controller-manager","slug":"history/tech/5cb827e9027cba84434ae7bf","date":"2019-04-17T19:31:53.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb827e9027cba84434ae7bf/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb827e9027cba84434ae7bf/","excerpt":"","text":"1234567891011121314151617+----------------------------------------------------------+ | Master | | +-------------------------+ | | +-------&gt;| API Server |&lt;--------+ | | | | | | | | v +-------------------------+ v | | +----------------+ ^ +--------------------+ | | | | | | | | | | Scheduler | | | Controller Manager | | | | | | | | | | +----------------+ v +--------------------+ | | +------------------------------------------------------+ | | | | | | | Cluster state store | | | | | | | +------------------------------------------------------+ | +----------------------------------------------------------+ Controller ManagerController Manager 由 kube-controller-manager 和 cloud-controller-manager 两部分组成，cloud-controller-manager 则是为各家云厂商提供了一个抽象的封装，便于让各厂商使用各自的 provide。 kube-controller-managerkube-controller-manager 是一个嵌入了 K8S 核心控制循环的守护进程控制循环这里拆解为两部分： 控制 和 循环 ，它所控制的是集群的状态；至于循环它当然是会有个循环间隔的，这里有个参数可以进行控制kube-controller-manager 以及它在 K8S 中主要是将集群调节至预期的状态，并提供出了 /metrics 的接口可供监控kube-controller-manager 中有很多的 controller 大多数是默认开启的，当然也有默认关闭的，比如 bootstrapsigner 和 tokencleaner，在我们启动 kube-controller-manager 的时候，可通过 --controllers 的参数进行控制，就比如上面例子中 --controllers=*,bootstrapsigner,tokencleaner 表示开启所有默认开启的以及 bootstrapsigner 和 tokencleane查看 kube-controller-manager 的日志:1kubectl -n kube-system describe pods -l component=kube-controller-manager查看 pod:1kubectl -n kube-system get pod -l component=kube-controller-manager进入 pod 查看具体信息：123// kube-controller-manager 在 10252 端口上不仅暴露出来了一个 /healthz 接口，还暴露出了一个 /metrics 的接口，可用于进行监控之类的kubectl -n kube-system exec -it kube-controller-manager-kind-control-plane sh wget -qO- http://127.0.0.1:10252/metrics|grep gc_controller参考资料：https://github.com/kubernetes/client-go/tree/master/informers","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"etcd","slug":"history/tech/5cb82144027cba84434ae7be","date":"2019-04-17T19:03:32.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb82144027cba84434ae7be/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb82144027cba84434ae7be/","excerpt":"","text":"官方下载:https://github.com/etcd-io/etcd/releases123456789101112131415161718+----------------------------------------------------------+ | Master | | +-------------------------+ | | +-------&gt;| API Server |&lt;--------+ | | | | | | | | v +-------------------------+ v | | +----------------+ ^ +--------------------+ | | | | | | | | | | Scheduler | | | Controller Manager | | | | | | | | | | +----------------+ v +--------------------+ | | +------------------------------------------------------+ | | | | | | | Cluster state store | | | | | | | +------------------------------------------------------+ | +----------------------------------------------------------+进入 etcd 的 pod1kubectl -n kube-system exec -it etcd-master sh传递证书等相关参数，查看 member:1ETCDCTL_API=3 etcdctl --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt --cacert=/etc/kubernetes/pki/etcd/ca.crt member list查看存储的元信息:1ETCDCTL_API=3 etcdctl --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt --cacert=/etc/kubernetes/pki/etcd/ca.crt get /registry --prefix --keys-only查看 Namespaces 信息1ETCDCTL_API=3 etcdctl --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt --cacert=/etc/kubernetes/pki/etcd/ca.crt get /registry/namespaces --prefix --keys-only参考资料:https://etcd.readthedocs.io/en/latest/faq.html#what-is-etcd","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"k8s 创建用户","slug":"history/tech/5cb6f8d3027cba84434ae7bc","date":"2019-04-16T21:58:43.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb6f8d3027cba84434ae7bc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb6f8d3027cba84434ae7bc/","excerpt":"","text":"创建用户:用户名为 backend 所属组为 dev创建新的 namespace work：12kubectl create namespace workmkdir work &amp;&amp; cd work创建私钥:1openssl genrsa -out backend.key 2048使用私钥生成证书请求:1openssl req -new -key backend.key -out backend.csr -subj &quot;/CN=backend/O=dev&quot;使用 CA 进行签名。K8S 默认的证书目录为 /etc/kubernetes/pki:1openssl x509 -req -in backend.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out backend.crt -days 365查看生成的证书文件:1openssl x509 -in backend.crt -text -noout添加 context:12kubectl config set-credentials backend --client-certificate=/root/work/backend.crt --client-key=/root/work/backend.keykubectl config set-context backend-context --cluster=kind --namespace=work --user=backend使用新用户测试访问:123456789101112131415kubectl --context=backend-context get podsroot@testkind:~/work# kubectl --context=backend-context get pods -n work -v 5I0417 09:32:05.711722 20713 helpers.go:196] server response object: [&#123; &quot;kind&quot;: &quot;Status&quot;, &quot;apiVersion&quot;: &quot;v1&quot;, &quot;metadata&quot;: &#123;&#125;, &quot;status&quot;: &quot;Failure&quot;, &quot;message&quot;: &quot;pods is forbidden: User \\&quot;backend\\&quot; cannot list resource \\&quot;pods\\&quot; in API group \\&quot;\\&quot; in the namespace \\&quot;work\\&quot;&quot;, &quot;reason&quot;: &quot;Forbidden&quot;, &quot;details&quot;: &#123; &quot;kind&quot;: &quot;pods&quot; &#125;, &quot;code&quot;: 403&#125;]F0417 09:32:05.711843 20713 helpers.go:114] Error from server (Forbidden): pods is forbidden: User &quot;backend&quot; cannot list resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;work&quot;创建 Role 配置文件:1234567891011cat &lt;&lt;EOF &gt; backend-role.yaml kind: RoleapiVersion: rbac.authorization.k8s.io/v1metadata: namespace: work name: backend-rolerules:- apiGroups: [&quot;&quot;] resources: [&quot;pods&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]EOF创建 Role:1kubectl create -f backend-role.yaml查看:1kubectl get roles -n work -o yaml创建Rolebinding 配置文件::123456789101112131415cat &lt;&lt;EOF &gt; backend-rolebind.yamlkind: RoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata: name: backend-rolebinding namespace: worksubjects: - kind: User name: backend apiGroup: &quot;&quot; roleRef: kind: Role name: backend-role apiGroup: &quot;&quot;EOF创建 Rolebinding:1kubectl create -f backend-rolebind.yaml查看 Rolebinding:1kubectl get rolebinding -o yaml -n work测试用户权限:123// 用户已经具备查看 Pod 的权限，但并不能查看 Namespace 或者 deployment 等其他资源kubectl --context=backend-context get pods -n workkubectl --context=backend-context get ns调试权限：123// --as 是一种建立在 K8S 认证机制之上的机制，可以便于系统管理员验证授权情况，或进行调试。kubectl auth can-i list pods -n work --as=&quot;backend&quot;kubectl auth can-i list deploy -n work --as=&quot;backend&quot;也可以仿照 ~/.kube/config 文件的内容，将当前生成的证书及私钥文件等写入到配置文件中，通过指定 KUBECONFIG 的环境变量，或者给 kubectl 传递 --kubeconfig 参数来使用简化操作：kubectx","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kube-apiserver","slug":"history/tech/5cb6dfcc027cba84434ae7bb","date":"2019-04-16T20:11:56.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb6dfcc027cba84434ae7bb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb6dfcc027cba84434ae7bb/","excerpt":"","text":"1234567891011121314151617+----------------------------------------------------------+ | Master | | +-------------------------+ | | +-------&gt;| API Server |&lt;--------+ | | | | | | | | v +-------------------------+ v | | +----------------+ ^ +--------------------+ | | | | | | | | | | Scheduler | | | Controller Manager | | | | | | | | | | +----------------+ v +--------------------+ | | +------------------------------------------------------+ | | | | | | | Cluster state store | | | | | | | +------------------------------------------------------+ | +----------------------------------------------------------+当然，这里说基本展示是因为我们可以直接通过 kubectl proxy 的方式直接通过 HTTP 请求访问 kube-apiserver 而无需任何认证过程。kube-apiserver 两个参数:--insecure-port 默认 8080, 通过该端口访问时无需认证。为了避免安全问题，也可将此参数设置为 0 以禁用该功能。该端口会绑定在 --insecure-bind-address 参数所设置的地址上，默认为 127.0.0.1, 这两个都已过期。 --secure-port 的参数，默认 6443。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"k8s","slug":"k8s","permalink":"https://wangxiuwen.github.io/tags/k8s/"}],"author":"wangxiuwen"},{"title":"ERROR ITMS-90206","slug":"history/tech/5cb5963f027cba84434ae7ba","date":"2019-04-15T20:45:51.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb5963f027cba84434ae7ba/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb5963f027cba84434ae7ba/","excerpt":"","text":"报错：12ERROR ITMS-90206: &quot;Invalid Bundle.Thebundleat&apos;Runner.app/PlugIns/jpushServiceExt.appex&apos;containsdisallowedfile&apos;Frameworks&apos;.&quot;解决:1234* 主工程设置build settings&gt;Always Embed Swift Standard Libraries: YES extension&gt;Always Embed Swift Standard Libraries: YES* 子工程设置build settings&gt;Always Embed Swift Standard Libraries: YES extension&gt;Always Embed Swift Standard Libraries: NO* PODS 引入的target包 设置build settings&gt;Always Embed Swift Standard Libraries: YES extension&gt;Always Embed Swift Standard Libraries: NO","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"openwrt 编译","slug":"history/tech/5cb56eaf027cba84434ae7b9","date":"2019-04-15T17:57:03.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb56eaf027cba84434ae7b9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb56eaf027cba84434ae7b9/","excerpt":"","text":"clone 代码：1git clone https://github.com/openwrt/openwrt前置依赖:123456yum install ncurses-develyum install gawkyum install bzip2yum install perl-develyum -y install perl-Thread-Queueyum -y install patch下载feeds12./scripts/feeds update -a./scripts/feeds install -a其它需要安装的依赖：12345yum -y install zlib-staticyum -y install openssl-develyum -y install unzipyum -y install wgetyum -y install svn编译：12make menuconfigFORCE_UNSAFE_CONFIGURE=1 make -j16 V=s","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s RBAC 权限控制","slug":"history/tech/5cb352810a8b9161717951e7","date":"2019-04-14T03:32:17.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb352810a8b9161717951e7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb352810a8b9161717951e7/","excerpt":"","text":"123456789101112131415+-----------------------------------------------------------------------------------------------------------+| || +---------------------------------------------------------------------------+ +--------+ || | | | | || +--------+ | +------------------+ +----------------+ +--------------+ +------+ | | | || | | | | | | | | Admission | | | | | | || | Client +------&gt; | Authentication +-&gt; | Authorization +-&gt; | Control +-&gt; |Logic | +--&gt; | Others | || | | | | | | | | | | | | | | || +--------+ | +------------------+ +----------------+ +--------------+ +------+ | | | || | | | | || | | | | || | Kube-apiserver | | | || +---------------------------------------------------------------------------+ +--------+ || |+-----------------------------------------------------------------------------------------------------------+K8S 为它提供了三类安全访问的措施。分别是：用于识别用户身份的认证（Authentication），用于控制用户对资源访问的授权（Authorization）用于资源管理方面的准入控制（Admission Control）K8S 中的用户123456一般用户： 一般用户只能通过外部服务进行管理，由管理员进行私钥分发。这也意味着 K8S 中并没有任何表示一般用户的对象，所以一般用户是无法通过 API 直接添加到集群的。Service Account： 由 K8S API 管理的用户，与特定的 NameSpace（命名空间）绑定。由 API Server 自动创建或者通过 API 手动进行创建。 同时，它会自动挂载到 Pod 中容器的 /var/run/secrets/kubernetes.io/serviceaccount/ 目录中，其中会包含 NameSpace token 等信息，并允许集群内进程与 API Server 进行交互。对集群操作的 API 都是与用户相关联的，或者被视为匿名请求。匿名请求可通过 kube-apiserver 的 --anonymous-auth 参数进行控制，默认是开启的，匿名用户默认的用户名为 system:anonymous，所属组为 system:unauthenticated。K8S 支持以下认证机制123456789101112131415161718X509 客户端证书： 搭建集群时，虽然没有指定配置文件，但 kubeadm 已经添加了默认参数 --client-ca-file=/etc/kubernetes/pki/ca.crt 而在进行认证时，将会使用客户端证书 subject 的 CN 域（Common Name）用作用户名，O 域（Organization）用作组名。引导 Token： 当集群通过 kubeadm init 初始化完成后，将会展示一行提示，其中便携带着引导 Token。 如果不使用 kubeadm 时，需要设置 --enable-bootstrap-token-auth=true。静态 Token 文件： 启动 Kube-apiserver 时，设置 --token-auth-file=SOMEFILE 并在请求时，加上 Authorization: Bearer TOKEN 的请求头即可。静态密码文件： 与静态 Token 文件类似，设置 --basic-auth-file=SOMEFILE 并在请求时，加上 Authorization: Basic BASE64ENCODED(USER:PASSWORD) 的头即可。Service Account Token： 这是默认启用的机制，关于 Service Account 前面也已经介绍过了，不再赘述。OpenID： 其实是提供了 OAuth2 的认证支持，像 Azure 或 Google 这类云厂商都提供了相关支持。认证代理： 主要是配合身份验证代理进行使用，比如提供一个通用的授权网关供用户使用。Webhook： 提供 Webhook 配合一个远端服务器使用。可选择同时开启多个认证机制。使用 kubeadm 创建集群时，默认便会开启 X509 客户端证书和引导 Token 等认证机制K8S 支持以下授权机制：123456789101112ABAC(Attribute-Based Access Control)： 基于属性的访问控制，在使用时需要先配置 --authorization-mode=ABAC 和 --authorization-policy-file=SOME_FILENAME 。ABAC 本身设计是非常好的，但是在 K8S 中使用却有点过于繁琐，这里不再赘述。RBAC(Role-based access control)： 基于角色的访问控制，自 K8S 1.6 开始 beta，1.8 进入稳定版，已被大量使用。而当我们使用 kubeadm 安装集群的时候，默认将会添加 --authorization-mode=Node,RBAC 的参数，表示同时开启 Node 和 RBAC 授权机制。当然，如果你对 MongoDB 有所了解或者比较熟悉的话，这部分的内容就会很容易理解，因为 MongoDB 的权限控制也使用了 RBAC （Role-based access control）。Node： 这是一种特殊用途的授权机制，专门用于对 kubelet 发出的 API 请求做授权验证。Webhook： 使用外部的 Server 通过 API 进行授权校验，需要在启动时候增加 --authorization-webhook-config-file=SOME_FILENAME 以及 --authorization-mode=WebhookAlwaysAllow： 默认配置，允许全部。AlwaysDeny： 通常用于测试，禁止全部。k8s 中的 Role:1234Role： 可以当作是一组权限的集合，但被限制在某个 Namespace 内（K8S 的 Namespace）。ClusterRole： 对于集群级别的资源是不被 Namespace 所限制的，并且还有一些非资源类的请求，所以便产生了它。在 K8S 中用户授权称之为 binding，即 rolebinding 和 clusterrolebinding查看Role:12345kubectl get roles --all-namespaces=truekubectl get rolebindings --all-namespaces=truekubectl get clusterroleskubectl get clusterrolebindings查看用户权限:123# kubectl config current-context # 获取当前上下文, 名为 kubernetes-admin 的用户，在名为 kind 的 cluster 上 kubernetes-admin@kind# kubectl config view -o yaml # 查看 user 配置，以下省略了部分内容client-certificate-data 的部分默认是不显示的，而它的内容实际是通过 base64 加密后的证书内容。我们可以通过通过以下方式进行查看12kubectl config view --raw -o jsonpath=&apos;&#123; .users[?(@.name == &quot;kubernetes-admin&quot;)].user.client-certificate-data&#125;&apos; |base64 -d kubectl config view --raw -o jsonpath=&apos;&#123; .users[?(@.name == &quot;kubernetes-admin&quot;)].user.client-certificate-data&#125;&apos; |base64 -d |openssl x509 -text -noout //当前的用户是 kubernetes-admin （CN 域），所属组是 system:masters （O 域）clusterrolebindings 中的 cluster-admin:1kubectl get clusterrolebindings cluster-admin -o yaml重点内容在 roleRef 和 subjects 中，名为 cluster-admin 的 ClusterRole 与名为 system:masters 的 Group 相绑定ClusterRole 的实际内容:1kubectl get clusterrole cluster-admin -o yamlrules 中定义了它所能操作的资源及对应动作，* 是通配符。当前用户 kubernetes-admin 属于 system:masters 组，而这个组与 cluster-admin 这个 ClusterRole 所绑定，所以用户也就继承了其权限。具备了对多种资源和 API 的相关操作权限。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"athens 安装","slug":"history/tech/5cb343f30a8b9161717951e6","date":"2019-04-14T02:30:11.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb343f30a8b9161717951e6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb343f30a8b9161717951e6/","excerpt":"","text":"编译123git clone https://github.com/gomods/athenscd athensmake通过创建 .netrc 文件，验证私有仓库：1234//.netrcmachine gitlab.xxx.com login MY_USERNAME password MY_PASSWORD","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"npm install 不安装 devDependencies","slug":"history/tech/5cb1f3900a8b9161717951e5","date":"2019-04-13T02:34:56.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb1f3900a8b9161717951e5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb1f3900a8b9161717951e5/","excerpt":"","text":"问题：npm install 不安装 devDependencies解决：检查npm config值是否设置为true。如果这个值是真，它将跳过开发依赖项12npm config get productionnpm config set -g production false","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"graylog 安装","slug":"history/tech/5cb054500a8b9161717951e4","date":"2019-04-11T21:03:12.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cb054500a8b9161717951e4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cb054500a8b9161717951e4/","excerpt":"","text":"12yum install perl-Digest-SHAecho -n yourpassword | shasum -a 256账号密码均为 admin/etc/graylog/server/server.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647is_master = truenode_id_file = /etc/graylog/server/node-idroot_username = adminroot_timezone = Asia/Shanghaipassword_secret = 8d969eef6ecad3c29a3a62password_secret_sha2 = 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918root_password_sha2 = 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918rest_listen_uri = http://0.0.0.0:9000/api/rest_transport_uri = http://0.0.0.0:9000/api/web_enable = trueweb_listen_uri = http://0.0.0.0:9000/web_endpoint_uri = http://0.0.0.0:9000/apiweb_enable_cors = trueelasticsearch_hosts = http://10.0.0.15:9200rotation_strategy = countelasticsearch_max_docs_per_index = 20000000elasticsearch_max_number_of_indices = 20retention_strategy = deleteelasticsearch_shards = 5elasticsearch_replicas = 0elasticsearch_index_prefix = graylogallow_leading_wildcard_searches = falseallow_highlighting = trueelasticsearch_analyzer = standardoutput_batch_size = 500output_flush_interval = 1output_fault_count_threshold = 5output_fault_penalty_seconds = 30processbuffer_processors = 5outputbuffer_processors = 3processor_wait_strategy = blockingring_size = 65536inputbuffer_ring_size = 65536inputbuffer_processors = 2inputbuffer_wait_strategy = blockingmongodb_uri = mongodb://&lt;user&gt;&lt;password&gt;@10.0.0.15:27017/graylog?replicaSet=xxx","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"helm 名词解释","slug":"history/tech/5caf5dfc0a8b9161717951e3","date":"2019-04-11T03:32:12.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5caf5dfc0a8b9161717951e3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5caf5dfc0a8b9161717951e3/","excerpt":"","text":"Chartchart 就是 Helm 所管理的包ReleaseRelease 就是 chart 在 K8S 上部署后的实例。chart 的每次部署都将产生一次 ReleaseRepositoryRepository 就是字面意思，存储 chart 的仓库。默认情况下，初始化 Helm 的时候，会添加两个仓库，一个是 stable 仓库 kubernetes-charts.storage.googleapis.com 另一个则是 local 仓库，地址是 http://127.0.0.1:8879/charts 。ConfigConfig 是自定义的配置，在部署时候，会将 config 与 chart 进行合并，共同构成我们将部署的应用。helm 通过 socat 的端口转发（或者说 K8S 的代理），进而实现了本地与 Tiller 的通信Tiller 默认采用 ClusterIP 类型的 Service 进行部署。而我们知道的 ClusterIP 类型的 Service 是仅限集群内访问的:1kubectl -n kube-system get svc","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker 镜像性能对比测试","slug":"history/tech/5caf370f0a8b9161717951e2","date":"2019-04-11T00:46:07.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5caf370f0a8b9161717951e2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5caf370f0a8b9161717951e2/","excerpt":"","text":"http://moelove.info/docker-python-perf/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"将 docker compose 文件转换为 k8s 文件","slug":"history/tech/5caf36b30a8b9161717951e1","date":"2019-04-11T00:44:35.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5caf36b30a8b9161717951e1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5caf36b30a8b9161717951e1/","excerpt":"","text":"https://github.com/kubernetes/kompose","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"elasticsearch 清空索引","slug":"history/tech/5caefada0a8b9161717951e0","date":"2019-04-10T20:29:14.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5caefada0a8b9161717951e0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5caefada0a8b9161717951e0/","excerpt":"","text":"1curl -XPOST http://localhost:9200/index/_delete_by_query?refresh\\&amp;slices=100\\&amp;pretty -H &apos;Content-Type: application/json&apos; -d @query_all.jsonquery_all.json:123&#123; &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"elasticsearch 修改副本数","slug":"history/tech/5caef9110a8b9161717951df","date":"2019-04-10T20:21:37.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5caef9110a8b9161717951df/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5caef9110a8b9161717951df/","excerpt":"","text":"12345curl -XPUT http://localhost:9200/index/_settings -d &apos;&#123; &quot;index&quot;: &#123; &quot;number_of_replicas&quot;: &quot;5&quot; &#125;&#125;&apos;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mysql 5.7 忘记密码","slug":"history/tech/5cad62c80a8b9161717951dc","date":"2019-04-10T03:28:08.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cad62c80a8b9161717951dc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cad62c80a8b9161717951dc/","excerpt":"","text":"12[mysqld]skip-grant-tables1update user set authentication_string = password(&quot;123456&quot;) where user=&quot;root&quot;;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7 安装 mysql5.7","slug":"history/tech/5cae00900a8b9161717951de","date":"2019-04-10T02:41:20.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cae00900a8b9161717951de/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cae00900a8b9161717951de/","excerpt":"","text":"123456rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm //添加仓库yum repolist all | grep mysql | grep enabled // 确认添加成功与否yum -y install mysql-community-server //安装systemctl enable mysqldsystemctl start mysqld // 启动cat /var/log/mysqld.log | grep -i &apos;temporary password&apos; // 查看初始化密码设置 utf-8 编码 vim /etc/my.cnf12345678910[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]collation-server = utf8_unicode_ciinit-connect=&apos;SET NAMES utf8&apos;character-set-server = utf8","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"helm 安装","slug":"history/tech/5cadac8f0a8b9161717951dd","date":"2019-04-09T20:42:55.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cadac8f0a8b9161717951dd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cadac8f0a8b9161717951dd/","excerpt":"","text":"前提：$HOME/.kube/config 需要提前配置好下载：1https://github.com/helm/helm/releases查看版本：1helm versionhelm 默认会去读取 $HOME/.kube/config 的配置文件，用于正确的连接至目标集群 本地安装12./tillerexport HELM_HOST=localhost:44134 k8s安装1helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.14.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/chartsHelm init --upgrade会在Kubernetes集群上安装配置Tiller, 镜像默认使用 https://gcr.io/kubernetes-helm/tiller; 仓库默认使用 https://kubernetes-charts.storage.googleapis.com。由于国内无法访问相关域名，可以使用阿里云容器服务提供的镜像和站点。helm init 会初始化 helm 的默认目录 $HELM_HOME 默认值为 $HOME/.helm查看容器启动情况12kubectl get po -n kube-systemkubectl -n kube-system get deploy tiller-deploy安装 helm 服务端 tiller，是可以通过 kubectl 部署的, 查看部署配置的命令如下：1helm init --dry-run --debug查看已部署的应用1helm list从Kubernetes 1.6开始，API Server启用了RBAC授权。而Tiller部署没有定义授权的ServiceAccount，这会导致访问API Server时被拒绝。我们可以采用如下方法，为Tiller部署添加授权。123kubectl create serviceaccount --namespace kube-system tillerkubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tillerkubectl patch deploy --namespace kube-system tiller-deploy -p &apos;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&apos;配置文件方式：创建一个 ServiceAccount 命名为 tiller，为了简单，我们直接将它与 cluster-admin 进行绑定。tiller-rbac.yaml:123456789101112131415161718apiVersion: v1kind: ServiceAccountmetadata: name: tiller namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: tillerroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects: - kind: ServiceAccount name: tiller namespace: kube-system执行：1kubectl apply -f tiller-rbac.yaml参考资料:https://www.jianshu.com/p/699c5ced3f87https://github.com/BurdenBear/kube-charts-mirror","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cannot change locale","slug":"history/tech/5cac9a320a8b9161717951db","date":"2019-04-09T01:12:18.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5cac9a320a8b9161717951db/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5cac9a320a8b9161717951db/","excerpt":"","text":"emac iterm2 ssh 登录 centos1warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory原因:没有utf-8这个语系（没添加语言_国名前缀），LC_ALL又没设定值。 解决方法：在远程系统上， /etc/environment 加入以下两行，重新登陆即可。12LANG=en_US.utf-8LC_ALL=en_US.utf-8Mac终端解决方法：编辑 ~/.bashrc 或者 ~/.zshrc 文件，添加12export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s 整体架构","slug":"history/tech/5ca56a8e9a5c06d95c088a9a","date":"2019-04-04T02:23:10.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca56a8e9a5c06d95c088a9a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca56a8e9a5c06d95c088a9a/","excerpt":"","text":"k8s 对比其它框架1234mesos Marathon spark/hadoop docker/LXCcs 架构1234567891011121314 +-------------+ | | | | +---------------+ | | +-----&gt; | Node 1 | | Kubernetes | | +---------------++-----------------+ | Server | | | CLI | | | | +---------------+| (Kubectl) |-----------&gt;| ( Master ) |&lt;------+-----&gt; | Node 2 || | | | | +---------------++-----------------+ | | | | | | +---------------+ | | +-----&gt; | Node 3 | | | +---------------+ +-------------+1234567891011121314151617+----------------------------------------------------------+ | Master | | +-------------------------+ | | +-------&gt;| API Server |&lt;--------+ | | | | | | | | v +-------------------------+ v | | +----------------+ ^ +--------------------+ | | | | | | | | | | Scheduler | | | Controller Manager | | | | | | | | | | +----------------+ v +--------------------+ | | +------------------------------------------------------+ | | | | | | | Cluster state store | | | | | | | +------------------------------------------------------+ | +----------------------------------------------------------+scheduler 负责通过Api 调度 pod 到某个node， 调度程序只考虑开始Node的状态，而不考虑在调度过程中的状态，最终 pod 能否运行在 node 上由 kubelet 裁定k8s 实现 Container Runtime InterfaceContainer Runtime：123dockerrktcri-ok8s 通过 kube-proxy 编排 iptables 实现流量转发K8S 集群，会默认机器的基本信息，并计算在此 Node 上可调度的 Pod 数量查看基本信息的命令:12345cat /etc/issuecat /etc/os-releasecat /proc/cpuinfocat /proc/meminfo freekubelet --hostname-override &lt;主机名&gt; 可以修改主机名","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s scheduler","slug":"history/tech/5ca5676e9a5c06d95c088a99","date":"2019-04-04T02:09:50.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca5676e9a5c06d95c088a99/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca5676e9a5c06d95c088a99/","excerpt":"","text":"scheduler 通过Api 调度 pod 到某个node， 调度程序只考虑开始Node的状态，而不考虑在调度过程中的状态","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kubectl 命令使用","slug":"history/tech/5ca335fc9a5c06d95c088a98","date":"2019-04-01T22:14:20.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca335fc9a5c06d95c088a98/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca335fc9a5c06d95c088a98/","excerpt":"","text":"kubectl run 的使用1kubectl run NAME --image=image [--env=&quot;key=value&quot;] [--port=port] [--replicas=replicas] [--dry-run=bool] [--overrides=inline-json] [--command] -- [COMMAND] [args...] [options]部署 redis:1kubectl run redis --image=&apos;redis:alpine&apos;输出：12kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead. kubectl get 的使用1234kubectl get deployment.apps/redis -o widekubectl get rs -o wide // ReplicaSet 可简写为 rs. pod-template 标签是由 Deployment controller 自动添加的，hash 用作唯一性标识, 目的是防止出现重复kubectl get service -o widekubectl get deploy -l run=redis -o wide // Label 可作为选择条件进行使用, 金丝雀发布(Canary deployments), 主要依赖 Label 和 SelectorReplicaSet 是一种较低级别的结构，允许进行扩容。Deployment 主要是声明一种预期的状态，并且会将 Pod 托管给 ReplicaSet，而 ReplicaSet 则会去检查当前的 Pod 数量及状态是否符合预期，并尽量满足这一预期。 service 外部访问Service 目前有 4 种类型：1234ClusterIP： 是 K8S 当前默认的 Service 类型。将 service 暴露于一个仅集群内可访问的虚拟 IP 上。NodePort： 是通过在集群内所有 Node 上都绑定固定端口的方式将服务暴露出来，这样便可以通过 &lt;NodeIP&gt;:&lt;NodePort&gt; 访问服务了。LoadBalancer： 是通过 Cloud Provider 创建一个外部的负载均衡器，将服务暴露出来，并且会自动创建外部负载均衡器路由请求所需的 Nodeport 或 ClusterIP 。ExternalName： 是通过将服务由 DNS CNAME 的方式转发到指定的域名上将服务暴露出来，这需要 kube-dns 1.7 或更高版本支持。将 redis 服务暴露出来1234567891011121314kubectl expose deploy/redis --port=6379 --protocol=TCP --target-port=6379 --name=redis-serverkubectl get svc -o widekubectl get no -o wideport: 是 Service 暴露出来的端口，可通过此端口访问 Service。protocol： 是所用协议。当前 K8S 支持 TCP/UDP 协议，在 1.12 版本中实验性的加入了对 SCTP 协议的支持。默认是 TCP 协议。target-port： 是实际服务所在的目标端口，请求由 port 进入通过上述指定 protocol 最终流向这里配置的端口。name： Service 的名字，它的用处主要在 dns 方面。type： 如果没指定默认是 ClusterIP。ClusterIP 并不能直接通过外部进行访问，我们使用 port-forward 的方式让它可在集群外部访问:1kubectl port-forward svc/redis-server 6379:6379NodePort 的方式对外暴露服务:12kubectl expose deploy/redis --port=6379 --protocol=TCP --target-port=6379 --name=redis-server-nodeport --type=NodePortkubectl get service/redis-server-nodeport -o wide这里需要注意的是这个端口范围其实是可以通过 kube-apiserver 的 service-node-port-range 进行配置的，默认是 30000-32767(通过kube-apiserver 的 service-node-port-range 进行配置)如果使用的是 kind 安装 需要在 docker 内部访问(访问命令 docker exec -it ${containerId} /bin/bash) Pod 扩容12kubectl scale deploy/redis --replicas=2kubectl get pods参考资料：SCTP","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kubeadm 搭建 k8s","slug":"history/tech/5ca31c749a5c06d95c088a97","date":"2019-04-01T20:25:24.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca31c749a5c06d95c088a97/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca31c749a5c06d95c088a97/","excerpt":"","text":"前置条件 安装 dockerhttps://download.docker.com/linux/static/stable/ 修改系统参数1234567891011$ cat &lt;&lt;EOF | tee /etc/sysctl.d/k8s.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF$ sysctl -p /etc/sysctl.d/k8s.conf``` ### 禁用swap&gt;k8s 1.8 开始， 需要禁用 swap 或修改 kubelet 启动参数 kubelet --fail-swap-on=false)swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 cat /proc/swaps free blkid lsblk 12345### 修改 fstab### 集群内机器 product_uuid 与 IP 不能相同cat /sys/class/dmi/id/product_uuid12 ### mac 地址检查(所有节点的 Mac 地址也不能相同)ip a ifconfig -a 12### 端口占用检查 yum install -y net-tools netstat -ntlp | grep -E '6443|23[79,80]|1025[0,1,2]' 1234567891011121314 ### 安装 cri-tools&gt;crictl 包含在 cri-tools 项目中，这个项目中包含两个工具：crictl 是 kubelet CRI (Container Runtime Interface) 的 CLI 。critest 是 kubelet CRI 的测试工具集。下载地址:&lt;https://github.com/kubernetes-sigs/cri-tools/releases&gt;### 安装 socat&gt;socat 可以建立两个双向字节流并在其中传输数据，他的一个功能是实现端口转发yum install -y socatapt-get install -y socat12345## 安装 kubelet### kubelet service 文件cat &lt;/etc/systemd/system/kubelet.service[Unit]Description=kubelet: The Kubernetes AgentDocumentation=http://kubernetes.io/docs/[Service]ExecStart=/usr/bin/kubeletRestart=alwaysStartLimitInterval=0RestartSec=10[Install]WantedBy=multi-user.targetEOF12### kubelet Drop-in 文件(kubeadm.conf 会被 systemd 自动解析，用于覆写 kubelet 的基础 systemd 配置)mkdir -p /etc/systemd/system/kubelet.service.dcat &lt;/etc/systemd/system/kubelet.service.d/kubeadm.conf[Service]Environment=“KUBELET_KUBECONFIG_ARGS=–bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf”Environment=“KUBELET_CONFIG_ARGS=–config=/var/lib/kubelet/config.yaml”EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.envEnvironmentFile=-/etc/default/kubeletExecStart=ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGSEOF12### 启动 `kubelet`：systemctl enable kubeletsystemctl start kubeletsystemctl status kubelet12### 启动kubeadm:kubeadm init --pod-network-cidr=10.244.0.0/16 --image-repository=registry.aliyuncs.com/google_containers --kubernetes-version=v1.15.012### 根据提示修改配置：mkdir -p $HOME/.kubecp /etc/kubernetes/admin.conf $HOME/.kube/configchown (id−u):(id -u):(id−u):(id -g) $HOME/.kube/config1234### 给每台主机安装 `cni` 插件&lt;https://github.com/containernetworking/plugins/releases&gt;wget https://github.com/containernetworking/plugins/releases/download/v0.8.1/cni-plugins-linux-amd64-v0.8.1.tgztar -xzvf cni-plugins-linux-amd64-v0.8.1.tgz -C /opt/cni/bin/1234### 安装 flannel 网络&lt;https://github.com/coreos/flannel&gt;kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml12### 查看集群状态kubectl get nodes -o yaml | grep message 12345### 安装 dashboard&lt;https://github.com/kubernetes/dashboard&gt;修改 ` image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1` 为 image: `registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1`kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml1234### 赋予 dashboard admin 权限&lt;https://github.com/kubernetes/dashboard/wiki/Access-control#admin-privileges&gt;kubectl create -f dashboard-admin.yaml12apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata:name: kubernetes-dashboardlabels:k8s-app: kubernetes-dashboardroleRef:apiGroup: rbac.authorization.k8s.iokind: ClusterRolename: cluster-adminsubjects:kind: ServiceAccountname: kubernetes-dashboardnamespace: kube-system12345678### 访问 1.7.X 以上的 dashboard&lt;https://github.com/kubernetes/dashboard/wiki/Accessing-Dashboard---1.7.X-and-above&gt;修改 ClusterIP 为 NodePort:kubectl -n kube-system edit service kubernetes-dashboard12查看端口：kubectl -n kube-system get service kubernetes-dashboard12访问地址为:https://:12如果尝试在多节点群集上使用NodePort公开Dashboard，则必须找到运行Dashboard的节点的IP:https://:123使用 令牌登陆kubectl -n kube-system get serviceaccount -l k8s-app=kubernetes-dashboard -o yamlkubectl -n kube-system describe secrets kubernetes-dashboard-token-xxa481234567## 其它操作- 查看默认配置:kubeadm config print init-defaults12- 查看当前kubeadm版本号和所需组件kubeadm config images list --kubernetes-version=v1.15.0k8s.gcr.io/kube-apiserver:v1.15.0k8s.gcr.io/kube-controller-manager:v1.15.0k8s.gcr.io/kube-scheduler:v1.15.0k8s.gcr.io/kube-proxy:v1.15.0k8s.gcr.io/pause:3.1k8s.gcr.io/etcd:3.3.10k8s.gcr.io/coredns:1.3.1 参考资料: &lt;https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta1&gt;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"画图工具 asciiflow","slug":"history/tech/5ca30dab9a5c06d95c088a96","date":"2019-04-01T19:22:19.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca30dab9a5c06d95c088a96/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca30dab9a5c06d95c088a96/","excerpt":"","text":"待补充","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cmder","slug":"history/tech/5ca1845531b7242e3104d687","date":"2019-04-01T03:24:05.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca1845531b7242e3104d687/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca1845531b7242e3104d687/","excerpt":"","text":"下载地址:https://cmder.net/右键：1Cmder.exe /REGISTER ALL界面设置：1windows+alt+p进入界面设置快捷键：12345678910111213141516171819202122232425Tab 自动路径补全Ctrl+T 建立新页签Ctrl+W 关闭页签Ctrl+Tab 切换页签Alt+F4 关闭所有页签Alt+Shift+1 开启cmd.exeAlt+Shift+2 开启powershell.exeAlt+Shift+3 开启powershell.exe (系统管理员权限)Ctrl+1 快速切换到第1个页签Ctrl+n 快速切换到第n个页签( n值无上限)Alt + enter 切换到全屏状态Ctr+r 历史命令搜索Tab 自动路径补全Ctrl+T 建立新页签Ctrl+W 关闭页签Ctrl+Tab 切换页签Alt+F4 关闭所有页签Alt+Shift+1 开启cmd.exeAlt+Shift+2 开启powershell.exeAlt+Shift+3 开启powershell.exe (系统管理员权限)Ctrl+1 快速切换到第1个页签Ctrl+n 快速切换到第n个页签( n值无上限)Alt + enter 切换到全屏状态Ctr+r 历史命令搜索Win+Alt+P 开启工具选项视窗","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Homebrew Bottles源","slug":"history/tech/5ca0d18d31b7242e3104d686","date":"2019-03-31T02:41:17.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca0d18d31b7242e3104d686/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca0d18d31b7242e3104d686/","excerpt":"","text":"1https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"brew","slug":"brew","permalink":"https://wangxiuwen.github.io/tags/brew/"}],"author":"wangxiuwen"},{"title":"centos 安装 dig","slug":"history/tech/5ca0976e31b7242e3104d685","date":"2019-03-30T22:33:18.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5ca0976e31b7242e3104d685/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ca0976e31b7242e3104d685/","excerpt":"","text":"1yum install bind-utils","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"App Store 隐私政策","slug":"history/share/5c9ceccf31b7242e3104d684","date":"2019-03-28T03:48:31.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/share/5c9ceccf31b7242e3104d684/","link":"","permalink":"https://wangxiuwen.github.io/history/share/5c9ceccf31b7242e3104d684/","excerpt":"","text":"本软件尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本软件会按照本隐私权政策的规定使用和披露您的个人信息。但本软件将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本软件不会将这些信息对外披露或向第三方提供。本软件会不时更新本隐私权政策。您在同意本软件服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本软件服务使用协议不可分割的一部分。1.适用范围a)在您使用本软件网络服务，本软件自动接收并记录的您的手机上的信息，包括但不限于您的照相机、推送、访问日期和时间、软硬件特征信息及您需求的网页记录等数据；2.信息的使用a)在获得您的数据之后，本软件会将其上传至服务器，以记录你的交易信息，以便您能够更好地使用服务。3.信息披露a)本软件不会将您的信息披露给不受信任的第三方。b)根据法律的有关规定，或者行政或司法机构的要求，向第三方或者行政、司法机构披露；c)如您出现违反中国有关法律、法规或者相关规则的情况，需要向第三方披露；4.信息存储和交换本软件收集的有关您的信息和资料将保存在本软件及（或）其关联公司的服务器上，这些信息和资料可能传送至您所在国家、地区或本软件收集信息和资料所在地的境外并在境外被访问、存储和展示。5.信息安全a)在使用本软件网络服务进行网上交易时，您不可避免的要向交易对方披露自己的个人信息，如联络方式或者证件信息。请您妥善保护自己的个人信息，仅在必要的情形下向他人提供。如您发现自己的个人信息泄密，请您立即联络本软件客服，以便本软件采取相应措施。","categories":[{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"share","slug":"share","permalink":"https://wangxiuwen.github.io/tags/share/"},{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/tags/%E5%88%86%E4%BA%AB/"}],"author":"baipeng"},{"title":"centos 安装 proxychain","slug":"history/tech/5c9ae21031b7242e3104d683","date":"2019-03-27T02:38:08.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c9ae21031b7242e3104d683/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c9ae21031b7242e3104d683/","excerpt":"","text":"123456git clone https://github.com/rofl0r/proxychains-ngcd proxychains-ng./configure --prefix=/usr --sysconfdir=/etcmake make installmake install-config","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"x509 证书介绍","slug":"history/tech/5c998cffeac98afd53889108","date":"2019-03-26T02:22:55.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c998cffeac98afd53889108/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c998cffeac98afd53889108/","excerpt":"","text":"x509 证书介绍 ----- 待记录k8s api server 认证使用 x509 证书","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux 清理dns 缓存","slug":"history/tech/5c9a097c31b7242e3104d682","date":"2019-03-25T23:14:04.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c9a097c31b7242e3104d682/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c9a097c31b7242e3104d682/","excerpt":"","text":"1/etc/init.d/nscd restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"虚拟机分类","slug":"history/tech/5c9a01e9eac98afd5388910c","date":"2019-03-25T22:41:45.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c9a01e9eac98afd5388910c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c9a01e9eac98afd5388910c/","excerpt":"","text":"macOS:123virtualboxvmwarehyperkitLinux:12VirtualBoxKVMwindows:12VirtualBoxHyper-V链接：virtualboxvmwarehyperkitkvmHyper-V","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"minikube 安装 k8s","slug":"history/tech/5c9a01bbeac98afd5388910b","date":"2019-03-25T22:40:59.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c9a01bbeac98afd5388910b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c9a01bbeac98afd5388910b/","excerpt":"","text":"kubectl 安装由于 API 版本兼容的问题，尽量保持 kubectl 版本与 K8S 集群版本保持一致，或版本相差在在一个小版本内https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl1curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl或者在 k8s github 地址 changelog 中下载1https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.14.md minikube 安装官方下载地址：https://github.com/kubernetes/minikube/releases国内正常无法启动成功，因为它要从 gcr.io 拉取镜像, minikube 1.0.0 增加了 --image-repository 参数, 将此参数指定到阿里云即可。安装方法：1minikube delete // 删除现有虚机，删除 ~/.minikube 目录缓存的文件启动：1minikube start --vm-driver=none --registry-mirror=https://registry.docker-cn.com --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers --kubernetes-version v1.14.0在 Linux 系统上面，将 Minikube 的 --vm-driver 参数设置为 none ，并且在本机已经正确安装 Docker，则无需虚拟化支持。启动过程:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748root@testminikube:~# minikube start --vm-driver=none --image-repository registry.cn-hangzhou.aliyuncs.com/google_containerso minikube v1.0.0 on linux (amd64)$ Downloading Kubernetes v1.14.0 images in the background ...&gt; Creating none VM (CPUs=2, Memory=2048MB, Disk=20000MB) ...2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous2019/04/01 04:09:16 No matching credentials were found, falling back on anonymous- &quot;minikube&quot; IP address is 192.168.3.18- Configuring Docker as the container runtime ...- Version of container runtime is 18.06.1-ce: Waiting for image downloads to complete ...- Preparing Kubernetes environment ...- Pulling images required by Kubernetes v1.14.0 ...- Launching Kubernetes v1.14.0 using kubeadm ...: Waiting for pods: apiserver proxy etcd scheduler controller dns- Configuring cluster permissions ...- Verifying component health .....&gt; Configuring local host environment ...! The &apos;none&apos; driver provides limited isolation and may reduce system security and reliability.! For more information, see:- https://github.com/kubernetes/minikube/blob/master/docs/vmdriver-none.md! kubectl and minikube configuration will be stored in /root! To use kubectl or minikube commands as your own user, you may! need to relocate them. For example, to overwrite your own settings: - sudo mv /root/.kube /root/.minikube $HOME - sudo chown -R $USER $HOME/.kube $HOME/.minikubei This can also be done automatically by setting the env var CHANGE_MINIKUBE_NONE_USER=true+ kubectl is now configured to use &quot;minikube&quot;= Done! Thank you for using minikube!root@testminikube:~# kubectl cluster-infoKubernetes master is running at https://192.168.3.18:8443KubeDNS is running at https://192.168.3.18:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxyTo further debug and diagnose cluster problems, use &apos;kubectl cluster-info dump&apos;. DNS 问题：启动coreDNS 出错debug地址 https://coredns.io/plugins/loop/12345678910111213141516171819202122232425262728root@testminikube:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESdc90838be2c1 eb516548c180 &quot;/coredns -conf /etc…&quot; 2 minutes ago Exited (1) 2 minutes ago k8s_coredns_coredns-d5947d4b-js28m_kube-system_f5c81728-544c-11e9-a910-000c295104be_12a2d90e4b0c6b eb516548c180 &quot;/coredns -conf /etc…&quot; 2 minutes ago Exited (1) 2 minutes ago k8s_coredns_coredns-d5947d4b-4vz2j_kube-system_f5c50971-544c-11e9-a910-000c295104be_126e4be3a7474b 4689081edb10 &quot;/storage-provisioner&quot; 39 minutes ago Up 39 minutes k8s_storage-provisioner_storage-provisioner_kube-system_fe64bff1-544c-11e9-a910-000c295104be_059b80b5b458a registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 39 minutes ago Up 39 minutes k8s_POD_storage-provisioner_kube-system_fe64bff1-544c-11e9-a910-000c295104be_0df5821598c5d 5cd54e388aba &quot;/usr/local/bin/kube…&quot; 39 minutes ago Up 39 minutes k8s_kube-proxy_kube-proxy-l9rpj_kube-system_f5c47051-544c-11e9-a910-000c295104be_060d7a877574d registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 39 minutes ago Up 39 minutes k8s_POD_coredns-d5947d4b-js28m_kube-system_f5c81728-544c-11e9-a910-000c295104be_0cadbc4575d5c registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 39 minutes ago Up 39 minutes k8s_POD_coredns-d5947d4b-4vz2j_kube-system_f5c50971-544c-11e9-a910-000c295104be_0186e88e78b9c registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 39 minutes ago Up 39 minutes k8s_POD_kube-proxy-l9rpj_kube-system_f5c47051-544c-11e9-a910-000c295104be_059104dbfe8cb ecf910f40d6e &quot;kube-apiserver --ad…&quot; 40 minutes ago Up 40 minutes k8s_kube-apiserver_kube-apiserver-minikube_kube-system_34d581cbe7724b7c44f1bcc01808ce2b_0d4fe90aeab1c 2c4adeb21b4f &quot;etcd --advertise-cl…&quot; 40 minutes ago Up 40 minutes k8s_etcd_etcd-minikube_kube-system_0b2be8e1a0609d0edec7456c26d2017e_05fd380724605 119701e77cbc &quot;/opt/kube-addons.sh&quot; 40 minutes ago Up 40 minutes k8s_kube-addon-manager_kube-addon-manager-minikube_kube-system_6728e68c67451512f4a3f8ebf187f7c0_0f2acdb49eb70 b95b1efa0436 &quot;kube-controller-man…&quot; 40 minutes ago Up 40 minutes k8s_kube-controller-manager_kube-controller-manager-minikube_kube-system_ad79208e444afcf9288f50 3469ee8a9f_04b8c04231fe4 00638a24688b &quot;kube-scheduler --bi…&quot; 40 minutes ago Up 40 minutes k8s_kube-scheduler_kube-scheduler-minikube_kube-system_6f3a3fe86a955711bb700f58d205f045_0f439564293e3 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 40 minutes ago Up 40 minutes k8s_POD_kube-apiserver-minikube_kube-system_34d581cbe7724b7c44f1bcc01808ce2b_06837d66351dc registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 40 minutes ago Up 40 minutes k8s_POD_etcd-minikube_kube-system_0b2be8e1a0609d0edec7456c26d2017e_06a8bbf2adb23 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 40 minutes ago Up 40 minutes k8s_POD_kube-addon-manager-minikube_kube-system_6728e68c67451512f4a3f8ebf187f7c0_00fb3bcacb6e7 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 40 minutes ago Up 40 minutes k8s_POD_kube-scheduler-minikube_kube-system_6f3a3fe86a955711bb700f58d205f045_048a9f8539f78 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 40 minutes ago Up 40 minutes k8s_POD_kube-controller-manager-minikube_kube-system_ad79208e444afcf9288f503469ee8a9f_0root@testminikube:~# docker logs dc90838be2c1.:532019-04-01T07:45:24.546Z [INFO] CoreDNS-1.3.12019-04-01T07:45:24.546Z [INFO] linux/amd64, go1.11.4, 6b56a9cCoreDNS-1.3.1linux/amd64, go1.11.4, 6b56a9c2019-04-01T07:45:24.546Z [INFO] plugin/reload: Running configuration MD5 = 599b9eb76b8c147408aed6a0bbe0f6692019-04-01T07:45:24.547Z [FATAL] plugin/loop: Loop (127.0.0.1:36695 -&gt; :53) detected for zone &quot;.&quot;, see https://coredns.io/plugins/loop#troubleshooting. Query: &quot;HINFO 1110760444785600987.5796964311732654450.&quot;原因https://coredns.io/plugins/loop/#troubleshooting由于 ubuntu 系统将 namserver 设置为 127.0.0.53 导致此问题解决：123systemctl disable systemd-resolvedvim /etc/resolvconf/resolv.conf.d/basenameserver 8.8.8.8存疑：123456789101112131415161718192021222324252627$ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESc87d64f3d0c0 f9aed6605b81 &quot;/dashboard --insecu…&quot; 8 minutes ago Up 8 minutes k8s_kubernetes-dashboard_kubernetes-dashboard-9589d45df-zfmjf_kube-system_0eeb5738-5485-11e9-b716-08002761faf0_0e6a18d854acc registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 8 minutes ago Up 8 minutes k8s_POD_kubernetes-dashboard-9589d45df-zfmjf_kube-system_0eeb5738-5485-11e9-b716-08002761faf0_0e8c92c0f8637 eb516548c180 &quot;/coredns -conf /etc…&quot; 11 minutes ago Up 11 minutes k8s_coredns_coredns-d5947d4b-wwn57_kube-system_a39a6445-5484-11e9-b716-08002761faf0_25a49e2cb422b eb516548c180 &quot;/coredns -conf /etc…&quot; 11 minutes ago Up 11 minutes k8s_coredns_coredns-d5947d4b-bt7qr_kube-system_a399c170-5484-11e9-b716-08002761faf0_05509348a7611 4689081edb10 &quot;/storage-provisioner&quot; 11 minutes ago Up 11 minutes k8s_storage-provisioner_storage-provisioner_kube-system_a48d0d5a-5484-11e9-b716-08002761faf0_096689c775c18 eb516548c180 &quot;/coredns -conf /etc…&quot; 11 minutes ago Exited (2) 11 minutes ago k8s_coredns_coredns-d5947d4b-wwn57_kube-system_a39a6445-5484-11e9-b716-08002761faf0_19e2138641dbc registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 11 minutes ago Up 11 minutes k8s_POD_storage-provisioner_kube-system_a48d0d5a-5484-11e9-b716-08002761faf0_0b2594dd49453 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 11 minutes ago Up 11 minutes k8s_POD_coredns-d5947d4b-bt7qr_kube-system_a399c170-5484-11e9-b716-08002761faf0_084b9556eddcd 5cd54e388aba &quot;/usr/local/bin/kube…&quot; 11 minutes ago Up 11 minutes k8s_kube-proxy_kube-proxy-rc8wh_kube-system_a3a0da36-5484-11e9-b716-08002761faf0_0613ceec2b398 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 11 minutes ago Up 11 minutes k8s_POD_kube-proxy-rc8wh_kube-system_a3a0da36-5484-11e9-b716-08002761faf0_0b1c59f3d3681 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 11 minutes ago Up 11 minutes k8s_POD_coredns-d5947d4b-wwn57_kube-system_a39a6445-5484-11e9-b716-08002761faf0_08f57f6f750f1 119701e77cbc &quot;/opt/kube-addons.sh&quot; 12 minutes ago Up 12 minutes k8s_kube-addon-manager_kube-addon-manager-minikube_kube-system_6728e68c67451512f4a3f8ebf187f7c0_0ec8cd3584a87 b95b1efa0436 &quot;kube-controller-man…&quot; 12 minutes ago Up 12 minutes k8s_kube-controller-manager_kube-controller-manager-minikube_kube-system_81af92d0afc7c18b923d3c1cfeb25dde_054e552b6447a 00638a24688b &quot;kube-scheduler --bi…&quot; 12 minutes ago Up 12 minutes k8s_kube-scheduler_kube-scheduler-minikube_kube-system_6f3a3fe86a955711bb700f58d205f045_0038a39ad50eb 2c4adeb21b4f &quot;etcd --advertise-cl…&quot; 12 minutes ago Up 12 minutes k8s_etcd_etcd-minikube_kube-system_fd5daa32004de0c636e0fe0efc91f2a7_0dbfda924e721 ecf910f40d6e &quot;kube-apiserver --ad…&quot; 12 minutes ago Up 12 minutes k8s_kube-apiserver_kube-apiserver-minikube_kube-system_523956c1c877d6074e0ef2c35d1a3aa0_0dc951ebb6bb6 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 12 minutes ago Up 12 minutes k8s_POD_kube-apiserver-minikube_kube-system_523956c1c877d6074e0ef2c35d1a3aa0_02936483c8f38 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 12 minutes ago Up 12 minutes k8s_POD_etcd-minikube_kube-system_fd5daa32004de0c636e0fe0efc91f2a7_0b079ca751d3a registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 12 minutes ago Up 12 minutes k8s_POD_kube-addon-manager-minikube_kube-system_6728e68c67451512f4a3f8ebf187f7c0_0491f459137e4 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 12 minutes ago Up 12 minutes k8s_POD_kube-scheduler-minikube_kube-system_6f3a3fe86a955711bb700f58d205f045_07eb83411c127 registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 &quot;/pause&quot; 12 minutes ago Up 12 minutes k8s_POD_kube-controller-manager-minikube_kube-system_81af92d0afc7c18b923d3c1cfeb25dde_0$ docker logs 96689c775c18E0401 13:47:09.340208 1 reflector.go:134] github.com/coredns/coredns/plugin/kubernetes/controller.go:322: Failed to list *v1.Namespace: Get https://10.96.0.1:443/api/v1/namespaces?limit=500&amp;resourceVersion=0: tls: server selected unsupported protocol version 302E0401 13:47:09.340208 1 reflector.go:134] github.com/coredns/coredns/plugin/kubernetes/controller.go:322: Failed to list *v1.Namespace: Get https://10.96.0.1:443/api/v1/namespaces?limit=500&amp;resourceVersion=0: tls: server selected unsupported protocol version 302log: exiting because of error: log: cannot create log: open /tmp/coredns.coredns-d5947d4b-wwn57.unknownuser.log.ERROR.20190401-134709.1: no such file or directory","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kind 搭建 k8s","slug":"history/tech/5c99f637eac98afd5388910a","date":"2019-03-25T21:51:51.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c99f637eac98afd5388910a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c99f637eac98afd5388910a/","excerpt":"","text":"kubectl 安装由于 API 版本兼容的问题，尽量保持 kubectl 版本与 K8S 集群版本保持一致，或版本相差在在一个小版本内https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl1curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl或者在 k8s github 地址 changelog 中下载1https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.14.md kind 安装kind 官方下载地址:https://github.com/kubernetes-sigs/kind/releases或者使用 go get 安装：1go get sigs.k8s.io/kind启动示例：12kind create cluster --image kindest/node:v1.13.4 --config kind-config.yaml --name kindkind create cluster --image kindest/node:v1.13.4 --config kind-ha-config.yaml --name kind // 搭建高可用集群修改环境变量:12export KUBECONFIG=&quot;$(kind get kubeconfig-path --name=&quot;kind&quot;)&quot;kubectl cluster-infokind-config.yaml:123456789101112131415161718192021222324kind: ClusterapiVersion: kind.sigs.k8s.io/v1alpha3kubeadmConfigPatches:- | apiVersion: kubeadm.k8s.io/v1beta1 kind: InitConfiguration metadata: name: config networking: serviceSubnet: 10.0.0.0/16 imageRepository: registry.aliyuncs.com/google_containers- | apiVersion: kubeadm.k8s.io/v1beta1 kind: ClusterConfiguration metadata: name: config networking: serviceSubnet: 10.0.0.0/16 imageRepository: registry.aliyuncs.com/google_containers nodeRegistration: kubeletExtraArgs: pod-infra-container-image: registry.aliyuncs.com/google_containers/pause:3.1nodes:- role: control-planekind-ha-config.yaml:123456789101112131415161718192021222324252627282930kind: ClusterapiVersion: kind.sigs.k8s.io/v1alpha3kubeadmConfigPatches:- | apiVersion: kubeadm.k8s.io/v1beta1 kind: InitConfiguration metadata: name: config networking: serviceSubnet: 10.0.0.0/16 imageRepository: registry.aliyuncs.com/google_containers- | apiVersion: kubeadm.k8s.io/v1beta1 kind: ClusterConfiguration metadata: name: config networking: serviceSubnet: 10.0.0.0/16 imageRepository: registry.aliyuncs.com/google_containers nodeRegistration: kubeletExtraArgs: pod-infra-container-image: registry.aliyuncs.com/google_containers/pause:3.1nodes:- role: control-plane- role: control-plane- role: control-plane- role: worker- role: worker- role: worker参考资料:kind 文档：https://kind.sigs.k8s.io/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 编译安装 git","slug":"history/tech/5c99c467eac98afd53889109","date":"2019-03-25T18:19:19.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c99c467eac98afd53889109/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c99c467eac98afd53889109/","excerpt":"","text":"12345yum install autoconfyum install -y openssl-develyum install curl-develyum install expat-develmake prefix=/usr install","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter 集成 jpush 坑爹小计","slug":"history/tech/5c90901aeac98afd53889107","date":"2019-03-18T18:45:46.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c90901aeac98afd53889107/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c90901aeac98afd53889107/","excerpt":"","text":"123456重点 iOS端 要设置 production 的值 否则编译启动会出错，因为iOS的代码访问这个变量为空值，没有处理 jpush.setup( appKey: &quot;6f1d31c55f7f0ff78e2b5148&quot;, channel: &quot;theChannel&quot;, production: true, debug: true);","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"flutter","slug":"flutter","permalink":"https://wangxiuwen.github.io/tags/flutter/"}],"author":"baipeng"},{"title":"vscode 运行go test 显示打印日志","slug":"history/tech/5c8874b6eac98afd53889106","date":"2019-03-13T03:10:46.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c8874b6eac98afd53889106/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c8874b6eac98afd53889106/","excerpt":"","text":"1&quot;go.testFlags&quot;: [&quot;-v&quot;]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"golang dep 使用私有仓库","slug":"history/tech/5c709788be40978f3d5734b6","date":"2019-02-23T00:44:56.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c709788be40978f3d5734b6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c709788be40978f3d5734b6/","excerpt":"","text":"vim ~/.gitconfig12[url &quot;git@code.aliyun.com:&quot;] insteadOf = https://code.aliyun.com/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 判断执行的操作系统","slug":"history/tech/5c700c84be40978f3d5734b5","date":"2019-02-22T02:51:48.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c700c84be40978f3d5734b5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c700c84be40978f3d5734b5/","excerpt":"","text":"1switch runtime.GOOS &#123; case &quot;darwin&quot;: case &quot;windows&quot;: case &quot;linux&quot;: &#125;查找系统:1go tool dist list -json","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"python requests 使用 ss 代理","slug":"history/tech/5c6fae08be40978f3d5734b4","date":"2019-02-21T20:08:40.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c6fae08be40978f3d5734b4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c6fae08be40978f3d5734b4/","excerpt":"","text":"12345678proxies = &#123;&apos;http&apos;: &apos;socks5h://127.0.0.1:1086&apos;, &apos;https&apos;: &apos;socks5h://127.0.0.1:1086&apos;&#125;result = requests.post( &lt;url&gt;, data=&lt;data&gt;, headers=&lt;headers&gt;, timeout=100, verify=False, proxies=proxies)socks5 和 socks5h 的区别:1234socks5h: the hostname is resolved by the SOCKS server (also known as CURLPROXY_SOCKS5_HOSTNAME type);socks5: the hostname is resolved locally;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"pip 配置文件","slug":"history/tech/5c6b7d924c69346505fe3452","date":"2019-02-19T03:52:50.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c6b7d924c69346505fe3452/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c6b7d924c69346505fe3452/","excerpt":"","text":"123456vim /root/.pip[global]index-url=http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"通过OpenVPN来穿越上网","slug":"history/tech/5c68fdd84c69346505fe3451","date":"2019-02-16T18:23:20.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c68fdd84c69346505fe3451/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c68fdd84c69346505fe3451/","excerpt":"","text":"server.conf1push &quot;redirect-gateway def1 bypass-dhcp&quot; # 允许客户端重定向穿越VPN到外网client.ovpn1redirect-gateway def1 #使客户端中所有流量经过VPN","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"confluence 504","slug":"history/tech/5c64f5f1311ba7740ed98863","date":"2019-02-13T17:00:33.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c64f5f1311ba7740ed98863/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c64f5f1311ba7740ed98863/","excerpt":"","text":"调整 jvm 参数：123vim /usr/local/confluence/bin/setenv.shJAVA_OPTS=&quot;-Xms4096m -Xmx4096m -XX:MaxPermSize=512m $JAVA_OPTS -Djava.awt.headless=true &quot;启动/停止/重启：1/usr/local/confluence/bin# /etc/init.d/confluence &#123;start|stop|restart&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"golang time 坑爹笔记","slug":"history/tech/5c525e6bd5a4cf4603f130af","date":"2019-01-31T02:33:15.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c525e6bd5a4cf4603f130af/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c525e6bd5a4cf4603f130af/","excerpt":"","text":"1time format 操作使用 Time 实例记录的时区，大多数情况下是本地时区；另一方面，parse 操作在并不会默认使用本地时区。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"xml 配置文件读取问题。","slug":"history/tech/5c515a6ad5a4cf4603f130ae","date":"2019-01-29T20:03:54.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c515a6ad5a4cf4603f130ae/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c515a6ad5a4cf4603f130ae/","excerpt":"","text":"12禁止使用idea的格式化快捷键，格式化。不要为了好看而格式化。否则你就得处理/n 换行的问题。小计~~~🐥","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"chrome ERR_UNSAFE_PORT","slug":"history/tech/5c497295d5a4cf4603f130ad","date":"2019-01-23T20:08:53.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c497295d5a4cf4603f130ad/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c497295d5a4cf4603f130ad/","excerpt":"","text":"选中Google Chrome 快捷方式，右键属性，在”目标”对应文本框添加：1--explicitly-allowed-ports=87,6666,556,6667","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter  get  gzip (stdin) trailing garbage ignored","slug":"history/tech/5c41c74fb77f63ce2b1a9ed5","date":"2019-01-18T00:32:15.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c41c74fb77f63ce2b1a9ed5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c41c74fb77f63ce2b1a9ed5/","excerpt":"","text":"报错:1flutter get gzip: (stdin): trailing garbage ignored解决:12345678Building flutter tool...gzip: (stdin): trailing garbage ignoredgzip: (stdin): trailing garbage ignoredtar: Child returned status 1tar: Error is not recoverable: exiting nowgzip: (stdin): trailing garbage ignoredgzip: (stdin): trailing garbage ignoredWrite failed (OS Error: Broken pipe, errno = 32), port = 0解决办法卸载brew 安装的 gnu-tar, 至少我这样是解决了。原贴也有评论说没关系的、https://github.com/flutter/flutter/issues/110741brew uninstall gnu-tar","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"chrome内核打开网站缓慢","slug":"history/tech/5c408303b77f63ce2b1a9ed4","date":"2019-01-17T01:28:35.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c408303b77f63ce2b1a9ed4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c408303b77f63ce2b1a9ed4/","excerpt":"","text":"步骤：- 删除HKEY_CURRENT_USER\\Software\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots - 删除HKEY_CURRENT_USER\\Software\\Microsoft\\SystemCertificates\\Root\\Certificates - 删除HKEY_CURRENT_USER\\Software\\Microsoft\\SystemCertificates\\Root - 找到注册表键值HKEY_CURRENT_USER\\Software\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots，右键点【权限】，把所有用户名，都设置成完全控制权限，点确定，右键ProtectedRoots，点删除 - 如果无法删除，需要点控制面板，点“账户”，点“改用本地账户登陆”，然后注销，再按照上面的步骤删除； - 出现“无法保存对ProtectedRoots 权限所作的更改”，主要原因是www.winwin7.com所有者不对。右键ProtectedRoots点“权限”，点“高级”，找到“所有者”，如下图所有者是Administrator，点右边的“更改”，出现界面后，点高级，点立即查找，找到本地账户，比如“张三”，一路点确定，然后再删除试试； - 如果所有者对了，完全控制也可以设置好了，还是无法删除，可能是键值有父对象。右键ProtectedRoots点“权限”，点“高级”点“禁用继承”，弹出框选第一个，点确定，变成“无”，确定确定保存设置在删除注册表键值；","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"navicat 连接阿里云mysql 80070007","slug":"history/tech/5c3f44c0b77f63ce2b1a9ed3","date":"2019-01-16T02:50:40.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c3f44c0b77f63ce2b1a9ed3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c3f44c0b77f63ce2b1a9ed3/","excerpt":"","text":"报错：180070007: SSH Tunnel: Server does not support diffie-hellman-group1-sha1 for keyexchange解决：vim /etc/ssh/sshd_config 在最下面 加入下面代码：12KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr执行：12ssh-keygen -Aservice ssh restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"golang 使用私有仓库(go get https 转 ssh)","slug":"history/tech/5c3f2372b77f63ce2b1a9ed2","date":"2019-01-16T00:28:34.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c3f2372b77f63ce2b1a9ed2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c3f2372b77f63ce2b1a9ed2/","excerpt":"","text":"针对 gitlab go get https 转 ssh:123vim ~/.gitconfig[url &quot;git@gitlab.mygitlab.com:&quot;] insteadOf = https://gitlab.mygitlab.com或直接使用命令：1git config --global url.&quot;git@gitlab.mygitlab.com:&quot;.insteadOf &quot;https://gitlab.mygitlab.com&quot;1dep ensure ......","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter MacOS 开发环境搭建","slug":"history/tech/5c3eebb3b77f63ce2b1a9ed1","date":"2019-01-15T20:30:43.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c3eebb3b77f63ce2b1a9ed1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c3eebb3b77f63ce2b1a9ed1/","excerpt":"","text":"1234561.下载安装包https://flutter.io/docs/get-started/install/macos2.mkdir ~/development &amp;&amp; cd ~/development 将下载安装包移动到这个目录 mv 下载的文件夹 /flutter.**.zip ~/development3.设置环境变量 export PATH=$PATH:`pwd`/flutter/bin4.执行检查 flutter doctor 查看结果~~👇12345678910111213141516171819202122232425262728293031323334*******:development ******$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.2 18C54, locale zh-Hans-CN)[✗] Android toolchain - develop for Android devices ✗ Unable to locate Android SDK. Install Android Studio from: https://developer.android.com/studio/index.html On first launch it will assist you in installing the Android SDK components. (or visit https://flutter.io/setup/#android-setup for detailed instructions). If Android SDK has been installed to a custom location, set $ANDROID_HOME to that location. You may also want to add it to your PATH environment variable.[!] iOS toolchain - develop for iOS devices (Xcode 10.1) ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run: brew update brew install --HEAD usbmuxd brew link usbmuxd brew install --HEAD libimobiledevice brew install ideviceinstaller ✗ ios-deploy not installed. To install with Brew: brew install ios-deploy ✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS platform side&apos;s plugin code that responds to your plugin usage on the Dart side. Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS. For more info, see https://flutter.io/platform-plugins To install: brew install cocoapods pod setup[!] Android Studio (not installed)[!] IntelliJ IDEA Ultimate Edition (version 2018.1.3) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality.[!] VS Code (version 1.30.2)[!] Connected device ! No devices available1234567891011127.发现没有安装Android SDK 安装，so !! 安装它 地址：http://www.android-studio.org/ 找到 android-studio-ide-*****-mac.dmg 下载安装它。安装完执行 flutter doctor --android-licenses OK 搞定。。执行剩下的命令。没有安装brew 先安装它 有直接执行下面的命令~ brew install --HEAD usbmuxd brew link usbmuxd brew install --HEAD libimobiledevice brew install ideviceinstaller brew install ios-deploy brew install cocoapods pod setup","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"Spark submit job is submitted","slug":"history/tech/5c234321be437f5805a40dea","date":"2018-12-25T21:00:17.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c234321be437f5805a40dea/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c234321be437f5805a40dea/","excerpt":"","text":"123Spark submit job is submitted 没有可用的worker提供工作导致，job 挂起未运行解决办法：检查spark集群是否组队成功","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"Warning:android-apt plugin is incompatible","slug":"history/tech/5c20e61abe437f5805a40de9","date":"2018-12-24T01:58:50.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c20e61abe437f5805a40de9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c20e61abe437f5805a40de9/","excerpt":"","text":"build.gradle 中 删除以下内容:1apply plugin: &apos;com.neenbedankt.android-apt&apos;把 buildscript 的 dependencies 中删掉:1classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;替换 dependencies 中的 apt:1apt &apos;com.google.dagger:dagger-compiler:2.0.2&apos;替换为:1annotationProcessor &apos;com.google.dagger:dagger-compiler:2.0.2&apos;替换 jacocoClasspath:1jacocoClasspath = configurations[&apos;androidJacocoAnt&apos;]替换为1jacocoClasspath = configurations[&apos;jacocoAnt&apos;]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"adb 取出 手机中的 apk","slug":"history/tech/5c20e4e1be437f5805a40de8","date":"2018-12-24T01:53:37.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c20e4e1be437f5805a40de8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c20e4e1be437f5805a40de8/","excerpt":"","text":"123adb shell pm list packages | grep jazzbeeradb shell pm path com.jazzbeer.accumetronomeadb pull data/app/com.jazzbeer.accumetronome-1/base.apk base.apk","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter 卡 package get","slug":"history/tech/5c1f21fabe437f5805a40de7","date":"2018-12-22T17:49:46.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c1f21fabe437f5805a40de7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c1f21fabe437f5805a40de7/","excerpt":"","text":"12export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter Waiting for another flutter command to release the startup lock","slug":"history/tech/5c1f21d6be437f5805a40de6","date":"2018-12-22T17:49:10.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c1f21d6be437f5805a40de6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c1f21d6be437f5805a40de6/","excerpt":"","text":"1rm -rf flutter/bin/cache/lockfile","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"android studio 卡  Initializing gradle","slug":"history/tech/5c1e05e4be437f5805a40de5","date":"2018-12-21T21:37:40.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c1e05e4be437f5805a40de5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c1e05e4be437f5805a40de5/","excerpt":"","text":"查找文件：1&apos;flutter\\packages\\flutter_tools\\gradle\\flutter.gradle&apos;修改配置：1234567repositories &#123; maven &#123; url &apos;https://maven.aliyun.com/repository/google&apos; &#125; maven &#123; url &apos;https://maven.aliyun.com/repository/jcenter&apos; &#125; maven &#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos; &#125; // google() jcenter()&#123; url &apos;http://jcenter.bintray.com/&apos;&#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"android gradle 卡死","slug":"history/tech/5c1dcd7abe437f5805a40de4","date":"2018-12-21T17:36:58.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c1dcd7abe437f5805a40de4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c1dcd7abe437f5805a40de4/","excerpt":"","text":"android studio 卡 Initializing gradlesdk 中 查找文件：‘flutter\\packages\\flutter_tools\\gradle\\flutter.gradle’修改配置：1234567repositories &#123; maven &#123; url &apos;https://maven.aliyun.com/repository/google&apos; &#125; maven &#123; url &apos;https://maven.aliyun.com/repository/jcenter&apos; &#125; maven &#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos; &#125; // google() jcenter()&#123; url &apos;http://jcenter.bintray.com/&apos;&#125;&#125; gradle 卡死项目中打开文件查找版本：vim hello_world\\android\\gradle\\wrapper\\gradle-wrapper1distributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-all.zip下载地址：1https://gradle.org/releases/将 zip 包放到用户主目录 .gradle\\wrapper\\dists\\gradle-4.10.2-all\\9fahxiiecdb76a5g3aw9oi8rv\\ 下 google_m2repository_gms_v11_3_rc05_wear_2_0_5.zipgoogle_m2repository_gms_v11_3_rc05_wear_2_0_5.zip 解压缩到 sdkpath/extras/google/m2repository","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos git 编译安装","slug":"history/tech/5c19b09bbe437f5805a40de1","date":"2018-12-19T02:44:43.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c19b09bbe437f5805a40de1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c19b09bbe437f5805a40de1/","excerpt":"","text":"下载：1wget https://codeload.github.com/git/git/zip/master安装环境：12345678yum install -y unzipyum install -y zlib-develyum install -y autoconfyum install -y curl-develyum install -y asciidocyum install -y xmltoyum install -y docbook2Xln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi编译安装：1234autoconf -i./configuremake prefix=/usr all doc infomake prefix=/usr install install-doc install-html install-info","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter Checkbox tristate","slug":"history/tech/5c1a3d72be437f5805a40de3","date":"2018-12-19T00:45:38.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c1a3d72be437f5805a40de3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c1a3d72be437f5805a40de3/","excerpt":"","text":"true：选中状态。false：不选中状态。null：只有在 tristate=true 时可设置此值","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 普通用户无法登录","slug":"history/tech/5c19d6b4be437f5805a40de2","date":"2018-12-18T17:27:16.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c19d6b4be437f5805a40de2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c19d6b4be437f5805a40de2/","excerpt":"","text":"打开文件：1vim /etc/security/access.conf添加：1-:ALL EXCEPT root &lt;username&gt;:ALL生效：1source /etc/security/access.conf参考资料：https://www.ibm.com/developerworks/cn/aix/library/au-sshlocks/index.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu zlib 安装","slug":"history/tech/5c185d26be437f5805a40ddf","date":"2018-12-18T02:36:22.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c185d26be437f5805a40ddf/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c185d26be437f5805a40ddf/","excerpt":"","text":"1sudo apt-get install zlib1g-dev","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"win10 安装 tensorflow-gpu","slug":"history/tech/5c189a70be437f5805a40de0","date":"2018-12-17T18:57:52.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c189a70be437f5805a40de0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c189a70be437f5805a40de0/","excerpt":"","text":"CUDA:https://developer.nvidia.com/cuda-90-download-archiveCUDNN:https://developer.nvidia.com/rdp/cudnn-archivetensorflow:1pip install tensorflow-gpu --upgrade测试：1234567891011import tensorflow as tfa = tf.test.is_built_with_cuda() # 判断CUDA是否可以用b = tf.test.is_gpu_available( cuda_only=False, min_cuda_compute_capability=None) # 判断GPU是否可以用print(a)print(b)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 18.04 源","slug":"history/tech/5c1746bebe437f5805a40dde","date":"2018-12-16T18:48:30.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c1746bebe437f5805a40dde/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c1746bebe437f5805a40dde/","excerpt":"","text":"中科大源12345678910deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse 阿里源12345678910deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse 163源12345678910deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse 清华源12345678910deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"flutter 命令","slug":"history/tech/5c137a9fbe437f5805a40ddd","date":"2018-12-13T21:40:47.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c137a9fbe437f5805a40ddd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c137a9fbe437f5805a40ddd/","excerpt":"","text":"升级 flutter sdk 并 同时更新Flutter SDK和你的flutter项目依赖包:1flutter upgrade更新项目依赖包：12flutter packages get 获取项目所有的依赖包flutter packages upgrade 获取项目所有依赖包的最新版本","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 下 安卓启动模拟器报错","slug":"history/tech/5c120f40be437f5805a40ddc","date":"2018-12-12T19:50:24.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c120f40be437f5805a40ddc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c120f40be437f5805a40ddc/","excerpt":"","text":"报错：1Emulator: CPU acceleration status: Unable to open HAXM device: ERROR_FILE_NOT_FOUND查询：1234567891011121314C:\\WINDOWS\\system32&gt;sc query intelhaxmSERVICE_NAME: intelhaxm TYPE : 1 KERNEL_DRIVER STATE : 1 STOPPED WIN32_EXIT_CODE : 2 (0x2) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0C:\\WINDOWS\\system32&gt;sc start intelhaxm[SC] StartService 失败 2:系统找不到指定的文件。解决：首先保证已经关闭 Hyper-v进入 C:\\Users\\%USERNAME%\\AppData\\Local\\Android\\Sdk\\extras\\intel\\Hardware_Accelerated_Execution_Manager卸载重装 intelhaxm-android","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"supervisorctl 常用命令","slug":"history/tech/5c11f8a2be437f5805a40ddb","date":"2018-12-12T18:13:54.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c11f8a2be437f5805a40ddb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c11f8a2be437f5805a40ddb/","excerpt":"","text":"增加配置后更新并启动服务：1supervisorctl update探测新增加的服务：1supervisorctl reread启动/重启/停止：123supervisorctl start &lt;program_name&gt;supervisorctl restart &lt;program_name&gt;supervisorctl stop &lt;program_name&gt;全部重启：1supervisorctl reload资料：http://supervisord.org/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 下 jdk 环境变量","slug":"history/tech/5c111c84be437f5805a40dda","date":"2018-12-12T02:34:44.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c111c84be437f5805a40dda/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c111c84be437f5805a40dda/","excerpt":"","text":"系统变量/新建 JAVA_HOME 变量系统变量/Path: %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;系统变量/CLASSPATH 变量: .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"adb 设备 unauthorized","slug":"history/tech/5c111b9abe437f5805a40dd9","date":"2018-12-12T02:30:50.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c111b9abe437f5805a40dd9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c111b9abe437f5805a40dd9/","excerpt":"","text":"12adb kill-serveradb start-server","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Android Studio 默认安装路径","slug":"history/tech/5c111a2dbe437f5805a40dd8","date":"2018-12-12T02:24:45.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c111a2dbe437f5805a40dd8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c111a2dbe437f5805a40dd8/","excerpt":"","text":"123Android Studio 默认安装路径：C:\\Program Files\\Android\\Android StudioSDK 默认安装路径：C:\\Users\\计算机用户名\\AppData\\Local\\Android\\sdkgradle默认安装路径：C:\\Android\\Android Studio\\gradle\\m2repository\\com\\android\\tools\\build\\gradle","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows openssh","slug":"history/tech/5c0f8372be437f5805a40dd7","date":"2018-12-10T21:29:22.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c0f8372be437f5805a40dd7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c0f8372be437f5805a40dd7/","excerpt":"","text":"下载 opensshhttps://github.com/PowerShell/Win32-OpenSSH/releases解压缩到 C:\\Program Files\\OpenSSH安装:1powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1配置SSH服务器允许Windows防火墙中的SSH服务器的传入连接：控制面板 &gt; 系统和安全 &gt; Windows防火墙1 &gt; 高级设置 &gt; 入站规则 ，然后为端口22添加新规则。启动服务和/或配置自动启动：控制面板&gt;系统和安全&gt;管理工具，然后打开服务。找到OpenSSH SSH Server服务。将“ 启动类型”更改为“ 自动”并确认。单击“ 启动服务”，启动OpenSSH SSH Server 服务。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"SSH 公钥认证 Permission denied (publickey,gssapi-keyex,gssapi-with-mic).","slug":"history/tech/5c0e3780be437f5805a40dd6","date":"2018-12-09T21:53:04.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c0e3780be437f5805a40dd6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c0e3780be437f5805a40dd6/","excerpt":"","text":"123chmod 700 .sshchmod 600 .ssh/authorized_keysrestorecon -r -vv .ssh/authorized_keys如果还不行 关闭selinux/firewalld如果还不行，检查 /etc/security/access.conf 添加：1-:ALL EXCEPT root &lt;username&gt; :ALL重启或：1source /etc/security/access.conf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux mount samba","slug":"history/tech/5c0b20c6be437f5805a40dd2","date":"2018-12-08T01:39:18.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c0b20c6be437f5805a40dd2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c0b20c6be437f5805a40dd2/","excerpt":"","text":"1sudo mount -t cifs //192.168.3.2/sda1 /mnt -o username=&lt;usernmame&gt;,password=&lt;password&gt;,dir_mode=0777,file_mode=0777","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"树莓派 samba","slug":"history/tech/5c0bb8b5be437f5805a40dd5","date":"2018-12-08T00:27:33.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c0bb8b5be437f5805a40dd5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c0bb8b5be437f5805a40dd5/","excerpt":"","text":"安装1sudo apt-get install -y samba samba-common-bin配置1234567891011121314151617vim /etc/samba/smb.conf[MyNAS] # 说明信息 comment = NAS Storage # 可以访问的用户 valid users = pi,root # 共享文件的路径,raspberry pi 会自动将连接到其上的外接存储设备挂载到/media/pi/目录下。 path = /media/pi/ # 可被其他人看到资源名称（非内容） browseable = yes # 可写 writable = yes # 新建文件的权限为 664 create mask = 0664 # 新建目录的权限为 775 directory mask = 0775测试配置文件1testparm添加登陆账户并创建密码，必须是 linux 已存在的用户12sudo smbpasswd -a pisudo /etc/init.d/samba restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"树莓派修改 vnc 分辨率","slug":"history/tech/5c0bb40ebe437f5805a40dd4","date":"2018-12-08T00:07:42.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c0bb40ebe437f5805a40dd4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c0bb40ebe437f5805a40dd4/","excerpt":"","text":"1raspi-config","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 查找依赖","slug":"history/tech/5c0bab36be437f5805a40dd3","date":"2018-12-07T23:29:58.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c0bab36be437f5805a40dd3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c0bab36be437f5805a40dd3/","excerpt":"","text":"1yum whatprovides */lspci","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"笔记本 装centos 合上盖子自动挂起","slug":"history/tech/5c0a77f5be437f5805a40dd1","date":"2018-12-07T01:39:01.000Z","updated":"2020-11-29T01:42:08.775Z","comments":true,"path":"history/tech/5c0a77f5be437f5805a40dd1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c0a77f5be437f5805a40dd1/","excerpt":"","text":"12345vim /etc/systemd/logind.confHandlePowerKey=ignoreHandleSuspendKey=ignoreHandleHibernateKey=ignoreHandleLidSwitch=ignoreHandlePowerKey：按下电源键后的动作HandleSleepKey：按下挂起键后的动作HandleHibernateKey: 按下休眠键后的动作HandleLidSwitch：合上笔记本盖后待机ignore（什么都不做）poweroff（关机）reboot（重新启动）halt（关机，和poweroff有什么区别，需要手动断开电源？）suspend（待机挂起）hibernate（休眠）","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nginx basic auth","slug":"history/tech/5c056084be437f5805a40dd0","date":"2018-12-04T04:57:40.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c056084be437f5805a40dd0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c056084be437f5805a40dd0/","excerpt":"","text":"123sudo yum install -y httpd-tools # centosapt install -y apache2-utils # ubuntuhtpasswd -c /usr/local/openresty/nginx/conf/htpasswd &lt;username&gt;nginx.conf123456server &#123; ...... auth_basic &quot;Private Property&quot;; auth_basic_user_file /usr/local/openresty/nginx/conf/htpasswd; ......&#125;重启 nginx1systemctl reload nginx","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"树莓派无线转有线","slug":"history/tech/5c05428cbe437f5805a40dcf","date":"2018-12-03T02:49:48.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c05428cbe437f5805a40dcf/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c05428cbe437f5805a40dcf/","excerpt":"","text":"安装必须的软件包1apt install -y bridge-utils dnsmasq添加网桥1234brctl addbr br0brctl addif br0 eth0ifconfig br0 192.168.99.1 upifconfig eth0 0.0.0.0 up打开数据报转发12345echo 1 &gt; /proc/sys/net/ipv4/ip_forward或vim /etc/sysctl.conf+ net.ipv4.ip_forward = 1sysctl -p修改 dnsmasq 配置123vim /etc/dnsmasq.conf+ dhcp-range=192.168.99.50,192.168.99.100,255.255.255.0,12hsystemctl restart dnsmasq.service增加 iptbales 启动加载123vim /etc/network/if-pre-up.d/iptables+ #!/bin/bash+ iptables-restore &lt; /etc/iptables.rules修改 iptables12iptables -t nat -A POSTROUTING -o wlan -j MASQUERADEiptable-save &gt; /etc/iptables.rules","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 teamviewer","slug":"history/tech/5c051961be437f5805a40dce","date":"2018-12-02T23:54:09.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c051961be437f5805a40dce/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c051961be437f5805a40dce/","excerpt":"","text":"12sudo yum install -y qt5-qtdeclarative qt5-qtwebkit qt5-qtx11extras qt5-qtgraphicaleffects qt5-qtquickcontrolsrpm -ivh xxx.rpm","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ssh 端口转发","slug":"history/tech/5c04e36bbe437f5805a40dcd","date":"2018-12-02T20:03:55.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c04e36bbe437f5805a40dcd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c04e36bbe437f5805a40dcd/","excerpt":"","text":"本地端口转发本地 3000 端口流量转发到远程12-L 本地网卡地址:本地端口:目标地址:目标端口ssh -L 3000:localhost:3000 root@server 远程端口转发远程 3000 端口流量转发到本地12-R 远程网卡地址:远程端口:目标地址:目标端口ssh -R 2000:192.168.3.200:3000 root@server 动态端口转发本地 3000 端口流量转发到服务器对应端口12-D 本地网卡地址:本地端口ssh -D localhost:3000 root@server参数：12345-q :- be very quite, we are acting only as a tunnel.-T :- Do not allocate a pseudo tty, we are only acting a tunnel.-f :- move the ssh process to background, as we don’t want to interact with this ssh session directly.-N :- Do not execute remote command.-n :- redirect standard input to /dev/null.","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Shadowsocks 使用手册","slug":"history/tech/5c03be98be437f5805a40dcc","date":"2018-12-01T23:14:32.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c03be98be437f5805a40dcc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c03be98be437f5805a40dcc/","excerpt":"","text":"12345678910使用chacha20 加密类型需要安装libsodium库我使用的mac系统 使用brew 安装 brew install libsodium (其他平台Google以下即可)sslocal 启动多个不同端口的客户端无法使用 -d start 守护多个进程配合nohup的方式 启动多个不同端口的客户端 nohup sslocal -c uk.json &gt; luk.log 2&gt;&amp;1 &amp;nohup sslocal -c us.json &gt; lus.log 2&gt;&amp;1 &amp;nohup sslocal -c jp.json &gt; ljp.log 2&gt;&amp;1 &amp;以下是参考资料123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221Shadowsocks是一个轻量级socks5代理，最初用 Python 编写。Contents1 安装2 配置2.1 客户端2.1.1 命令行2.1.2 以守护进程形式运行客户端2.1.3 图形界面客户端2.1.4 配置代理2.1.4.1 浏览器配置2.2 服务端2.2.1 以命令行启动进程2.2.2 以守护进程形式运行2.2.3 多端口运行2.2.4 加密方法2.2.5 性能优化3 参阅安装可安装 shadowsocks-libev 或者 shadowsocks。配置shadowsocks以json为配置文件格式，以下是安装包中的样例：/etc/shadowsocks/config.json&#123; &quot;server&quot;:&quot;remote-shadowsocks-server-ip-addr&quot;, &quot;server_port&quot;:443, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;your-passwd&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf&quot;, &quot;fast_open&quot;:false, &quot;workers&quot;:1&#125;提示： shadowsocks: 若需同时指定多个服务端ip，使用如下例的语法&quot;server&quot;:[&quot;1.1.1.1&quot;,&quot;2.2.2.2&quot;],提示： 要找出在你的机器上运行最快的方式，可以运行这个脚本Name Explanationserver 服务端监听地址(IPv4或IPv6)server_port 服务端端口，一般为443local_address 本地监听地址，缺省为127.0.0.1 可用-b参数设置local_port 本地监听端口，一般为1080password 用以加密的密匙timeout 超时时间（秒）method 参阅 加密mode 设置为tcp或udp或tcp_and_udpfast_open 是否启用TCP-Fast-Openwokers worker数量，如果不理解含义请不要改客户端命令行运行 ss-local 启动客户端；若需指定配置文件的位置：# ss-local -c /etc/shadowsocks/config.json注意: 有用户报告无法成功在运行时加载config.json，或可尝试手动运行：# ss-local -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法配合nohup和&amp;可以使之后台运行，关闭终端也不影响：#nohup ss-local -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法 &amp;增加 -v 参数获取详细log信息以守护进程形式运行客户端注意: shadowsocks和shadowsocks-libev的systemd 系统单元使用相同的配置文件路径 （/etc/shadowsocks）Shadowsocks的systemd服务可在/etc/shadowsocks/里调用不同的conf-file.json（以conf-file为区分标志），例： 在/etc/shadowsocks/中创建了foo.json配置文件，那么执行以下语句就可以调用该配置：# systemctl start shadowsocks@foo若需开机自启动：# systemctl enable shadowsocks@foo提示： 可用journalctl -u shadowsocks@foo来查询日志；图形界面客户端安装 shadowsocks-qt5。配置代理shadowsocks客户端启动后，其他程序并不会直接应用socks5连接，可使用以下方法对其进行配置。全局代理使用Iptables (简体中文)等工具，桌面环境用户可使用桌面设置中网络设置里的代理功能。注意: 使用全局代理会使所有的连接通过shadowsocks服务器中转，一般不建议使用全局代理。另外，gnome桌面的代理设置无法正常使用。程序设置自身代理不少程序都能在其设置中添加代理，只需要在其设置中找到网络相关配置，添加socks v5代理，参照本地配置文件中的ip和port填写即可（例如浏览器的配置可参考下文#浏览器配置）。使用工具进行临时代理例如proxychains-ng（参看Proxy settings#Using a SOCKS proxy）和redsocks-gitAUR。 例如使用proxychanis代理的例子(假设你已经在/etc/proxychains.conf中配置好socks5）： proxychains firefox转换为http代理直接走socks代理有时未必是用户的期望，可使用privoxy等软件转化socks代理为http代理。可使用privoxy和squid等工具。 以Privoxy为例，编辑privoxy配置文件，添加socks5转发（不要漏下1080后面的点)： forward-socks5 / 127.0.0.1:1080 .默认监听的是本机的8188端口，即localhost:8188，可更改为监听其他端口，如 listen-address 127.0.0.1:8010提示： 如果希望网络上其他主机也能使用该privoxy配置，可以更改127.0.0.1为0.0.0.0或直接删除127.0.0.1。使用systemd启动或重启privoxy.service服务，就可以使用了。假设转化后的http代理为127.0.0.1:8010，则在终端中启动（以启动chromium为例）： $ chromium %U --proxy-server=127.0.0.1:8010浏览器配置提示： 浏览器直接使用SOCKS代理时，你可能需要使用privoxy等辅助程序，因为一般浏览器会泄漏你的DNS请求，从而减少你的匿名，参看前文#配置代理中转化为http代理一节。firefox使用扩展如foxyproxy或switchyomega等。直接在首选项-常规-网络代理中设置“手动代理配置”或者“自动代理配置的URL（PAC）”。使用“手动代理配置”，在”socks主机“栏填上shadowsocks设置的本地ip（默认127.0.0.1）和端口（默认1080），点选”SOCKS v5“，然后保存即可。 使用“自动代理配置的URL（PAC）”，可使用genpac工具生成，或者使用现成的pac如gfwlist to pac，将该页面url填入并保存即可。Chrome/Chromium使用插件如SwitchyOmega(使用方法参看SwitchyOmega-wiki服务端提示： 普通用户无需配置服务端。以命令行启动进程可使用以下方法运行：注意: 如果安装的是shadowsocks-libev则使用ss-server替代ssserver。在配置文件目录内运行在服务器上cd到config.json所在目录：运行ssserver如果想在后台一直运行，可改执行：nohup ssserver &gt; log &amp;；手动指定配置参数# ssserver -s 监听地址(通常为0.0.0.0) -p 监听端口 -k 密码 -m 加密方法 -t 超时时间（秒）配合nohup和&amp;可使之后台运行，关闭终端也不影响，例如：# nohup ssserver -s 0.0.0.0 -p 443 -k a29rw4pacnj2ahmf -m aes-192-cfb -t 600 &amp;以守护进程形式运行首先在/etc/shadowsocks/foo.json（foo是文件名，可随意更改）配置文件内填写好相关参数，然后可以使用以下方法使其以守护进程形式在后台运行：使用-d参数 # ssserver -c /etc/shadowsocks/foo.json -d start #启动 # ssserver -c /etc/shadowsocks/foo.json -d stop #停止 # ssserver -c /etc/shadowsocks/foo.json -d restart #重启使用systemd# systemctl start shadowsocks-server@foo #立即启动# systemctl enable shadowsocks-server@foo #开机自启动注意: 如果使用shadowsocks-libev，则使用shadowsocks-libev-server替代shadowsocks-server。提示： 如果使用的服务端端口号小于1024，需要修改usr/lib/systemd/system/shadowsocks-server@.service使得user=root，之后使用systemctl daemon-reload重新载入守护进程配置，即可开启监听。当然也可以用root权限运行shadowsocks，来开启端口号小于1024的监听。多端口运行注意: shadowsocks, shadowsocks-libev和shadowsocks-go-serverAUR等均支持多端口，可到Configure-Multiple-Users查看哪些版本支持多端口。将配置文件中的server_port和password配置删去，添加上&quot;port_password&quot;字段配置端口及其密码，示例：/etc/shadowsocks/foo.json&#123; &quot;server&quot;: yourip, &quot;_comment&quot;: &#123; &quot;25&quot;:&quot;me&quot;, &quot;9999&quot;: &quot;girl&quot;, &quot;520&quot;: &quot;godness&quot; &#125;, &quot;port_password&quot;: &#123; &quot;25&quot;: &quot;kexuedeshangwang&quot;, &quot;520&quot;: &quot;loveyoumygodness&quot;,, &quot;9999&quot;: &quot;forever&quot;, &#125;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;timeout&quot;: 300, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1, &quot;prefer_ipv6&quot;: false&#125;提示： 有反映多端口配置后使用systemd进行守护进程运行会失败，该情况下可使用上文-d参数的方法。加密方法注意: 默认加密方法table速度很快，但很不安全。请不要使用rc4，它不安全。推荐使用AEAD加密提示： 安装M2Crypto可略微提升加密速度，对于Python2来说，安装python2-m2crypto即可。AEAD加密:Name Alias Key Size Salt Size Nonce Size Tag SizeAEAD_CHACHA20_POLY1305 chacha20-ietf-poly1305 32 32 12 16AEAD_AES_256_GCM aes-256-gcm 32 32 12 16AEAD_AES_192_GCM aes-192-gcm 24 24 12 16AEAD_AES_128_GCM aes-128-gcm 16 16 12 16可选的加密方式：Name Key Size IV Lengthaes-128-ctr 16 16aes-192-ctr 24 16aes-256-ctr 32 16aes-128-cfb 16 16aes-192-cfb 24 16aes-256-cfb 32 16camellia-128-cfb 16 16camellia-192-cfb 24 16camellia-256-cfb 32 16chacha20-ietf 32 12不推荐加密方式：Name Key Size IV Lengthbf-cfb 16 8chacha20 32 8salsa20 32 8rc4-md5 16 16注意: 官方软件源的shadowsocks不支持全部加密方式，官方软件源Chacha20以及salsa20的支持可以安装libsodium（For salsa20 and chacha20 support） 。若对非主流加密方式有需求，可尝试aur中的shadowsocks-nodejsAUR[broken link: archived in aur-mirror]加密类别列表参见[1]。 并且可以使用[2]脚本来比较和找出在你机器上运行最快的加密方法。性能优化多用户使用的情况下，建议使用#多端口运行，尽量避免一个端口有过多用户连接。使用常用端口如25、443、21等等，GFW为减轻压力，对常用端口检查相对较少。使用python-gevent提升python的shadowsocks运行的速度。使用python-pip安装M2Crypto可略微提升加密速度；使用较弱的加密方式CR4-MD5提升加密速度（但是会降低安全程度，请根据实际使用情况考虑加密强度的选择）。优化内核参数，参看Optimizing-Shadowsocks进行设置。开启fast open降低延迟 # echo &apos;net.ipv4.tcp_fastopen = 3&apos; &gt;&gt; /etc/sysctl.d/tcp-fastopen.conf开启TCPBBR拥塞控制算法注意: 需要内核4.9及以上版本，可使用uname -r查看。警告: 该算法增加发包率从而提升流量消耗;可能消耗更多的系统资源；如果使用openvz的服务器，不建议使用bbr，据反映容易导致判定为滥用而被服务商禁用。 modprobe tcp_bbr echo &quot;tcp_bbr&quot; &gt; /etc/modules-load.d/bbr.conf echo &apos; net.core.default_qdisc=fq net.ipv4.tcp_congestion_control=bbr &apos; &gt; /etc/sysctl.d/bbr.conf sysctl -p检查: sysctl net.ipv4.tcp_available_congestion_control sysctl net.ipv4.tcp_congestion_control如果结果都有 bbr字样, 则证明你的内核已开启 bbr。 执行lsmod ，看到有tcp_bbr模块即说明 bbr 已启动。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://wangxiuwen.github.io/tags/Shadowsocks/"}],"author":"baipeng"},{"title":"阿里云磁盘挂载","slug":"history/tech/5c03bd4ebe437f5805a40dcb","date":"2018-12-01T23:09:02.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c03bd4ebe437f5805a40dcb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c03bd4ebe437f5805a40dcb/","excerpt":"","text":"123456789fdisk -lfdisk /dev/vdb n p 1mkfs.ext4 /dev/vdb1echo /dev/vdb1 /opt ext4 defaults 0 0 &gt;&gt; /etc/fstabmount -adf -Thl","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go mod","slug":"history/tech/5c038e1cbe437f5805a40dca","date":"2018-12-01T19:47:40.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c038e1cbe437f5805a40dca/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c038e1cbe437f5805a40dca/","excerpt":"","text":"说明1golang1.5 引入 `vendor` 机制，使用 `dep` 管理依赖。golang1.11 后，如果当前目录里有 `go.mod`，就使用 `go modules`，否则使用旧的 `GOPATH` 和 `vendor` 机制。如果你想直接使用 `modules` 而不需要从 `GOPATH` 过度，那么把环境变量 `GO111MODULE` 设置为 `on`（默认值为 `auto` ）。`modules` 和传统的 `GOPATH` 不同，不需要包含例如 `src`，`bin` 这样的子目录，一个源代码目录甚至是空目录都可以作为`module`，只要其中包含有 `go.mod` 文件。GO111MODULE有三种类型：123on 所有的构建，都使用Module机制off 所有的构建，都不使用Module机制，而是使用GOPATH和Vendorauto 在GOPATH下的项目，不使用Module机制，不在GOPATH下的项目使用和dep区别12dep是解析所有的包引用，然后在$GOPATH/pkg/dep下进行缓存，再在项目下生成vendor，然后基于vendor来构建项目，无法脱离GOPATH，因为vendor必须在GOPATH下才能使用mod是解析所有的包引用，然后在$GOPATH/pkg/mod下进行缓存，直接基于缓存包来构建项目，所以可以脱离GOPATH go mod 的使用初始化 modules:1go mod init [project name] // 例：go mod init gitlab.xxx.com/group/projecttidy 对当前引用的再一次整理，添加缺失，去掉多余，并且将包下载放入cache:1go mod tidy生成 vendor:1go mod vendor编译默认会使用最新的包版本，如果包打过tag，那么就会使用最新的那个tag对应的版本1go build只读模式下任何会导致依赖关系变动的情况都将导致build失败:1go build -mod=readonly检查依赖关系的变动:1go build -mod=vendor本地包引用还是推荐使用 vendor 的方式，1replace golang.org/x/sys =&gt; github.com/golang/sysreplace 指令的使用123// 如果old里的@v缺省的话，那就代表所有版本，如果new里的@v缺省的话，就表示使用的是本地引用，应该使用本地绝对路径来表示go mod edit -replace=old[@v]=new[@v]go mod edit -dropreplace=old[@v]例：12go mod edit -replace=gitlab.com/group/project=/home/user/workspace/group/projectgo mod edit -replace=gitlab.com/group/project@master=/home/user/workspace/group/project引用：https://www.cnblogs.com/apocelipes/archive/2018/08/25/9534885.htmlhttps://blog.vgmdj.cn/post/go语言学习-module机制/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"go","slug":"go","permalink":"https://wangxiuwen.github.io/tags/go/"},{"name":"modules","slug":"modules","permalink":"https://wangxiuwen.github.io/tags/modules/"}],"author":"wangxiuwen"},{"title":"centos vncserver","slug":"history/tech/5c00c454be437f5805a40dc9","date":"2018-11-29T17:02:12.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5c00c454be437f5805a40dc9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5c00c454be437f5805a40dc9/","excerpt":"","text":"安装1yum install -y tigervnc-server 修改密码:1vncpasswd systemd 配置文件vim /etc/systemd/system/vncserver@:1.service1234567891011121314[Unit]Description=Remote desktop service (VNC)After=syslog.target network.target[Service]Type=forkingUser=rootExecStartPre=-/usr/bin/vncserver -kill %iExecStart=/usr/sbin/runuser -l root -c &quot;/usr/bin/vncserver -alwaysshared %i -geometry 1024x768&quot;ExecStop=-/usr/bin/vncserver -kill %iPIDFile=/root/.vnc/%H%i.pid[Install]WantedBy=multi-user.target","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 使用 robot 3t 提示缺少 GLIBC_2.18 解决方案","slug":"history/tech/5bfe17ce95165f292938e0f5","date":"2018-11-28T04:21:34.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfe17ce95165f292938e0f5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfe17ce95165f292938e0f5/","excerpt":"","text":"12345678curl -O http://ftp.gnu.org/gnu/glibc/glibc-2.18.tar.gztar zxf glibc-2.18.tar.gz cd glibc-2.18/mkdir buildcd build/../configure --prefix=/usrmake -j4make install","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 snap","slug":"history/tech/5bfea40295165f292938e0f7","date":"2018-11-28T02:19:46.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfea40295165f292938e0f7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfea40295165f292938e0f7/","excerpt":"","text":"12345sudo yum install -y epel-releasesudo yum install -y yum-plugin-coprsudo yum copr -y enable ngompa/snapcore-el7sudo yum -y install snapdsudo systemctl enable --now snapd.socket","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"gnome 截图到剪切版","slug":"history/tech/5bfe29fd95165f292938e0f6","date":"2018-11-27T17:39:09.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfe29fd95165f292938e0f6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfe29fd95165f292938e0f6/","excerpt":"","text":"12系统设置/键盘/快捷键/自定义快捷键gnome-screenshot -ac","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux 下制作启动盘","slug":"history/tech/5bfca07c95165f292938e0ed","date":"2018-11-27T01:40:12.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfca07c95165f292938e0ed/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfca07c95165f292938e0ed/","excerpt":"","text":"运行gparted在U盘上创建 msdos 分区表管理分区标识 boot(启动分区)安装 grub sudo grub-install --target=i386-pc --boot-directory=&quot;/run/media/wangxiuwen/&lt;device name&gt;/&quot; /dev/sdc - 拷贝 iso 内容到 U盘","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"chrome 控制台引入 jquery","slug":"history/tech/5bfd401195165f292938e0f4","date":"2018-11-27T01:01:05.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfd401195165f292938e0f4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfd401195165f292938e0f4/","excerpt":"","text":"1234var script = document.createElement(&apos;script&apos;)script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;)script.setAttribute(&quot;src&quot;, &apos;http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js&apos;)document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"your setuptools is too old","slug":"history/tech/5bfc83ba95165f292938e0ec","date":"2018-11-26T23:37:30.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfc83ba95165f292938e0ec/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfc83ba95165f292938e0ec/","excerpt":"","text":"问题：1setuptools_scm.version.SetuptoolsOutdatedWarning: your setuptools is too old (&lt;12)解决：1sudo pip install --upgrade setuptools","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cgit nginx 安装配置","slug":"history/tech/5bfc82c095165f292938e0eb","date":"2018-11-26T23:33:20.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfc82c095165f292938e0eb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfc82c095165f292938e0eb/","excerpt":"","text":"cgit 编译安装1234git clone https://git.zx2c4.com/cgitmake get-gitmakemake install 安装 高亮插件1yum install -y highlight 配置高亮123456789vim /usr/local/lib/cgit/filters/syntax-highlighting.sh# This is for version 2# 注释这行#exec highlight --force -f -I -X -S &quot;$EXTENSION&quot; 2&gt;/dev/null# This is for version 3# 解注释这行exec highlight --force -f -I -O xhtml -S &quot;$EXTENSION&quot; 2&gt;/dev/null 配置 cgit css12345678910111213141516171819vim /var/www/htdocs/cgit/cgit.cssbody.hl &#123; background-color:#e0eaee; &#125;pre.hl &#123; color:#000000; background-color:#e0eaee;font-size:10pt;font-family:&apos;Courier New&apos;,monospace;&#125;.hl.num &#123; color:#b07e00; &#125;.hl.esc &#123; color:#ff00ff; &#125;.hl.str &#123; color:#bf0303; &#125;.hl.pps &#123; color:#818100; &#125;.hl.slc &#123; color:#838183; font-style:italic; &#125;.hl.com &#123; color:#838183; font-style:italic; &#125;.hl.ppc &#123; color:#008200; &#125;.hl.opt &#123; color:#000000; &#125;.hl.ipl &#123; color:#0057ae; &#125;.hl.lin &#123; color:#555555; &#125;.hl.kwa &#123; color:#000000; font-weight:bold; &#125;.hl.kwb &#123; color:#0057ae; &#125;.hl.kwc &#123; color:#000000; font-weight:bold; &#125;.hl.kwd &#123; color:#010181; &#125; cgit 配置文件 /etc/cgitrc12345678910111213141516171819202122232425262728source-filter=/usr/local/lib/cgit/filters/syntax-highlighting.shvirtual-root=/#css logo.css=/cgit.csslogo=/cgit.png#projectscan-path=/home/git/repositorieslocal-time=1#...enable-index-links=1enable-index-owner=1enable-log-filecount=1enable-log-linecount=1snapshots=tar.gz tar.bz zipenable-commit-graph=1enable-subject-links=1enable-http-clone=1enable-commit-graph=1enable-html-serving=1enable-blame=1#titleroot-title=qianrushi.org git repositories#descroot-desc=Git repositories nginx 配置文件123456789101112131415161718192021server &#123; listen 80; server_name _; root /var/www/htdocs/cgit; location ~* ^.+\\.(css|png|ico)$ &#123; expires 30d; &#125; location / &#123; index cgit.cgi; fastcgi_param SCRIPT_FILENAME $document_root/cgit.cgi; fastcgi_pass unix:/var/run/fcgiwrap.socket; fastcgi_param HTTP_HOST $server_name; fastcgi_param PATH_INFO $uri; fastcgi_param QUERY_INFO $uri; include &quot;fastcgi_params&quot;; &#125; access_log /var/log/nginx/cgit_access.log; error_log /var/log/nginx/cgit_error.log warn;&#125; fast CGI略","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Can’t open the log file Read-only file system","slug":"history/tech/5bfd08a795165f292938e0f3","date":"2018-11-26T21:04:39.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfd08a795165f292938e0f3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfd08a795165f292938e0f3/","excerpt":"","text":"报错：1Can’t open the log file: Read-only file system解决123vim /etc/systemd/system/redis.serviceReadOnlyDirectories=/ReadWriteDirectories=-/usr/local/redis/var","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"install gparted on centos7","slug":"history/tech/5bfcfdc295165f292938e0f2","date":"2018-11-26T20:18:10.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfcfdc295165f292938e0f2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfcfdc295165f292938e0f2/","excerpt":"","text":"123456$&gt; su -#&gt; yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm#&gt; yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm#&gt; yum install vlc#&gt; yum install vlc-core (for minimal headless/server install)#&gt; yum install python-vlc npapi-vlc (optionals)https://www.videolan.org/vlc/download-redhat.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"install gparted on centos7","slug":"history/tech/5bfcfda995165f292938e0f1","date":"2018-11-26T20:17:45.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfcfda995165f292938e0f1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfcfda995165f292938e0f1/","excerpt":"","text":"12yum install epel-releaseyum install gparted","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"install git on centos","slug":"history/tech/5bfce0c495165f292938e0f0","date":"2018-11-26T18:14:28.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfce0c495165f292938e0f0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfce0c495165f292938e0f0/","excerpt":"","text":"12345sudo yum install -y openssl-develsudo yum install -y curl-develsudo yum install -y expat-develmake -j4sudo make install","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"install chrome on centos","slug":"history/tech/5bfce05c95165f292938e0ef","date":"2018-11-26T18:12:44.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfce05c95165f292938e0ef/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfce05c95165f292938e0ef/","excerpt":"","text":"1234567sudo yum install redhat-lsb-corewget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpmsudo yum install libXScrnSaversudo yum install libappindicator-gtk3sudo yum install liberation-fontssudo rpm -ivh google-chrome-stable_current_x86_64.rpm","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"install htop on centos","slug":"history/tech/5bfcd55895165f292938e0ee","date":"2018-11-26T17:25:44.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfcd55895165f292938e0ee/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfcd55895165f292938e0ee/","excerpt":"","text":"12345678git clone https://github.com/hishamhm/htopcd htopyum groupinstall &quot;Development Tools&quot;yum install ncurses ncurses-devel./autogen.sh./configuremakemake install","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装桌面","slug":"history/tech/5bfbcdda95165f292938e0ea","date":"2018-11-25T22:41:30.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfbcdda95165f292938e0ea/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfbcdda95165f292938e0ea/","excerpt":"","text":"123yum groupinstall -y &quot;GNOME Desktop&quot;systemctl set-default graphical.targetreboot","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mesos 资源调度","slug":"history/tech/5bfbb28595165f292938e0e9","date":"2018-11-25T20:44:53.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfbb28595165f292938e0e9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfbb28595165f292938e0e9/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"持续交付流水线","slug":"history/tech/5bfbaf7a95165f292938e0e8","date":"2018-11-25T20:31:54.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfbaf7a95165f292938e0e8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfbaf7a95165f292938e0e8/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"容错限流","slug":"history/tech/5bfbac1f95165f292938e0e7","date":"2018-11-25T20:17:35.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfbac1f95165f292938e0e7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfbac1f95165f292938e0e7/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"调用链监控","slug":"history/tech/5bfac57c95165f292938e0e6","date":"2018-11-25T03:53:32.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfac57c95165f292938e0e6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfac57c95165f292938e0e6/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"分层监控","slug":"history/tech/5bfac3f795165f292938e0e5","date":"2018-11-25T03:47:03.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfac3f795165f292938e0e5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfac3f795165f292938e0e5/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"rpc vs rest","slug":"history/tech/5bfab74895165f292938e0e4","date":"2018-11-25T02:52:56.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfab74895165f292938e0e4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfab74895165f292938e0e4/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos exfat 挂载","slug":"history/tech/5bfa8ff795165f292938e0e3","date":"2018-11-25T00:05:11.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfa8ff795165f292938e0e3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfa8ff795165f292938e0e3/","excerpt":"","text":"12yum install -y http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpmyum install -y exfat-utils fuse-exfat","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7 搭建 svn 服务","slug":"history/tech/5bfa7c2395165f292938e0e2","date":"2018-11-24T22:40:35.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfa7c2395165f292938e0e2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfa7c2395165f292938e0e2/","excerpt":"","text":"systemd 脚本：12345678910111213141516[Unit]Description=SubversionAfter=syslog.target network.target[Service]Type=forkingExecStart=/usr/bin/svnserve -d -R -r /home/svn/svn --pid-file=/var/run/svnserve.pidExecReload=/bin/kill -HUP $MAINPIDKillMode=control-groupRestart=on-failureUser=rootGroup=rootWorkingDirectory=/home/svn/[Install]WantedBy=multi-user.target 权限： 关闭 firewalld12systemctl stop firewalldsystemctl disable firewalld 关闭 SELINUX查看：12getenforcesestatus -v临时关闭：1setenforce 0重启生效：12vim /etc/selinux/configSELINUX=disabled","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 giweb","slug":"history/tech/5bfa5d7095165f292938e0e1","date":"2018-11-24T20:29:36.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bfa5d7095165f292938e0e1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bfa5d7095165f292938e0e1/","excerpt":"","text":"安装 gitweb 代码1234$ git clone git://git.kernel.org/pub/scm/git/git.git$ cd git$ make GITWEB_PROJECTROOT=&quot;/opt/git&quot; prefix=/usr gitweb$ sudo cp -Rf gitweb /var/www/gitweb 安装 fastcgi1234yum install -y spawn-fcgi # fastcgi需要通过 spawn-fcgi 来启动, 也可以不安装yum install -y fcgiyum install -y fcgi-develyum install -y perl-CGI-Session 安装 fcgiwrap12345git clone https://github.com/gnosek/fcgiwrap.gitcd fcgiwrap./configuremakemake install spawn-fcgi 配置文件使用 root 用户将导致 fastcgi 无法启动123456789101112131415vim /etc/sysconfig/spawn-fcgi# You must set some working options before the &quot;spawn-fcgi&quot; service will work.# If SOCKET points to a file, then this file is cleaned up by the init script.## See spawn-fcgi(1) for all possible options.## Example :#SOCKET=/var/run/php-fcgi.sock#OPTIONS=&quot;-u apache -g apache -s $SOCKET -S -M 0600 -C 32 -F 1 -P /var/run/spawn-fcgi.pid -- /usr/bin/php-cgi&quot;FCGI_SOCKET=/var/run/fcgiwrap.socketFCGI_PROGRAM=/usr/local/sbin/fcgiwrapFCGI_USER=gitFCGI_GROUP=gitFCGI_EXTRA_OPTIONS=&quot;-M 0700&quot;OPTIONS=&quot;-u $FCGI_USER -g $FCGI_GROUP -s $FCGI_SOCKET -S $FCGI_EXTRA_OPTIONS -F 1 -P /var/run/spawn-fcgi.pid -- $FCGI_PROGRAM&quot; 配置开机启动12chkconfig spawn-fcgi on /etc/init.d/spawn-fcgi start 修改 gitweb 配置文件123456789101112vim /etc/gitweb.conf$projectroot = &quot;/home/git/repositories&quot;;@git_base_url_list= (&quot;git://192.168.3.10&quot;, &quot;http://192.168.3.10:5555&quot;);$git_temp = &quot;/home/git/.tmp&quot;;$home_text = &quot;indextext.html&quot;;@stylesheets = (&quot;gitweb.css&quot;);$javascript = &quot;gitweb.js&quot;;@diff_opts = ();$feature&#123;pathinfo&#125;&#123;default&#125; = [1];$feature&#123;&apos;highlight&apos;&#125;&#123;&apos;default&apos;&#125; = [1]; nginx 配置12345678910111213141516171819202122232425262728293031323334353637server &#123; listen 5555; server_name _; index gitweb.cgi; root /var/www/gitweb; location ~ \\.(cgi|pl).*$ &#123; gzip off; fastcgi_pass unix:/var/run/fcgiwrap.socket; fastcgi_param SCRIPT_FILENAME /var/www/gitweb/gitweb.cgi; fastcgi_param SCRIPT_NAME gitweb.cgi; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; # location ~ ^.*\\.git/objects/([0-9a-f]+/[0-9a-f]+|pack/pack-[0-9a-f]+.(pack|idx))$ &#123; # root /home/git; # &#125; # location ~ ^.*\\.git/(HEAD|info/refs|objects/info/.*|git-(upload|receive)-pack)$ &#123; # root /home/git; # fastcgi_param QUERY_STRING $query_string; # fastcgi_param SCRIPT_FILENAME /usr/libexec/git-core/git-http-backend; # fastcgi_param GIT_HTTP_EXPORT_ALL true; # fastcgi_param GIT_PROJECT_ROOT /home/git/repositories; # fastcgi_param PATH_INFO $uri; # include fastcgi_params; # fastcgi_pass unix:/var/run/fcgiwrap.socket; # &#125; try_files $uri @gitweb; location @gitweb &#123; fastcgi_pass unix:/var/run/fcgiwrap.socket; fastcgi_param SCRIPT_FILENAME /var/www/gitweb/gitweb.cgi; fastcgi_param PATH_INFO $uri; fastcgi_param GITWEB_CONFIG /etc/gitweb.conf; include fastcgi_params; &#125; error_log /var/log/nginx/git.error.log; access_log /var/log/nginx/git.access.log;&#125;gitweb 只是git repos的浏览器, 它并不提供克隆，但是可以用 snapshort 下载代码。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"CentOS 7 安装 MariaDB","slug":"history/tech/5bf9105395165f292938e0e0","date":"2018-11-23T20:48:19.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf9105395165f292938e0e0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf9105395165f292938e0e0/","excerpt":"","text":"安装1234yum install mariadb mariadb-serversystemctl start mariadb systemctl enable mariadb mysql_secure_installation #设置root密码等相关允许远程连接1234mysql -uroot -puse mysql;update user set host = &apos;%&apos; where user = &apos;root&apos;;flush privileges;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 中文乱码解决","slug":"history/tech/5bf81f4295165f292938e0df","date":"2018-11-23T03:39:46.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf81f4295165f292938e0df/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf81f4295165f292938e0df/","excerpt":"","text":"12345678910111213141516171819vim /etc/locale.confLANG=&quot;zh_CN.UTF-8&quot;LANGUAGE=&quot;zh_CN.UTF-8:zh_CN.UTF-8:zh_CN&quot;SUPPORTED=&quot;zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en&quot;SYSFONT=&quot;lat0-sun16&quot;LC_CTYPE=&quot;zh_CN.UTF-8&quot;LC_NUMERIC=&quot;zh_CN.UTF-8&quot;LC_TIME=&quot;zh_CN.UTF-8&quot;LC_COLLATE=&quot;zh_CN.UTF-8&quot;LC_MONETARY=&quot;zh_CN.UTF-8&quot;LC_MESSAGES=&quot;zh_CN.UTF-8&quot;LC_PAPER=&quot;zh_CN.UTF-8&quot;LC_NAME=&quot;zh_CN.UTF-8&quot;LC_ADDRESS=&quot;zh_CN.UTF-8&quot;LC_TELEPHONE=&quot;zh_CN.UTF-8&quot;LC_MEASUREMENT=&quot;zh_CN.UTF-8&quot;LC_IDENTIFICATION=&quot;zh_CN.UTF-8&quot;LC_ALL=zh_CN.UTF-81mount /dev/sdb1 /mnt/test -o iocharset=utf8","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ffmpeg 安装","slug":"history/tech/5bf80da695165f292938e0de","date":"2018-11-23T02:24:38.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf80da695165f292938e0de/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf80da695165f292938e0de/","excerpt":"","text":"编译安装后没有 ffplay，所以需要先编译安装 SDL下载：http://www.libsdl.org/download-2.0.php编译安装：123./configuremakemake installSDL 教程：http://kelvmiao.info/sdl-tutorial-cn/编译 ffmpeg:","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 pip","slug":"history/tech/5bf7f87895165f292938e0dd","date":"2018-11-23T00:54:16.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf7f87895165f292938e0dd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf7f87895165f292938e0dd/","excerpt":"","text":"12yum -y install epel-releaseyum -y install python-pip","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 sox 播放器","slug":"history/tech/5bf7f3a195165f292938e0dc","date":"2018-11-23T00:33:37.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf7f3a195165f292938e0dc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf7f3a195165f292938e0dc/","excerpt":"","text":"以下方式不可行！1yum install gcc-c++ libmad libmad-devel libid3tag libid3tag-devel lame lame-devel flac-devel libvorbis-devel下载http://sox.sourceforge.net/123./configuremake make install1sox xxx.mp3","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 ntfs-3g","slug":"history/tech/5bf7ea4695165f292938e0db","date":"2018-11-22T23:53:42.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf7ea4695165f292938e0db/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf7ea4695165f292938e0db/","excerpt":"","text":"123cd /etc/yum.repos.d/wget http://mirrors.aliyun.com/repo/epel-7.repoyum -y install ntfs-3g","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"openmediavault 默认密码","slug":"history/tech/5bf65d8c95165f292938e0da","date":"2018-11-21T19:41:00.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf65d8c95165f292938e0da/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf65d8c95165f292938e0da/","excerpt":"","text":"web:12账号: admin密码: openmediavaultssh:12账号: root密码: 安装时指定","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7 Minimal 网络配置","slug":"history/tech/5bf65bb795165f292938e0d9","date":"2018-11-21T19:33:11.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf65bb795165f292938e0d9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf65bb795165f292938e0d9/","excerpt":"","text":"12nmcli dnmtui","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"sqlite ui","slug":"history/tech/5bf4f8e195165f292938e0d8","date":"2018-11-20T18:19:13.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf4f8e195165f292938e0d8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf4f8e195165f292938e0d8/","excerpt":"","text":"https://sqlitestudio.pl/index.rvthttps://sqliteadmin.orbmu2k.de","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"树莓派修改 vnc 分辨率","slug":"history/tech/5bf4130595165f292938e0d7","date":"2018-11-20T01:58:29.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf4130595165f292938e0d7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf4130595165f292938e0d7/","excerpt":"","text":"12raspi-configAdvanced Options/Resolution","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"struts ognl 漏洞","slug":"history/tech/5bf3becb95165f292938e0d6","date":"2018-11-19T19:59:07.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf3becb95165f292938e0d6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf3becb95165f292938e0d6/","excerpt":"","text":"https://github.com/mazen160/struts-pwnhttps://github.com/xsscx/cve-2017-5638","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"左耳朵耗子推荐书籍","slug":"history/tech/5bf3bb7b95165f292938e0d5","date":"2018-11-19T19:44:59.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf3bb7b95165f292938e0d5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf3bb7b95165f292938e0d5/","excerpt":"","text":"C 程序设计语言Unix 编程艺术UNIX 环境高级编程UNIX 网络编程Windows 核心编程TCP/IP 详解代码大全程序员修练之道计算机的构造和解释算法导论设计模式重构人月神话代码整洁之道Effective C++More Effective C++Effective JavaC++ 软件性能优化Agner Fog 其它几本和性能调优相关的书：https://www.agner.org/optimize/1234567Optimizing subroutines in assembly language: An optimization guide for x86platformsThe microarchitecture of Intel, AMD and VIA CPUs: An optimization guide forassembly programmers and compiler makersInstruction tables: Lists of instruction latencies, throughputs and micro-operationbreakdowns for Intel, AMD and VIA CPUsCalling conventions for different C++ compilers and operating systems其他名词：Google Cloud SpannerQuora","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"shadowsocks添加用户自定义规则代理Discord","slug":"history/share/5bf268791e8a2e6701dff729","date":"2018-11-18T19:38:33.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/share/5bf268791e8a2e6701dff729/","link":"","permalink":"https://wangxiuwen.github.io/history/share/5bf268791e8a2e6701dff729/","excerpt":"","text":"123456789101112Discord提供了很好的语音体验和开放的Bot api。虽Discord不在某list内，但因地区而体验差异较大，尤其打开经常update无限转圈，还是挂个代理食用更加。Windows下鼠标右键底部托盘中的ss图标，添加用户自定义规则，在打开的记事本里面填上：macOS下找到状态栏的ss图标，添加用户自定义规则，在打开的文本框里面填上：||discordapp.comdiscord.ggdiscord.mediadiscordapp.net保存再退出，然后更新PAC文件，记得重启Discord。","categories":[{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"share","slug":"share","permalink":"https://wangxiuwen.github.io/tags/share/"},{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/tags/%E5%88%86%E4%BA%AB/"}],"author":"baipeng"},{"title":"树莓派装docker","slug":"history/tech/5bf266c21e8a2e6701dff728","date":"2018-11-18T19:31:14.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bf266c21e8a2e6701dff728/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bf266c21e8a2e6701dff728/","excerpt":"","text":"1https://download.docker.com/linux/static/stable/armhf/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux virtualbox usb 不可用","slug":"history/tech/5bee3d881e8a2e6701dff726","date":"2018-11-16T03:46:16.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bee3d881e8a2e6701dff726/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bee3d881e8a2e6701dff726/","excerpt":"","text":"1https://www.virtualbox.org12yum install -y kernel-devel/sbin/vboxconfigusb 不可用必须从BIOS设置启用Hardware Virtualization VT-d / AMD-V安装VirtualBox扩展包12https://www.virtualbox.orgVirtualBox Extension Pack在系统引导时使vboxdrv模块自动加载12vim /etc/modules-load.d/virtualbox.confvboxdrv必须将Arch Linux登录用户添加到“vboxusers”系统组。这样做是让普通用户使用VirtualBox及其所有功能。否则，在运行VirtualBox时会看到许多限制。1sudo usermod -aG vboxusers YOUR_USER_NAME_HERE卸载 Virtualbox:1sudo ./VirtualBox-5.2.22-126460-Linux_amd64.run uninstall引用https://linuxhint.com/install-virtualbox-arch-linux/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"树莓派改游戏机","slug":"history/tech/5bee72aa1e8a2e6701dff727","date":"2018-11-15T19:32:58.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bee72aa1e8a2e6701dff727/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bee72aa1e8a2e6701dff727/","excerpt":"","text":"RetroPie","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"manjaro 自动休眠","slug":"history/tech/5bec0d3e1e8a2e6701dff725","date":"2018-11-13T23:55:42.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bec0d3e1e8a2e6701dff725/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bec0d3e1e8a2e6701dff725/","excerpt":"","text":"https://unix.stackexchange.com/questions/437501/prevent-desktop-arch-linux-box-from-sleeping","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"pyenv","slug":"history/tech/5bebcd4e1e8a2e6701dff724","date":"2018-11-13T19:22:54.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bebcd4e1e8a2e6701dff724/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bebcd4e1e8a2e6701dff724/","excerpt":"","text":"安装1curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash1234vim ~/.zshrcexport PATH=&quot;/home/wangxiuwen/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init -)&quot;eval &quot;$(pyenv virtualenv-init -)&quot;centos 执行 pyenv install 3.6.6 报错：1234WARNING: The Python bz2 extension was not compiled. Missing the bzip2 lib?WARNING: The Python readline extension was not compiled. Missing the GNU readline lib?WARNING: The Python sqlite3 extension was not compiled. Missing the SQLite3 lib?Installed Python-3.6.6 to /root/.pyenv/versions/3.6.6解决：centos 需要安装依赖1234yum install readline readline-devel readline-static -yyum install openssl openssl-devel openssl-static -yyum install sqlite-devel -yyum install bzip2-devel bzip2-libs -y查看正在使用的 python 版本:1pyenv versions查看可安装的列表1pyenv install -l安装/卸载12pyenv install 3.6.6 pyenv uninstall 3.6.6python 切换12$ pyenv global 2.7.3 # 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。$ pyenv local 2.7.3 # 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。pyenv-virtualenv使用自动安装 pyenv 后,会自动安装 virtualenv创建虚拟环境1pyenv virtualenv 2.7.10 tensorflow-2.7.0当前虚拟环境123pyenv virtualenvs # 列出pyenv activate env-namepyenv deactivate删除虚拟环境12pyenv uninstall my-virtual-envrm -rf ~/.pyenv/versions/env-name # 或者删除其真实目录","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"macports  command not found port","slug":"history/tech/5be80b2d1e8a2e6701dff723","date":"2018-11-10T22:57:49.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5be80b2d1e8a2e6701dff723/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5be80b2d1e8a2e6701dff723/","excerpt":"","text":"报错1macports command not found: port解决:12vim ~/.zshrcexport PATH=/opt/local/bin:/opt/local/sbin:$PATH","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spark MongoDB 读取大集合文档 schema缺失字段","slug":"history/tech/5be583a29a6b9e854693698b","date":"2018-11-09T00:54:58.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5be583a29a6b9e854693698b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5be583a29a6b9e854693698b/","excerpt":"","text":"1场景：使用Spark 读取MongoDB中的集合数据，由于文档比较大。mongo-spark-connector 插件默认选择 1000条了推断schema 导致缺失字段。1解决办法1：最懒的办法。先查询出来需要读取的数据count,然后在查一下设置sampleSize的大小。可以搞定1234567解决办法2：获取要查询的字段的list，自己定义schema var schemaString = Joiner.on(&quot; &quot;).join(lists) println(schemaString) // 定义schema val schema = StructType(schemaString.split(&quot; &quot;).map(fieldName =&gt; StructField(fieldName.split(&quot;:&quot;)(0), if (fieldName.split(&quot;:&quot;)(1).equals(&quot;String&quot;)) StringType else IntegerType, true))) val df = spark.createDataFrame(d.rdd, schema)1234解决办法3：定义结构类 case class Creature(name: String, strength: Int, type: String) val explicitDF = MongoSpark.load[Creature](sparkSession)() explicitDF.printSchema()","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"boost  1_68_0 编译","slug":"history/tech/5be2e7909a6b9e854693698a","date":"2018-11-07T01:24:32.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5be2e7909a6b9e854693698a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5be2e7909a6b9e854693698a/","excerpt":"","text":"bootstrap1./bootstrap.sh --with-libraries=all --with-toolset=gcc ##--with-libraries指定编译哪些boost库，all的话就是全部编译，只想编译部分库的话就把库的名称写上，之间用 , 号分隔即可，可指定的库下面介绍。--with-toolset指定编译时使用哪种编译器，Linux下使用gcc即可，如果系统中安装了多个版本的gcc，在这里可以指定gcc的版本，比如--with-toolset=gcc-4.4编译1./b2 toolset=gcc安装1./b2 install --prefix=/usr链接1ldconfig报错1致命错误：pyconfig.h：没有那个文件或目录解决1export CPLUS_INCLUDE_PATH=&quot;$CPLUS_INCLUDE_PATH:/usr/include/python2.7/&quot;庆祝一下！1The Boost C++ Libraries were successfully built!","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mount unknown filesystem type 'LVM2_member'","slug":"history/tech/5be2c9129a6b9e8546936989","date":"2018-11-06T23:14:26.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5be2c9129a6b9e8546936989/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5be2c9129a6b9e8546936989/","excerpt":"","text":"报错:1mount: unknown filesystem type &apos;LVM2_member&apos;安装1sudo pacman -Syy lvm2查看物理卷1pvs查看卷组1vgs查看逻辑卷1lvdisplay需要激活逻辑卷1vgchange -ay /dev/ubuntu-gnome-vg挂载逻辑卷1sudo mount /dev/ubuntu-gnome-vg/root /mnt","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"echo 不换行","slug":"history/tech/5bd98a0d9a6b9e8546936988","date":"2018-10-30T22:55:09.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bd98a0d9a6b9e8546936988/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bd98a0d9a6b9e8546936988/","excerpt":"","text":"1echo -e &quot;123\\c&quot;12-e 启用解释反斜杠的转义功能\\c 不换行","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"树莓派安装 openfortivpn","slug":"history/tech/5bd3f7679a6b9e8546936987","date":"2018-10-26T17:28:07.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bd3f7679a6b9e8546936987/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bd3f7679a6b9e8546936987/","excerpt":"","text":"更换国内源https://blog.csdn.net/zhou_yongzhe/article/details/80028865安装编译依赖12apt install autoconfapt install libssl-devlibssl-dev 在 centos 上面对应的包名为 openssl-devel安装运行依赖123modprobe pppmodprobe ppp_asyncapt install ppp检出代码编译12345git clone https://github.com/adrienverge/openfortivpn.git./autogen.sh./configure --prefix=/usr/local --sysconfdir=/etcmakemake install连接1openfortivpn hostname:10443 -u username -p password --insecure-sslsystemd1234567891011[Unit]Description=openfortivpn serviceAfter=network.target remote-fs.target nss-lookup.target[Service]Type=simpleExecStart=/usr/local/bin/openfortivpn ssl.example.com:10443 -u &lt;username&gt; -p &lt;password&gt; --insecure-ssl[Install]WantedBy=multi-user.target","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 16.04 mount unknown filesystem type 'exfat'","slug":"history/tech/5bd12d5d9a6b9e8546936985","date":"2018-10-25T02:41:33.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bd12d5d9a6b9e8546936985/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bd12d5d9a6b9e8546936985/","excerpt":"","text":"问题:1ubuntu 16.04 mount: unknown filesystem type &apos;exfat&apos;解决:1sudo apt-get install exfat-fuse","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"sign_and_send_pubkey signing failed agent refused operation","slug":"history/tech/5bd12d239a6b9e8546936984","date":"2018-10-25T02:40:35.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bd12d239a6b9e8546936984/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bd12d239a6b9e8546936984/","excerpt":"","text":"问题:1sign_and_send_pubkey: signing failed: agent refused operation解决:12eval &quot;$(ssh-agent -s)&quot;ssh-add","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu desktop 安装 chrome","slug":"history/tech/5bd12c849a6b9e8546936983","date":"2018-10-25T02:37:56.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bd12c849a6b9e8546936983/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bd12c849a6b9e8546936983/","excerpt":"","text":"1234sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -sudo apt-get updatesudo apt-get install google-chrome-stable","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ssh -X 转发图形界面","slug":"history/tech/5bd1799d9a6b9e8546936986","date":"2018-10-24T20:06:53.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bd1799d9a6b9e8546936986/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bd1799d9a6b9e8546936986/","excerpt":"","text":"服务端配置:123vim /etc/ssh/sshd_configAllowTcpForwarding yesX11Forwarding yes客户端配置:12345678Host testUser rootHostName 127.0.0.1Port 22IdentityFile ~/.ssh/id_rsaForwardAgent yesForwardX11 yesForwardX11Trusted yes连接:1ssh -x test测试：1gedit xxx.txt","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"manjaro 安装 mysql8","slug":"history/tech/5bcfdf829a6b9e8546936981","date":"2018-10-24T02:57:06.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcfdf829a6b9e8546936981/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcfdf829a6b9e8546936981/","excerpt":"","text":"安装:1sudo pacman -Syy mysql初始化:1mysqld --initialize --user=mysql --basedir=/usr --datadir=/data/mysql输出：12342018-10-24T02:50:36.847221Z 0 [Warning] [MY-010915] [Server] &apos;NO_ZERO_DATE&apos;, &apos;NO_ZERO_IN_DATE&apos; and &apos;ERROR_FOR_DIVISION_BY_ZERO&apos; sql modes should be used with strict mode. They will be merged with strict mode in a future release.2018-10-24T02:50:36.847280Z 0 [System] [MY-013169] [Server] /usr/bin/mysqld (mysqld 8.0.12) initializing of server in progress as process 209672018-10-24T02:50:42.842042Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: lukgZCev*3To2018-10-24T02:50:45.684453Z 0 [System] [MY-013170] [Server] /usr/bin/mysqld (mysqld 8.0.12) initializing of server has completed启动:1systemctl start mysqld使用临时密码登录并修改密码:123mysql -u root -p&gt;ALTER user &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;&gt;flush privileges;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"manjaro 安装 mysql 5.7","slug":"history/tech/5bd0237b9a6b9e8546936982","date":"2018-10-23T19:47:07.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bd0237b9a6b9e8546936982/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bd0237b9a6b9e8546936982/","excerpt":"","text":"下载https://www.mysql.com/downloads/1wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz创建用户1234groupadd mysqluseradd -r -g mysql mysqlchown -R mysql mysql/chgrp -R mysql mysql/初始化必要的目录12sudo mkdir /var/log/mysqlsudo chown mysql:mysql /var/log/mysql配置文件1gedit /etc/mysql/my.cnf12345678910111213141516171819202122232425[client]default-character-set=utf8port = 3306socket = /tmp/mysql.sock[mysql]default-character-set=utf8port = 3306socket = /tmp/mysql.sock[mysqld]character_set_server=utf8init_connect=&apos;SET NAMES utf8&apos;basedir=/usr/local/mysqldatadir=/usr/local/mysql/datasocket=/tmp/mysql.socklog-error=/var/log/mysql/mysqld.logpid-file=/var/run/mysqld/mysqld.pid#不区分大小写lower_case_table_names = 1sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTIONmax_connections=5000default-time_zone = &apos;+8:00&apos;# skip-grant-tables初始化数据库1/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql启动1/usr/local/mysql/support-files/mysql.server start未完待续参考:1https://www.cnblogs.com/ralap7/p/9034879.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"警告：无法解决 “libidn11″，”fcitx-sogoupinyin” 的一个依赖关系","slug":"history/tech/5bcd57419a6b9e854693697a","date":"2018-10-22T04:51:13.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd57419a6b9e854693697a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd57419a6b9e854693697a/","excerpt":"","text":"下载库安装即可，地址如下：https://www.archlinux.org/packages/community/x86_64/libidn11/参考资料:https://www.manjaro.cn/bbs/topic/manjaro-无法满足依赖关系-libidn11-被fctix-sogoupinyin-所需要","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"git 从远程仓库获取所有分支","slug":"history/tech/5bcd4e359a6b9e8546936979","date":"2018-10-22T04:12:37.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd4e359a6b9e8546936979/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd4e359a6b9e8546936979/","excerpt":"","text":"123git branch -r | grep -v &apos;\\-&gt;&apos; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; donegit fetch --allgit pull --allhttp://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"python 发送邮件 yagmail","slug":"history/tech/5bcd809b9a6b9e8546936980","date":"2018-10-21T19:47:39.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd809b9a6b9e8546936980/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd809b9a6b9e8546936980/","excerpt":"","text":"1sudo pip3 install yagmail","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"face_recognition 安装","slug":"history/tech/5bcd7bef9a6b9e854693697f","date":"2018-10-21T19:27:43.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd7bef9a6b9e854693697f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd7bef9a6b9e854693697f/","excerpt":"","text":"dlib 编译安装123git clone https://github.com/davisking/dlib.gitcd dlibpython setup.py install opencv-python 安装1sudo pip3 install opencv-pythonhttp://dlib.net/compile.html face_recognition 安装1pip3 install face_recognition","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"卸载 wine 安装的软件","slug":"history/tech/5bcd5fb79a6b9e854693697e","date":"2018-10-21T17:27:19.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd5fb79a6b9e854693697e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd5fb79a6b9e854693697e/","excerpt":"","text":"1wine uninstaller","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"journalctl 清理日志","slug":"history/tech/5bcd5c2d9a6b9e854693697d","date":"2018-10-21T17:12:13.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd5c2d9a6b9e854693697d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd5c2d9a6b9e854693697d/","excerpt":"","text":"1journalctl --vacuum-size=500M","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"manjaro perf","slug":"history/tech/5bcd5bb29a6b9e854693697c","date":"2018-10-21T17:10:10.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd5bb29a6b9e854693697c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd5bb29a6b9e854693697c/","excerpt":"","text":"12sudo pacman -Syy perfperf top","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"manjaro sysstat","slug":"history/tech/5bcd5b249a6b9e854693697b","date":"2018-10-21T17:07:48.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcd5b249a6b9e854693697b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcd5b249a6b9e854693697b/","excerpt":"","text":"1234sudo pacman -Syy sysstatvim /etc/default/sysstatENABLED=&quot;true&quot;sudo service sysstat restart1sar -u 3 100","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ssh_exchange_identification Connection closed by remote host","slug":"history/tech/5bcc30c69a6b9e8546936978","date":"2018-10-20T19:54:46.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bcc30c69a6b9e8546936978/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bcc30c69a6b9e8546936978/","excerpt":"","text":"报错:1ssh_exchange_identification: Connection closed by remote host解决:123vim /etc/ssh/sshd_config#MaxStartups 10:30:100MaxStartups 15:30:10010：30：100表示的意思是，从第10个连接开始，以30%的概率（递增）拒绝新的连接，直到连接数达到100","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"rm 恢复误删文件","slug":"history/tech/5bc0928f9a6b9e8546936977","date":"2018-10-12T00:24:47.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bc0928f9a6b9e8546936977/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bc0928f9a6b9e8546936977/","excerpt":"","text":"12sudo apt-get install extundeletesudo extundelete /dev/vdb1 --restore-all","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"elasticsearch 三种日期查询方式","slug":"history/tech/5bc091799a6b9e8546936976","date":"2018-10-12T00:20:09.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bc091799a6b9e8546936976/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bc091799a6b9e8546936976/","excerpt":"","text":"mapping:1234567891011121314151617181920&#123; &quot;mappings&quot;: &#123; &quot;xxx_profile&quot;: &#123; &quot;dynamic&quot;: &quot;false&quot;, &quot;_all&quot;: &#123; &quot;enabled&quot;: true &#125;, &quot;properties&quot;: &#123; &quot;xxx_time&quot;: &#123; &quot;type&quot;: &quot;date&quot;, &quot;fields&quot;: &#123; &quot;keyword&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125; &#125; &#125; &#125; &#125; &#125;&#125; 查询方式１:1234567891011121314151617181920212223&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;range&quot;: &#123; &quot;xxx_time&quot;: &#123; &quot;gte&quot;: &quot;2018-09-16 00:00:00&quot;, &quot;lt&quot;: &quot;2018-09-17 00:00:00&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;, &quot;time_zone&quot;: &quot;+08:00&quot; &#125; &#125; &#125; ], &quot;must_not&quot;: [], &quot;should&quot;: [] &#125; &#125;, &quot;from&quot;: 0, &quot;size&quot;: 10, &quot;sort&quot;: []&#125; 查询方式２:123456789101112131415161718192021&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;range&quot;: &#123; &quot;xxx_time.keyword&quot;: &#123; &quot;gte&quot;: &quot;2018-09-16&quot;, &quot;lt&quot;: &quot;2018-09-17&quot; &#125; &#125; &#125; ], &quot;must_not&quot;: [], &quot;should&quot;: [] &#125; &#125;, &quot;from&quot;: 0, &quot;size&quot;: 10, &quot;sort&quot;: []&#125; 查询方式３:1234567891011&#123; &quot;query&quot;: &#123; &quot;wildcard&quot;: &#123; &quot;xxx_time.keyword&quot;: &quot;*2018-09-16*&quot; &#125; &#125;, &quot;from&quot;: 0, &quot;size&quot;: 10, &quot;sort&quot;: []&#125; 对应 mongodb 查询方式:方式１：123456&#123; &quot;xxx_time&quot;: &#123; $gte: &quot;2018-09-16 00:00:00&quot;, $lte: &quot;2018-09-16 20:00:00&quot; &#125;&#125;方式２:123&#123; &quot;xxx_time&quot;:/2018-09-16/&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mongodb 误删某个数据库文件夹,　导致数据库无法启动处理","slug":"history/tech/5bc0753f9a6b9e8546936975","date":"2018-10-11T22:19:43.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bc0753f9a6b9e8546936975/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bc0753f9a6b9e8546936975/","excerpt":"","text":"安装必要的库12apt install libsnappy-devapt install zlib1g-dev 安装 wiredtiger 工具包123./configure --enable-snappy --enable-zlib --prefix=/usr/local/wiredtigermake -j8make install 查看库名1wt -v -h /data/mongodb/db/ -C &quot;extensions=[/usr/local/wiredtiger/lib/libwiredtiger_snappy.so, /usr/local/wiredtiger/lib/libwiredtiger_zlib.so]&quot; list dump 出某个 collection 的数据1wt -v -h /data/mongodb/db/ -C &quot;extensions=[/usr/local/wiredtiger/lib/libwiredtiger_snappy.so, /usr/local/wiredtiger/lib/libwiredtiger_zlib.so]&quot; -R dump -f test.dump test/collection/304--4723424148269970486 导入另外一个实例在另外一个可启动的实例 foo 中创建数据库和集合，这个集合为临时集合，作为导入导出数据使用123456root@test:~# tree /data/mongodb-27017//data/mongodb-27017/└── db ├── test │ ├── collection │ │ └── 0--7048601165654010388.wt导出元数据，并导入到 foo 中，获取 物理文件和 collection 的对应关系1234567wt -v -h /data/mongodb/db/ \\ -C &quot;extensions=[/usr/local/wiredtiger/lib/libwiredtiger_snappy.so, /usr/local/wiredtiger/lib/libwiredtiger_zlib.so]&quot; \\ -R dump -f _mdb_catalog.dump table:_mdb_catalogwt -v -h /data/mongodb-27017/db/ \\ -C &quot;extensions=[/usr/local/wiredtiger/lib/libwiredtiger_snappy.so, /usr/local/wiredtiger/lib/libwiredtiger_zlib.so]&quot; \\ -R load -f ./_mdb_catalog.dump -r test/collection/7--7048601165654010388清理掉元数据后，将要恢复的数据数据导入123wt -v -h /data/mongodb-27017/db/ \\ -C &quot;extensions=[/usr/local/wiredtiger/lib/libwiredtiger_snappy.so, /usr/local/wiredtiger/lib/libwiredtiger_zlib.so]&quot; \\ -R load -f ./1.dump -r test/collection/0--7048601165654010388需要将要恢复的数据导入再导出，集合信息才能显示正常1/usr/local/mongodb/3.6/bin/mongodump --archive --db test | /usr/local/mongodb/3.6/bin/mongorestore --archive --nsFrom &quot;test.*&quot; --nsTo &quot;test_reimport.*&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 安装 zlib","slug":"history/tech/5bc044f59a6b9e8546936974","date":"2018-10-11T18:53:41.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bc044f59a6b9e8546936974/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bc044f59a6b9e8546936974/","excerpt":"","text":"1apt install zlib1g-dev","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux 使用 pigz 多线程压缩","slug":"history/tech/5bbf09289a6b9e8546936973","date":"2018-10-10T20:26:16.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bbf09289a6b9e8546936973/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bbf09289a6b9e8546936973/","excerpt":"","text":"12apt install -y pigztar cvf - $&#123; compress_dir &#125;/* | pigz -9 &gt; $&#123; compressedname &#125;.tar.gz","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"crontab 等待上一次结束再执行下一次的任务","slug":"history/tech/5bbf08c19a6b9e8546936972","date":"2018-10-10T20:24:33.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bbf08c19a6b9e8546936972/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bbf08c19a6b9e8546936972/","excerpt":"","text":"12# m h dom mon dow command* * * * * flock -xn /tmp/dump.lock -c &quot;/bin/bash /root/.sh/mongodump.sh&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 没有　passwd --stdin","slug":"history/tech/5bbdac259a6b9e8546936971","date":"2018-10-09T19:37:09.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5bbdac259a6b9e8546936971/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5bbdac259a6b9e8546936971/","excerpt":"","text":"ubuntu 没有 passwd --stdin解决:1ansible all -m shell -a &quot;echo &apos;username:password&apos;| chpasswd&quot;password 中有符号解决:ansible all -m shell -a &quot;echo 'username:pass\\$word'| chpasswd&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"systemctl 列表","slug":"history/tech/5ba4cd6cae2eaa9c4e941ab4","date":"2018-09-20T22:52:28.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba4cd6cae2eaa9c4e941ab4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba4cd6cae2eaa9c4e941ab4/","excerpt":"","text":"1234systemctl list-unit-files | grep enabledsystemctl list-unit-files --state=enabledsystemctl list-units --type=service --state=runningsystemctl list-units --type=service --state=active","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"manjarno  折腾记录","slug":"history/tech/5ba48a80ae2eaa9c4e941ab3","date":"2018-09-20T18:06:56.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba48a80ae2eaa9c4e941ab3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba48a80ae2eaa9c4e941ab3/","excerpt":"","text":"切换中国镜像源1pacman-mirrors --country China 添加archlinuxCN源1234vim /etc/pacman.conf[archlinuxcn]SigLevel = Optional TrustedOnlyServer =https://mirrors.ustc.edu.cn/archlinuxcn/$arch 更新系统1sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring 安装 git1sudo pacman -S git 安装 terminator1sudo pacman -S terminator 安装 vim1sudo pacman -S vim 安装spf13-vim配置1curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh 安装 vim-youcompleteme-git1sudo pacman -S vim-youcompleteme-git 安装 gimp1sudo pacman -S gimp 安装 oh-my-zsh1sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 安装 autojump123456sudo pacman -S autojumpvim ~/.zshrcplugins=( git autojump) 安装搜狗拼音输入法安装1234sudo pacman -S fcitxsudo pacman -S fcitx-imsudo pacman -S fcitx-sogoupinyinsudo pacman -S fcitx-configtool配置：12345vim ~/.xprofileexport GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot; 修改目录为英文12345678910vim ～/.config/user-dirs.dirsXDG_DESKTOP_DIR=&quot;$HOME/Desktop&quot;XDG_DOWNLOAD_DIR=&quot;$HOME/Downloads&quot;XDG_TEMPLATES_DIR=&quot;$HOME/Templates&quot;XDG_PUBLICSHARE_DIR=&quot;$HOME/Public&quot;XDG_DOCUMENTS_DIR=&quot;$HOME/Documents&quot;XDG_MUSIC_DIR=&quot;$HOME/Music&quot;XDG_PICTURES_DIR=&quot;$HOME/Pictures&quot;XDG_VIDEOS_DIR=&quot;$HOME/Videos&quot; 安装 amule1sudo pacman -S amule 安装 virtualbox1sudo pacman -S virtualbox这里需要选择与当前内核相同的内核模块比如笔者正在使用的内核版本为414(uname -r)，则需要安装linux414-virtualbox-host-modules1sudo modprobe vboxdrv 安装主题themes:https://www.gnome-look.org/icons:https://github.com/keeferrourke/la-capitaine-icon-theme.git123➜ ~ ls ~/.icons la-capitaine-icon-theme➜ ~ 安装 aria2安装1sudo pacman -S aria2配置开机启动12345678910gedit /usr/lib/systemd/system/aria2c.service[Unit]Description=aria2cAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingExecStart=/usr/bin/aria2c --conf-path=/home/wangxiuwen/.aria2/aria2.conf[Install]WantedBy=multi-user.target启动123systemctl enable aria2c.servicesystemctl start aria2c.servicesystemctl status aria2c.service安装界面123git clone https://github.com/mayswind/AriaNg.gitnpm installgulp clean builddist 文件夹即 aria2c web界面 openresty编译安装略配置12345678910111213➜ ~ cat /usr/lib/systemd/system/nginx.service[Unit]Description=nginx - high performance web serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingExecStart=/usr/local/openresty/nginx/sbin/nginx -c /usr/local/openresty/nginx/conf/nginx.confExecReload=/usr/local/openresty/nginx/sbin/nginx -s reloadExecStop=/usr/local/openresty/nginx/sbin/nginx -s stop[Install]WantedBy=multi-user.target 安装 vmwarehttps://wiki.archlinux.org/index.php/VMware_(简体中文) 安装 微信1sudo pacman -S electronic-wechat 安装网易云音乐1sudo pacman -S netease-cloud-music 安装 vlc1sudo pacman -S vlc 安装 chrome1sudo pacman -S google-chrome 蓝牙报错报错截图解决12gsettings get org.blueman.transfer shared-pathgsettings set org.blueman.transfer shared-path &apos;/home/wangxiuwen/Downloads&apos; 安装 snap12sudo pacman -Sy snapdsudo systemctl enable --now snapd.socket 安装迅雷12yaourt -Sy deepin.com.thunderspeedls $HOME/.deepinwine/Deepin-ThunderSpeed/drive_c/ 参考资料https://blog.csdn.net/aosan002/article/details/79432759https://blog.csdn.net/weixin_41301508/article/details/81193217https://www.jianshu.com/p/f2c9ee00698chttps://docs.snapcraft.io/core/install-manjaro","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"multitail 多个文件","slug":"history/tech/5ba1ce8dae2eaa9c4e941ab2","date":"2018-09-19T04:20:29.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba1ce8dae2eaa9c4e941ab2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba1ce8dae2eaa9c4e941ab2/","excerpt":"","text":"tail 只能 tail 一个文件，使用 multitail 可以同时查看多个文件12apt install multitailmultitail -i 1.log -i 2.log","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"python 报错 AttributeError  'module' object has no attribute 'SSL_ST_INIT'","slug":"history/tech/5ba1cd63ae2eaa9c4e941ab1","date":"2018-09-19T04:15:31.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba1cd63ae2eaa9c4e941ab1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba1cd63ae2eaa9c4e941ab1/","excerpt":"","text":"报错：12345678910111213141516171819root@xxx:~# pipTraceback (most recent call last): File &quot;/usr/local/bin/pip&quot;, line 7, in &lt;module&gt; from pip._internal import main File &quot;/usr/local/lib/python2.7/dist-packages/pip/_internal/__init__.py&quot;, line 42, in &lt;module&gt; from pip._internal import cmdoptions File &quot;/usr/local/lib/python2.7/dist-packages/pip/_internal/cmdoptions.py&quot;, line 16, in &lt;module&gt; from pip._internal.index import ( File &quot;/usr/local/lib/python2.7/dist-packages/pip/_internal/index.py&quot;, line 15, in &lt;module&gt; from pip._vendor import html5lib, requests, six File &quot;/usr/local/lib/python2.7/dist-packages/pip/_vendor/requests/__init__.py&quot;, line 86, in &lt;module&gt; from pip._vendor.urllib3.contrib import pyopenssl File &quot;/usr/local/lib/python2.7/dist-packages/pip/_vendor/urllib3/contrib/pyopenssl.py&quot;, line 46, in &lt;module&gt; import OpenSSL.SSL File &quot;/usr/lib/python2.7/dist-packages/OpenSSL/__init__.py&quot;, line 8, in &lt;module&gt; from OpenSSL import rand, crypto, SSL File &quot;/usr/lib/python2.7/dist-packages/OpenSSL/SSL.py&quot;, line 118, in &lt;module&gt; SSL_ST_INIT = _lib.SSL_ST_INITAttributeError: &apos;module&apos; object has no attribute &apos;SSL_ST_INIT&apos;解决：123rm -rf /usr/lib/python2.7/dist-packages/OpenSSLrm -rf /usr/lib/python2.7/dist-packages/pyOpenSSL-0.15.1.egg-infosudo pip install pyopenssl","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Chrome偶然net::ERR_CERT_DATABASE_CHANGED，","slug":"history/tech/5ba1ac4fae2eaa9c4e941ab0","date":"2018-09-19T01:54:23.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba1ac4fae2eaa9c4e941ab0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba1ac4fae2eaa9c4e941ab0/","excerpt":"","text":"1sudo rm -rf /Library/Application\\ Support/Alipay &amp;&amp; rm -rf /Library/LaunchDaemons/com.alipay.DispatcherService.plist &amp;&amp; rm -rf ~/Library/LaunchAgents/com.alipay.adaptor.plist &amp;&amp; rm -rf ~/Library/LaunchAgents/com.alipay.refresher.plist &amp;&amp; rm -rf ~/Library/Internet\\ Plug-Ins/aliedit.plugin &amp;&amp; rm -rf ~/Library/Internet\\ Plug-Ins/npalicdo.plugin","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"Spring Cloud Feign 超时设置小计","slug":"history/tech/5ba0cde5ae2eaa9c4e941aaf","date":"2018-09-17T22:05:25.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba0cde5ae2eaa9c4e941aaf/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba0cde5ae2eaa9c4e941aaf/","excerpt":"","text":"12345678设置所有的微服务 超时配置feign: client: config: default: connectTimeout: 50000 readTimeout: 50000 loggerLevel: basic12345678单独设置某个微服务的超时配置feign: client: config: server-A: # 设定server-A 服务调用的超时设置 connectTimeout: 50000 readTimeout: 50000 loggerLevel: basic1234如果以上都没有设置正确，设置Ribbon 的超时配置也是生效的。因为Feign 底层还是使用Ribbon 负载调用注册到注册中心的微服务的。ribbon: ReadTimeout: 50000 ConnectTimeout: 50000","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"ansible 终端切换用户执行命令","slug":"history/tech/5ba0b2bbae2eaa9c4e941aae","date":"2018-09-17T20:09:31.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba0b2bbae2eaa9c4e941aae/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba0b2bbae2eaa9c4e941aae/","excerpt":"","text":"1ansible hostA -S -R remoteUser -m shell -a &quot;pm2 l&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mongodb setFeatureCompatibilityVersion","slug":"history/tech/5ba0aa90ae2eaa9c4e941aad","date":"2018-09-17T19:34:40.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba0aa90ae2eaa9c4e941aad/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba0aa90ae2eaa9c4e941aad/","excerpt":"","text":"1db.adminCommand( &#123; setFeatureCompatibilityVersion: &quot;3.4&quot; &#125; )","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Spring boot 2.0 升级 jpa AbstractUUIDGenerator  实现改动","slug":"history/tech/5ba0939eae2eaa9c4e941aac","date":"2018-09-17T17:56:46.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba0939eae2eaa9c4e941aac/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba0939eae2eaa9c4e941aac/","excerpt":"","text":"123456789101112// public Serializable generate(SessionImplementor session, Object obj) &#123;//// SnowFlake snowFlake = new SnowFlake(machineId);// String id = this.tablePrefix + Long.toString(snowFlake.nextId());// return id;// &#125; @Override public Serializable generate(SharedSessionContractImplementor session, Object object) throws HibernateException &#123; String id = this.tablePrefix + Long.toString(snowFlake.nextId()); return id; &#125;2.0 一下版本使用会报错。由于generate的参数变化了，所以在动态加载函数的时候 java.lang.AbstractMethodError: *.model.entity.KeyUtils.generate(Lorg/hibernate/engine/spi/SharedSessionContractImplementor;Ljava/lang/Object;)Ljava/io/Serializable;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"Git 常用命令大全","slug":"history/tech/5ba092d9ae2eaa9c4e941aab","date":"2018-09-17T17:53:29.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5ba092d9ae2eaa9c4e941aab/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ba092d9ae2eaa9c4e941aab/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586git init # 初始化本地git仓库（创建新仓库）git config --global user.name &quot;xxx&quot; # 配置用户名git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件git config --global color.ui true # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy # remove proxy configuration on gitgit clone git+ssh://git@192.168.1.2/VT.git # clone远程仓库git status # 查看当前版本状态（是否修改）git add xyz # 添加xyz文件至indexgit add . # 增加当前子目录下所有更改过的文件至indexgit commit -m &apos;xxx&apos; # 提交git commit --amend -m &apos;xxx&apos; # 合并上一次提交（用于反复修改）git commit -am &apos;xxx&apos; # 将add和commit合为一步git rm xxx # 删除index中的文件git rm -r * # 递归删除git log # 显示提交日志git log -1 # 显示1行日志 -n为n行git log -5git log --stat # 显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容git show dfb02 # 可只用commitid的前几位git show HEAD # 显示HEAD提交日志git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag # 显示已存在的taggit tag -a v2.0 -m &apos;xxx&apos; # 增加v2.0的taggit show v2.0 # 显示v2.0的日志及详细内容git log v2.0 # 显示v2.0的日志git diff # 显示所有未添加至index的变更git diff --cached # 显示所有已添加index但还未commit的变更git diff HEAD^ # 比较与上一个版本的差异git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异git diff origin/master..master # 比较远程分支master上有本地分支master上没有的git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.1.2/VT.git # 增加远程定义（用于push/pull/fetch）git branch # 显示本地分支git branch --contains 50089 # 显示包含提交50089的分支git branch -a # 显示所有分支git branch -r # 显示所有原创分支git branch --merged # 显示所有已合并到当前分支的分支git branch --no-merged # 显示所有未合并到当前分支的分支git branch -m master master_copy # 本地分支改名git checkout -b master_copy # 从当前分支创建新分支master_copy并检出git checkout -b master master_copy # 上面的完整版git checkout features/performance # 检出已存在的features/performance分支git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0 # 检出版本v2.0git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出git checkout -- README # 检出head版本的README文件（可用于修改错误回退）git merge origin/master # 合并远程master分支至当前分支git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改git push origin master # 将当前分支push到远程master分支git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支git push --tags # 把所有tag推送到远程仓库git fetch # 获取所有远程分支（不更新本地分支，另需merge）git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支git pull origin master # 获取远程分支master并merge到当前分支git mv README README2 # 重命名文件README为README2git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933git ls-files # 列出git index包含的文件git show-branch # 图示当前分支历史git show-branch --all # 图示所有分支历史git whatchanged # 显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD # 内部命令：显示某个git对象git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASHgit reflog # 显示所有提交，包括孤立节点git show HEAD@&#123;5&#125;git show master@&#123;yesterday&#125; # 显示master分支昨天的状态git log --pretty=format:&apos;%h %s&apos; --graph # 图示提交日志git show HEAD~3git show -s --pretty=raw 2be7fcb476git stash # 暂存当前修改，将所有至为HEAD状态git stash list # 查看所有暂存git stash show -p stash@&#123;0&#125; # 参考第一次暂存git stash apply stash@&#123;0&#125; # 应用第一次暂存git grep &quot;delete from&quot; # 文件中搜索文本“delete from”git grep -e &apos;#define&apos; --and -e SORT_DIRENTgit gcgit fsck","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"Git","slug":"Git","permalink":"https://wangxiuwen.github.io/tags/Git/"}],"author":"baipeng"},{"title":"kafka 常用操作","slug":"history/tech/5b9f2178ae2eaa9c4e941aa7","date":"2018-09-17T03:37:28.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b9f2178ae2eaa9c4e941aa7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b9f2178ae2eaa9c4e941aa7/","excerpt":"","text":"1234/usr/local/kafka/kafka_2.12-1.0.1/bin/kafka-topics.sh --list --zookeeper localhost:2181/kafka/usr/local/kafka/kafka_2.12-1.0.1/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group foo/usr/local/kafka/kafka_2.12-1.0.1/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic xxx --from-beginning/usr/local/kafka/kafka_2.12-1.0.1/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic xxx","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"scala 使用 org.apache.http 4.5.2 访问 https 地址忽略证书","slug":"history/tech/5b9fbef3ae2eaa9c4e941aa8","date":"2018-09-17T02:49:23.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b9fbef3ae2eaa9c4e941aa8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b9fbef3ae2eaa9c4e941aa8/","excerpt":"","text":"问题：1Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target原因:我们只能找到CA机构的指纹，而找不到中间证书的指纹，所以在Java中无法验证整条证书链的有效性，所以导致Java程序在通过HTTPS协议访问浏览器访问正常的域名时发生证书错误。通常的解决办法是在Http Client端设置忽略证书错误，或是将缺少的中间证书导入Java keystore插曲：Httpclient SSLContextBuilder deprecated原因：SSLContextBuilder从原来的org.apache.http.conn.ssl 包挪到了org.apache.http.ssl 包代码：123456789101112131415161718def createSSLClientDefault: CloseableHttpClient = &#123; try &#123; val sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy &#123; override def isTrusted(x509Certificates: Array[X509Certificate], s: String): Boolean = true &#125;).build() val sslsf = new SSLConnectionSocketFactory(sslContext) return HttpClients.custom.setSSLSocketFactory(sslsf).build &#125; catch &#123; case e: KeyManagementException =&gt; LOGGER.error(e.getMessage, e) case e: NoSuchAlgorithmException =&gt; LOGGER.error(e.getMessage, e) case e: KeyStoreException =&gt; LOGGER.error(e.getMessage, e) &#125; HttpClients.createDefault&#125;完整代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198import java.io.IOExceptionimport java.net.URLEncoderimport java.security.cert.X509Certificateimport java.security.&#123;KeyManagementException, KeyStoreException, NoSuchAlgorithmException&#125;import java.utilimport com.alibaba.fastjson.JSON.toJSONStringimport com.google.common.base.Preconditionsimport com.google.common.collect.&#123;ImmutableMap, Lists&#125;import org.apache.http.client.ResponseHandlerimport org.apache.http.client.config.RequestConfigimport org.apache.http.client.entity.UrlEncodedFormEntityimport org.apache.http.client.methods.&#123;HttpGet, HttpPost&#125;import org.apache.http.conn.ssl.&#123;SSLConnectionSocketFactory, TrustStrategy&#125;import org.apache.http.impl.client.&#123;CloseableHttpClient, HttpClients&#125;import org.apache.http.message.BasicNameValuePairimport org.apache.http.ssl.SSLContextBuilderimport org.apache.http.util.EntityUtilsimport org.apache.http.&#123;Consts, HttpResponse, NameValuePair&#125;import org.slf4j.&#123;Logger, LoggerFactory&#125;/** * */object HttpClientUtils &#123; private val LOGGER: Logger = LoggerFactory.getLogger(HttpClientUtils.getClass) private val CONNECTION_REQUEST_TIMEOUT = 10000 private val SOCKET_TIMEOUT = 10000 private val defaultRequestConfig = RequestConfig.custom .setSocketTimeout(SOCKET_TIMEOUT) .setConnectionRequestTimeout(CONNECTION_REQUEST_TIMEOUT) .setConnectTimeout(CONNECTION_REQUEST_TIMEOUT) .build def createSSLClientDefault: CloseableHttpClient = &#123; try &#123; val sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy &#123; override def isTrusted(x509Certificates: Array[X509Certificate], s: String): Boolean = true &#125;).build() val sslsf = new SSLConnectionSocketFactory(sslContext) return HttpClients.custom.setSSLSocketFactory(sslsf).build &#125; catch &#123; case e: KeyManagementException =&gt; LOGGER.error(e.getMessage, e) case e: NoSuchAlgorithmException =&gt; LOGGER.error(e.getMessage, e) case e: KeyStoreException =&gt; LOGGER.error(e.getMessage, e) &#125; HttpClients.createDefault &#125; /** * get 请求 * * @param url * @param keys * @param enc * @return */ def get(url: String, keys: Map[String, String] = Map(), enc: String = Consts.UTF_8.name()): String = &#123; Preconditions.checkNotNull(url) var client: CloseableHttpClient = null var returnStr: String = null; try &#123; //client = HttpClients.createDefault() client = createSSLClientDefault var sb: StringBuilder = new StringBuilder(url) if (keys != null &amp;&amp; !keys.isEmpty) &#123; import scala.collection.JavaConversions._ for (entry &lt;- keys.entrySet()) &#123; if (sb.indexOf(&quot;?&quot;) == -1) &#123; sb.append(&quot;?&quot;) sb.append(URLEncoder.encode(entry.getKey, enc)) sb.append(&quot;=&quot;) sb.append(URLEncoder.encode(entry.getValue, enc)) &#125; else &#123; sb.append(&quot;&amp;&quot;) sb.append(URLEncoder.encode(entry.getKey, enc)) sb.append(&quot;=&quot;) sb.append(URLEncoder.encode(entry.getValue, enc)) &#125; &#125; &#125; val responseHandler = getDefaultHandler LOGGER.info(sb.toString + &quot;=====&quot;) val httpget = new HttpGet(sb.toString) httpget.setConfig(defaultRequestConfig) returnStr = client.execute(httpget, responseHandler) &#125; catch &#123; case e: Exception =&gt; &#123; LOGGER.error(e.getMessage, e) &#125; &#125; finally &#123; closeClient(client) &#125; returnStr &#125; /** * POST 请求 form提交 * * @param url * @param keys * @param enc * @return */ def post(url: String, keys: Map[String, String] = Map(), enc: String = Consts.UTF_8.name()): String = &#123; Preconditions.checkNotNull(url) var returnStr: String = null var client: CloseableHttpClient = null try &#123; //client = HttpClients.createDefault() client = createSSLClientDefault val httpPost: HttpPost = new HttpPost(url) httpPost.setConfig(defaultRequestConfig) if (keys != null &amp;&amp; !keys.isEmpty) &#123; val formParams: util.List[NameValuePair] = Lists.newArrayListWithExpectedSize(keys.size) import scala.collection.JavaConversions._ for (entry &lt;- keys.entrySet) &#123; formParams.add(new BasicNameValuePair(entry.getKey, entry.getValue)) &#125; val entity: UrlEncodedFormEntity = new UrlEncodedFormEntity(formParams, enc) httpPost.setEntity(entity) &#125; val responseHandler: ResponseHandler[String] = getDefaultHandler returnStr = client.execute(httpPost, responseHandler) &#125; catch &#123; case e: Exception =&gt; LOGGER.error(e.getMessage, e) &#125; finally closeClient(client) returnStr &#125; /** * POST 请求 application/json 提交 * * @param url * @param data * @param enc * @return */ def postJsonStr(url: String, data: String, enc: String = Consts.UTF_8.name()): String = &#123; Preconditions.checkNotNull(url) Preconditions.checkNotNull(data) var returnStr: String = null var client: CloseableHttpClient = null try &#123; //client = HttpClients.createDefault() client = createSSLClientDefault val httpPost: HttpPost = new HttpPost(url) httpPost.setConfig(defaultRequestConfig) import org.apache.http.entity.StringEntity val entity = new StringEntity(data, enc) entity.setContentType(&quot;application/json&quot;) httpPost.setEntity(entity) val responseHandler: ResponseHandler[String] = getDefaultHandler returnStr = client.execute(httpPost, responseHandler) &#125; catch &#123; case e: Exception =&gt; LOGGER.error(e.getMessage, e) &#125; finally closeClient(client) returnStr &#125; private def getDefaultHandler = new ResponseHandler[String]() &#123; @throws[IOException] override def handleResponse(response: HttpResponse): String = &#123; val entity = response.getEntity val returnStr = if (entity != null) EntityUtils.toString(entity) else null EntityUtils.consumeQuietly(entity) returnStr &#125; &#125; private def closeClient(client: CloseableHttpClient): Unit = &#123; if (client != null) try client.close() catch &#123; case e: IOException =&gt; LOGGER.error(e.getMessage, e) &#125; &#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"warning setlocale LC_CTYPE cannot change locale (zh_CN.UTF-8)","slug":"history/tech/5b9a4b7eae2eaa9c4e941aa6","date":"2018-09-12T23:35:26.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b9a4b7eae2eaa9c4e941aa6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b9a4b7eae2eaa9c4e941aa6/","excerpt":"","text":"报错：1warning: setlocale: LC_CTYPE: cannot change locale (zh_CN.UTF-8)解决：123vim /etc/locale.gen# 取消注释zh_CN.UTF-8 UTF-8执行：1locale-gen","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"80070007 SSH Tunnel Server does not support diffie-hellman-group1-sha1 for keyexchange","slug":"history/tech/5b9a093dae2eaa9c4e941aa5","date":"2018-09-12T18:52:45.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b9a093dae2eaa9c4e941aa5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b9a093dae2eaa9c4e941aa5/","excerpt":"","text":"报错：180070007: SSH Tunnel: Server does not support diffie-hellman-group1-sha1 for keyexchange解决:123vim /etc/ssh/sshd_configKexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr12ssh-keygen -Aservice ssh restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Spring Boot  2.0.2 druid用的是1.1.9 集成时  注意filters的 配置","slug":"history/tech/5b92430c032680355c37d965","date":"2018-09-06T21:21:16.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b92430c032680355c37d965/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b92430c032680355c37d965/","excerpt":"","text":"1升级Spring Boot版本到2.0.2后报下面的错，druid用的是1.1.9123456789101112[o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext : 99] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is java.lang.RuntimeException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;servletEndpointRegistrar&apos; defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed;nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method &apos;servletEndpointRegistrar&apos; threw exception;nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;healthEndpoint&apos; defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Bean instantiation via factory method failed;nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthEndpoint]: Factory method &apos;healthEndpoint&apos; threw exception;nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration&apos;: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$9e89c27b]: Constructor threw exception; nested exception is org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name &apos;dataSource&apos;: Could not bind properties to &apos;DruidDataSourceWrapper&apos; : prefix=spring.datasource.druid, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under &apos;spring.datasource.druid&apos; to javax.sql.DataSource查看堆栈代码，容器没有完成初始化，在查看最后一行堆栈发现 datasource 没有实例成功，跟之间的老版本做了对比发现filters 配置加了log4 就异常。查看log4Fliter 类。发现移除了log4 包导致无法load成功 。Spring Boot 默认的日志系统是 logback，并没有依赖 log4j，这里配置的 log4j 所以报错了。要想使用 log4j filter 你要把日志系统切换为 log4j。123正确的配置 druid: filters: stat,wall","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"spark println 中文乱码","slug":"history/tech/5b8e21c6032680355c37d964","date":"2018-09-03T18:10:14.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b8e21c6032680355c37d964/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b8e21c6032680355c37d964/","excerpt":"","text":"启动增加以下参数12--conf spark.driver.extraJavaOptions=&quot; -Dfile.encoding=utf-8 &quot; \\--conf spark.executor.extraJavaOptions=&quot; -Dfile.encoding=utf-8 &quot; \\或者使用 logWarning:12import org.apache.log4j.&#123;Level, LogManager, PropertyConfigurator&#125;logWarning(&quot;我没有乱码&quot;)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"区块链技术合辑","slug":"history/tech/5b8032f8032680355c37d963","date":"2018-08-25T04:31:52.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b8032f8032680355c37d963/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b8032f8032680355c37d963/","excerpt":"","text":"区块链项目源码大全比特币BTC源码 ：https://github.com/bitcoin以太坊ETH源码 ：https://github.com/ethereum以太经典ETC源码 ：https://github.com/ethereumproject小蚁NEO源码 ：https://github.com/neo-project标准链CZR源码：https://github.com/canonchain柚子EOS源码 ：https://github.com/eosio量子链QTUM源码 ：https://github.com/qtumproject比原链BTM源码 ：https://github.com/bytom莱特币LTC源码 ：https://github.com/litecoin-project公信宝GXS源码 ：https://github.com/ethereumproject比特股BTS源码 ：https://github.com/bitsharesADA源码 ：https://github.com/input-output-hkAE源码 ：https://github.com/aeternityELF源码 ：https://github.com/aelfProjectOMG源码 ：https://github.com/omiseSNT源码 ：https://github.com/status-im波场TRX源码 ：https://github.com/tronprotocol更多项目源码 ：http://myhref.com/code.html0、区块链综合知识0.1综合知识https://learnblockchain.cn/http://www.8btc.com/ 巴比特0.2区块链开发https://blog.csdn.net/sportshark 一个探讨区块链开发的网站http://wangxiaoming.com/ 汪晓明对区块链、以太坊的思考https://blog.csdn.net/itcastcpp 尹成学院1、比特币1.1比特币白皮书比特币白皮书：一种点对点的电子现金系统1.2比特币代码https://github.com/bitcoin/bitcoin1.3比特币源代码安装编译https://blog.csdn.net/Metal1/article/details/80086184 比特币Bitcoin源代码安装编译https://blog.csdn.net/taifei/article/details/73087120 VC编译调试比特币源码1.4比特币源代码分析https://blog.csdn.net/pure_lady/article/category/7131199https://blog.csdn.net/teaspring1.5比特币区块浏览网站https://blockchain.info/zh-cn/https://btc.com/https://webbtc.com/https://insight.bitpay.com/https://blockexplorer.com/2 以太坊2.1以太坊官方网站https://www.ethereum.org/2.2以太坊基本原理https://blog.csdn.net/Metal1/article/details/80138647 以太坊的工作原理, 干货http://wiki.jikexueyuan.com/project/ethereum/ 以太坊官方文档中文版2.3以太坊源代码https://github.com/ethereum2.4以太坊代码分析https://blog.csdn.net/omnispace/article/details/79311891 以太坊go语言代码分析https://blog.csdn.net/ddffr go代码分析https://blog.csdn.net/teaspring go 代码分析https://www.cnblogs.com/Evsward/p/miner.html 挖矿代码分析https://blog.csdn.net/ddffr/article/details/78773961 挖矿代码分析https://blog.csdn.net/metal1/article/details/79996945 ethash算法分析https://blog.csdn.net/cj2094 cj2094的博客 以太坊代码分析C代码依赖库http://zh.highscore.de/cpp/boost/ C BOOST 库https://www.cryptopp.com/ Crypto® Library 7.0https://github.com/open-source-parsers/jsoncpp JSON 库http://jsonrpc-cpp.sourceforge.net/ JSONRPChttp://yaml.org/ YMALhttp://www.runoob.com/cplusplus/cpp-basic-syntax.html C入门2.5以太坊区块浏览https://ethstats.net/ 该网站能全面的显示网络状态，包括节点、难度、算力等等，非常直观https://www.etherchain.org/http://etherscan.io/ 该网站提供了以太坊网络的各种状态，比如帐号的详情、TOKEN详情，难度详情、区块详情，非常方便和直观2.6以太坊的使用2.6.1 博客园文章(1):搭建(Ubuntu系统)Truffle v3.2.1 开发和测试环境http://www.cnblogs.com/zl03jsj/p/6819333.html(2):搭建以太坊私有链,执行挖矿http://www.cnblogs.com/zl03jsj/p/6858928.html(3):在以太坊私有网络中建立节点集群,并发生交易.http://www.cnblogs.com/zl03jsj/p/6876064.html(4):Truffle创建项目,编译,及项目部署http://www.cnblogs.com/zl03jsj/p/7012178.html2.6.2 搭建私链使用以太坊https://blog.csdn.net/metal1/article/details/80139421 【以太坊傻瓜教程】如何创建私链2.6.3 getch命令使用https://mp.csdn.net/postedit/80114792 getch 命令大全https://blog.csdn.net/Metal1/article/details/80614880 geth使用2.6智能合约https://blog.csdn.net/Metal1/article/details/80172718 智能合约hello worldhttp://remix.ethereum.org/http://solidity.readthedocs.io/en/latest/ Solidity编程文档（官方）https://live.ether.camp/ 以太坊第三方强大的IDE2.7Trufflehttp://truffle.readthedocs.io/en/latest/ 以太坊开发框架Truffle说明书2.8以太坊文档http://ethdoc.cn/index.htmlhttp://www.ethdocs.org/en/latest/index.htmlhttps://blog.ethereum.org/ 以太坊官方博客https://github.com/ethereum/wiki/wiki 以太坊wiki百科http://ethfans.org/ 以太坊中文爱好者网站https://forum.ethereum.org/ 以太坊的官方论坛3、区块链安全3.1 以太坊三天竟然爆发两起大漏洞事件！我们来教你如何跳过以太坊的坑4 其他数字货币4.1 dashhttps://github.com/dashpay 源代码4.2 比原链https://bytom.io/ 官网5、GPU挖矿https://ethereum.gitbooks.io/frontier-guide/content/gpu.html GPU挖矿","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"MacOS 报错 xcodebuild -showsdks","slug":"history/tech/5b7f7d73032680355c37d962","date":"2018-08-24T03:37:23.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b7f7d73032680355c37d962/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b7f7d73032680355c37d962/","excerpt":"","text":"12345mac 报错xcodebuild -showsdksxcode-select: error: tool &apos;xcodebuild&apos; requires Xcode, but active developer directory &apos;/Library/Developer/CommandLineTools&apos; is a command line tools instance1sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"scala apply 测试代码","slug":"history/tech/5b7e77b6032680355c37d961","date":"2018-08-22T21:00:38.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b7e77b6032680355c37d961/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b7e77b6032680355c37d961/","excerpt":"","text":"1234567891011121314151617181920212223242526package org.qianrushiclass ApplyTest &#123; def apply() = println(&quot;class ApplyTest&quot;) def haveATry(): Unit =&#123; println(&quot;haveATry&quot;) &#125;&#125;object ApplyTest &#123; def apply() = &#123; println(&quot;object ApplyTest&quot;) new ApplyTest &#125;&#125;object ApplyOperation &#123; def main(args: Array[String]): Unit = &#123; val a = ApplyTest() a.haveATry a() // 触发 class ApplyTest 的 apply 方法 &#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"node jwt 生成token使用","slug":"history/tech/5b7d0730032680355c37d960","date":"2018-08-21T18:48:16.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b7d0730032680355c37d960/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b7d0730032680355c37d960/","excerpt":"","text":"1npm install jsonwebtoken --save12345678910111213141516const jwt = require(&apos;jsonwebtoken&apos;);const secret = &apos;aaa&apos;; //撒盐：加密的时候混淆 //jwt生成token const token = jwt.sign(&#123; name: 123 &#125;, secret, &#123; expiresIn: 60 //秒到期时间 &#125;);console.log(token);//解密tokenjwt.verify(token, secret, function (err, decoded) &#123; if (!err)&#123; console.log(decoded.name); //会输出123，如果过了60秒，则有错误。 &#125;&#125;)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"solidity","slug":"history/tech/5b7bc997032680355c37d95f","date":"2018-08-20T20:13:11.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b7bc997032680355c37d95f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b7bc997032680355c37d95f/","excerpt":"","text":"1npm i -g truffle 升级truffle，保证版本和合约中的版本一致1编译合约 truffle compile1部署合约 truffle migrate","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"mongodb 3.2 升级 3.4","slug":"history/tech/5b7a87dc032680355c37d95e","date":"2018-08-19T21:20:28.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b7a87dc032680355c37d95e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b7a87dc032680355c37d95e/","excerpt":"","text":"http://www.mongoing.com/docs/release-notes/3.4-upgrade-replica-set.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"以太坊源码学习之旅  p2p","slug":"history/tech/5b76309a032680355c37d95d","date":"2018-08-17T02:19:06.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b76309a032680355c37d95d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b76309a032680355c37d95d/","excerpt":"","text":"1234以太坊的p2p模块分别使用了UDP 和 TCP两种长连接握手协议。UDP 协议主要应用在discover包下，用于node节点发现通信。节点发现使用了 Kademlia 算法 ，具体概念可以参考下面链接``` [Kadem](https://zh.wikipedia.org/wiki/Kademlia)TCP 协议用来node节点的消息通信","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"rpc服务器【多线程同步】模型","slug":"history/tech/5b7011fb43321ba758e2bd85","date":"2018-08-11T22:54:51.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b7011fb43321ba758e2bd85/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b7011fb43321ba758e2bd85/","excerpt":"","text":"1多线程处理 需要开启一个新的线程去处理RPC的通信，接着上 单线程同步 的代码rpc【单线程同步】模型1_thread.start_new_thread(fun,(params...))123456import _threaddef loop(s, handlers): while True: conn, addr = s.accept() _thread.start_new_thread(handle_conn, (conn, addr, handlers)) # 处理连接)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"rpc服务器【单线程同步】模型","slug":"history/tech/5b700fe643321ba758e2bd84","date":"2018-08-11T22:45:58.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b700fe643321ba758e2bd84/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b700fe643321ba758e2bd84/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233client.py 客户端代码# -*- coding: UTF-8 -*-import jsonimport structimport socketimport timedef rpc(sock, in_, params): request = json.dumps(&#123;&quot;in&quot;: in_, &quot;params&quot;: params&#125;) # 请求消息体 # print(request) length_prefix = struct.pack(&quot;I&quot;, len(request)) # 请求长度前缀 # print(length_prefix) # request2 = struct.pack(&quot;c&quot;, request) # print(request2) sock.sendall(length_prefix) sock.sendall(request.encode()) length_prefix = sock.recv(4) # 响应长度前缀 # print(length_prefix) length, = struct.unpack(&quot;I&quot;, length_prefix) body = sock.recv(length) # 响应消息体 response = json.loads(body) return response[&quot;out&quot;], response[&quot;result&quot;] # 返回响应类型和结果...if __name__ == &apos;__main__&apos;: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((&quot;localhost&quot;, 8080)) for i in range(10): out, result = rpc(s, &quot;ping&quot;, &quot;ireader %d&quot; % i) print(out, result) time.sleep(1) s.close()1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# -*- coding: UTF-8 -*-import jsonimport structimport socketimport timedef loop(s, handlers): while True: conn, addr = s.accept() handle_conn(conn, addr, handlers) # 处理连接def handle_conn(conn, addr, handlers): print(addr, &quot;comes&quot;) while True: # 循环读写 length_prefix = conn.recv(4) # 请求长度前缀 if not length_prefix: # 连接关闭了 print addr, &quot;bye&quot; conn.close() break # 退出循环，处理下一个连接 length, = struct.unpack(&quot;I&quot;, length_prefix) body = conn.recv(length).decode() # 请求消息体 request = json.loads(body) in_ = request[&apos;in&apos;] params = request[&apos;params&apos;] print( in_, params) handler = handlers[in_] # 查找请求处理器 handler(conn, params) # 处理请求...def send_result(conn, out, result): response = json.dumps(&#123;&quot;out&quot;: out, &quot;result&quot;: result&#125;) # 响应消息体 length_prefix = struct.pack(&quot;I&quot;, len(response)) # 响应长度前缀 conn.sendall(length_prefix) conn.sendall(response.encode())def ping(conn, params): send_result(conn, &quot;pong&quot;, params)if __name__ == &apos;__main__&apos;: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 打开 reuse addr 选项 s.bind((&quot;localhost&quot;, 8080)) s.listen(1) handlers = &#123; &quot;ping&quot;: ping &#125; loop(s, handlers)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"go sync.WaitGroup和标签混合使用练习","slug":"history/tech/5b6fe82c43321ba758e2bd83","date":"2018-08-11T19:56:28.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b6fe82c43321ba758e2bd83/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b6fe82c43321ba758e2bd83/","excerpt":"","text":"1234567891011121314151617181920212223242526func main() &#123; var wg sync.WaitGroup wg.Add(2) // 因为有两个动作，所以增加2个计数cesi_tab: for i := 0; i &lt;= 5; i++ &#123; for j := 0; j &lt;= 5; j++ &#123; if j == 4 &#123; go func() &#123; fmt.Println(&quot;Goroutine 2&quot;) wg.Done() // 操作完成，减少一个计数 &#125;() break cesi_tab &#125; fmt.Printf(&quot;i is: %d, and j is: %d\\n&quot;, i, j) &#125; &#125; fmt.Println(&quot;ok@@@@&quot;) go func() &#123; fmt.Println(&quot;Goroutine 1&quot;) wg.Done() // 操作完成，减少一个计数 &#125;() wg.Wait() // 等待，直到计数为0&#125;1234567i is: 0, and j is: 0i is: 0, and j is: 1i is: 0, and j is: 2i is: 0, and j is: 3ok@@@@Goroutine 1Goroutine 2","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"go 标签","slug":"history/tech/5b6fe76943321ba758e2bd82","date":"2018-08-11T19:53:13.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b6fe76943321ba758e2bd82/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b6fe76943321ba758e2bd82/","excerpt":"","text":"12345678910111213141516171819func mian() &#123; c := make(chan string,1) defer close(c) go func() &#123; for i := 0; i &lt; 10; i++ &#123; c &lt;- fmt.Sprint(&quot;baipeng&quot;, i) &#125; &#125;() hello: for &#123; select &#123; case s := &lt;-c: fmt.Println(s) default: break hello &#125; &#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"17年做的一个小程序  每日故宫lite  微信扫一扫  点个广告刷个单 谢谢","slug":"history/share/5b6ab95d43321ba758e2bd80","date":"2018-08-07T21:35:25.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/share/5b6ab95d43321ba758e2bd80/","link":"","permalink":"https://wangxiuwen.github.io/history/share/5b6ab95d43321ba758e2bd80/","excerpt":"","text":"","categories":[{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"share","slug":"share","permalink":"https://wangxiuwen.github.io/tags/share/"},{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/tags/%E5%88%86%E4%BA%AB/"}],"author":"baipeng"},{"title":"批量下载图灵已购图书电子版","slug":"history/tech/5b6ab8ce43321ba758e2bd7f","date":"2018-08-07T21:33:02.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b6ab8ce43321ba758e2bd7f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b6ab8ce43321ba758e2bd7f/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137const puppeteer = require(&apos;puppeteer&apos;);const LOGIN_URL = &quot;http://account.ituring.com.cn/log-in&quot;const USERNAME_SELECTOR = &apos;#Email&apos;const PASSWORD_SELECTOR = &apos;#Password&apos;const LOGIN_BUTTON_SELECTOR = &apos;#loginForm &gt; form &gt; div:nth-child(6) &gt; div &gt; input&apos;const BOOKS_URL = &apos;http://www.ituring.com.cn/user/shelf&apos;const BOOK_SELECTOR = &apos;body &gt; div.container.page-box.my-profile &gt; div &gt; div.col-md-9.main &gt; div:nth-child(2) &gt; ul &gt; li &gt; div.book-img &gt; a&apos;const DOWNLOAD_SELECTOR = &apos;body &gt; div.container &gt; div &gt; div.col-md-3.pull-right.side &gt; ul &gt; li:nth-child(1) &gt; ul &gt; li:nth-child(2) &gt; a&apos;const username = &apos;图灵账号&apos;const password = &apos;图灵密码&apos;async function createBrowser() &#123; // root 权限下需要取消sandbox // &apos;--incognito&apos; 未实现 let chromeOptions = &#123; args: [&apos;--no-sandbox&apos;, &apos;--disable-setuid-sandbox&apos;], ignoreHTTPSErrors: true &#125; if(process.env.NODE_ENV == &quot;production&quot;) &#123; chromeOptions = Object.assign(&#123;&#125;, chromeOptions, &#123; headless: true &#125;) &#125; else &#123; chromeOptions = Object.assign(&#123;&#125;, chromeOptions, &#123; headless: false, devtools: true, &#125;) &#125; var browser = await puppeteer.launch(chromeOptions); return &#123; browser &#125;&#125;async function createContextAndPage(&#123;browser&#125;) &#123; browser = browser || __browser var context = await browser.createIncognitoBrowserContext(); var page = await context.newPage(); await page.setDefaultNavigationTimeout(120 * 1000) if(process.env.NODE_ENV == &quot;production&quot;) &#123; &#125; else &#123; await page.setViewport(&#123; width: 1366, height: 768 &#125;) &#125; return &#123; context, page &#125;&#125;class Utils &#123; static timeout(delay) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; try &#123; resolve(1) &#125; catch (e) &#123; reject(0) &#125; &#125;, delay) &#125;) &#125;&#125;;(async ()=&gt;&#123; var &#123; browser &#125; = await createBrowser() var &#123; context, page &#125; = await createContextAndPage(&#123;browser&#125;) try&#123; // 登录 await page.goto(LOGIN_URL) await page.type(USERNAME_SELECTOR, username) await page.type(PASSWORD_SELECTOR, password) await Promise.all([ page.click(LOGIN_BUTTON_SELECTOR), page.waitForNavigation(&#123; timeout: 10000 &#125;) ]); // 跳转 书籍列表页 await page.goto(BOOKS_URL) // 获取书籍列表 let bookUrls = await page.$$eval(BOOK_SELECTOR, lis =&gt; &#123; return lis.map(li =&gt; &#123; return li.href; &#125;) &#125;); var result = [] for(let i = 0; i&lt; bookUrls.length; ++i) &#123; let bookUrl = bookUrls[i] console.log(bookUrl , &quot;\\n&quot;) await page.goto(bookUrl) await Utils.timeout(3000) let title = await page.title() try&#123; let downloadUrl = await page.$eval(DOWNLOAD_SELECTOR, item =&gt; item.href); console.log(&quot;downloadUrl: &quot;, downloadUrl , &quot;\\n&quot;) await page.goto(downloadUrl) await Utils.timeout(10000) result.push(&#123; title: title, bookUrl: bookUrl, error: &apos;&apos;, downloadUrl: downloadUrl &#125;) &#125; catch(err) &#123; console.log(&quot;error: &quot;, err) result.push(&#123; title: title, bookUrl: bookUrl, error: err.message, downloadUrl: &apos;&apos; &#125;) &#125; &#125; &#125; catch(err) &#123; &#125; finally &#123; // await browser.close() console.log(result) &#125;&#125;)()","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"批量下载异步社区的电子书","slug":"history/tech/5b6ab7a543321ba758e2bd7e","date":"2018-08-07T21:28:05.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b6ab7a543321ba758e2bd7e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b6ab7a543321ba758e2bd7e/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687const request = require(&apos;request&apos;);const Promise = require(&quot;bluebird&quot;);const httpGET = Promise.promisify(request.get);// const sleep = require(&apos;sleep&apos;);const fs = require(&apos;fs&apos;);const headers = &#123; &apos;Accept-Language&apos;: &apos;zh-cn&apos;, Host: &quot;www.epubit.com&quot;, Referer: &quot;https://www.epubit.com/m/center/book&quot;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded; charset=utf-8&apos;, accept: &apos;application/json, text/plain, */*&apos;, Cookie: &apos;此处填写你自己的cookie&apos;, &apos;user-agent&apos;: &apos;Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1&apos;,&#125;async function getPdfList(page) &#123; var options = &#123; method: &apos;GET&apos;, url: &apos;https://www.epubit.com/order/getBookshelf?page=&apos; + page + &apos;&amp;rows=10&amp;goodsType=0&apos;, headers: headers &#125;; let ret = await httpGET(options); let body = JSON.parse(ret.body); // sum = sum + body.total; return body.data;&#125;/** * * @param &#123;*&#125; url * @param &#123;*&#125; filename * @param &#123;*&#125; callback */async function downloadFile(url, filename, callback) &#123; var stream = fs.createWriteStream(filename); var options = &#123; method: &apos;GET&apos;, url: url, headers: headers &#125;; request(options).pipe(stream).on(&apos;close&apos;, callback);&#125;/** * * @param &#123;*&#125; list */async function pdfListDown(list) &#123; list.forEach(v =&gt; &#123; let pdfList = v.book.pdfList; console.log() if (pdfList.length &gt; 0) &#123; pdfList.forEach(v2 =&gt; &#123; if (v2.id) &#123; let name = v2.name; let downUrl = &apos;https://www.epubit.com/book/downEbook/&apos; + v2.id console.log(name, downUrl) downloadFile(downUrl, name, function(v) &#123; console.log(name + &quot; download is ok&quot;) &#125;) &#125; &#125;) &#125; &#125;);&#125;(async() =&gt; &#123; let flag = true; let page = 1; do &#123; let s = await getPdfList(page); console.log(s.rows.length); if (s.rows.length == 0) &#123; console.log(s) flag = false; &#125; else &#123; await pdfListDown(s.rows); page++; &#125; // sleep.sleep(10) &#125; while (flag);&#125;)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"spring mvc requestBody json 中大写参数接受","slug":"history/tech/5b601f5310b87dae1795b5a1","date":"2018-07-30T20:35:31.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b601f5310b87dae1795b5a1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b601f5310b87dae1795b5a1/","excerpt":"","text":"12 @JsonProperty(value = &quot;NAME&quot;)private string name;1问题是java 对象的set get 方法默认生成的字段为小驼峰格式 name","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"service mesh","slug":"history/tech/5b5e8d0510b87dae1795b5a0","date":"2018-07-30T03:59:01.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b5e8d0510b87dae1795b5a0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b5e8d0510b87dae1795b5a0/","excerpt":"","text":"https://github.com/servicemesher/meetup-slideshttp://shardingsphere.io/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"定时清理spark work 目录","slug":"history/tech/5b5e83e410b87dae1795b59f","date":"2018-07-30T03:20:04.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b5e83e410b87dae1795b59f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b5e83e410b87dae1795b59f/","excerpt":"","text":"使用spark standalone模式执行任务，每提交一次任务，在每个节点work目录下都会生成一个文件夹，最终导致 spark work 目录占用过多，磁盘报警12345vim spark-env.shexport SPARK_WORKER_OPTS=&quot; -Dspark.worker.cleanup.enabled=true # 是否开启自动清理-Dspark.worker.cleanup.interval=60 # 清理周期，每隔多长时间清理一次，单位秒-Dspark.worker.cleanup.appDataTtl=60&quot; # 保留最近多长时间的数据","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cubase 情绪处理","slug":"history/music/5b56f3df10b87dae1795b59e","date":"2018-07-23T21:39:43.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5b56f3df10b87dae1795b59e/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5b56f3df10b87dae1795b59e/","excerpt":"","text":"","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"}],"author":"wangxiuwen"},{"title":"以太坊所用的密码学","slug":"history/tech/5b559d5510b87dae1795b59d","date":"2018-07-22T21:18:13.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b559d5510b87dae1795b59d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b559d5510b87dae1795b59d/","excerpt":"","text":"1secp256k11234ECDH 迪菲－赫尔曼(ECDH)算法是个重要加密学技术，可以用私钥和对方公钥计算出一个共享的密钥，比如有 A、B 两个公私钥对，ECDH(A私钥, B公钥) == ECDH(B私钥, A公钥)。是交换密钥的重点原理。1sha3","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"密码学","slug":"密码学","permalink":"https://wangxiuwen.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"}],"author":"baipeng"},{"title":"小白机器学期笔记1 Surprise 使用","slug":"history/tech/5b52c84510b87dae1795b59c","date":"2018-07-20T17:44:37.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b52c84510b87dae1795b59c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b52c84510b87dae1795b59c/","excerpt":"","text":"1Surprise python 推荐系统库12安装 pip install Surprise`基本使用12345678910111213141516171819202122232425262728293031323334353637# -*- coding: UTF-8 -*-from surprise import SVDfrom surprise import Datasetfrom surprise import evaluate, print_perf# 自动载入movielens 数据集data = Dataset.load_builtin(&quot;ml-100k&quot;)# k折交叉验证data.split(n_folds=3)# 试一把SVD矩阵分解algo = SVD()# 在数据集上测试一下效果perf = evaluate(algo, data, measures=[&apos;RMSE&apos;, &apos;MAE&apos;])#输出结果print_perf(perf)RMSE: 0.9454MAE: 0.7450------------Fold 2RMSE: 0.9411MAE: 0.7429------------Fold 3RMSE: 0.9431MAE: 0.7429------------------------Mean RMSE: 0.9432Mean MAE : 0.7436------------------------ Fold 1 Fold 2 Fold 3 Mean RMSE 0.9454 0.9411 0.9431 0.9432 MAE 0.7450 0.7429 0.7429 0.7436 PyDev console: starting.1234567891011121314151617181920212223242526272829303132333435363738# 手动载入数据集，指定文件所在位置file_path = os.path.expanduser(&apos;~/.surprise_data/ml-100k/ml-100k/u.data&apos;)reader = Reader(line_format=&apos;user item rating timestamp&apos;, sep=&apos;\\t&apos;)data = Dataset.load_from_file(file_path, reader)data.split(n_folds=5)algo = SVD()pref = evaluate(algo, data, measures=[&apos;rmse&apos;, &apos;mae&apos;])#输出结果print_perf(pref)RMSE: 0.9335MAE: 0.7383------------Fold 2RMSE: 0.9409MAE: 0.7396------------Fold 3RMSE: 0.9331MAE: 0.7339------------Fold 4RMSE: 0.9352MAE: 0.7361------------Fold 5RMSE: 0.9416MAE: 0.7422------------------------Mean RMSE: 0.9369Mean MAE : 0.7380------------","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"Surprise","slug":"Surprise","permalink":"https://wangxiuwen.github.io/tags/Surprise/"}],"author":"baipeng"},{"title":"统计当前文件夹下文件的个数","slug":"history/tech/5b4c5d3538d664aa7949c9b4","date":"2018-07-15T20:54:13.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b4c5d3538d664aa7949c9b4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b4c5d3538d664aa7949c9b4/","excerpt":"","text":"统计当前文件夹下文件的个数，包括子文件夹里的ls -lR|grep &quot;^-&quot;|wc -l 统计文件夹下目录的个数，包括子文件夹里的ls -lR|grep &quot;^d&quot;|wc -l 统计当前文件夹下文件的个数ls -l |grep &quot;^-&quot;|wc -l 统计当前文件夹下目录的个数ls -l |grep &quot;^d&quot;|wc -l 附：统计输出信息的行数wc -l 将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 ^dgrep &quot;^-&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"摘抄","slug":"摘抄","permalink":"https://wangxiuwen.github.io/tags/%E6%91%98%E6%8A%84/"}],"author":"wangxiuwen"},{"title":"Spring Boot Jpa  save 事务中小坑","slug":"history/tech/5b4483c739b4fc3a2f3396a1","date":"2018-07-09T22:00:39.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b4483c739b4fc3a2f3396a1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b4483c739b4fc3a2f3396a1/","excerpt":"","text":"12345678在事务中处理两条数据互换唯一索引的问题。MySQL 语句可以执行。BEGIN;update t_test as s set s.t1 = &apos;121121212&apos; where s.r_id = 1;update t_test as s set s.t1 = &apos;15921445301&apos; where s.r_id = 2;COMMIT;在项目中频频出现，唯一索引冲突。最后锁定到 jpa 的save 和 saveAndFlush的区别1234567891011save 是一种懒加载的方式，直到 flush或 commit发出命令才会保存到数据库 @Transactional public &lt;S extends T&gt; S save(S entity) &#123; if (entityInformation.isNew(entity)) &#123; em.persist(entity); return entity; &#125; else &#123; return em.merge(entity); &#125; &#125;12345678910111213saveAndFlush 会直接flush() 保存到数据库 /* * (non-Javadoc) * @see org.springframework.data.jpa.repository.JpaRepository#saveAndFlush(java.lang.Object) */ @Transactional public &lt;S extends T&gt; S saveAndFlush(S entity) &#123; S result = save(entity); flush(); return result; &#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wangxiuwen.github.io/tags/SpringBoot/"},{"name":"SpringJpa","slug":"SpringJpa","permalink":"https://wangxiuwen.github.io/tags/SpringJpa/"}],"author":"baipeng"},{"title":"无人机基础知识","slug":"history/tech/5b42cce139b4fc3a2f3396a0","date":"2018-07-09T02:48:01.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b42cce139b4fc3a2f3396a0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b42cce139b4fc3a2f3396a0/","excerpt":"","text":"地面站:QgroundControl Mission Planner 协议：Mavlink协议 其它:http://ardupilot.org/dev/docs/apsync-intro.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go vendor 包管理使用","slug":"history/tech/5b3ecac739b4fc3a2f33969f","date":"2018-07-06T01:49:59.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b3ecac739b4fc3a2f33969f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b3ecac739b4fc3a2f33969f/","excerpt":"","text":"govendor简介golang工程的依赖包经常使用go get命令来获取，例如：go get github.com/kardianos/govendor ，会将依赖包下载到GOPATH的路径下。常用的依赖包管理工具有godep，govendor等，在Golang1.5之后，Go提供了 GO15VENDOREXPERIMENT 环境变量(Go 1.6版本默认开启该环境变量)，用于将go build时的应用路径搜索调整成为 当前项目目录/vendor 目录方式。通过这种形式，我们可以实现类似于 godep 方式的项目依赖管理。安装1go get -u -v github.com/kardianos/govendor使用1cd /home/workbase/自己的项目初始化123更多使用可以查看github地址govendor init使用命令将包移动到vendor目录1govendor add +external 或使用缩写： govendor add +e","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"go","slug":"go","permalink":"https://wangxiuwen.github.io/tags/go/"},{"name":"vendor","slug":"vendor","permalink":"https://wangxiuwen.github.io/tags/vendor/"}],"author":"baipeng"},{"title":"img.convert('L')","slug":"history/tech/5b39debf5bf8e4f86e557e20","date":"2018-07-01T20:13:51.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b39debf5bf8e4f86e557e20/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b39debf5bf8e4f86e557e20/","excerpt":"","text":"一张彩色图片经过函数np.array(img.convert(‘L’))之后的维度和像素值是多少？11；[0, 255]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cifar10和 cifar 100 数据集","slug":"history/tech/5b347efc5bf8e4f86e557e1f","date":"2018-06-27T18:23:56.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b347efc5bf8e4f86e557e1f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b347efc5bf8e4f86e557e1f/","excerpt":"","text":"http://www.cs.toronto.edu/~kriz/cifar.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nginx 代理 mysql，redis， ssh","slug":"history/tech/5b33132f5bf8e4f86e557e1e","date":"2018-06-27T04:31:43.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b33132f5bf8e4f86e557e1e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b33132f5bf8e4f86e557e1e/","excerpt":"","text":"nginx.conf:123stream &#123; include /etc/nginx/stream.d/*.conf;&#125;/etc/nginx/stream.d/mysql.conf:123456789upstream cloudsocket &#123; hash $remote_addr consistent; server 192.168.1.111:3306 weight=5 max_fails=3 fail_timeout=30s;&#125;server &#123; listen 3306; proxy_connect_timeout 10s; proxy_pass cloudsocket;&#125;redis:123456789upstream rediscloudsocket &#123; hash $remote_addr consistent; server 192.168.11.111:6379 weight=5 max_fails=3 fail_timeout=30s;&#125;server &#123; listen 6379; proxy_connect_timeout 10s; proxy_pass rediscloudsocket;&#125;ssh:123456789upstream ssh &#123; server 192.168.11.112:22;&#125;server &#123;listen 80;proxy_pass ssh;proxy_connect_timeout 1h;proxy_timeout 1h;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"gitlab 备份恢复操作","slug":"history/tech/5b3207885bf8e4f86e557e1d","date":"2018-06-25T21:29:44.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b3207885bf8e4f86e557e1d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b3207885bf8e4f86e557e1d/","excerpt":"","text":"备份：1gitlab-rake gitlab:backup:create恢复:1234gitlab-ctl stop unicorngitlab-ctl stop sidekiqgitlab-ctl statusgitlab-rake gitlab:backup:restore BACKUP=xxxrepositories 导入其它版本：1gitlab-rake --trace gitlab:import:repos[&apos;/var/opt/gitlab/git-data/repositories&apos;] docker-compose.yml 文件:12345678910111213141516171819gitlab: image: &apos;gitlab/gitlab-ce:11.0.1-ce.0&apos; restart: always container_name: gitlab privileged: true hostname: &apos;xxx.com&apos; environment: GITLAB_OMNIBUS_CONFIG: | # Add any other gitlab.rb configuration here, each on its own line unicorn[&apos;worker_timeout&apos;] = 120 unicorn[&apos;worker_processes&apos;] = 8 ports: - &apos;4080:80&apos; - &apos;4443:443&apos; - &apos;4022:22&apos; volumes: - &apos;/etc/gitlab:/etc/gitlab&apos; - &apos;/var/log/gitlab:/var/log/gitlab&apos; - &apos;/data/gitlab:/var/opt/gitlab&apos;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker 容器获取主机权限","slug":"history/tech/5b31dfbe5bf8e4f86e557e1c","date":"2018-06-25T18:39:58.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b31dfbe5bf8e4f86e557e1c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b31dfbe5bf8e4f86e557e1c/","excerpt":"","text":"添加以下配置：1privileged: truegitlab docker-compose 文件如下：12345678910111213141516gitlab: image: &apos;gitlab/gitlab-ce:11.0.1-ce.0&apos; restart: always container_name: gitlab privileged: true environment: GITLAB_OMNIBUS_CONFIG: | # Add any other gitlab.rb configuration here, each on its own line ports: - &apos;3080:80&apos; - &apos;3443:443&apos; - &apos;3022:22&apos; volumes: - &apos;/etc/gitlab:/etc/gitlab&apos; - &apos;/var/log/gitlab:/var/log/gitlab&apos; - &apos;/data/gitlab/:/var/opt/gitlab&apos;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cdh 下载地址","slug":"history/tech/5b31ca2a5bf8e4f86e557e1b","date":"2018-06-25T17:07:54.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b31ca2a5bf8e4f86e557e1b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b31ca2a5bf8e4f86e557e1b/","excerpt":"","text":"http://archive.cloudera.com/cdh5/cdh/5/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"emule 连接网络","slug":"history/tech/5b309e5e5bf8e4f86e557e1a","date":"2018-06-24T19:48:46.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b309e5e5bf8e4f86e557e1a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b309e5e5bf8e4f86e557e1a/","excerpt":"","text":"ed2k在电骡服务器界面右边的 从URL更新server.met 字样下边的小框里输入 http://upd.emule-security.org/server.met，然后点击更新 kad将下面的三个HTTP地址之一加入到eMule软件 从以下网址获取节点信息 中123http://upd.emule-security.org/nodes.dathttp://kademlia.ru/download/nodes.dathttp://sn.im/nodes.dat","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"卷积计算公式","slug":"history/tech/5b2b59685bf8e4f86e557e19","date":"2018-06-20T19:53:12.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b2b59685bf8e4f86e557e19/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b2b59685bf8e4f86e557e19/","excerpt":"","text":"全零填充时尺寸=入长/步长；非全零填充时尺寸=（入长-核长+1）/步长123456输出图片边长=（输入图片边长–卷积核长+1）/步长输出数据体的尺寸=(W−F+2P)/S+1W：输入数据体尺寸F：卷积层中神经元感知域S：步长，P：零填充的数量将一张3232大小的图片输入一个卷积神经网络，经过一层卷积层（卷积核大小为55，步长为1，非全零填充）和一层池化层（池化核大小为2*2，步长为2，全零填充）之后输出的图片尺寸为多少？114","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"吴恩达最新课程","slug":"history/tech/5b2b32ae5bf8e4f86e557e18","date":"2018-06-20T17:07:58.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b2b32ae5bf8e4f86e557e18/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b2b32ae5bf8e4f86e557e18/","excerpt":"","text":"https://web.stanford.edu/class/cs230/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"git 从远程仓库获取所有分支","slug":"history/tech/5b2a055a5bf8e4f86e557e17","date":"2018-06-19T19:42:18.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b2a055a5bf8e4f86e557e17/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b2a055a5bf8e4f86e557e17/","excerpt":"","text":"123git branch -r | grep -v &apos;\\-&gt;&apos; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; donegit fetch --allgit pull --all","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"微信小程序设置地图满屏模式","slug":"history/tech/5b287c315bf8e4f86e557e16","date":"2018-06-19T03:44:49.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b287c315bf8e4f86e557e16/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b287c315bf8e4f86e557e16/","excerpt":"","text":"在对地图进行控制显示区域大小时想将地图全屏显示在手机上，使用平时的px或者直接使用百分比对于高度全屏无效，这时候可以通过vh这个单位，整个屏幕默认满屏为100vh;所以将地图的高度设置为100vh宽度设置为100%，就可以！123&lt;view style=&quot;width: &#123;&#123; windowWidth &#125;&#125;px;height: &#123;&#123;windowHeight&#125;&#125;px;&quot;&gt; &lt;map id=&quot;myMap&quot; longitude=&quot;&#123;&#123;longitude&#125;&#125;&quot; latitude=&quot;&#123;&#123;latitude&#125;&#125;&quot; scale=&quot;14&quot; controls=&quot;&#123;&#123;controls&#125;&#125;&quot; bindcontroltap=&quot;controltap&quot; markers=&quot;&#123;&#123;markers&#125;&#125;&quot; bindmarkertap=&quot;markertap&quot; polyline=&quot;&#123;&#123;polyline&#125;&#125;&quot; bindregionchange=&quot;regionchange&quot; show-location=&quot;True&quot; style=&quot;width: 100%;height:100vh;&quot;&gt;&lt;/map&gt;&lt;/view&gt;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"No module named SimpleHTTPServer","slug":"history/tech/5b2247189143f2d7465f2ee6","date":"2018-06-13T22:44:40.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b2247189143f2d7465f2ee6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b2247189143f2d7465f2ee6/","excerpt":"","text":"使用 SimpleHTTPServer:1python -m SimpleHTTPServer报错：1No module named SimpleHTTPServer解决：1python.exe -m http.server","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"修改 keras backend","slug":"history/tech/5b1f9b929143f2d7465f2ee5","date":"2018-06-11T22:08:18.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b1f9b929143f2d7465f2ee5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b1f9b929143f2d7465f2ee5/","excerpt":"","text":"配置文件路径：1~/.keras/keras.json临时方案:1KERAS_BACKEND=theano代码方案:12import osos.environ[&apos;KERAS_BACKEND&apos;] = &apos;theano&apos;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ai 站集合","slug":"history/tech/5b1f8a7e9143f2d7465f2ee4","date":"2018-06-11T20:55:26.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b1f8a7e9143f2d7465f2ee4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b1f8a7e9143f2d7465f2ee4/","excerpt":"","text":"http://www.fast.aihttps://morvanzhou.github.io/about/http://sofasofa.io/https://blog.coast.ai","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"视频分类","slug":"history/tech/5b1f890c9143f2d7465f2ee3","date":"2018-06-11T20:49:16.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b1f890c9143f2d7465f2ee3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b1f890c9143f2d7465f2ee3/","excerpt":"","text":"kears 中文文档：http://keras-cn.readthedocs.io/en/latest/youtube 8M 数据集https://research.google.com/youtube8m/UCF 101 数据集http://crcv.ucf.edu/data/UCF101.php","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"分布式事务解决方案","slug":"history/tech/5b1f633f9143f2d7465f2ee2","date":"2018-06-11T18:07:59.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b1f633f9143f2d7465f2ee2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b1f633f9143f2d7465f2ee2/","excerpt":"","text":"补偿方案：tcc soga 业务补偿 mysql:5.7 xa 参考资料：https://www.cnblogs.com/luoyunfei99/articles/6803682.htmlhttps://github.com/changmingxie/tcc-transactionhttps://servicecomb.incubator.apache.org/cn/docs/distributed-transactions-saga-implementation/https://github.com/ServiceComb","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"安装 pm2-web 提示缺少  dns_sd.h","slug":"history/tech/5b1e37fa9143f2d7465f2ee1","date":"2018-06-10T20:51:06.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b1e37fa9143f2d7465f2ee1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b1e37fa9143f2d7465f2ee1/","excerpt":"","text":"报错信息：1fatal error: dns_sd.h: No such file or directory解决：1sudo apt-get install libavahi-compat-libdnssd-dev","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 14.04 升级到 16.04 curl 报错","slug":"history/tech/5b14f3df33380aa24f1fc286","date":"2018-06-03T20:10:07.000Z","updated":"2020-11-29T01:42:08.771Z","comments":true,"path":"history/tech/5b14f3df33380aa24f1fc286/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b14f3df33380aa24f1fc286/","excerpt":"","text":"ubuntu 14.04 升级到 16.04 curl 报错12345root@test:~# curlcurl: error while loading shared libraries: librtmp.so.0: cannot open shared object file: No such file or directoryroot@test:~# sudo ln -s /usr/lib/x86_64-linux-gnu/librtmp.so.1 /usr/lib/x86_64-linux-gnu/librtmp.so.0root@test:~# curlcurl: try 'curl --help' or 'curl --manual' for more information","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 python3","slug":"history/tech/5b12c63933380aa24f1fc282","date":"2018-06-03T04:30:49.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b12c63933380aa24f1fc282/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b12c63933380aa24f1fc282/","excerpt":"","text":"首先安装依赖包12yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel下载：1https://www.python.org/ftp/python/编译：1234tar -xvJf Python-3.6.5.tar.xzcd Python-3.6.5./configure --prefix=/usr/local/python/python3make &amp;&amp; make install软连接:12ln -s /usr/local/python/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python/python3/bin/pip3 /usr/bin/pip3","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7 安装 htop","slug":"history/tech/5b12c4f533380aa24f1fc281","date":"2018-06-03T04:25:25.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b12c4f533380aa24f1fc281/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b12c4f533380aa24f1fc281/","excerpt":"","text":"12yum -y install epel-releaseyum -y install htop常用功能：F1 : 查看htop使用说明 F2 : 设置 F3 : 搜索进程 F4 : 过滤器，按关键字搜索 F5 : 显示树形结构 F6 : 选择排序方式 F7 : 减少nice值，这样就可以提高对应进程的优先级 F8 : 增加nice值，这样可以降低对应进程的优先级 F9 : 杀掉选中的进程 F10 : 退出htop / : 搜索字符 h : 显示帮助 l ：显示进程打开的文件: 如果安装了lsof，按此键可以显示进程所打开的文件 u ：显示所有用户，并可以选择某一特定用户的进程 s : 将调用strace追踪进程的系统调用 t : 显示树形结构 H ：显示/隐藏用户线程 I ：倒转排序顺序 K ：显示/隐藏内核线程 M ：按内存占用排序 P ：按CPU排序 T ：按运行时间排序 上下键或PgUP, PgDn : 移动选中进程 左右键或Home, End : 移动列表 Space(空格) : 标记/取消标记一个进程。命令可以作用于多个进程，例如 &quot;kill&quot;，将应用于所有已标记的进程","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7上使用systemd启动supervisor","slug":"history/tech/5b132db733380aa24f1fc284","date":"2018-06-02T23:52:23.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b132db733380aa24f1fc284/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b132db733380aa24f1fc284/","excerpt":"","text":"添加文件:123456789101112131415vim /usr/lib/systemd/system/supervisord.service[Unit]Description=Supervisor daemon[Service]Type=forkingExecStart=/usr/bin/supervisord -c /etc/supervisord.confExecStop=/usr/bin/supervisorctl $OPTIONS shutdownExecReload=/usr/bin/supervisorctl $OPTIONS reloadKillMode=processRestart=on-failureRestartSec=42s[Install]WantedBy=multi-user.target激活 &amp; 启动：12systemctl enable supervisord.servicesystemctl start supervisord.service如果修改了文件，可以通过reload命令来重新加载 supervisord.service 文件1systemctl reload supervisord.service","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos7 安装 pip","slug":"history/tech/5b132d2b33380aa24f1fc283","date":"2018-06-02T23:50:03.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b132d2b33380aa24f1fc283/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b132d2b33380aa24f1fc283/","excerpt":"","text":"1yum -y install epel-release1yum -y install python-pip","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"git 放弃本地修改 强制更新","slug":"history/tech/5b139c8a33380aa24f1fc285","date":"2018-06-02T19:45:14.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b139c8a33380aa24f1fc285/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b139c8a33380aa24f1fc285/","excerpt":"","text":"git fetch 下载远程的库的内容, git reset 把HEAD指向刚刚下载的最新的版本12git fetch --allgit reset --hard origin/master","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Centos7安装完毕后无法联网","slug":"history/tech/5b12ad2d33380aa24f1fc280","date":"2018-06-02T02:43:57.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b12ad2d33380aa24f1fc280/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b12ad2d33380aa24f1fc280/","excerpt":"","text":"最后一行改为 ONBOOT=YES123cd /etc/sysconfig/network-scripts/ vi ifcfg-xxx ONBOOT=YES重启 network:1service network restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Error authenticating some packages while upgrade","slug":"history/tech/5b12a9e833380aa24f1fc27f","date":"2018-06-02T02:30:00.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b12a9e833380aa24f1fc27f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b12a9e833380aa24f1fc27f/","excerpt":"","text":"ubuntu 14.04 do-release-upgrade, 报错：1Error authenticating some packages while upgrade解决方案:123vim /etc/update-manager/release-upgrades.d/unauth.cfg[Distro]AllowUnauthenticated=yes安装完成后删除此文件即可。参考资料:https://askubuntu.com/questions/425355/error-authenticating-some-packages-while-upgrade","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 16.04 安装 tensorflow","slug":"history/tech/5b129cac33380aa24f1fc27e","date":"2018-06-02T01:33:32.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b129cac33380aa24f1fc27e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b129cac33380aa24f1fc27e/","excerpt":"","text":"系统版本：12root@xxxx:~# cat /etc/issueUbuntu 16.04.1 LTS \\n \\l环境准备:123apt-get install python3-setuptoolsapt-get install python-pkg-resources=3.3-1ubuntu1python -m pip install --upgrade --force-reinstall pip安装 tensorflow:1pip install tensorflow","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"twnsorflow GPU 版本报错 Blas GEMM launch failed","slug":"history/tech/5b10ed7233380aa24f1fc27d","date":"2018-05-31T18:53:38.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b10ed7233380aa24f1fc27d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b10ed7233380aa24f1fc27d/","excerpt":"","text":"报错信息12InternalError (see above for traceback): Blas GEMM launch failed : a.shape=(10000, 784), b.shape=(784, 500), m=10000, n=500, k=784 [[Node: MatMul = MatMul[T=DT_FLOAT, transpose_a=false, transpose_b=false, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](_arg_Placeholder_0_0/_11, Variable/read)]]原因如果你是使用 GPU 版 TensorFlow 的话，并且你想在显卡高占用率的情况下（比如玩游戏）训练模型，那你要注意在初始化 Session 的时候为其分配固定数量的显存，否则可能会在开始训练的时候直接报错退出解决方案：需要用下面的方法创建 Session：12gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333) sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))参考资料:https://segmentfault.com/a/1190000009954640?utm_source=itdadao&amp;utm_medium=referral","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 右键 cmd","slug":"history/tech/5b10ea9a33380aa24f1fc27c","date":"2018-05-31T18:41:30.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b10ea9a33380aa24f1fc27c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b10ea9a33380aa24f1fc27c/","excerpt":"","text":"12345678910111213141516171819202122232425262728Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\background\\shell\\cmd_here] @=&quot;在此处打开命令行&quot; &quot;Icon&quot;=&quot;cmd.exe&quot; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\background\\shell\\cmd_here\\command] @=&quot;\\&quot;C:\\\\Windows\\\\System32\\\\cmd.exe\\&quot;&quot; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Folder\\shell\\cmdPrompt] @=&quot;在此处打开命令行&quot; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Folder\\shell\\cmdPrompt\\command] @=&quot;\\&quot;C:\\\\Windows\\\\System32\\\\cmd.exe\\&quot; \\&quot;cd %1\\&quot;&quot; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\shell\\cmd_here] @=&quot;在此处打开命令行&quot; &quot;Icon&quot;=&quot;cmd.exe&quot; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\shell\\cmd_here\\command] @=&quot;\\&quot;C:\\\\Windows\\\\System32\\\\cmd.exe\\&quot;&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"TensorFlow 优化笔记","slug":"history/tech/5b0fbc6d33380aa24f1fc27b","date":"2018-05-30T21:12:13.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0fbc6d33380aa24f1fc27b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0fbc6d33380aa24f1fc27b/","excerpt":"","text":"学习率12345678910111213141516171819import tensorflow as tfw = tf.Variable(tf.constant(5, dtype=tf.float32))loss = tf.square(w + 1)train_step = tf.train.GradientDescentOptimizer(1).minimize(loss)#train_step = tf.train.GradientDescentOptimizer(0.0001).minimize(loss)#train_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)with tf.Session() as sess: init = tf.initialize_all_variables() sess.run(init) for i in range(40): sess.run(train_step) loss_val = sess.run(loss) print(&quot;%s loss %f .&quot; % (i, loss_val))学习率大了震荡不收敛，小了收敛速度慢指数衰减学习率1234567891011121314151617181920212223242526import tensorflow as tfLEARNING_RATE_BASE = 0.1LEARNING_RATE_DECAY = 0.99LEARNING_RATE_STEP = 1global_step = tf.Variable(0, trainable=False)learning_rate = tf.train.exponential_decay(LEARNING_RATE_BASE, global_step, LEARNING_RATE_STEP, LEARNING_RATE_DECAY, staircase=True)w = tf.Variable(tf.constant(5, dtype=tf.float32))loss = tf.square(w + 1)train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)with tf.Session() as sess: init = tf.initialize_all_variables() sess.run(init) for i in range(50): sess.run(train_step) learning_rate_val = sess.run(learning_rate) global_step_val = sess.run(global_step) w_val = sess.run(w) loss_val = sess.run(loss) print(learning_rate_val, global_step_val, w_val, loss_val)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"java 验证码生成模块","slug":"history/tech/5b0e13c633380aa24f1fc274","date":"2018-05-30T03:00:22.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0e13c633380aa24f1fc274/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0e13c633380aa24f1fc274/","excerpt":"","text":"1https://code.google.com/archive/p/kaptcha/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"tensorflow 笔记2 正反向传播神经网络小记","slug":"history/tech/5b0eb6c333380aa24f1fc279","date":"2018-05-30T02:35:47.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0eb6c333380aa24f1fc279/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0eb6c333380aa24f1fc279/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142import tensorflow as tfimport numpy as npBATCH_SIZE = 8seed = 23455rng = np.random.RandomState(seed)X = rng.rand(32, 2)Y = [[int(x0 + x1)] for (x0, x1) in X]print(&quot;X: \\n&quot;, X)print(&quot;Y: \\n&quot;, Y)x = tf.placeholder(tf.float32, shape=[None, 2])y_ = tf.placeholder(tf.float32, shape=[None, 1])w1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))w2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))a = tf.matmul(x, w1)y = tf.matmul(a, w2)# loss funcloss = tf.reduce_mean(tf.square(y - y_))train_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)with tf.Session() as sess: init_top = tf.global_variables_initializer() sess.run(init_top) print(&quot;w1:\\n&quot;, sess.run(w1)) print(&quot;w2:\\n&quot;, sess.run(w2)) print(&quot;\\n&quot;) SETPS = 3000 for i in range(SETPS): start = (i * BATCH_SIZE) % 32 end = start + BATCH_SIZE sess.run(train_step, feed_dict=&#123;x: X[start:end], y_: Y[start:end]&#125;) if i % 500 == 0: total_loss = sess.run(loss, feed_dict=&#123;x: X, y_: Y&#125;) print(&quot;After %d training step(s) ,loss on all data is %g &quot; % (i, total_loss)) print(&quot;\\n&quot;) print(&quot;w1:\\n&quot;, sess.run(w1)) print(&quot;w2:\\n&quot;, sess.run(w2))","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"tensorflow深度学习","slug":"tensorflow深度学习","permalink":"https://wangxiuwen.github.io/tags/tensorflow%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"author":"baipeng"},{"title":"tensorflow 笔记","slug":"history/tech/5b0e611433380aa24f1fc276","date":"2018-05-29T20:30:12.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0e611433380aa24f1fc276/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0e611433380aa24f1fc276/","excerpt":"","text":"实现加法:1234567#coding:utf-8import tensorflow as tf #引入模块a = tf.constant([1.0, 2.0]) #定义一个张量等于[1.0,2.0]b = tf.constant([3.0, 4.0]) #定义一个张量等于[3.0,4.0]result = a+b #实现 a 加 b 的加法print (result) #打印出结果输出结果：12C:\\Users\\wangxiuwen\\Desktop\\tensor&gt;python test.pyTensor(\"add:0\", shape=(2,), dtype=float32) 实现矩阵乘法:1234567import tensorflow as tf #引入模块x = tf.constant([[1.0, 2.0]]) #定义一个 2 阶张量等于[[1.0,2.0]]w = tf.constant([[3.0], [4.0]]) #定义一个 2 阶张量等于[[3.0],[4.0]]y = tf.matmul(x, w) #实现 xw 矩阵乘法, 根据矩阵乘法的定义，要求矩阵A的列数和矩阵B的行数一致with tf.Session() as sess: print (sess.run(y)) 构建神经网络:12345678910111213141516171819202122232425#coding:utf-8import tensorflow as tfwith tf.device('/gpu:0'): x=tf.placeholder(tf.float32,shape=(None,2)) w1=tf.Variable(tf.random_normal([2,3],stddev=1,seed=1)) w2=tf.Variable(tf.random_normal([3,1],stddev=1,seed=1)) a=tf.matmul(x,w1) y=tf.matmul(a,w2) with tf.Session() as sess: init_op=tf.global_variables_initializer() sess.run(init_op) print(\"y is :\\n\", sess.run(y, feed_dict=&#123; x:[ [0.7, 0.5], [0.2, 0.3], [0.3, 0.4], [0.4, 0.5] ] &#125;) ) 反向传播:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#coding:utf-8#0导入模块，生成模拟数据集。import tensorflow as tfimport numpy as npimport datetimeBATCH_SIZE = 8SEED = 23455#基于seed产生随机数rdm = np.random.RandomState(SEED)#随机数返回32行2列的矩阵 表示32组 体积和重量 作为输入数据集X = rdm.rand(32,2)#从X这个32行2列的矩阵中 取出一行 判断如果和小于1 给Y赋值1 如果和不小于1 给Y赋值0 #作为输入数据集的标签（正确答案） Y_ = [[int(x0 + x1 &lt; 1)] for (x0, x1) in X]#1定义神经网络的输入、参数和输出,定义前向传播过程。x = tf.placeholder(tf.float32, shape=(None, 2))y_= tf.placeholder(tf.float32, shape=(None, 1))w1= tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))w2= tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))a = tf.matmul(x, w1)y = tf.matmul(a, w2)#2定义损失函数及反向传播方法。loss_mse = tf.reduce_mean(tf.square(y-y_)) train_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss_mse)#train_step = tf.train.MomentumOptimizer(0.001,0.9).minimize(loss_mse)#train_step = tf.train.AdamOptimizer(0.001).minimize(loss_mse)#3生成会话，训练STEPS轮with tf.Session() as sess: starttime = datetime.datetime.now() init_op = tf.global_variables_initializer() sess.run(init_op) # 输出目前（未经训练）的参数取值。 print (\"w1:\\n\", sess.run(w1)) print (\"w2:\\n\", sess.run(w2)) print (\"\\n\") # 训练模型。 STEPS = 20001 for i in range(STEPS): start = (i*BATCH_SIZE) % 32 end = start + BATCH_SIZE sess.run(train_step, feed_dict=&#123;x: X[start:end], y_: Y_[start:end]&#125;) if i % 2000 == 0: total_loss = sess.run(loss_mse, feed_dict=&#123;x: X, y_: Y_&#125;) print(\"After %d training step(s), loss_mse on all data is %g\" % (i, total_loss)) # 输出训练后的参数取值。 print (\"\\n\") print (\"w1:\\n\", sess.run(w1)) print (\"w2:\\n\", sess.run(w2)) endtime = datetime.datetime.now() interval=(endtime - starttime).seconds print(\"interval: \", interval)输出结果：12345678w1: [[-0.69053286 0.8059843 0.0969111 ] [-2.3437088 -0.10367863 0.58519495]]w2: [[-0.08949634] [ 0.8059557 ] [-0.05076383]]After 18000 training step(s), loss_mse on all data is 0.383561 自定义损失函数:12345678910111213141516171819202122232425262728293031323334353637383940#coding:utf-8#酸奶成本9元， 酸奶利润1元#预测多了损失大，故不要预测多，故生成的模型会少预测一些#0导入模块，生成数据集import tensorflow as tfimport numpy as npBATCH_SIZE = 8SEED = 23455COST = 9PROFIT = 1rdm = np.random.RandomState(SEED)X = rdm.rand(32,2)Y = [[x1+x2+(rdm.rand()/10.0-0.05)] for (x1, x2) in X]#1定义神经网络的输入、参数和输出，定义前向传播过程。x = tf.placeholder(tf.float32, shape=(None, 2))y_ = tf.placeholder(tf.float32, shape=(None, 1))w1= tf.Variable(tf.random_normal([2, 1], stddev=1, seed=1))y = tf.matmul(x, w1)#2定义损失函数及反向传播方法。#重新定义损失函数，使得预测多了的损失大，于是模型应该偏向少的方向预测。loss = tf.reduce_sum(tf.where(tf.greater(y, y_), (y - y_)*COST, (y_ - y)*PROFIT))train_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)#3生成会话，训练STEPS轮。with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) STEPS = 3000 for i in range(STEPS): start = (i*BATCH_SIZE) % 32 end = (i*BATCH_SIZE) % 32 + BATCH_SIZE sess.run(train_step, feed_dict=&#123;x: X[start:end], y_: Y[start:end]&#125;) if i % 500 == 0: print \"After %d training steps, w1 is: \" % (i) print sess.run(w1), \"\\n\" print \"Final w1 is: \\n\", sess.run(w1) 可衰减的学习率:123456789101112131415161718192021222324252627282930#coding:utf-8#设损失函数 loss=(w+1)^2, 令w初值是常数10。反向传播就是求最优w，即求最小loss对应的w值#使用指数衰减的学习率，在迭代初期得到较高的下降速度，可以在较小的训练轮数下取得更有收敛度。import tensorflow as tfLEARNING_RATE_BASE = 0.1 #最初学习率LEARNING_RATE_DECAY = 0.99 #学习率衰减率LEARNING_RATE_STEP = 1 #喂入多少轮BATCH_SIZE后，更新一次学习率，一般设为：总样本数/BATCH_SIZE#运行了几轮BATCH_SIZE的计数器，初值给0, 设为不被训练global_step = tf.Variable(0, trainable=False)#定义指数下降学习率learning_rate = tf.train.exponential_decay(LEARNING_RATE_BASE, global_step, LEARNING_RATE_STEP, LEARNING_RATE_DECAY, staircase=True)#定义待优化参数，初值给10w = tf.Variable(tf.constant(5, dtype=tf.float32))#定义损失函数lossloss = tf.square(w+1)#定义反向传播方法train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)#生成会话，训练40轮with tf.Session() as sess: init_op=tf.global_variables_initializer() sess.run(init_op) for i in range(40): sess.run(train_step) learning_rate_val = sess.run(learning_rate) global_step_val = sess.run(global_step) w_val = sess.run(w) loss_val = sess.run(loss) print (\"After %s steps: global_step is %f, w is %f, learning rate is %f, loss is %f\" % (i, global_step_val, w_val, learning_rate_val, loss_val)) 滑动平均(影子):1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#coding:utf-8import tensorflow as tf#1. 定义变量及滑动平均类#定义一个32位浮点变量，初始值为0.0 这个代码就是不断更新w1参数，优化w1参数，滑动平均做了个w1的影子w1 = tf.Variable(0, dtype=tf.float32)#定义num_updates（NN的迭代轮数）,初始值为0，不可被优化（训练），这个参数不训练global_step = tf.Variable(0, trainable=False)#实例化滑动平均类，给衰减率为0.99，当前轮数global_stepMOVING_AVERAGE_DECAY = 0.99ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)#ema.apply后的括号里是更新列表，每次运行sess.run（ema_op）时，对更新列表中的元素求滑动平均值。#在实际应用中会使用tf.trainable_variables()自动将所有待训练的参数汇总为列表#ema_op = ema.apply([w1])ema_op = ema.apply(tf.trainable_variables())#2. 查看不同迭代中变量取值的变化。with tf.Session() as sess: # 初始化 init_op = tf.global_variables_initializer() sess.run(init_op) #用ema.average(w1)获取w1滑动平均值 （要运行多个节点，作为列表中的元素列出，写在sess.run中） #打印出当前参数w1和w1滑动平均值 print( \"current global_step:\", sess.run(global_step)) print( \"current w1\", sess.run([w1, ema.average(w1)])) # 参数w1的值赋为1 sess.run(tf.assign(w1, 1)) sess.run(ema_op) print( \"current global_step:\", sess.run(global_step)) print( \"current w1\", sess.run([w1, ema.average(w1)])) # 更新global_step和w1的值,模拟出轮数为100时，参数w1变为10, 以下代码global_step保持为100，每次执行滑动平均操作，影子值会更新 sess.run(tf.assign(global_step, 100)) sess.run(tf.assign(w1, 10)) sess.run(ema_op) print( \"current global_step:\", sess.run(global_step)) print( \"current w1:\", sess.run([w1, ema.average(w1)])) # 每次sess.run会更新一次w1的滑动平均值 sess.run(ema_op) print( \"current global_step:\" , sess.run(global_step)) print( \"current w1:\", sess.run([w1, ema.average(w1)])) sess.run(ema_op) print( \"current global_step:\" , sess.run(global_step)) print( \"current w1:\", sess.run([w1, ema.average(w1)])) sess.run(ema_op) print( \"current global_step:\" , sess.run(global_step)) print( \"current w1:\", sess.run([w1, ema.average(w1)])) sess.run(ema_op) print( \"current global_step:\" , sess.run(global_step)) print( \"current w1:\", sess.run([w1, ema.average(w1)])) sess.run(ema_op) print( \"current global_step:\" , sess.run(global_step)) print( \"current w1:\", sess.run([w1, ema.average(w1)])) sess.run(ema_op) print( \"current global_step:\" , sess.run(global_step)) print( \"current w1:\", sess.run([w1, ema.average(w1)]))#更改 MOVING_AVERAGE_DECAY 为 0.1 看影子追随速度 正则化:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#coding:utf-8#0导入模块 ，生成模拟数据集import tensorflow as tfimport numpy as npimport matplotlib.pyplot as pltBATCH_SIZE = 30 seed = 2 #基于seed产生随机数rdm = np.random.RandomState(seed)#随机数返回300行2列的矩阵，表示300组坐标点（x0,x1）作为输入数据集X = rdm.randn(300,2)#从X这个300行2列的矩阵中取出一行,判断如果两个坐标的平方和小于2，给Y赋值1，其余赋值0#作为输入数据集的标签（正确答案）Y_ = [int(x0*x0 + x1*x1 &lt;2) for (x0,x1) in X]#遍历Y中的每个元素，1赋值'red'其余赋值'blue'，这样可视化显示时人可以直观区分Y_c = [['red' if y else 'blue'] for y in Y_]#对数据集X和标签Y进行shape整理，第一个元素为-1表示，随第二个参数计算得到，第二个元素表示多少列，把X整理为n行2列，把Y整理为n行1列X = np.vstack(X).reshape(-1,2)Y_ = np.vstack(Y_).reshape(-1,1)print( X)print( Y_)print( Y_c)#用plt.scatter画出数据集X各行中第0列元素和第1列元素的点即各行的（x0，x1），用各行Y_c对应的值表示颜色（c是color的缩写） plt.scatter(X[:,0], X[:,1], c=np.squeeze(Y_c)) plt.show()#定义神经网络的输入、参数和输出，定义前向传播过程 def get_weight(shape, regularizer): w = tf.Variable(tf.random_normal(shape), dtype=tf.float32) tf.add_to_collection('losses', tf.contrib.layers.l2_regularizer(regularizer)(w)) return wdef get_bias(shape): b = tf.Variable(tf.constant(0.01, shape=shape)) return b x = tf.placeholder(tf.float32, shape=(None, 2))y_ = tf.placeholder(tf.float32, shape=(None, 1))w1 = get_weight([2,11], 0.01) b1 = get_bias([11])y1 = tf.nn.relu(tf.matmul(x, w1)+b1)w2 = get_weight([11,1], 0.01)b2 = get_bias([1])y = tf.matmul(y1, w2)+b2 #定义损失函数loss_mse = tf.reduce_mean(tf.square(y-y_))loss_total = loss_mse + tf.add_n(tf.get_collection('losses'))#定义反向传播方法：不含正则化train_step = tf.train.AdamOptimizer(0.0001).minimize(loss_mse)with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) STEPS = 40000 for i in range(STEPS): start = (i*BATCH_SIZE) % 300 end = start + BATCH_SIZE sess.run(train_step, feed_dict=&#123;x:X[start:end], y_:Y_[start:end]&#125;) if i % 2000 == 0: loss_mse_v = sess.run(loss_mse, feed_dict=&#123;x:X, y_:Y_&#125;) print((\"After %d steps, loss is: %f\" %(i, loss_mse_v))) #xx在-3到3之间以步长为0.01，yy在-3到3之间以步长0.01,生成二维网格坐标点 xx, yy = np.mgrid[-3:3:.01, -3:3:.01] #将xx , yy拉直，并合并成一个2列的矩阵，得到一个网格坐标点的集合 grid = np.c_[xx.ravel(), yy.ravel()] #将网格坐标点喂入神经网络 ，probs为输出 probs = sess.run(y, feed_dict=&#123;x:grid&#125;) #probs的shape调整成xx的样子 probs = probs.reshape(xx.shape) print( \"w1:\\n\",sess.run(w1)) print( \"b1:\\n\",sess.run(b1)) print( \"w2:\\n\",sess.run(w2)) print( \"b2:\\n\",sess.run(b2))plt.scatter(X[:,0], X[:,1], c=np.squeeze(Y_c))plt.contour(xx, yy, probs, levels=[.5])plt.show()#定义反向传播方法：包含正则化train_step = tf.train.AdamOptimizer(0.0001).minimize(loss_total)with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) STEPS = 40000 for i in range(STEPS): start = (i*BATCH_SIZE) % 300 end = start + BATCH_SIZE sess.run(train_step, feed_dict=&#123;x: X[start:end], y_:Y_[start:end]&#125;) if i % 2000 == 0: loss_v = sess.run(loss_total, feed_dict=&#123;x:X,y_:Y_&#125;) print((\"After %d steps, loss is: %f\" %(i, loss_v))) xx, yy = np.mgrid[-3:3:.01, -3:3:.01] grid = np.c_[xx.ravel(), yy.ravel()] probs = sess.run(y, feed_dict=&#123;x:grid&#125;) probs = probs.reshape(xx.shape) print( \"w1:\\n\",sess.run(w1)) print( \"b1:\\n\",sess.run(b1)) print( \"w2:\\n\",sess.run(w2)) print( \"b2:\\n\",sess.run(b2))plt.scatter(X[:,0], X[:,1], c=np.squeeze(Y_c)) plt.contour(xx, yy, probs, levels=[.5])plt.show()","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 使用 tesseract 识别验证码","slug":"history/tech/5b0e519833380aa24f1fc275","date":"2018-05-29T19:24:08.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0e519833380aa24f1fc275/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0e519833380aa24f1fc275/","excerpt":"","text":"灰度处理 增加对比度(可选) 二值化 降噪 倾斜校正分割字符 建立训练库 识别 安装 python 所需的包:12pip install pillow pip install pytesseract下载 tesseract：1https://github.com/UB-Mannheim/tesseract/wiki添加 tesseract_cmd12345678910from PIL import Imageimport PIL.ImageOpsimport pytesseractpytesseract.pytesseract.tesseract_cmd = &apos;C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tesseract.exe&apos;img = Image.open(&apos;./in.jpg&apos;)# 转化为灰度imgry = img.convert(&apos;L&apos;)print (pytesseract.image_to_string(imgry))......参考资料：https://github.com/kuszaj/claptchahttp://www.hi-roy.com/2017/09/19/Python验证码识别/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"python 文件编码","slug":"history/tech/5b0c9c8133380aa24f1fc26e","date":"2018-05-29T00:19:13.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0c9c8133380aa24f1fc26e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0c9c8133380aa24f1fc26e/","excerpt":"","text":"符合正则表达式即可：1&quot;coding[:=]\\s*([-\\w.]+)&quot;符合条件的如下：123456#coding=&lt;encoding name&gt; 或# -*- coding: &lt;encoding name&gt; -*- 或#!/usr/bin/python # vim: set fileencoding=&lt;encoding name&gt; :","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"自建Spark + 腾讯云COS 数据源","slug":"history/tech/5b0cf7fd33380aa24f1fc26f","date":"2018-05-28T18:49:33.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0cf7fd33380aa24f1fc26f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0cf7fd33380aa24f1fc26f/","excerpt":"","text":"第一步先编译腾讯云提供的Hadoop 插件jar hadoop-cos-2.7.21234git clone https://github.com/tencentyun/cos-java-sdk-hadoop-v4cd cos-java-sdk-hadoop-v4运行以下命令进行编译，获取 target 目录下的 cos_api-4.2.jar：mvn clean package -Dmaven.test.skip=true12345678910111213141516171819202122 git clone https://github.com/tencentyun/hadoop-cosn-v4 cd hadoop-cosn-v4 因为 cosn 依赖 SDK，请将上一步编译的 cos_api-4.2.jar 拷贝到 src/main/resources 下，然后运行以下命令进行编译，获取 target 目录下的 hadoop-cos-2.7.2.jar： mvn clean package -Dmaven.test.skip=true``` 搭建你自己是Spark 工程。我这里使用的是Spark 2.2.0将获取的hadoop-cos-2.7.2.jar 手动添加到工程 或者 放在自己的maven私服里面加入都可以。我这里使用的自己的私服。 &lt;dependency&gt; &lt;groupId&gt;com.qcloud.hadoop-cos&lt;/groupId&gt; &lt;artifactId&gt;hadoop-cos&lt;/artifactId&gt; &lt;version&gt;2.7.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.qcloud&lt;/groupId&gt; &lt;artifactId&gt;cos_api&lt;/artifactId&gt; &lt;version&gt;4.2&lt;/version&gt; &lt;/dependency&gt;编写Spark 测试类CosTest：object CosTest extends Logging { def main(args: Array[String]): Unit = { val conf = new SparkConf().setAppName(&quot;CosTest&quot;) conf.setMaster(&quot;local[1]&quot;) .set(&quot;spark.executor.memory&quot;, &quot;8g&quot;) .set(&quot;spark.local.dir&quot;, &quot;spark_dir&quot;) .set(&quot;spark.broadcast.compress&quot;, &quot;true&quot;) .set(&quot;spark.rdd.compress&quot;, &quot;true&quot;) .set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) .set(&quot;spark.hadoop.fs.cos.userinfo.appid&quot;, &quot;1252448703&quot;) .set(&quot;spark.hadoop.fs.cos.userinfo.secretId&quot;, &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;) .set(&quot;spark.hadoop.fs.cos.userinfo.secretKey&quot;, &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;) .set(&quot;spark.hadoop.fs.cosn.impl&quot;, &quot;org.apache.hadoop.fs.cosnative.NativeCosFileSystem&quot;) .set(&quot;spark.hadoop.fs.cos.userinfo.region&quot;, &quot;tj&quot;) AppUtils.execute((cmd: CommandLine) =&gt; { (true, &quot;CosTest test&quot;) })(() =&gt; conf)(f = (cmd: CommandLine, spark: SparkSession) =&gt; { val rdd = spark.sparkContext.textFile(&quot;cosn://bucketName/***.csv&quot;) val count = rdd.count() rdd.foreach(println) println(s&quot;count: $count&quot;) })(args, OssTest.getClass.getSimpleName, options) } } 剩下的自己慢慢玩玩吧。躁起来","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"Spark","slug":"Spark","permalink":"https://wangxiuwen.github.io/tags/Spark/"},{"name":"COS","slug":"COS","permalink":"https://wangxiuwen.github.io/tags/COS/"},{"name":"腾讯云","slug":"腾讯云","permalink":"https://wangxiuwen.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"}],"author":"baipeng"},{"title":"tensorflow GPU 版本安装","slug":"history/tech/5b0b779633380aa24f1fc26d","date":"2018-05-28T03:29:26.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0b779633380aa24f1fc26d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0b779633380aa24f1fc26d/","excerpt":"","text":"安装 python 3.5安装 CUDA Drivershttps://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/#axzz4Vh7B32MZ下载cuDNN - CUDA for Deep Neural Networks 并放入环境变量https://developer.nvidia.com/cudnn安装 tensorflow gpu1pip install --upgrade tensorflow-gpu","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"摄像镜头的选购","slug":"history/shoot/5b0b647233380aa24f1fc26c","date":"2018-05-28T02:07:46.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5b0b647233380aa24f1fc26c/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5b0b647233380aa24f1fc26c/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"声音的四个阶段","slug":"history/tech/5b0b643133380aa24f1fc26b","date":"2018-05-28T02:06:41.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b0b643133380aa24f1fc26b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b0b643133380aa24f1fc26b/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cubase 人声的处理","slug":"history/music/5b0b630b33380aa24f1fc26a","date":"2018-05-28T02:01:47.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5b0b630b33380aa24f1fc26a/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5b0b630b33380aa24f1fc26a/","excerpt":"","text":"","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"}],"author":"wangxiuwen"},{"title":"Spring boot 2.0 问题汇总","slug":"history/tech/5b07b8e4ab7ec5414e74c869","date":"2018-05-24T19:19:00.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b07b8e4ab7ec5414e74c869/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b07b8e4ab7ec5414e74c869/","excerpt":"","text":"使用Druid 更高版本的。 2.0 以上版本配置多数据源。点击查看文档","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"使用 openssl 查看证书","slug":"history/tech/5b002d24ab7ec5414e74c868","date":"2018-05-19T01:56:52.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5b002d24ab7ec5414e74c868/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5b002d24ab7ec5414e74c868/","excerpt":"","text":"使用 openssl 查看证书：1openssl x509 -in server.crt -text","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"elasticsearch-5.5.0 取消聚合 size=0","slug":"history/tech/5afe48e4ab7ec5414e74c862","date":"2018-05-18T03:30:44.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afe48e4ab7ec5414e74c862/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afe48e4ab7ec5414e74c862/","excerpt":"","text":"issues 如下1https://github.com/elastic/elasticsearch/issues/18838","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Spark 中使用Redis容易出现的错误","slug":"history/tech/5afee588ab7ec5414e74c867","date":"2018-05-18T02:39:04.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afee588ab7ec5414e74c867/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afee588ab7ec5414e74c867/","excerpt":"","text":"Spark 中使用Redis容易出现的错误：使用client 操作后 一定要手动close掉，否则当线程中没有可用的clent 后，线程池会处于等待状态导致卡死，导致spark作业卡住。 数据序列化问题","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"elasticsearch-5.5.0 日期直方图聚合小坑 sdk Java","slug":"history/tech/5afee3f6ab7ec5414e74c866","date":"2018-05-18T02:32:22.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afee3f6ab7ec5414e74c866/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afee3f6ab7ec5414e74c866/","excerpt":"","text":"原先的Interval方法设置DateHistogramInterval 现已改为dateHistogramInterval方法设置。timeZone 设置时序从原先的timeZone(&quot;+08:00&quot;) 更改为 放进去一个DateTimeZone 对象DateTimeZone.forID(&quot;+08:00&quot;) AggregationBuilders .dateHistogram(AnalyticsConver.AGG_ALL_RESULT) .field(timeKey) .dateHistogramInterval(dateHistogramType.getHistogram()) .format(dateHistogramType.getFormat()) .minDocCount(0L) .order(Histogram.Order.KEY_DESC) .timeZone(DateTimeZone.forID(&quot;+08:00&quot;));","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"Spring boot 2.0  Redis  集成","slug":"history/tech/5afedfe6ab7ec5414e74c863","date":"2018-05-18T02:15:02.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afedfe6ab7ec5414e74c863/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afedfe6ab7ec5414e74c863/","excerpt":"","text":"使用默认的lettuce 做Redis的链接客户端，value序列化 使用自定义的FastJsonRedisSerializer加入依赖方面注意加入commons-pool2lettuce 使用了commons-pool2的连接池 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt; &lt;version&gt;2.5.0&lt;/version&gt; &lt;/dependency&gt; public class FastJsonRedisSerializer&lt;T&gt; implements RedisSerializer&lt;T&gt; { public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8; private Class&lt;T&gt; clazz; public FastJsonRedisSerializer(Class&lt;T&gt; clazz) { super(); this.clazz = clazz; } @Override public byte[] serialize(T t) throws SerializationException { if (null == t) { return new byte[0]; } return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET); } @Override public T deserialize(byte[] bytes) throws SerializationException { if (null == bytes || bytes.length &lt;= 0) { return null; } return JSON.parseObject(bytes, clazz); } }定义CacheConfig@Beanpublic KeyGenerator wiselyKeyGenerator() {return (target, method, params) -&gt; Joiner.on(&quot;&quot;).join(target.getClass().getName(), method.getName(), params);} @Bean public RedisTemplate&lt;String, String&gt; redisTemplate( RedisConnectionFactory factory) { StringRedisTemplate template = new StringRedisTemplate(factory); FastJsonRedisSerializer fastJsonRedisSerializer = new FastJsonRedisSerializer(Object.class); template.setValueSerializer(fastJsonRedisSerializer); template.setKeySerializer(new StringRedisSerializer()); template.setHashKeySerializer(new StringRedisSerializer()); template.setConnectionFactory(factory); template.afterPropertiesSet(); return template; } @Bean public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) { RedisCacheManager.RedisCacheManagerBuilder builder = RedisCacheManager .RedisCacheManagerBuilder .fromConnectionFactory(redisConnectionFactory); return builder.build(); }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"},{"name":"springboot","slug":"springboot","permalink":"https://wangxiuwen.github.io/tags/springboot/"}],"author":"baipeng"},{"title":"Hyperledger Fabric 基础概念","slug":"history/tech/5afe2c00ab7ec5414e74c861","date":"2018-05-18T01:27:28.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afe2c00ab7ec5414e74c861/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afe2c00ab7ec5414e74c861/","excerpt":"","text":"Ancor peer负责为加入的新节点同步数据 channel1.0 版本以后引入，不同通道之间的数据彼此隔离。目的是保护隐私，在channel A中的节点看不到 channel B 中的 transaction commitmentpeer 在提交 transaction 的 block 到账本中的时候的动作 Concurrentcy Control Version Check并发版本控制。在相同 channel 不同 peer 对同一个 world state 做了修改，为了保证数据一致性，要对这个状态做控制。 Configuration Block使用 Configuration Block 可以做一些配置 Consensus共识 Current State世界状态的最新状态 Dynamic Merbership Endorsement背书 。模拟执行 chaincode 的过程 Hyperledger Fabric CA在企业级联盟链中为节点颁发证书，让节点可以认证进入链中 Genesis Block创世区块 Gossip Protocol它可以在P2P 网络中发现节点，同步 ledger data Ledger即账本。一个账本包含两部分，区块链保存在磁盘中，世界状态存储在 state db 中 Member参与交易的都算 Member, peer 、order 、client端都算 Mebership Service Provider提供 Member 认证的服务 Order Service让交易顺序达成共识 Peer区块链网络中的节点 Proposal所有能触发 transaction 的动作 Query就是读取 state DataBase 中的数据 State Database存储状态的数据库 System Chain维护整个 chain 的 Transation每次交易都是一个 transation","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"区块链资源贴","slug":"history/tech/5afe27fbab7ec5414e74c860","date":"2018-05-18T01:10:19.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afe27fbab7ec5414e74c860/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afe27fbab7ec5414e74c860/","excerpt":"","text":"序号项目名称项目类型项目地址备注精通比特币http://book.8btc.com/books/1/master_bitcoin/_book/1社区http://hiblock.net/2一起学习以太坊项目https://github.com/etherchina/ethereum3以太坊源码分析项目https://github.com/ZtesoftCS/go-ethereum-code-analysis/4以太僵尸游戏https://cryptozombies.io/zh/5超级账本(Hyperledger)项目https://cn.hyperledger.org/Slack: https://hyperledgerproject.slack.comGerrit: https://gerrit.hyperledger.orgWiki: https://wiki.hyperledger.com中国工作组: wiki.hyperledger.org/groups/tsc/technical-working-group-china项目https://openzeppelin.org/让solidity更安全以太坊钱包https://metamask.io/chrome和 firefox 扩展以太坊Web3 Providerhttps://infura.io/以太坊官网文档中文版https://www.beibq.cn/book/74dk197-6818以太坊资源ethstats.net：实时查看网络的信息，如区块、价格、交易数等。ethernodes.org：显示整个网络的历史统计信息，如客户端的分布情况等。dapps.ethercasts.com：查看运行在以太坊上的 DApp 的信息，包括简介、所处阶段和状态等。区块链技术指南https://legacy.gitbook.com/book/yeasy/blockchain_guide/details智链技术文档https://wiki.chainnova.com/pages/viewpage.action?pageId=13369449智链 githubhttps://github.com/ChainNovahttps://github.com/zhizaolian区块链技术指南https://yeasy.gitbooks.io/blockchain_guide/kubectlhttps://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md?spm=5176.2020520152.0.0.49fd16dd7CL3is&amp;file=CHANGELOG.md以太坊文档https://ethereum.gitbooks.io/frontier-guide/content/index.html小象学院老师github地址https://github.com/shanlusunIBM-Blockchain-Archivehttps://github.com/IBM-Blockchain-Archive/learn-chaincode","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"超级账本 hyperledger 资料","slug":"history/tech/5afe274eab7ec5414e74c85f","date":"2018-05-18T01:07:26.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afe274eab7ec5414e74c85f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afe274eab7ec5414e74c85f/","excerpt":"","text":"官方文档：https://hyperledger-fabric.readthedocs.io/en/release-1.1/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"比特币结构","slug":"history/tech/5afe246cab7ec5414e74c85e","date":"2018-05-18T00:55:08.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afe246cab7ec5414e74c85e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afe246cab7ec5414e74c85e/","excerpt":"","text":"http://www.itdks.com/eventlist/detail/1428 1:17","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nano","slug":"history/tech/5afe2401ab7ec5414e74c85d","date":"2018-05-18T00:53:21.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5afe2401ab7ec5414e74c85d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5afe2401ab7ec5414e74c85d/","excerpt":"","text":"1alias nano=&quot;nano -w -x -E -T&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"使用 npm 安装 github 仓库中的代码","slug":"history/tech/5af802b0ab7ec5414e74c85c","date":"2018-05-12T21:17:36.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5af802b0ab7ec5414e74c85c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5af802b0ab7ec5414e74c85c/","excerpt":"","text":"使用npm安装github仓库中的代码1npm install https://github.com/GoogleChrome/puppeteer --save","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"python 爬虫常用库","slug":"history/tech/5af51547ee717629165813d8","date":"2018-05-11T04:00:07.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5af51547ee717629165813d8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5af51547ee717629165813d8/","excerpt":"","text":"https://github.com/miyakogi/pyppeteerhttps://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-browserrequests-htmlfake-useragent","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mac 下 pip 安装 selenium 成功，提示 no module named selenium","slug":"history/tech/5af4e0ceee717629165813d7","date":"2018-05-11T00:16:14.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5af4e0ceee717629165813d7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5af4e0ceee717629165813d7/","excerpt":"","text":"原因：系统自带 python 搜索路径中没有 `/usr/local/python` 查看系统搜索路径信息：123python&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.path查看pip信息：12python -m pip --versionpip --version解决1brew link python@2","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 安装 g++","slug":"history/tech/5af56d41ee717629165813d9","date":"2018-05-10T22:15:29.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5af56d41ee717629165813d9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5af56d41ee717629165813d9/","excerpt":"","text":"centos 安装 g++1yum install gcc-c++","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"vscode html 代码补全","slug":"history/tech/5aeff7d3ee717629165813d6","date":"2018-05-06T18:53:07.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5aeff7d3ee717629165813d6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5aeff7d3ee717629165813d6/","excerpt":"","text":"安装HTML CSS Support 插件用户设置中添加如下代码:12&quot;editor.parameterHints&quot;: true, &quot;editor.quickSuggestions&quot;: &#123; &quot;other&quot;: true, &quot;comments&quot;: true, &quot;strings&quot;: true &#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mac 安装 kubernetes","slug":"history/tech/5aedb6dcee717629165813d5","date":"2018-05-05T01:51:24.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5aedb6dcee717629165813d5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5aedb6dcee717629165813d5/","excerpt":"","text":"安装 VirtualBox:https://www.virtualbox.org/wiki/Downloads安装 kubectl:12# brew install kubectlcurl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/darwin/amd64/kubectl官方链接:https://kubernetes.io/docs/tasks/tools/install-kubectl/安装 minikube (minikube 使用google官方地址安装启动卡死，故使用国内阿里云地址):1curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.26.1/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/windows使用如下地址:1http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.26.1/minikube-windows-amd64.exegoogle官方地址:1curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.26.1/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/启动:1minikube start --registry-mirror=https://registry.docker-cn.com启动 dashboard:1minikube dashboard安装 helm:https://github.com/kubernetes/helm/releases参考文献：https://kubernetes.io/docs/tasks/tools/install-kubectl/https://yq.aliyun.com/articles/221687","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mac terminal 代理","slug":"history/tech/5aedb519ee717629165813d4","date":"2018-05-05T01:43:53.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5aedb519ee717629165813d4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5aedb519ee717629165813d4/","excerpt":"","text":"设置12345vim ~/.zshrc # proxy listalias proxy=&apos;export all_proxy=socks5://127.0.0.1:1080&apos;alias unproxy=&apos;unset all_proxy&apos;source ~/.zshrc打开代理12proxycurl ip.cn # 或者 curl cip.cc关闭代理1unproxy参考文献：https://github.com/mrdulin/blog/issues/18","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"搭建以太坊私链","slug":"history/tech/5ae66b81093d7c195d71a941","date":"2018-04-30T01:04:01.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ae66b81093d7c195d71a941/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ae66b81093d7c195d71a941/","excerpt":"","text":"初始化以太坊节点geth -datadir /data/eth/ init /usr/local/eth/genesis.json genesis.json:{ &quot;config&quot;: { &quot;chainId&quot;: 1000, &quot;homesteadBlock&quot;: 0, &quot;eip155Block&quot;: 0, &quot;eip158Block&quot;: 0 }, &quot;nonce&quot;: &quot;0x0000000000000061&quot;, &quot;timestamp&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;gasLimit&quot;: &quot;0x8000000&quot;, &quot;difficulty&quot;: &quot;0x100&quot;, &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;, &quot;alloc&quot;: {} } 12345678910chainId: 以太坊主网chainId为0，私链自己修改为一个任意Id。mixhash: 与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意和nonce的设置需要满足以太坊的黄皮书, 4.3.4. Block Header Validity, (44)章节所描述的条件。nonce: nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的黄皮书,4.3.4. Block Header Validity, (44)章节所描述的条件。difficulty: 设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度alloc: 用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。coinbase: 矿工的账号，随便填timestamp: 设置创世块的时间戳parentHash: 上一个区块的hash值，因为是创世块，所以这个值是0extraData: 附加信息，随便填，可以填你的个性信息gasLimit: 值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。 启动私链的以太坊节点1geth -datadir /data/eth/ --networkid 1000 console以太坊节点的主要操作:12345678910111213141516171819 admin eth personal miner&gt; personal.listAccounts[]&gt; personal.newAccount(&quot;qianrushi.org&quot;)&quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot;&gt; personal.listAccounts[&quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot;]&gt; personal.newAccount(&quot;embeded.org&quot;)&quot;0x27643bec775e242fbc06c0457f781d62249f012c&quot;&gt; personal.listAccounts[&quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot;, &quot;0x27643bec775e242fbc06c0457f781d62249f012c&quot;]&gt; personal.unlockAccount(&quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot;)Unlock account 0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fePassphrase: true 当前区块信息12&gt; eth.blockNumber&gt; eth.getBlock( eth.blockNumber ) 账户余额1&gt; web3.fromWei(eth.getBalance(eth.accounts[0]))","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"搭建以太坊私链","slug":"history/tech/5ae66b5e093d7c195d71a940","date":"2018-04-30T01:03:26.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ae66b5e093d7c195d71a940/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ae66b5e093d7c195d71a940/","excerpt":"","text":"初始化以太坊节点geth -datadir /data/eth/ init /usr/local/eth/genesis.json genesis.json:{ &quot;config&quot;: { &quot;chainId&quot;: 1000, &quot;homesteadBlock&quot;: 0, &quot;eip155Block&quot;: 0, &quot;eip158Block&quot;: 0 }, &quot;nonce&quot;: &quot;0x0000000000000061&quot;, &quot;timestamp&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;gasLimit&quot;: &quot;0x8000000&quot;, &quot;difficulty&quot;: &quot;0x100&quot;, &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;, &quot;alloc&quot;: {} } 12345678910chainId: 以太坊主网chainId为0，私链自己修改为一个任意Id。mixhash: 与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意和nonce的设置需要满足以太坊的黄皮书, 4.3.4. Block Header Validity, (44)章节所描述的条件。nonce: nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的黄皮书,4.3.4. Block Header Validity, (44)章节所描述的条件。difficulty: 设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度alloc: 用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。coinbase: 矿工的账号，随便填timestamp: 设置创世块的时间戳parentHash: 上一个区块的hash值，因为是创世块，所以这个值是0extraData: 附加信息，随便填，可以填你的个性信息gasLimit: 值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。 启动私链的以太坊节点geth -datadir /data/eth/ --networkid 1000 console 以太坊节点的主要操作:admin eth personal miner &gt; personal.listAccounts [] &gt; personal.newAccount(&quot;qianrushi.org&quot;) &quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot; &gt; personal.listAccounts [&quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot;] &gt; personal.newAccount(&quot;embeded.org&quot;) &quot;0x27643bec775e242fbc06c0457f781d62249f012c&quot; &gt; personal.listAccounts [&quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot;, &quot;0x27643bec775e242fbc06c0457f781d62249f012c&quot;] &gt; personal.unlockAccount(&quot;0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe&quot;) Unlock account 0xcce01f2d1e7ab5ba8d9e5f68cf81b49d145e97fe Passphrase: true 当前区块信息&gt; eth.blockNumber &gt; eth.getBlock( eth.blockNumber ) 账户余额 &gt; web3.fromWei(eth.getBalance(eth.accounts[0]))","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"truffle 搭建宠物商店","slug":"history/tech/5ae64903093d7c195d71a93f","date":"2018-04-29T22:36:51.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ae64903093d7c195d71a93f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ae64903093d7c195d71a93f/","excerpt":"","text":"安装智能合约相关npm 包12345npm install -g solcnpm install -g solc-clinpm install -g trufflenpm install -g ethereumjs-testrpc // 安装 testrpc, Ganache属于它的升级版npm install web3 创建工程123mkdir pet-shopcd pet-shoptruffle unbox pet-shoptruffle 框架目录介绍：1234contracts/ ： 智能合约文件存在这里，后缀.sol （solidity）migrations/ ： 部署脚本test/ ： 测试脚本truffle.js ：truffle的配置文件 编写智能合约在 contracts/ 目录下创建 Adoption.sol 文件1234567891011121314151617pragma solidity ^0.4.17; contract Adoption &#123; address[16] public adopters; //adopting a pet function adopt(uint petId) public returns (uint) &#123; require(petId &gt;= 0 &amp;&amp; petId &lt;= 15); adopters[petId] = msg.sender; return petId; &#125; //retrieve the adopters function getAdopters() public view returns (address[16]) &#123; return adopters; &#125; &#125; 编译合约1truffle compile 部署合约migratios/ 目录内创建新文件 2_deploy_contracts.js ：12345var Adoption = artifacts.require(&quot;Adoption&quot;);module.exports = function(deployer) &#123; deployer.deploy(Adoption);&#125;;部署智能合约部署到以太坊（私链）上：1truffle migrate","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"以太坊资料汇总","slug":"history/tech/5ae5bde0093d7c195d71a93e","date":"2018-04-29T00:43:12.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ae5bde0093d7c195d71a93e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ae5bde0093d7c195d71a93e/","excerpt":"","text":"web 可视化:ganacheganache是 一个图形化测试软件（也有命令行版本），可以一键在本地搭建以太坊区块链测试环境，并且将区块链的状态通过图形界面显示出来Solidity：Solidity轻钱包：metamaskmist 钱包：mist以太坊开发编辑器 remixremix以太坊客户端下载https://geth.ethereum.org/downloads/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"运维工具 paramiko","slug":"history/tech/5ae3eaa0093d7c195d71a93d","date":"2018-04-28T03:29:36.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ae3eaa0093d7c195d71a93d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ae3eaa0093d7c195d71a93d/","excerpt":"","text":"paramiko","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Spring Boot 日常问题小计 | Cache","slug":"history/tech/5ae002d2093d7c195d71a93c","date":"2018-04-25T04:23:46.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ae002d2093d7c195d71a93c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ae002d2093d7c195d71a93c/","excerpt":"","text":"基本原理和 spring 的事务管理类似，spring cache 的关键原理就是 spring AOP，通过 spring AOP，其实现了在方法调用前、调用后获取方法的入参和返回值，进而实现了缓存的逻辑。我们来看一下下面这个图：图 2. 原始方法调用图上图显示，当客户端“Calling code”调用一个普通类 Plain Object 的 foo() 方法的时候，是直接作用在 pojo 类自身对象上的，客户端拥有的是被调用者的直接的引用。而 Spring cache 利用了 Spring AOP 的动态代理技术，即当客户端尝试调用 pojo 的 foo（）方法的时候，给他的不是 pojo 自身的引用，而是一个动态生成的代理类图 3. 动态代理调用图如上图所示，这个时候，实际客户端拥有的是一个代理的引用，那么在调用 foo() 方法的时候，会首先调用 proxy 的 foo() 方法，这个时候 proxy 可以整体控制实际的 pojo.foo() 方法的入参和返回值，比如缓存结果，比如直接略过执行实际的 foo() 方法等，都是可以轻松做到的。注意和限制基于 proxy 的 spring aop 带来的内部调用问题上面介绍过 spring cache 的原理，即它是基于动态生成的 proxy 代理机制来对方法的调用进行切面，这里关键点是对象的引用问题，如果对象的方法是内部调用（即 this 引用）而不是外部引用，则会导致 proxy 失效，那么我们的切面就失效，也就是说上面定义的各种注释包括 @Cacheable、@CachePut 和 @CacheEvict 都会失效。要避免这个问题，就是要避免对缓存方法的内部调用，或者避免使用基于 proxy 的 AOP 模式，可以使用基于 aspectJ 的 AOP 模式来解决这个问题。@CacheEvict 的可靠性问题 @CacheEvict 注释有一个属性 beforeInvocation，缺省为 false，即缺省情况下，都是在实际的方法执行完成后，才对缓存进行清空操作。期间如果执行方法出现异常，则会导致缓存清空不被执行。我们可以用 @CacheEvict 注释提供的 beforeInvocation 属性，将其设置为 true，这样，在方法执行前我们的缓存就被清空了。可以确保缓存被清空。非 public 方法问题和内部调用问题类似，非 public 方法如果想实现基于注释的缓存，必须采用基于 AspectJ 的 AOP 机制。摇滚码农 公众号","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"比特币基础知识","slug":"history/tech/5ade8b4d1b1af27876b353b0","date":"2018-04-24T01:41:33.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ade8b4d1b1af27876b353b0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ade8b4d1b1af27876b353b0/","excerpt":"","text":"算力: 10T 10的 13次方，hash碰撞就是算力的代表pow：工作量证明pos：权益证明(持有的越多，获得记账的概率就越大)总量： 2100万枚，平均每十分钟产生一个区块，，每区块产生50枚货币，每发行21万个减半， 21万/10min = 1458.3 天 = 3.99 年，到 2140 年发行完毕。最近的一次减半是 2016年7月8号(第二次减半)，变成了 12.5枚。记账：谁计算出数学难题谁记账，并获得新产生的币以及区块中的交易手续费(现在为12.5个)，手续费约为 零点几个到两个。区块中包含两种信息: 区块身份信息： 区块的大小 区块的诞生时间 区块的哈希 区块的编号 网络中的交易 每个区块 约 1MB， 可以存储 一千笔交易每个比特币可以分割到小数点后八位UTXO: unspect transaction outputs全网算力： 约 8E 哈希每秒， 8 * 10 的 18 次方 1E = 1000p 1p = 1000T 2009.1.3 中本聪挖出第一枚比特币2009.10.5 新自由标准的用户发布比特币计算标准51% 攻击需要约 40万台设备， 40万台 * 1万/台 = 40亿2009年1月3日，中本聪挖发出来第一枚比特币的时候，比特币还没有价格，所以第一枚比特币的价格是零元。2009年10月5日，一个叫做新自由标准的用户，在一个比特币早期论坛里，发布比特币价格计算的方法。他认为一个比特币的价值计算方法是：计算机运行一年，所需要的平均电量大概是1331.5千瓦/时，乘以上年度美国居民平均用电的成本0.136美元，除以12个月，除以过去三天里产生的比特币的数量最后的结果再除以1美元。计算得出1美元等于1309.03个比特币。新自由标准的用户还提出人们需要一个可以真正用比特币来进行交易的网站，这个建议受到了论坛创始人的支持，给了他5050个比特币，他也给版主在线支付的5.02美元，这是最早的有记录的比特币价格。与矿池合作模式PPS: 固定投入， 固定收益模式，矿池预支收入给矿工PPLNS: 固定投入，动态收入。根据过去每个人算力占的股份，运气的好坏，动态获取收益。比特币的交易 场内交易 场外交易 法币交易 币币交易 P网，B网 交易对 市场深度 和 市场流动性钱包分类 全节点钱包 轻钱包 中心钱包 硬件钱包 安全机制 多重签名技术 区块链包含信息交易信息： 转账信息见证信息：某节点在某事件验证交易信息的可靠性的信息区块链扩容方案闪电网络将见证信息放在区块之外区块链本身扩容 BIP141 bitcoin core 团队提出 UASF 通过BIP148 由用户激活， 实现BIP141 SwgWit2X 通过 BIP91 由用户激活","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mysql 1044 错误","slug":"history/tech/5ad83a1e1b1af27876b353af","date":"2018-04-18T18:41:34.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ad83a1e1b1af27876b353af/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ad83a1e1b1af27876b353af/","excerpt":"","text":"报错信息:1Got error: 1044: Access denied for user &apos;xxx&apos;@&apos;localhost&apos; to database ..... when using LOCK TABLES,解决办法：使用 mysqldump 的选项 `-skip-lock-tables`","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 下安装 npm 包 node-sass 报错 error MSB3428","slug":"history/tech/5ad0d6181b1af27876b353ae","date":"2018-04-14T04:08:56.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ad0d6181b1af27876b353ae/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ad0d6181b1af27876b353ae/","excerpt":"","text":"错误信息:123MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。要解决此问题，1) 安装 .NET Framework 2.0 SDK；2) 安装 Microsoft Visual Studio 2005；或 3) 如果将该组件安装到了其他位置，请将其位置添加到系统路径中。 [C:\\Users\\Administrator\\Desktop\\richard\\console\\node_modules\\node-sass\\build\\binding.sln]错误原因:缺少 windows 构建工具 解决方案一:1npm install --global --production windows-build-tools经过尝试失败解决方案二:1npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible debug","slug":"history/tech/5ab8748fe153c7b8335456f3","date":"2018-03-26T04:18:23.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ab8748fe153c7b8335456f3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ab8748fe153c7b8335456f3/","excerpt":"","text":"1ansible localhost -m debug -a &apos;var=groups&apos;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"UV/DAU 区别","slug":"history/operate/5ab8579ce153c7b8335456f2","date":"2018-03-26T02:14:52.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/operate/5ab8579ce153c7b8335456f2/","link":"","permalink":"https://wangxiuwen.github.io/history/operate/5ab8579ce153c7b8335456f2/","excerpt":"","text":"DAU: Daily Active User 日活跃用户UV: Unique Visitor 独立游客DAU是日活跃用户数，通过用户ID排重统计数据。UV是独立访客，通过用户IP排重统计数据。","categories":[{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/categories/%E8%BF%90%E8%90%A5/"}],"tags":[{"name":"operate","slug":"operate","permalink":"https://wangxiuwen.github.io/tags/operate/"},{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E8%90%A5/"}],"author":"wangxiuwen"},{"title":"python * 操作符","slug":"history/tech/5ab0e284e153c7b8335456f1","date":"2018-03-19T22:29:24.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5ab0e284e153c7b8335456f1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5ab0e284e153c7b8335456f1/","excerpt":"","text":"12&gt;&gt;&gt; [1,2,3]* 2[1, 2, 3, 1, 2, 3]123456&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; a = np.array([1])&gt;&gt;&gt; aarray([1])&gt;&gt;&gt; a *2array([2])","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"公式测试","slug":"history/math/5aab23a858d5fa35109c3f92","date":"2018-03-16T01:53:44.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5aab23a858d5fa35109c3f92/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5aab23a858d5fa35109c3f92/","excerpt":"","text":"x \\href{why-equal.html}{=} y^2 + 1","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"星轨拍摄参数","slug":"history/shoot/5aa64f5c58d5fa35109c3f91","date":"2018-03-11T21:58:52.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5aa64f5c58d5fa35109c3f91/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5aa64f5c58d5fa35109c3f91/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"星野拍摄参数","slug":"history/shoot/5aa64f3a58d5fa35109c3f90","date":"2018-03-11T21:58:18.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5aa64f3a58d5fa35109c3f90/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5aa64f3a58d5fa35109c3f90/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"闪电拍摄参数","slug":"history/shoot/5aa63fe1e75a3f22318e9da8","date":"2018-03-11T20:52:49.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5aa63fe1e75a3f22318e9da8/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5aa63fe1e75a3f22318e9da8/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"湿版摄影法","slug":"history/shoot/5aa0f50ae75a3f22318e9da7","date":"2018-03-07T20:32:10.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5aa0f50ae75a3f22318e9da7/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5aa0f50ae75a3f22318e9da7/","excerpt":"","text":"湿版摄影法","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"人像","slug":"history/shoot/5aa0c94ae75a3f22318e9da6","date":"2018-03-07T17:25:30.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5aa0c94ae75a3f22318e9da6/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5aa0c94ae75a3f22318e9da6/","excerpt":"","text":"高调人像 低调人像 浪漫唯美 时尚摄影 高贵典雅 复古 颓废忧伤 纪实摄影 抽象","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"ffmpeg 安装","slug":"history/tech/5a9fa44fe75a3f22318e9da5","date":"2018-03-06T20:35:27.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a9fa44fe75a3f22318e9da5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a9fa44fe75a3f22318e9da5/","excerpt":"","text":"编译安装 SDL编译安装后没有 ffplay，所以需要先编译安装 SDL下载：http://www.libsdl.org/download-2.0.php安装依赖：1sudo yum install -y libXext-devel编译安装：123./configuremakemake install 安装 ffmpeg 依赖:12sudo apt install -y yasm# sudo yum install -y yasm 编译 ffmpeg:12345tar -xjvf ffmpeg-4.1.tar.bz2cd ffmpeg-4.1./configure --enable-shared --prefix=/usr/local/ffmpeg makemake install添加库：123vim /etc/ld.so.conf+/usr/local/ffmpeg/libsudo ldconfig添加环境变量:12vim /etc/profile+ export PATH=/usr/local/ffmpeg/bin:$PATH使用 ffmpeg 下载:1ffmpeg -i http://xxx.m3u8 xxx.mp4资源：http://ffmpeg.org/SDL 教程","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"人像摄影","slug":"history/shoot/5a9f9238e75a3f22318e9da4","date":"2018-03-06T19:18:16.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a9f9238e75a3f22318e9da4/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a9f9238e75a3f22318e9da4/","excerpt":"","text":"人像摄影的构图(可截断位置)","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"马格南图片社","slug":"history/shoot/5a9f888fe75a3f22318e9da3","date":"2018-03-06T18:37:03.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a9f888fe75a3f22318e9da3/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a9f888fe75a3f22318e9da3/","excerpt":"","text":"https://www.magnumphotos.com/著名摄影师有:罗伯特·卡帕，布列松，乔治·罗杰 ，大卫·西蒙 ，马克·吕布","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"高调摄影/灰调摄影/低调摄影","slug":"history/shoot/5a96258cf5087a54058a83d0","date":"2018-02-28T03:44:12.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a96258cf5087a54058a83d0/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a96258cf5087a54058a83d0/","excerpt":"","text":"高调摄影 低调摄影","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"Spring Boot2.0 新特性","slug":"history/tech/5a96561af5087a54058a83d3","date":"2018-02-27T19:11:22.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a96561af5087a54058a83d3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a96561af5087a54058a83d3/","excerpt":"","text":"以Java 8 为基准Spring Boot 2.0 要求Java 版本必须8以上， Java 6 和 7 不再支持。内嵌容器包结构调整为了支持reactive使用场景，内嵌的容器包结构被重构了的幅度有点大。EmbeddedServletContainer被重命名为WebServer，并且org.springframework.boot.context.embedded 包被重定向到了org.springframework.boot.web.embedded包下。举个例子，如果你要使用TomcatEmbeddedServletContainerFactory回调接口来自定义内嵌Tomcat容器，你现在应该使用TomcatServletWebServerFactory。Servlet-specific 的server properties调整大量的Servlet专属的server.* properties被移到了server.servlet下：由此可以看出一些端倪，那就是server不再是只有servlet了，还有其他的要加入。Actuator 默认映射Actuator的端点（endpoint）现在默认映射到/application，比如，/info 端点现在就是在/application/info。但你可以使用management.context-path来覆盖此默认值。@ConditionalOnBean@ConditionalOnBean现在的判断条件由OR变为了AND。Remote CRaSH shell1.5的时候此远程工具被标为deprecated，2.0的时候将会把这个支持彻底remove掉，以及基于此功能的项目也会被删除掉。Spring Loaded不再支持由于Spring Loaded项目已被移到了attic了，所以不再支持Spring Loaded了。现在建议你去使用Devtools。Spring Loaded不再支持了。Hazelcast自动配置不再支持不能再自动配置HazelcastInstance进行缓存。 因此，spring.cache.hazelcast.config属性不再可用。默认connection pool变了默认的连接池已经由Tomcat切换到了HikariCP。如果你过去使用spring.datasource.type在基于Tomcat的应用程序中强制使用Hikari，现在你可以删除这个覆盖了。同样的，如果想要使用Tomcat的连接池，只需要简单的加入以下配置就可以了：spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSourceServlet Filters针对一个Filter默认的dispatcher类型现在为 DipatcherType.REQUEST，这样就保证了Spring Boot和Servlet默认的配置统一了。Spring SecuritySpring Security的 filter 现在可以自动配置如下类型了： ASYNC, ERROR, and REQUEST 。这样就让Spring Boot中的配置和Spring Security默认配置保持一致了。Spring SessionSpring Session的 filter 现在支持自动配置如下dispatcher类型 ASYNC, ERROR, and REQUEST 。同样是为了让Spring Boot的配置与Spring Session的默认配置保持一致。值得注意的是从Spring Session 2.0起, Mongo和GemFire 将不再被支持。Jetty要求Jetty最低版本为9.4。Tomcat要求Tomcat最低版本为8.5。Hibernate要求Hibernate最低版本为5.2。Gradle要求Gradle最低版本为3.4。SendGridSendGrid最低支持版本是3.2。为了支持这次升级，username和password已经被干掉了。因为API key现在是唯一支持的认证方式。Starter 的传递依赖的改变以前有几个Spring Boot starter是依靠Spring MVC和spring-boot-starter-web传递的。 为了对Spring WebFlux的支持，spring-boot-starter-mustache和spring-boot-starter-thymeleaf不再依赖spring-boot-starter-web。现在你要自己选择并添加spring-boot-starter-web或spring-boot-starter-webflux作为依赖。记住：web和webflux是平行的关系。我们之前的文章中提到过spring webflux。你可以移步查看：Spring 5 新增全新的reactive web框架：webflux。Solr健康指标针对Solr的健康检查信息不再是solrStatus这个属性了。现在是status property，是一个标准状态属性，对应于一个的整型值。默认代理策略Spring Boot现在默认是使用CGLIB代理，同时包含AOP支持。如果你需要基于代理（proxy-based）的代理策略，你需要把spring.aop.proxy-target-class设置为false。基于CLI的测试从Spring Boot的CLI中删除了测试支持，现在建议你使用Maven或Gradle构建应用程序，去使用它们提供的丰富的测试支持吧。@ConfigurationProperties@ConfigurationProperties里的ignoreNestedProperties属性已被删除。Multipart配置改变为了更好的反映Servlet的特性, spring.http.multipart. 属性已经被命名为 spring.servlet.multipart。ps：其实就是因为webflux来了，只能把servlet和webflux区分开来。Mustache 模板默认文件扩展名过去Mustache模板的默认的文件扩展名是.html。现在.mustache成了官方指定的扩展名，而且很多的IDE插件已经支持了此后缀。你可以通过spring.mustache.suffix来覆盖现在的默认的支持。Spring Framework 5.0Spring Boot 2.0 是建立在Spring Framework 5.0之上的（最低要求）。Spring 5最大的亮点就是reactive。你可以去看看这篇：Spring 5 新增全新的reactive web框架：webflux。松绑定改善松绑定已经得到改善。这里简单的举个例子：简单的属性在删除特殊字符然后转成小写后进行绑定。比如：下面的属性最终都会被映射为spring.jpa.databaseplatform=mysql:spring.jpa.database-platform=mysqlspring.jpa.databasePlatform=mysqlspring.JPA.database_platform=mysql有关详细信息，我们可以查阅：https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0WebFlux 和 WebFlux.fn支持Spring Boot 2.0 提供了一个新的starter ，用来支持Reactive Spring web frameworks。该starter为spring-boot-starter-webflux。其中Reactor Netty是默认的web引擎(spring-boot-starter-reactor-netty)。Reactive数据库支持Spring Boot 2.0 对一下的数据库提供了自动配置（ auto-configuration ）的reactive的支持：MongoDB (spring-boot-starter-data-mongodb-reactive)Redis (spring-boot-starter-data-redis-reactive)Cassandra (spring-boot-starter-data-cassandra-reactive)@DataMongoTest测试注解也是支持reactive的。@WebFluxTest支持Reactive controller现在可以使用@WebFluxTest来测试。它提供的功能和 @WebMvcTest类似。而且WebTestClient可以直接使用，已经被自动配置（auto-configured）了。支持使用@SpringBootTest自动配置WebTestClient当你使用@SpringBootTest with an actual server (that is, either DEFINED_PORT or RANDOM_PORT), a WebTestClient is available the same way TestRestTemplate is.使用@SpringBootTest进行WebTestClient自动配置将@SpringBootTest用于实际服务器（即DEFINED_PORT或RANDOM_PORT）时，WebTestClient的可用方式与TestRestTemplate相同。Gradle插件Spring Boot的Gradle插件已在很大程度上被重写，以实现一些重大的改进。有关这方面的就不细讲了，感兴趣的同学可以去一探究竟。/loggers端点POST的状态码改变针对/loggers端点上POST操作的状态码已又200改为204。ElasticsearchElasticsearch已升级到5.4。 与Elastic公司宣布不再支持嵌入式Elasticsearch的情况一样，NodeClient的自动配置已被删除。就是这么的节奏一致。现在你可以通过使用spring.data.elasticsearch.cluster-nodes自动配置TransportClient，具体value可以是一个或多个要连接的节点的地址。Quartz SchedulerSpring Boot 2 针对Quartz调度器提供了支持。你可以加入spring-boot-starter-quartz starter来启用。而且支持基于内存和基于jdbc两种存储。Spring Data Web配置Spring Boot公开了一个新的spring.data.web配置名称空间，可以轻松配置分页和排序。Json starter一个全新的spring-boot-starter-json starter 聚合了很多常用的json工具，可以支持对json的读写。它不仅仅提供了jackson-databind而且当你使用java8时候，还提供了有用的模块：jackson-datatype-jdk8, jackson-datatype-jsr310 和 jackson-module-parameter-names。之前使用jackson-databind的地方就可以使用这个新的starter了。Thymeleaf starterThymeleaf starter现在包含了thymeleaf-extras-java8time，开箱即用。InfluxDB如果InfluxDB java client 和 the spring.influx.url 被设置, 一个InfluxDB client现在就会被自动配置。而且现在支持认证。JdbcTemplateSpring Boot自动配置（auto-configuration）的JdbcTemplate现在可以通过spring.jdbc.template命名空间进行定制。 此外，自动配置（auto-configuration）的NamedParameterJdbcTemplate在底层就是JdbcTemplate。jOOQSpring Boot现在可以根据DataSource自动检测出jOOQ方言（类似于JPA方言）。此外，还引入了@JooqTest用于只有jOOQ才能hold的测试场景。@DataRedisTest新加了一个测试的时候针对redis的新注解。强大的Mongo客户端自定义现在可以通过MongoClientSettingsBuilderCustomizer这个bean来高度定制化Spring Boot的Mongo客户端。Cassandraspring.data.cassandra 现在支持池化（pooling）。Kafka listener支持批量消费现在支持一次性批量消费多个ConsumerRecord，你可以创建一批的监听器（listener），这样设置：spring.kafka.listener.type=batchWeb filters 初始化Web filters 现在在所有支持的容器中都会被立刻初始化。也就是eagerly，急加载。Auto-configuration 报告现在不满足条件（unconditional）的class也会被包含进来，在自动配置（auto-configuration）的Actuator端点的response中一并返回。重置logger操作现在Loggers端点（endpoint） 支持reset日志级别到默认设置。Maven 插件属性插件的配置属性现在的暴露方式有所改变，现在所有的都是以spring-boot为前缀，这是为了避免和其他插件冲突而导致错误。比如，以下命令行可以启用profile foo：mvn spring-boot:run -Dspring-boot.run.profiles=fooDevtools 远程调试已经从Devtools中删除了通过HTTP进行远程调试的支持。（＃9489）Jetty为了和Tomcat和Undertow看齐，现在对Jetty的所有的http method的请去都进行压缩，而不是之前那样只对GET request进行压缩(#8184)。Reactive server 自定义当配置一个reactive web server时，针对Jetty，Tomcat，Undertow的定制化器现在会被调用 (#9572)。JolokiaJolokia不再是一个endpoint。并且默认是禁用的，这已和其他的web端点保持了一直。它的配置已转移到了management.jolokia。如果想启用 Jolokia, 向你的配置加入management.jolokia.enabled=true就可以了。数据库迁移Liquibase 和 Flyway 配置的key 已被转移到了spring 的命名空间下：(比如： spring.liquibase and spring.flyway )。Auto-configuration排序@AutoConfigureOrder 默认值由Ordered.LOWEST_PRECEDENCE变为0。 (#10142)Auto-configuration测试工具一个新的ApplicationContextRunner 测试工具让我们测试自动配置变得容易。 未来将会把所有的测试套件都迁移到这个模型上。Java 9 支持基本支持了Java 9。之所以是“基本”，是因为还没得到用户的验证。Jedis变为了LettuceRedis客户端驱动现在由Jedis变为了Lettuce。使用Jedis的同学们，大概知道方向了吧。但仍然支持Jedis，那么exclude掉io.lettuce:lettuce-core，然后添加 redis.clients:jedis就是了。OAuth 2.0 支持Spring Security OAuth 项目中的功能将会迁移到Spring Security中。将会OAuth 2.0。Mockito 1.xMockito 1.x不再支持@MockBean和@SpyBean。 如果你不使用spring-boot-starter-test来管理依赖关系，则应升级到Mockito 2.x。JSON-B 支持除了Jackson 和 Gson，现在还支持了JSON-B 。JSON测试支持也已更新为新的JsonbTester类。Session EndpointSpring Session 用现在可以通过/application/sessions Actuator Endpoint进行查找和删除session。ConfigurationProperties 验证如果你希望@ConfigurationProperties对象上开启验证，那么只需要添加 @Validated就可以了。Spring Mobile针对Spring Mobile的自动配置和依赖不再支持，已被删除。汗，我们之前的文章中还介绍过这个项目：使用Spring Boot开发一个Spring Mobile程序。Spring WebFlux支持错误约定Spring Boot现在让WebFlux的错误约定和MVC保持一致就像使用MVC一样：默认视图和JSON响应错误，自定义错误视图等等。TLS 配置 和 HTTP/2 支持你现在可以为你的WebFlux应用配置SSL，使用server.ssl.* 配置属性。Tomcat, Jetty, Undertow 和 Reactor Netty都支持。你现在也可以为你的MVC 或 WebFlux应用配置HTTP/2：使用server.http2.enabled。@KafkaListener支持使用@SendTo使用了自动配置工厂的Kafka listener现在支持@SendTo。Kotlin扩展Spring Boot 2.0 发布了Kotlin runApplication扩展：package com.example.demoimport org.springframework.boot.autoconfigure.SpringBootApplicationimport org.springframework.boot.runApplication@SpringBootApplicationclass DemoApplicationfun main(args: Array) {runApplication&lt;DemoApplication&gt;(*args) }Job command line runner 顺序CommandLineRunner 现在执行批处理job的启动order是0。支持自动配置的模板化欢迎页Spring Boot 2.0 现在支持静态和模板化两种欢迎页类型。它会首先去配置好的静态内容的目录下查找index.html文件，如果没找到，然后就去查找index模板。 只要找到了一个就会被用作欢迎页。Context path会在启动时被打印在Spring Boot之前的版本中，对context path貌似并没有那么的重视一样。现在当我们使用内嵌容器的时候， context path 会被打印在HTTP 端口的旁边，像这样：Tomcat started on port(s): 8080 (http) with context path ‘/foo’测试优化，自动扫描Converter和GenericConverterConverter 和 GenericConverter beans现在可以被@WebMvcTest和@WebFluxTest自动扫描到了。Health vs. Statusstatus endpoint 已经被删除了，现在改成了health。这个health 端点既可以展示status也可以有更多的细节。 health 端点现在默认是被暴露的（只展示status）。如果你希望展示更多的细节信息，可以通过修改属性management.endpoints.health.show-details来实现：management.endpoints.health.show-details=true","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://wangxiuwen.github.io/tags/java/"},{"name":"SpringBoot2.0","slug":"SpringBoot2-0","permalink":"https://wangxiuwen.github.io/tags/SpringBoot2-0/"},{"name":"Spring","slug":"Spring","permalink":"https://wangxiuwen.github.io/tags/Spring/"}],"author":"baipeng"},{"title":"光线","slug":"history/shoot/5a94c78cf5087a54058a83cf","date":"2018-02-27T02:50:52.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a94c78cf5087a54058a83cf/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a94c78cf5087a54058a83cf/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"存储空间","slug":"history/shoot/5a7acdb7f5087a54058a83ce","date":"2018-02-06T21:58:15.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a7acdb7f5087a54058a83ce/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a7acdb7f5087a54058a83ce/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"测光表","slug":"history/shoot/5a7acc8df5087a54058a83cd","date":"2018-02-06T21:53:17.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a7acc8df5087a54058a83cd/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a7acc8df5087a54058a83cd/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"滤镜","slug":"history/shoot/5a7acc4ef5087a54058a83cc","date":"2018-02-06T21:52:14.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a7acc4ef5087a54058a83cc/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a7acc4ef5087a54058a83cc/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"色彩","slug":"history/shoot/5a7acc0ef5087a54058a83cb","date":"2018-02-06T21:51:10.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a7acc0ef5087a54058a83cb/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a7acc0ef5087a54058a83cb/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"十步摄影法","slug":"history/shoot/5a7acb8df5087a54058a83ca","date":"2018-02-06T21:49:01.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a7acb8df5087a54058a83ca/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a7acb8df5087a54058a83ca/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"spring boot data redis","slug":"history/tech/5a792d97f5087a54058a83c7","date":"2018-02-06T04:22:47.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a792d97f5087a54058a83c7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a792d97f5087a54058a83c7/","excerpt":"","text":"com.fasterxml.jackson.databind.JsonMappingException: failed to lazily initialize a collection of role: com.ln.baseframe.security.entity.Module.modules, could not initialize proxy - no Session异常场景：使用注解缓存 查询的对象 有关联查询，集合为空，添加Redis的时候报错。。解决办法：cacha config加入依赖&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt; &lt;artifactId&gt;jackson-datatype-hibernate4&lt;/artifactId&gt; &lt;version&gt;2.3.2&lt;/version&gt; &lt;/dependency&gt; @Bean public RedisTemplate&lt;String, String&gt; redisTemplate( RedisConnectionFactory factory) { StringRedisTemplate template = new StringRedisTemplate(factory); Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); om.registerModule(new Hibernate4Module()); jackson2JsonRedisSerializer.setObjectMapper(om); template.setValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"},{"name":"springboot","slug":"springboot","permalink":"https://wangxiuwen.github.io/tags/springboot/"}],"author":"baipeng"},{"title":"闪光","slug":"history/shoot/5a797d41f5087a54058a83c9","date":"2018-02-05T22:02:41.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/shoot/5a797d41f5087a54058a83c9/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a797d41f5087a54058a83c9/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"构图","slug":"history/shoot/5a797c60f5087a54058a83c8","date":"2018-02-05T21:58:56.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a797c60f5087a54058a83c8/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a797c60f5087a54058a83c8/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/shoot/5a72bec3f5087a54058a83c6","date":"2018-01-31T19:16:19.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a72bec3f5087a54058a83c6/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a72bec3f5087a54058a83c6/","excerpt":"","text":"其它人像镜头 定焦镜头 误区: 准微距","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72beb2f5087a54058a83c5","date":"2018-01-31T19:16:02.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72beb2f5087a54058a83c5/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72beb2f5087a54058a83c5/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bea3f5087a54058a83c4","date":"2018-01-31T19:15:47.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bea3f5087a54058a83c4/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bea3f5087a54058a83c4/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bde9f5087a54058a83c3","date":"2018-01-31T19:12:41.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bde9f5087a54058a83c3/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bde9f5087a54058a83c3/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bdd5f5087a54058a83c2","date":"2018-01-31T19:12:21.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bdd5f5087a54058a83c2/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bdd5f5087a54058a83c2/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bd6ef5087a54058a83c1","date":"2018-01-31T19:10:38.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bd6ef5087a54058a83c1/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bd6ef5087a54058a83c1/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bd07f5087a54058a83c0","date":"2018-01-31T19:08:55.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bd07f5087a54058a83c0/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bd07f5087a54058a83c0/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bca6f5087a54058a83bf","date":"2018-01-31T19:07:18.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bca6f5087a54058a83bf/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bca6f5087a54058a83bf/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bc4af5087a54058a83be","date":"2018-01-31T19:05:46.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bc4af5087a54058a83be/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bc4af5087a54058a83be/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bb9df5087a54058a83bd","date":"2018-01-31T19:02:53.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bb9df5087a54058a83bd/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bb9df5087a54058a83bd/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72bb10f5087a54058a83bc","date":"2018-01-31T19:00:32.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72bb10f5087a54058a83bc/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72bb10f5087a54058a83bc/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72ba40f5087a54058a83bb","date":"2018-01-31T18:57:04.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72ba40f5087a54058a83bb/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72ba40f5087a54058a83bb/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"镜头","slug":"history/ui/5a72b970f5087a54058a83ba","date":"2018-01-31T18:53:36.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a72b970f5087a54058a83ba/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a72b970f5087a54058a83ba/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"摄影营销","slug":"history/shoot/5a714963f5087a54058a83b9","date":"2018-01-31T04:43:15.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a714963f5087a54058a83b9/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a714963f5087a54058a83b9/","excerpt":"","text":"vi 视觉识别logo 标准色 产品包装 印刷品 名片 手提袋 口号 其它自媒体营销 事件营销 摄影展 举办活动 自我营销 群展 比赛 交流活动 个人网站 客户 同行 媒体 厂商 参加发布会 参加俱乐部活动 公关/广告公司 注册商标http://www.saic.gov.cn/图形商标 文字商标 成本控制人力成本 员工工资 社保公积金 员工福利 运营成本 房租 水电 交通运输 产品制作成本 通讯费 固定资产采购及更新 营销成本 活动成本 广告投放预算控制 平台合作分成","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"超级景深对焦距离(超焦距)","slug":"history/shoot/5a714892f5087a54058a83b8","date":"2018-01-31T04:39:46.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a714892f5087a54058a83b8/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a714892f5087a54058a83b8/","excerpt":"","text":"超级的 对焦的 距离 (Hyperfocal distance)","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"焦距","slug":"history/shoot/5a713bbef5087a54058a83b7","date":"2018-01-31T03:45:02.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a713bbef5087a54058a83b7/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a713bbef5087a54058a83b7/","excerpt":"","text":"什么是焦距 等效焦距 定焦头的优势","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"用户画像/服务需求","slug":"history/shoot/5a70575df5087a54058a83b6","date":"2018-01-29T23:30:37.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a70575df5087a54058a83b6/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a70575df5087a54058a83b6/","excerpt":"","text":"用户画像性别 年龄 职业 收入 学历 审美层次 性格特征 兴趣爱好 生活习惯 服务需求上门服务 化妆造型 服装定制 旅行策划","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"以图搜图/图片版权","slug":"history/shoot/5a7047f8f5087a54058a83b5","date":"2018-01-29T22:24:56.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a7047f8f5087a54058a83b5/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a7047f8f5087a54058a83b5/","excerpt":"","text":"https://www.tineye.com/https://creativecommons.org/licenses/by-nc-sa/3.0/cn/","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"景深","slug":"history/shoot/5a703353f5087a54058a83b4","date":"2018-01-29T20:56:51.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a703353f5087a54058a83b4/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a703353f5087a54058a83b4/","excerpt":"","text":"前后景深差异前景深永远小于后景深光圈的影响： 光圈大，差异小 光圈小，差异大 焦距的影响: 焦距越长，差异越小 对焦距离的影响: 对焦距离越近，差异越小 对焦距离越远，差异越大 虚化明显程度背景/前景 距离对焦目标越远，虚化越明显","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"焦外虚化","slug":"history/shoot/5a701dd5f5087a54058a83b3","date":"2018-01-29T19:25:09.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a701dd5f5087a54058a83b3/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a701dd5f5087a54058a83b3/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"浏览器兼容性测试","slug":"history/tech/5a6e9a69f5087a54058a83b1","date":"2018-01-29T03:52:09.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a6e9a69f5087a54058a83b1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a6e9a69f5087a54058a83b1/","excerpt":"","text":"http://kangax.github.io/compat-table/es5/https://www.browserling.com/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"摄影常见参数","slug":"history/shoot/5a6e9942f5087a54058a83b0","date":"2018-01-29T03:47:14.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a6e9942f5087a54058a83b0/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a6e9942f5087a54058a83b0/","excerpt":"","text":"拍摄月球 拍摄星星","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"阳光16法则","slug":"history/shoot/5a6e91b9f5087a54058a83af","date":"2018-01-29T03:15:05.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a6e91b9f5087a54058a83af/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a6e91b9f5087a54058a83af/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"曝光","slug":"history/shoot/5a6eb6c4f5087a54058a83b2","date":"2018-01-28T17:53:08.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a6eb6c4f5087a54058a83b2/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a6eb6c4f5087a54058a83b2/","excerpt":"","text":"允许 5% 左右的曝光不足，和 2% 左右的曝光过度曝光补偿口诀:白加黑减 曝光补偿取决于过亮或过暗的物体所占面积比重 曝光度 正片没光的地方卤化银堆积的越高，所以 宁欠勿过 包围曝光","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"摄影对焦/光圈/快门/ISO","slug":"history/shoot/5a698460f5087a54058a83ae","date":"2018-01-24T19:16:48.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/shoot/5a698460f5087a54058a83ae/","link":"","permalink":"https://wangxiuwen.github.io/history/shoot/5a698460f5087a54058a83ae/","excerpt":"","text":"对焦 光圈焦距/周长 = 光圈 50mm ÷ 25 mm = 2 就是 f/2 的光圈 快门拉的越近，抖动越明显，需要更高的快门速度 感光度","categories":[{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/categories/%E6%91%84%E5%BD%B1/"}],"tags":[{"name":"shoot","slug":"shoot","permalink":"https://wangxiuwen.github.io/tags/shoot/"},{"name":"摄影","slug":"摄影","permalink":"https://wangxiuwen.github.io/tags/%E6%91%84%E5%BD%B1/"}],"author":"wangxiuwen"},{"title":"window.WebGLRenderingContext 和 canvas.getContext('experimental-webgl') 的区别","slug":"history/tech/5a5c6a1ff5087a54058a83ad","date":"2018-01-14T20:45:19.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a5c6a1ff5087a54058a83ad/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a5c6a1ff5087a54058a83ad/","excerpt":"","text":"123var c = document.createElement(&quot;canvas&quot;);var gl = c.getContext(&quot;experimental-webgl&quot;)gl instanceof WebGLRenderingContext","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nginx 丢失下划线请求头","slug":"history/tech/5a58905cf5087a54058a83ac","date":"2018-01-11T22:39:24.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a58905cf5087a54058a83ac/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a58905cf5087a54058a83ac/","excerpt":"","text":"1234http &#123; ... underscores_in_headers on; ...","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"本地集群Spark + 阿里云的OSS 使用大坑","slug":"history/tech/5a5497b5041a198f0685dfe0","date":"2018-01-08T22:21:41.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a5497b5041a198f0685dfe0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a5497b5041a198f0685dfe0/","excerpt":"","text":"1本地开发测试Spark 读写OSS文件可以，submit 到spark 集群的时候，程序异常12345678910111213141516171819202122232425262728293031java.io.IOException: java.lang.ClassNotFoundException: com.aliyun.oss.OSSClientat com.aliyun.fs.oss.nat.NativeOssFileSystem.initialize(NativeOssFileSystem.java:138)at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2669)at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:94)at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2703)at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2685)at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:373)at org.apache.hadoop.fs.Path.getFileSystem(Path.java:295)at org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:258)at org.apache.hadoop.mapred.FileInputFormat.listStatus(FileInputFormat.java:229)at org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:315)at org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:194)at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)at scala.Option.getOrElse(Option.scala:121)at org.apache.spark.rdd.RDD.partitions(RDD.scala:250)at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35)at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)at scala.Option.getOrElse(Option.scala:121)at org.apache.spark.rdd.RDD.partitions(RDD.scala:250)at org.apache.spark.rdd.RDD$$anonfun$take$1.apply(RDD.scala:1333)at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)at org.apache.spark.rdd.RDD.take(RDD.scala:1327)at org.apache.spark.rdd.RDD$$anonfun$first$1.apply(RDD.scala:1368)at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)at org.apache.spark.rdd.RDD.first(RDD.scala:1367)1234查看日志找不到OSSClient ，明明打包的时候打进去了呀。真是无语。最后的解决方案 1： spark-submit -master * --class ****.app --jars /*1.jar , /*2.jar spark.jar2: 把缺少的jar放到 spark 集群安装目录的jars文件夹下。这样在集群模式中比较麻烦。推荐第一种。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"spark","slug":"spark","permalink":"https://wangxiuwen.github.io/tags/spark/"},{"name":"oss","slug":"oss","permalink":"https://wangxiuwen.github.io/tags/oss/"},{"name":"aliyun","slug":"aliyun","permalink":"https://wangxiuwen.github.io/tags/aliyun/"}],"author":"baipeng"},{"title":"spark standalone 修改日志级别","slug":"history/tech/5a54949e17c073a5053c8f28","date":"2018-01-08T22:08:30.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a54949e17c073a5053c8f28/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a54949e17c073a5053c8f28/","excerpt":"","text":"log4j.rootCategory=INFO, console INFO 改为 WARN123cp log4j.properties.template log4j.propertiesvim log4j.propertieslog4j.rootCategory=WARN, console","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"吴恩达 梯度下降 推导","slug":"history/tech/5a532305ca946d8509a773bc","date":"2018-01-07T19:51:33.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a532305ca946d8509a773bc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a532305ca946d8509a773bc/","excerpt":"","text":"吴恩达 梯度下降 推导","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"机器学习资料","slug":"history/tech/5a51ba20ca946d8509a773bb","date":"2018-01-06T18:11:44.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a51ba20ca946d8509a773bb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a51ba20ca946d8509a773bb/","excerpt":"","text":"林轩田《机器学习基石》 http://www.cnblogs.com/ymingjingr/p/4271742.html 《机器学习技法》 李航《统计学习方法》 表达学习优化学习","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"machine learning demos","slug":"history/tech/5a50dd49ca946d8509a773ba","date":"2018-01-06T02:29:29.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a50dd49ca946d8509a773ba/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a50dd49ca946d8509a773ba/","excerpt":"","text":"http://mldemos.epfl.ch/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"分布式爬虫代码","slug":"history/tech/5a4dd66eca946d8509a773b9","date":"2018-01-03T19:23:26.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a4dd66eca946d8509a773b9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a4dd66eca946d8509a773b9/","excerpt":"","text":"https://github.com/wangxiuwen-fork/spider-course-3.git","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 使用 mongoTemplate 操作 mongodb","slug":"history/tech/5a4dd4c8ca946d8509a773b8","date":"2018-01-03T19:16:24.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a4dd4c8ca946d8509a773b8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a4dd4c8ca946d8509a773b8/","excerpt":"","text":"参考资料http://www.baeldung.com/queries-in-spring-data-mongodb","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nodejs gm 库的使用","slug":"history/tech/5a4dd485ca946d8509a773b7","date":"2018-01-03T19:15:17.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a4dd485ca946d8509a773b7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a4dd485ca946d8509a773b7/","excerpt":"","text":"nodejs gm 库的使用安装依赖12apt install imagemagickapt install graphicsmagick调用函数库123456789101112var gm = require(&apos;gm&apos;).subClass(&#123;imageMagick:true&#125;);gm(&apos;xzx.jpg&apos;).append(&quot;./er.jpg&quot;).font(&apos;MSYH.TTF&apos;).fontSize(30).drawText(30,200, &quot;月月鸟&quot;).write(&quot;out.jpg&quot;, function (err) &#123; if (!err) console.log(&apos; hooray! &apos;);&#125;);往图片上写字的时候需要指定字体, 这里指定了 MSYH.TTF'参考资料https://github.com/sindresorhus/awesome-nodejs#image","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"大数据平台监控","slug":"history/tech/5a47c36685fb66a2736d4ef1","date":"2017-12-31T04:48:38.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a47c36685fb66a2736d4ef1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a47c36685fb66a2736d4ef1/","excerpt":"","text":"使用 cdh 版本， 它自带 cloudera manager使用以下监控:1apache ganglia， graphite","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"新版 notepad++ 没有 plugin manager","slug":"history/tech/5a48416bca946d8509a773b4","date":"2017-12-31T01:46:19.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a48416bca946d8509a773b4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a48416bca946d8509a773b4/","excerpt":"","text":"下载地址https://github.com/bruderstein/nppPluginManager/releases","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nodejs 使用 leveldb","slug":"history/tech/5a483742ca946d8509a773b3","date":"2017-12-31T01:02:58.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a483742ca946d8509a773b3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a483742ca946d8509a773b3/","excerpt":"","text":"安装模块123 npm install levelup leveldown --save``` 报错信息:sh: 1: node-pre-gyp: Permission denied 12解决npm config set unsafe-perm true 参考资料: [https://docs.npmjs.com/misc/config#unsafe-perm](https://docs.npmjs.com/misc/config#unsafe-perm) unsafe-perm Default: false if running as root, true otherwise Type: Boolean Set to true to suppress the UID/GID switching when running package scripts. If set explicitly to false, then installing as a non-root user will fail.","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"hadoop 部署配置文件","slug":"history/tech/5a48d856ca946d8509a773b6","date":"2017-12-31T00:30:14.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a48d856ca946d8509a773b6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a48d856ca946d8509a773b6/","excerpt":"","text":"环境变量1etc/hadoop/hadoop-env.xml配置文件1etc/hadoop/maperd-site.xmlyarn1yarn-site.xmlslaves1etc/hadoop/slaves格式化1bin/hadoop namenode -format测试 hadoop 计算 pi:1./bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar pi 2 10","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"查看 linux 操作系统是 32 位 还是 64 位","slug":"history/tech/5a48d6f5ca946d8509a773b5","date":"2017-12-31T00:24:21.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a48d6f5ca946d8509a773b5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a48d6f5ca946d8509a773b5/","excerpt":"","text":"1getconf LONG_BIT","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"将 rdd 隐式转化为 DataFrame","slug":"history/tech/5a47426b85fb66a2736d4ef0","date":"2017-12-29T19:38:19.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a47426b85fb66a2736d4ef0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a47426b85fb66a2736d4ef0/","excerpt":"","text":"首先pom文件中加入依赖12345&lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-sql_2.11&lt;/artifactId&gt; &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;&lt;/dependency&gt;123val spark = SparkSession.builder().master(&quot;local&quot;).appName(&quot;WordCount&quot;).config(sparkConf).getOrCreate()//利用 scala的隐式转换，可以将 rdd 隐式转化为 DataFrame import spark.implicits._注意: 导入需要一个 “stable identifier” ， 如果定义成 var spark 则无法导入","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"外部排序&多路归并排序","slug":"history/tech/5a45b9ca85fb66a2736d4eef","date":"2017-12-29T03:43:06.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a45b9ca85fb66a2736d4eef/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a45b9ca85fb66a2736d4eef/","excerpt":"","text":"外部排序&amp;多路归并排序待完成","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spark 基础","slug":"history/tech/5a43b2f47d1fd3a0094153fe","date":"2017-12-27T02:49:24.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a43b2f47d1fd3a0094153fe/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a43b2f47d1fd3a0094153fe/","excerpt":"","text":"spark-default.conf 参数1234567spark.yarn.historyServer.address=test:18080spark.history.ui.port=18080spark.eventLog.enabled=truespark.eventLog.dir=hdfs://test-1:9000/tmp/spark/events# 无需每次上传jar包spark.yarn.archive=hdfs:///system/spark/spark-libs.jarspark-env.sh:1export HADOOP_CONF_DIR=/usr/local/hadoop/hadoop-2.7.3/etc/hadoop启动bin/spark-shell --master yarn --deploy-mode client spark-shell 内部调用了 spark-submityarn 模式查看日志bin/yarn logs --applicationId application_xxxxx 提交作业和运行命令的用户必须一致，否则拉不到日志内存配置1234&lt;property&gt; &lt;name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;/name&gt; &lt;value&gt;10&lt;/value&gt;&lt;/property&gt;1spark-submit --excutor-memory 10G --conf &quot;spark.yarn.executor.memoryOverhead=2048&quot;hdfs 查看 一个文件下的 block 个数1hdfs fsckpartque 文件–master 选项为分布式的集群指定 master URL, local 为 单进程启动， local[N] 为N个进程启动，测试的时候应该指定为 local123./bin/spark-shell --master local[2]./bin/spark-shell --master yarn --deploy-mode client --verbose查看 hdfs 一个文件有几个 block1./bin/hdfs fsck /data/opt/test.txt --files --blocks -locations","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spark 读取 mongodb","slug":"history/tech/5a436d39c3dae4117dfd3f26","date":"2017-12-26T21:51:53.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a436d39c3dae4117dfd3f26/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a436d39c3dae4117dfd3f26/","excerpt":"","text":"spark 读取 mongodb:1./spark-shell --conf &quot;spark.mongodb.input.uri=mongodb://127.0.0.1:27017/db.input&quot; --conf &quot;spark.mongodb.output.uri=mongodb://127.0.0.1:27017/db.output&quot; --packages org.mongodb.spark:mongo-spark-connector_2.11:2.2.0","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"sparkPi 执行","slug":"history/tech/5a436087c3dae4117dfd3f25","date":"2017-12-26T20:57:43.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a436087c3dae4117dfd3f25/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a436087c3dae4117dfd3f25/","excerpt":"","text":"执行命令jar tf examples/jars/spark-examples_2.11-2.1.0.jar | grep SparkPi # 集群: ./bin/spark-submit --class org.apache.spark.examples.SparkPi --master spark://10.0.177.242:7077 examples/jars/spark-examples_2.11-2.1.0.jar # 本地 ./bin/spark-submit --class org.apache.spark.examples.SparkPi --master local examples/jars/spark-examples_2.11-2.1.0.jar yarn 执行export HADOOP_CONF_DIR=/usr/local/hadoop/hadoop-2.7.3/etc/hadoop ./bin/spark-submit --class org.apache.spark.examples.SparkPi --master yarn-client examples/jars/spark-examples_2.11-2.1.0.jar # 查看日志 ../hadoop-2.7.3/bin/yarn logs --applicationId application_xxxxx yarn 上启动 spark-shell./bin/spark-shell --master yarn-client","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Spark 累加器 Accumulator 和 广播变量的使用","slug":"history/tech/5a434be8c3dae4117dfd3f24","date":"2017-12-26T19:29:44.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a434be8c3dae4117dfd3f24/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a434be8c3dae4117dfd3f24/","excerpt":"","text":"使用场景： 在rdd的（Transformation）map转换数据中需要统计出现次数的手机号，用来标记这条数据为重复的数据。首先使用guava的HashMultiset 作为计数器。但是rdd的task在处理任务时，分片副本没有这个变量，接下来使用spark自带的累加器处理，并使用guava的计数器自定义一个累加器。 Accumulator简介 Accumulator是spark提供的累加器，顾名思义，该变量只能够增加。 只有driver能获取到Accumulator的值（使用value方法），Task只能对其做增加操作（使用 +=）。你也可以在为Accumulator命名（不支持Python），这样就会在spark web ui中显示，可以帮助你了解程序运行的情况。 Accumulato是Spark中提供的一种分布式的变量机制，其原理类似于mapreduce，即分布式的改变，然后聚合这些改变。累加器的一个常见用途是在调试时对作业执行过程中的事件进行计数。 自定义的MultisetAccumulator class MultisetAccumulator extends AccumulatorV2[String, HashMultiset[String]] { private val multiset = HashMultiset.create[String] override def isZero: Boolean = { multiset.isEmpty } override def copy(): AccumulatorV2[String, HashMultiset[String]] = { val newAcc = new MultisetAccumulator() multiset.synchronized { newAcc.multiset.addAll(multiset) } newAcc } override def reset(): Unit = { multiset.clear() } override def add(v: String): Unit = { multiset.add(v) } override def merge(other: AccumulatorV2[String, HashMultiset[String]]): Unit = { other match { case o: MultisetAccumulator =&gt; multiset.addAll(o.value) } } override def value: HashMultiset[String] = { multiset } def count(v: String): Int = { multiset.count(v) } } 统计使用 创建我们自定义的叠加器，注册到sparkContext val multiset = new MultisetAccumulator spark.sparkContext.register(multiset, &quot;MultisetAccumulator&quot;) multiset.add(&quot;phone&quot;) 需要注意的是，由于Spark的lazy机制，只有在save*这个action算子执行后我们才能得到multiset的正确结果。 广播变量 Spark的另一种共享变量是广播变量。通常情况下，当一个RDD的很多操作都需要使用driver中定义的变量时，每次操作，driver都要把变量发送给worker节点一次，如果这个变量中的数据很大的话，会产生很高的传输负载，导致执行效率降低。使用广播变量可以使程序高效地将一个很大的只读数据发送给多个worker节点，而且对每个worker节点只需要传输一次，每次操作时executor可以直接获取本地保存的数据副本，不需要多次传输。 所以这里接着使用广播变量，把multiset丢进去，然后在做一个rdd更新的操作。这个时候在map算子中可以正确获得上面multiset的正确结果 val broadcast = spark.sparkContext.broadcast(multiset)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"nodejs request 设置证书免验证 和 30x 不跳转","slug":"history/tech/5a3fa772c3dae4117dfd3f23","date":"2017-12-24T01:11:14.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3fa772c3dae4117dfd3f23/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3fa772c3dae4117dfd3f23/","excerpt":"","text":"代码const request = require('request'); const Promise = require(&quot;bluebird&quot;); const httpPOST = Promise.promisify(request.post); const httpGET = Promise.promisify(request.get); const options = { header: {}, method: 'GET', uri: this.signUrl, gzip : true, followRedirect: false, followAllRedirects: false, agentOptions: { rejectUnauthorized: false }, timeout: 20000 } let ret = await httpGET(options); https://www.npmjs.com/package/request#using-optionsagentoptionshttps://nodejs.org/api/tls.html#tls_tls_connect_options_callback","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spark   package 仓库","slug":"history/tech/5a3d35b9c3dae4117dfd3f21","date":"2017-12-23T04:41:29.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3d35b9c3dae4117dfd3f21/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3d35b9c3dae4117dfd3f21/","excerpt":"","text":"https://spark-packages.org","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"nodejs mysql 库","slug":"history/tech/5a3e1cb1c3dae4117dfd3f22","date":"2017-12-22T21:06:57.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3e1cb1c3dae4117dfd3f22/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3e1cb1c3dae4117dfd3f22/","excerpt":"","text":"http://knexjs.org","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"lombok @EqualsAndHashCode","slug":"history/tech/5a388e26c3dae4117dfd3f20","date":"2017-12-19T03:57:26.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a388e26c3dae4117dfd3f20/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a388e26c3dae4117dfd3f20/","excerpt":"","text":"@Data相当于@Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode这5个注解的合集。1. 此注解会生成equals(Object other) 和 hashCode()方法。 2. 它默认使用非静态，非瞬态的属性 3. 可通过参数exclude排除一些属性 4. 可通过参数of指定仅使用哪些属性 5. 它默认仅使用该类中定义的属性且不调用父类的方法 6. 可通过callSuper=true解决上一点问题。让其生成的方法中调用父类的方法。 当使用@Data注解时，则有了@EqualsAndHashCode注解，那么就会在此类中存在equals(Object other) 和 hashCode()方法，且不会使用父类的属性，这就导致了可能的问题。 有多个类有相同的部分属性，把它们定义到父类中，恰好id（数据库主键）也在父类中，那么就会存在部分对象在比较时，它们并不相等，却因为lombok自动生成的equals(Object other) 和 hashCode()方法判定为相等，从而导致出错。 修复： 使用@Getter @Setter @ToString代替@Data并且自定义equals(Object other) 和 hashCode()方法，比如有些类只需要判断主键id是否相等即足矣。 或者使用在使用@Data时同时加上@EqualsAndHashCode(callSuper=true)注解。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Annotation processors must be explicitly declared now","slug":"history/tech/5a3880dac3dae4117dfd3f1f","date":"2017-12-19T03:00:42.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3880dac3dae4117dfd3f1f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3880dac3dae4117dfd3f1f/","excerpt":"","text":"app build.gradle 中增加配置 defaultConfig { applicationId &quot;org.qianrushi.android&quot; minSdkVersion 15 targetSdkVersion 24 versionCode 2 versionName &quot;1.1&quot; javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"android","slug":"android","permalink":"https://wangxiuwen.github.io/tags/android/"}],"author":"wangxiuwen"},{"title":"前端切图","slug":"history/tech/5a377655c3dae4117dfd3f1e","date":"2017-12-17T20:03:33.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a377655c3dae4117dfd3f1e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a377655c3dae4117dfd3f1e/","excerpt":"","text":"切图测量(矩形选框工具，信息面板) 宽度、高度 内边距、外边距 边框 定位 文字大小 行高 背景图位置 取色(拾色器&amp;吸管工具) 边框色 背景色 文字色 切图及切图的各种操作隐藏文字（独立图层和非独立图层的不同操作方法） png8和png24格式的切图方式 可平铺背景的切图方式及活动页的切图方式 魔棒工具判断背景色是否是线性渐变容差调整到零，在背景上点击 图片合并时保留空隙： 如果是小图标，留的空隙可适当小一些，一般20像素左右；那如果是大图标，要留的空隙就要大一点，因为大图标在调整的时候，影响到的空间也会比较大。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"css sprite 图片精灵","slug":"history/tech/5a377602c3dae4117dfd3f1d","date":"2017-12-17T20:02:10.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a377602c3dae4117dfd3f1d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a377602c3dae4117dfd3f1d/","excerpt":"","text":"http://alistapart.com/article/sprites","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spring MVC web 框架","slug":"history/tech/5a34704147e0b7d3188a6a47","date":"2017-12-16T01:00:49.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a34704147e0b7d3188a6a47/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a34704147e0b7d3188a6a47/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spring MVC","slug":"history/tech/5a346fc947e0b7d3188a6a46","date":"2017-12-16T00:58:49.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a346fc947e0b7d3188a6a46/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a346fc947e0b7d3188a6a46/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spring JDBC","slug":"history/tech/5a345bec47e0b7d3188a6a45","date":"2017-12-15T23:34:04.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a345bec47e0b7d3188a6a45/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a345bec47e0b7d3188a6a45/","excerpt":"","text":"整合 Mybatis","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"spring IOC","slug":"history/tech/5a33435147e0b7d3188a6a3f","date":"2017-12-15T03:36:49.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a33435147e0b7d3188a6a3f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a33435147e0b7d3188a6a3f/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ui 规范设计的注意事项","slug":"history/ui/5a33e93947e0b7d3188a6a44","date":"2017-12-15T03:24:41.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a33e93947e0b7d3188a6a44/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a33e93947e0b7d3188a6a44/","excerpt":"","text":"ui 规范设计的注意事项规范的详尽程度 内容 细节 实际工作中 UI 规范的使用 UI规范的更新与拓展","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"ui 规范设计的注意事项","slug":"history/ui/5a33e89a47e0b7d3188a6a43","date":"2017-12-15T03:22:02.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a33e89a47e0b7d3188a6a43/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a33e89a47e0b7d3188a6a43/","excerpt":"","text":"ui 规范设计的注意事项规范的详尽程度 内容 细节 实际工作中 UI 规范的使用和UI规范的更新与拓展","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"Spark 实战 SparkSession 使用小记","slug":"history/tech/5a333e3147e0b7d3188a6a3e","date":"2017-12-15T03:14:57.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a333e3147e0b7d3188a6a3e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a333e3147e0b7d3188a6a3e/","excerpt":"","text":"流程描述使用spark 和 kafka 做数据处理。将接受的kafka种的消息。按照消息的类型，去执行不同的任务处理器。在获取kafka 信息流的rdd中的job时 foreachjob 根据jobType对象进行传输sparkSession 对象中。 val jobs = rdd.map(x =&gt; { // println(x) var j = JSON.parseFull(x).get.asInstanceOf[Map[String, Any]] var jobType = j.getOrElse(JOB_TYPE, &quot;test&quot;).asInstanceOf[String] var msg = j.get(JOB_MSG).get.asInstanceOf[String] Job(jobType, msg) }) jobs.foreach(job =&gt; { println(job.jobType) println(job.msg) val ps: EtlProcess = job.jobType match { case &quot;oss&quot; =&gt; new EtlProcess with OssImportProcess case &quot;audit&quot; =&gt; new EtlProcess with AuditDataProcess } ps.process(spark, job.msg) }) 在传输过程中，rdd的算子中取foreach 任何数据都会序列化 由于sparkSession 不能被序列化，出现为null的情况 原因查看源码，类似这种rdd的action操作，rdd会把任务分发处理 runJob 这个过程的会被序列化的。 /** * Applies a function f to all elements of this RDD. */ def foreach(f: T =&gt; Unit): Unit = withScope { val cleanF = sc.clean(f) sc.runJob(this, (iter: Iterator[T]) =&gt; iter.foreach(cleanF)) } 解决办法使用collect 或者 toLocalIterator 返回需要处理的数据数组，这个使用已经rdd 算完的结果了。再去foreach根本不会需要序列化 val jobs = rdd.map(x =&gt; { // println(x) var j = JSON.parseFull(x).get.asInstanceOf[Map[String, Any]] var jobType = j.getOrElse(JOB_TYPE, &quot;test&quot;).asInstanceOf[String] var msg = j.get(JOB_MSG).get.asInstanceOf[String] Job(jobType, msg) }).toLocalIterator","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"spark","slug":"spark","permalink":"https://wangxiuwen.github.io/tags/spark/"},{"name":"scala","slug":"scala","permalink":"https://wangxiuwen.github.io/tags/scala/"}],"author":"baipeng"},{"title":"Mybatis","slug":"history/tech/5a33395c47e0b7d3188a6a3d","date":"2017-12-15T02:54:20.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a33395c47e0b7d3188a6a3d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a33395c47e0b7d3188a6a3d/","excerpt":"","text":"一般设置为 2~3分钟","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Mybatis","slug":"history/tech/5a33393d47e0b7d3188a6a3c","date":"2017-12-15T02:53:49.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a33393d47e0b7d3188a6a3c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a33393d47e0b7d3188a6a3c/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"web 端设计规范","slug":"history/ui/5a33e10947e0b7d3188a6a42","date":"2017-12-15T02:49:45.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a33e10947e0b7d3188a6a42/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a33e10947e0b7d3188a6a42/","excerpt":"","text":"web 端设计规范色彩规范 图标规范 控件规范 排版规范 12号宋体当它是像素文字的情况下，它看得是最清晰的。比其它的一些平滑，浑厚或者加粗都要来的清晰很多","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"Mybatis","slug":"history/tech/5a3336fd47e0b7d3188a6a3b","date":"2017-12-15T02:44:13.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3336fd47e0b7d3188a6a3b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3336fd47e0b7d3188a6a3b/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Mybatis","slug":"history/tech/5a33364e47e0b7d3188a6a3a","date":"2017-12-15T02:41:18.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a33364e47e0b7d3188a6a3a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a33364e47e0b7d3188a6a3a/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"事务","slug":"history/tech/5a332e2f47e0b7d3188a6a39","date":"2017-12-15T02:06:39.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a332e2f47e0b7d3188a6a39/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a332e2f47e0b7d3188a6a39/","excerpt":"","text":"读未提交 : 允许脏读读提交: 不允许脏读，但是允许不可重复读, 两次读取同一行记录的值有可能不一样重复读: 不允许不可重复读, 但是有可能出现幻读串行化: 不允许出现幻读，并发控制最为严格","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"移动端设计规范之切图","slug":"history/ui/5a33238f47e0b7d3188a6a38","date":"2017-12-15T01:21:19.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a33238f47e0b7d3188a6a38/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a33238f47e0b7d3188a6a38/","excerpt":"","text":"移动端设计规范之切图切图的概念 切图的输出要求 切图的尺寸 快速切图的方法 切图的命名规范 安卓.9.png 的切图和切图注意事项 序号1和序号2标识了可以拉伸的区域序号3和序号4标识了内容区域当设定了按钮的实际应用的高宽之后，横向会拉伸序号1区域的像素，纵向会拉伸序号2区域的像素在修改过程中希望 .9.png 不被拉伸，只要把拉伸区域的点点在透明像素的地方就可以了这样拉伸的时候会拉伸透明部分的像素，而不会拉伸图像的本身图中拉伸区域的黑点是不连续的，那就表明这些地方是不可拉伸的，因为这个箭头其实它是一个不规则的图形，所以我们不希望它被拉伸可以用 Draw 9-patch ，也可以用 ps 直接输出ps 直接输出的方式： 先输出普通的 png 资源，然后扩大画布大小，上下左右各留出一个像素，再用像素的铅笔工具，颜色选择纯黑色，上下左右分别画点就可以了 保存的时候后缀名 一定要改为 `.9.png` 切图的注意事项","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"移动端设计规范","slug":"history/ui/5a330a4347e0b7d3188a6a37","date":"2017-12-14T23:33:23.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a330a4347e0b7d3188a6a37/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a330a4347e0b7d3188a6a37/","excerpt":"","text":"移动端设计规范规范设计运用到的工具 规范设计指定的时间 规范设计的组成部分 色彩规范 控件规范 文字和排版规范 快读标注工具 简介photoshop 位图软件/图标/插画/页面/海报 IIustrator 矢量软件/图标/插画/包装 切图/svg Sketch 矢量软件/UI/icon 导出文件较小 指定规范的时机蓝色主要用于一些链接的颜色，一些可点击的颜色根据内容重要性由深到浅一级文字颜色是一些最重要的文字二级文字颜色可能是一些大量的阅读性文字次按钮一般出现在内页或者说是一些比较小的位置底部导航点击色为整个app的主色调","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"cubase 学习","slug":"history/music/5a339b0947e0b7d3188a6a41","date":"2017-12-14T21:51:05.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5a339b0947e0b7d3188a6a41/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5a339b0947e0b7d3188a6a41/","excerpt":"","text":"1.路线 添加多个线路。 2.轨道 添加多个轨道。 3.录音 找出歌曲的节拍速度 可以截取没有人声，带鼓节奏的部分算出歌曲的速度。 4.编辑录制的人声，可以重复录制相同部分的人声，展开分析多次相同部分，分析，修剪。 5.人声中空白处的，淡进，淡出效果编辑，编辑衰减人声中的呼吸声，可以从波形图中下压波形，也可以编辑选中的片段调整增益值。 6.使用wavetune 插件，监控人声音高的部分，并且会预处理一部分，修复音准问题（坑：当一句歌词处于两个音中间的位置，插件可能处理不对，需要手动处理使用铅笔工具可以画声调的高低） 剪刀工具，矫正速度（橘色是原始声音的曲线，绿色是插件修剪后的声音的曲线，颤音画波浪线） 7.虚拟乐器的编辑：添加乐器轨","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"}],"author":"baipeng"},{"title":"spring AOP","slug":"history/tech/5a3356f747e0b7d3188a6a40","date":"2017-12-14T17:00:39.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3356f747e0b7d3188a6a40/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3356f747e0b7d3188a6a40/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"sql 注入","slug":"history/tech/5a3259c747e0b7d3188a6a36","date":"2017-12-13T23:00:23.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3259c747e0b7d3188a6a36/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3259c747e0b7d3188a6a36/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"jdbc","slug":"history/tech/5a324ec847e0b7d3188a6a35","date":"2017-12-13T22:13:28.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a324ec847e0b7d3188a6a35/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a324ec847e0b7d3188a6a35/","excerpt":"","text":"推荐连接数设置为业务平均访问量推荐最大最小idle(空闲连接)设置成一样的值，避免连接的反复创建和销毁的开销","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"jsp","slug":"history/tech/5a324a1b47e0b7d3188a6a34","date":"2017-12-13T21:53:31.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a324a1b47e0b7d3188a6a34/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a324a1b47e0b7d3188a6a34/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"servlet","slug":"history/tech/5a32304547e0b7d3188a6a33","date":"2017-12-13T20:03:17.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a32304547e0b7d3188a6a33/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a32304547e0b7d3188a6a33/","excerpt":"","text":"servlet session监听器 package com.netease.server.example.web.controller; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ConcurrentServlet extends HttpServlet { String name; /** * */ private static final long serialVersionUID = -6948878379930865229L; @Override public void init() throws ServletException { super.init(); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { synchronized (this) { name = req.getParameter(&quot;username&quot;); PrintWriter out = resp.getWriter(); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } out.println(&quot;username: &quot; + name); } } @Override public void destroy() { super.destroy(); } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"版本管理","slug":"history/tech/5a322f0c47e0b7d3188a6a32","date":"2017-12-13T19:58:04.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a322f0c47e0b7d3188a6a32/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a322f0c47e0b7d3188a6a32/","excerpt":"","text":"版本管理LVCS 本地 CVCS 集中式 DVCS 分布式 CVCS CVS SVN Perforce 常用版本管理git Mercurial","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mac 下查看二级制文件","slug":"history/tech/5a322ebe47e0b7d3188a6a31","date":"2017-12-13T19:56:46.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a322ebe47e0b7d3188a6a31/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a322ebe47e0b7d3188a6a31/","excerpt":"","text":"0xEDhexdumphexdump xxx","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"矢量","slug":"history/ui/5a322e8e47e0b7d3188a6a30","date":"2017-12-13T19:55:58.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a322e8e47e0b7d3188a6a30/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a322e8e47e0b7d3188a6a30/","excerpt":"","text":"矢量svg 字体图标 icon font","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"maven 基本命令","slug":"history/tech/5a32067d863b4f2b5a550b8a","date":"2017-12-13T17:05:01.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a32067d863b4f2b5a550b8a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a32067d863b4f2b5a550b8a/","excerpt":"","text":"人肉式maven 基本命令mvn archetype:generate # 使用模板生成项目 mvn compile # 编译 mvn test # 测试 mvn package # 打war包 mvn deploy # 部署 mvn site # 项目相关的站点，在线文档 mvn clean # 清理 mvn install # 将包安装到本地仓库 Tomcat 官方提供一个 Maven 插件详细帮助 mvn help:describe -Dplugin=tomcat7 常见命令 mvn tomcat7:run # 启动一个嵌入的Tomcat 实例 mvn tomcat:deploy mvn tomcat:undeploy 手动生成工程mvn archetype:generate \\ -DgroupId=com.netease.restaurant \\ -DartifactId=Restaurant \\ -Dpackage=com.netease \\ -Dversion=1.0.0-SNAPSHOT \\ -DarchetypeArtifactId=maven-archetype-webapp 命令mvn help:describe -Dplugin=compiler -Dgoal=compile -Ddetail=true","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"HTTP 1.1的RFC文档","slug":"history/tech/5a30a2e0863b4f2b5a550b80","date":"2017-12-13T03:47:44.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a30a2e0863b4f2b5a550b80/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a30a2e0863b4f2b5a550b80/","excerpt":"","text":"RFC 2616 https://tools.ietf.org/html/rfc2616参考书籍《图解HTTP》《HTTP权威指南 (HTTP:The Definitive Guide)》","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"对象串行化","slug":"history/tech/5a309c38863b4f2b5a550b7f","date":"2017-12-13T03:19:20.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a309c38863b4f2b5a550b7f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a309c38863b4f2b5a550b7f/","excerpt":"","text":"对象串行化package test; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.io.Serializable; import java.net.InetAddress; import java.net.Socket;; class Student implements Serializable { private String name; private int age; private int grade; public Student(String name, int age, int grade) { this.name = name; this.age = age; this.grade = grade; } public String toString() { return name + &quot; &quot; + age + &quot; &quot; + grade; } } public class Hello{ public static void main(String[] args) { Student s1 = new Student(&quot;John&quot;, 18, 5); System.out.println(s1); try { ObjectOutputStream out = new ObjectOutputStream( new FileOutputStream(&quot;obj.dat&quot;)); out.writeObject(s1); out.close(); ObjectInputStream in = new ObjectInputStream( new FileInputStream(&quot;obj.dat&quot;)); Student s2 = (Student)in.readObject(); System.out.println(s2); in.close(); System.out.println(s1 == s2); }catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }catch (ClassNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 流应用","slug":"history/tech/5a309447863b4f2b5a550b7e","date":"2017-12-13T02:45:27.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a309447863b4f2b5a550b7e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a309447863b4f2b5a550b7e/","excerpt":"","text":"先监听一个端口:nc -l -p 12345 java 代码:package test; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.net.InetAddress; import java.net.Socket;; public class Hello{ public static void main(String[] args) { try { Socket socket = new Socket(InetAddress.getByName(&quot;localhost&quot;), 12345); PrintWriter out = new PrintWriter( new BufferedWriter( new OutputStreamWriter( socket.getOutputStream()))); out.println(&quot;hello&quot;); out.flush(); BufferedReader in = new BufferedReader( new InputStreamReader( socket.getInputStream())); String line; line = in.readLine(); System.out.println(line); out.close(); socket.close(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"安卓 material design","slug":"history/tech/5a308df3863b4f2b5a550b7d","date":"2017-12-13T02:18:27.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a308df3863b4f2b5a550b7d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a308df3863b4f2b5a550b7d/","excerpt":"","text":"https://developer.android.com/design/index.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"设计流程","slug":"history/ui/5a31344c863b4f2b5a550b89","date":"2017-12-13T02:08:12.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a31344c863b4f2b5a550b89/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a31344c863b4f2b5a550b89/","excerpt":"","text":"格式塔的应用 常见问题 视觉流注目度视觉元素 交互 需要注意的点产品需求 基本需求 期望型需求 兴奋型需求 ui 需要注意的 素材 排版 配色 背景 字体 装饰 对比","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"java 输入输出","slug":"history/tech/5a307bd0863b4f2b5a550b7c","date":"2017-12-13T01:01:04.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a307bd0863b4f2b5a550b7c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a307bd0863b4f2b5a550b7c/","excerpt":"","text":"标准输入输出流package test; import java.io.IOException; public class Hello{ public static void main(String[] args) { byte[] buffer = new byte[1024]; try { int len = System.in.read(buffer); String s = new String(buffer, 0, len); System.out.println(&quot;读到了:&quot; + len + &quot;字节&quot;); System.out.println(s); System.out.println(&quot;s的长度是:&quot; + s.length()); }catch(IOException e) { e.printStackTrace(); } } } 文件流package test; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; public class Hello{ public static void main(String[] args) { byte[] buffer = new byte[10]; for(int i = 0; i&lt; buffer.length; i++) { buffer[i] = (byte)i; } try { FileOutputStream out = new FileOutputStream(&quot;test.dat&quot;); out.write(buffer); out.close(); }catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); }catch (IOException e) { } } } 流过滤器如果写入的是十进制，实际写入文件的是二进制package test; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; public class Hello{ public static void main(String[] args) { byte[] buffer = new byte[10]; for(int i = 0; i&lt; buffer.length; i++) { buffer[i] = (byte)i; } try { DataOutputStream out = new DataOutputStream( new BufferedOutputStream( new FileOutputStream(&quot;test.dat&quot;))); int i = 123456; out.writeInt(i); out.close(); DataInputStream in = new DataInputStream( new BufferedInputStream( new FileInputStream(&quot;test.dat&quot;))); int j = in.readInt(); System.out.println(j); }catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); }catch (IOException e) { } } } 文本流package test; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.BufferedWriter; import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; public class Hello{ public static void main(String[] args) { byte[] buffer = new byte[10]; for(int i = 0; i&lt; buffer.length; i++) { buffer[i] = (byte)i; } try { PrintWriter out = new PrintWriter( new BufferedWriter( new OutputStreamWriter( new FileOutputStream(&quot;test.txt&quot;)))); int i = 123456; out.println(i); out.close(); }catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); }catch (IOException e) { } } } 读取文本package test; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; public class Hello{ public static void main(String[] args) { byte[] buffer = new byte[10]; for(int i = 0; i&lt; buffer.length; i++) { buffer[i] = (byte)i; } try { PrintWriter out = new PrintWriter( new BufferedWriter( new OutputStreamWriter( new FileOutputStream(&quot;test.txt&quot;)))); int i = 123456; out.println(i); out.close(); BufferedReader in = new BufferedReader( new InputStreamReader( new FileInputStream(&quot;src/test/Hello.java&quot;))); /* //指定编码 BufferedReader in = new BufferedReader( new InputStreamReader( new FileInputStream(&quot;src/test/Hello.java&quot;), &quot;utf8&quot;)); */ String line; while((line = in.readLine()) != null) { System.out.println(line); } }catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); }catch (IOException e) { } } } 汉字编码","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"JFrame 示例","slug":"history/tech/5a3079fe863b4f2b5a550b7b","date":"2017-12-13T00:53:18.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a3079fe863b4f2b5a550b7b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a3079fe863b4f2b5a550b7b/","excerpt":"","text":"JFrame 示例package test; import javax.swing.JFrame; public class Hello{ public static void main(String[] args) { JFrame frame = new JFrame(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setResizable(false); frame.setTitle(&quot;细胞自动机&quot;); //frame.add(view); frame.pack(); frame.setVisible(true); } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"用户体验","slug":"history/ui/5a312267863b4f2b5a550b88","date":"2017-12-13T00:51:51.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a312267863b4f2b5a550b88/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a312267863b4f2b5a550b88/","excerpt":"","text":"KANO 模型 用户体验三要素 用户体验分析方法 VIMM取舍","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"git 基本命令","slug":"history/tech/5a310a5b863b4f2b5a550b87","date":"2017-12-12T23:09:15.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a310a5b863b4f2b5a550b87/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a310a5b863b4f2b5a550b87/","excerpt":"","text":"参考资料git 简明指南https://try.github.io/levels/1/challenges/1https://git-scm.com/book/zh/v1","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"JAVA_OPTS 参数","slug":"history/tech/5a310918863b4f2b5a550b86","date":"2017-12-12T23:03:52.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a310918863b4f2b5a550b86/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a310918863b4f2b5a550b86/","excerpt":"","text":"-server -xms","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"项目环境与git 版本的关系","slug":"history/tech/5a31024a863b4f2b5a550b85","date":"2017-12-12T22:34:50.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a31024a863b4f2b5a550b85/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a31024a863b4f2b5a550b85/","excerpt":"","text":"项目环境与git 版本的关系开发环境 需要提交到下一个release的特性分支 测试环境 release或是development 分支 预发布环境 release 生产环境 master","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"分支管理","slug":"history/tech/5a310081863b4f2b5a550b84","date":"2017-12-12T22:27:13.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a310081863b4f2b5a550b84/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a310081863b4f2b5a550b84/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 打 war 包","slug":"history/tech/5a30fea7863b4f2b5a550b83","date":"2017-12-12T22:19:19.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a30fea7863b4f2b5a550b83/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a30fea7863b4f2b5a550b83/","excerpt":"","text":"打包命令：jar cvf xxx.war . 将 war 包拷贝到 webapps 下即可","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"tomcat 架构","slug":"history/tech/5a30f0ca863b4f2b5a550b82","date":"2017-12-12T21:20:10.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a30f0ca863b4f2b5a550b82/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a30f0ca863b4f2b5a550b82/","excerpt":"","text":"server.xmlConnector Coyote 默认 BIO Connector Container Catalina Servlet Connector 参数配置port address protocol connectionTimeout acceptCount maxConnections 线程配置minSpareThreads maxThreads 日志配置","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"某度笔试题","slug":"history/tech/5a30e275863b4f2b5a550b81","date":"2017-12-12T20:19:01.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a30e275863b4f2b5a550b81/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a30e275863b4f2b5a550b81/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 执行js","slug":"history/tech/5a2f555b863b4f2b5a550b6c","date":"2017-12-12T04:04:43.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2f555b863b4f2b5a550b6c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2f555b863b4f2b5a550b6c/","excerpt":"","text":"java 执行jspackage test; import javax.script.Invocable; import javax.script.ScriptEngine; import javax.script.ScriptEngineManager; import javax.script.ScriptException; public class Hello{ public static void main(String[] args) throws NoSuchMethodException { ScriptEngineManager sem = new ScriptEngineManager(); ScriptEngine se = sem.getEngineByName(&quot;js&quot;); try { String script = &quot;function check(){ return JSON.stringify(arguments);};&quot;; se.eval(script); Invocable inv2 = (Invocable) se; String res=(String)inv2.invokeFunction(&quot;check&quot;, new String[] {&quot;1&quot;, &quot;2&quot;}); System.out.println(res); } catch (ScriptException ex) { ex.printStackTrace(); } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"web 平台设计规范","slug":"history/ui/5a2ffb4f863b4f2b5a550b7a","date":"2017-12-12T03:52:47.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2ffb4f863b4f2b5a550b7a/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2ffb4f863b4f2b5a550b7a/","excerpt":"","text":"本文主要内容web主流屏幕 常用浏览器 页面交互操作行为 h5页面的设计方法 响应式设计 网页尺寸 主流浏览器 操作 响应式设计 h5 手机页面","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"Android UI 设计规范","slug":"history/ui/5a2ff1d3863b4f2b5a550b79","date":"2017-12-12T03:12:19.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2ff1d3863b4f2b5a550b79/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2ff1d3863b4f2b5a550b79/","excerpt":"","text":"概念参考 ios ui 设计规范 http://blog.qianrushi.org/topic/5a2fe879863b4f2b5a550b78 ICON 使用规范 文字使用规范 配色规范强调色 主题 手势操作","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"IOS UI 设计规范","slug":"history/ui/5a2fe879863b4f2b5a550b78","date":"2017-12-12T02:32:25.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2fe879863b4f2b5a550b78/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2fe879863b4f2b5a550b78/","excerpt":"","text":"概念主流平台的设计规范IOS 长按 对段落文字的操作(复制，粘贴, 全选) Android 长按 通常针对某一 list, 弹出菜单操作 本文主要内容ios 主流屏幕 icon的使用规范 文字的设计规范 颜色和控件的设计规范 UI 的手势交互概述 UI的动效概述 苹果文字设计规范 苹果配色规范 点击区域 手势操作","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"java 向上造型","slug":"history/tech/5a2f3f10863b4f2b5a550b6b","date":"2017-12-12T02:29:36.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2f3f10863b4f2b5a550b6b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2f3f10863b4f2b5a550b6b/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ui 设计中的常见问题","slug":"history/ui/5a2fe6c6863b4f2b5a550b77","date":"2017-12-12T02:25:10.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2fe6c6863b4f2b5a550b77/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2fe6c6863b4f2b5a550b77/","excerpt":"","text":"进深关系视觉流为什么文字该对齐用什么样的字体字号每个字体字号用什么颜色","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"动效设计","slug":"history/ui/5a2fdd6f863b4f2b5a550b76","date":"2017-12-12T01:45:19.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2fdd6f863b4f2b5a550b76/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2fdd6f863b4f2b5a550b76/","excerpt":"","text":"平面设计主要是实现两点:传递信息 氛围烘托 动效设计是处于动画设计和平面设计之间的一种交叉性的学科，他是利用动态的图片来传递信息和表达氛围的。 动态的图片 传递信息 表达氛围 动效的作用产品展示 品牌建设 交互展示 ui 动效流畅过渡 高效反馈 增强操纵 帮助引导 升华体验 动效的坑切忌复杂繁琐 注意开发成本 性能与响应度","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"一大波微信小程序","slug":"history/tech/5a2fdc8f863b4f2b5a550b75","date":"2017-12-12T01:41:35.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2fdc8f863b4f2b5a550b75/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2fdc8f863b4f2b5a550b75/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"微信小程序","slug":"微信小程序","permalink":"https://wangxiuwen.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"小程序","slug":"小程序","permalink":"https://wangxiuwen.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"author":"baipeng"},{"title":"无线 app 设计","slug":"history/ui/5a2fd85e863b4f2b5a550b72","date":"2017-12-12T01:23:42.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2fd85e863b4f2b5a550b72/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2fd85e863b4f2b5a550b72/","excerpt":"","text":"无线app设计中，涉及到的一些概念交互 设计目的 产品目的：差异化 功能目的 页面结构 层级展现: 通过颜色明暗，大小，距离，叠压 设计 控件规范(iohone4之前 1x 图， iphone4 之后出现2x图， iphone6plus 3x图) 信息分析 层级展现 控件规范 信息分析","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"设计基本原则","slug":"history/interactive/5a2fc51a863b4f2b5a550b71","date":"2017-12-12T00:01:30.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/interactive/5a2fc51a863b4f2b5a550b71/","link":"","permalink":"https://wangxiuwen.github.io/history/interactive/5a2fc51a863b4f2b5a550b71/","excerpt":"","text":"尊重用户习惯不要在不必要的地方体现差别","categories":[{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/categories/%E4%BA%A4%E4%BA%92/"}],"tags":[{"name":"interactive","slug":"interactive","permalink":"https://wangxiuwen.github.io/tags/interactive/"},{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E4%BA%92/"}],"author":"wangxiuwen"},{"title":"java MVC","slug":"history/tech/5a2f8a6a863b4f2b5a550b70","date":"2017-12-11T19:51:06.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2f8a6a863b4f2b5a550b70/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2f8a6a863b4f2b5a550b70/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 注入反转","slug":"history/tech/5a2f893d863b4f2b5a550b6f","date":"2017-12-11T19:46:05.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2f893d863b4f2b5a550b6f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2f893d863b4f2b5a550b6f/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 内部类 匿名类","slug":"history/tech/5a2f88d6863b4f2b5a550b6e","date":"2017-12-11T19:44:22.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2f88d6863b4f2b5a550b6e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2f88d6863b4f2b5a550b6e/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 狐狸与兔子","slug":"history/tech/5a2f8428863b4f2b5a550b6d","date":"2017-12-11T19:24:24.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2f8428863b4f2b5a550b6d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2f8428863b4f2b5a550b6d/","excerpt":"","text":"https://github.com/wangxiuwen-fork/JavaFoxAndRabbit","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java Math 方法","slug":"history/tech/5a2e072b863b4f2b5a550b64","date":"2017-12-11T04:18:51.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e072b863b4f2b5a550b64/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e072b863b4f2b5a550b64/","excerpt":"","text":"java Math 方法package test; public class Hello { public static void main(String[] args) { System.out.println(Math.abs(-2)); System.out.println(Math.round(2.2)); System.out.println(Math.random()); System.out.println(Math.pow(2, 3)); } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 基础 String 包装类的一些基础方法","slug":"history/tech/5a2e0353863b4f2b5a550b63","date":"2017-12-11T04:02:27.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e0353863b4f2b5a550b63/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e0353863b4f2b5a550b63/","excerpt":"","text":"java 基础 String 包装类的一些基础方法package test; public class Hello { public static void main(String[] args) { if(&quot;equals&quot;.equals(&quot;equals&quot;)) { System.out.println(&quot;equal!&quot;); } System.out.println(&quot;compareTo&quot;.compareTo(&quot;compareTo&quot;)); System.out.println(&quot;charAt&quot;.charAt(0)); System.out.println(&quot;indexOf&quot;.indexOf('n')); // 得到c字符所在的位置，-1表示不存在 System.out.println(&quot;indexOf&quot;.indexOf('n',1)); //从n号位置开始寻找字符 System.out.println(&quot;lastIndexOf&quot;.lastIndexOf('n',1)); //从n号位置开始寻找字符 System.out.println(&quot;toLowerCase&quot;.toLowerCase()); System.out.println(&quot;toUpperCase&quot;.toUpperCase()); System.out.println(&quot; tr im &quot;.trim()); System.out.println(&quot;replace&quot;.replace(&quot;ce&quot;, &quot;ced&quot;)); System.out.println(&quot;startsWith&quot;.startsWith(&quot;st&quot;, 0)); System.out.println(&quot;endsWith&quot;.endsWith(&quot;th&quot;)); } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 基础 scanner 的使用","slug":"history/tech/5a2e0154863b4f2b5a550b62","date":"2017-12-11T03:53:56.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e0154863b4f2b5a550b62/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e0154863b4f2b5a550b62/","excerpt":"","text":"java 基础 scanner 的使用package test; import java.util.Scanner; public class Hello { public static void main(String[] args) { int i; double d; Scanner in = new Scanner(System.in); i = in.nextInt(); d = in.nextDouble(); System.out.println(&quot;int=&quot;+i); System.out.println(&quot;double=&quot;+d); System.out.println(&quot;强制转换=&quot;+(int)d); } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 哈希表 HashMap","slug":"history/tech/5a2e6457863b4f2b5a550b6a","date":"2017-12-10T22:56:23.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e6457863b4f2b5a550b6a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e6457863b4f2b5a550b6a/","excerpt":"","text":"HashMappackage test; import java.util.HashMap; public class Hello{ public static void main(String[] args) { HashMap&lt;String, String&gt; s = new HashMap&lt;String,String&gt;(); s.put(&quot;key&quot;, &quot;value&quot;); System.out.println(s); System.out.println(s.keySet().size()); System.out.println(s.keySet()); System.out.println(s.get(&quot;key&quot;)); } } 注意 HashMap 的两个参数不能是基本类型，Integer 可以，但是 int 不行","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 集合(hashset)","slug":"history/tech/5a2e61c4863b4f2b5a550b69","date":"2017-12-10T22:45:24.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e61c4863b4f2b5a550b69/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e61c4863b4f2b5a550b69/","excerpt":"","text":"java 集合(hashset)package test; import java.util.HashSet; public class Hello{ public static void main(String[] args) { HashSet&lt;String&gt; s = new HashSet&lt;String&gt;(); s.add(&quot;a&quot;); s.add(&quot;b&quot;); s.add(&quot;a&quot;); for (String k : s) { System.out.println(k); } System.out.println(s); } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 数组","slug":"history/tech/5a2e54bc863b4f2b5a550b68","date":"2017-12-10T21:49:48.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e54bc863b4f2b5a550b68/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e54bc863b4f2b5a550b68/","excerpt":"","text":"对象数组对象数组中的每个元素都是对象的管理者而非对象本身package test; public class Hello{ public static void main(String[] args) { String[] s = new String[10]; System.out.println(s[0]); } } java for-each 循环package test; public class Hello{ public static void main(String[] args) { int[] ia = new int[10]; for(int i=0; i&lt; ia.length;i++) { ia[i] = i; } for(int k : ia) { System.out.println(k); } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"raft","slug":"history/tech/5a2e3f8b863b4f2b5a550b67","date":"2017-12-10T20:19:23.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e3f8b863b4f2b5a550b67/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e3f8b863b4f2b5a550b67/","excerpt":"","text":"http://thesecretlivesofdata.com/raft/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 权限关键字","slug":"history/tech/5a2e3b07863b4f2b5a550b66","date":"2017-12-10T20:00:07.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e3b07863b4f2b5a550b66/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e3b07863b4f2b5a550b66/","excerpt":"","text":"类成员如果不带 public 默认是 friendly类名如果是 public (public class …) ，则类所处的文件的文件名必须和类名一致。一个 java 文件只能有一个 public 的类，不是 public 的类只在包内有效。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"java 异常","slug":"history/tech/5a2e2e72863b4f2b5a550b65","date":"2017-12-10T19:06:26.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2e2e72863b4f2b5a550b65/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2e2e72863b4f2b5a550b65/","excerpt":"","text":"异常对象可以抛出异常, 操作方法如下:String getMessage(); String toString(); String printStackTrace(); 什么可以抛出？任何继承了 Throwable 类的对象 Exception 类继承了 Throwable throw new Exception(); throw new Exception(&quot;HELP&quot;); 异常声明遇到继承关系当覆盖一个函数的时候， 子类不能声明抛出比父类的版本更多的异常 在子类的构造函数中，必须声明父类可能抛出的全部异常 package test; class OpenException extends Exception{} class CloseException extends OpenException{} class NewException extends Exception{} class Test { public Test() throws OpenException {} public void f() throws OpenException{} public static void main(String[] args) { } } public class Hello extends Test{ // 子类的构造函数可以比父类有更多的异常 public Hello() throws OpenException, NewException { } // 子类覆盖父类，成员函数不允许比子类抛出更多种类的异常 public void f() throws OpenException{} public static void main(String[] args) { try { // 将子类对象当作父类对象看待 Test t = new Hello(); t.f(); } catch (OpenException e1) { // TODO Auto-generated catch block e1.printStackTrace(); }catch (NewException e2) { e2.printStackTrace(); } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ICON 设计","slug":"history/ui/5a2d41cf863b4f2b5a550b61","date":"2017-12-10T02:16:47.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2d41cf863b4f2b5a550b61/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2d41cf863b4f2b5a550b61/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"ui 设计作业","slug":"history/ui/5a2bec5f863b4f2b5a550b60","date":"2017-12-09T01:59:59.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2bec5f863b4f2b5a550b60/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2bec5f863b4f2b5a550b60/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"ui 设计碎片细节","slug":"history/ui/5a2bde06863b4f2b5a550b5f","date":"2017-12-09T00:58:46.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2bde06863b4f2b5a550b5f/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2bde06863b4f2b5a550b5f/","excerpt":"","text":"文字左边距一般和上下两个文本框一样文字框和背景色没有边界，可以给文字框加一个带有环境色的边框","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"学习设计的思维导图","slug":"history/ui/5a2bda10863b4f2b5a550b5e","date":"2017-12-09T00:41:52.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2bda10863b4f2b5a550b5e/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2bda10863b4f2b5a550b5e/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"设计站点","slug":"history/ui/5a2bd9a0863b4f2b5a550b5d","date":"2017-12-09T00:40:00.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2bd9a0863b4f2b5a550b5d/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2bd9a0863b4f2b5a550b5d/","excerpt":"","text":"dribbblehttp://www.fubiz.netbehancehttps://www.artsy.net/ui 中国behanceSnapseed站酷花瓣","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"web 端设计","slug":"history/interactive/5a2b28e18630a50e58e14d9c","date":"2017-12-09T00:05:53.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/interactive/5a2b28e18630a50e58e14d9c/","link":"","permalink":"https://wangxiuwen.github.io/history/interactive/5a2b28e18630a50e58e14d9c/","excerpt":"","text":"网页布局页面设计自适应设计","categories":[{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/categories/%E4%BA%A4%E4%BA%92/"}],"tags":[{"name":"interactive","slug":"interactive","permalink":"https://wangxiuwen.github.io/tags/interactive/"},{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E4%BA%92/"}],"author":"wangxiuwen"},{"title":"移动设计模式","slug":"history/interactive/5a2b28bb8630a50e58e14d9b","date":"2017-12-09T00:05:15.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/interactive/5a2b28bb8630a50e58e14d9b/","link":"","permalink":"https://wangxiuwen.github.io/history/interactive/5a2b28bb8630a50e58e14d9b/","excerpt":"","text":"导航标签式导航/滚动式标签导航 分段式导航 舵式导航 列表","categories":[{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/categories/%E4%BA%A4%E4%BA%92/"}],"tags":[{"name":"interactive","slug":"interactive","permalink":"https://wangxiuwen.github.io/tags/interactive/"},{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E4%BA%92/"}],"author":"wangxiuwen"},{"title":"ios和安卓设计规范","slug":"history/interactive/5a2b28828630a50e58e14d9a","date":"2017-12-09T00:04:18.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/interactive/5a2b28828630a50e58e14d9a/","link":"","permalink":"https://wangxiuwen.github.io/history/interactive/5a2b28828630a50e58e14d9a/","excerpt":"","text":"遵循移动平台的设计规范","categories":[{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/categories/%E4%BA%A4%E4%BA%92/"}],"tags":[{"name":"interactive","slug":"interactive","permalink":"https://wangxiuwen.github.io/tags/interactive/"},{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E4%BA%92/"}],"author":"wangxiuwen"},{"title":"ui 设计的内容","slug":"history/ui/5a2bcb1a863b4f2b5a550b5c","date":"2017-12-08T23:38:02.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/5a2bcb1a863b4f2b5a550b5c/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/5a2bcb1a863b4f2b5a550b5c/","excerpt":"","text":"","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"页面的设计原则","slug":"history/interactive/5a2b891f863b4f2b5a550b5b","date":"2017-12-08T18:56:31.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/interactive/5a2b891f863b4f2b5a550b5b/","link":"","permalink":"https://wangxiuwen.github.io/history/interactive/5a2b891f863b4f2b5a550b5b/","excerpt":"","text":"视觉引导用户阅读习惯 对角线法则","categories":[{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/categories/%E4%BA%A4%E4%BA%92/"}],"tags":[{"name":"interactive","slug":"interactive","permalink":"https://wangxiuwen.github.io/tags/interactive/"},{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E4%BA%92/"}],"author":"wangxiuwen"},{"title":"页面的任务目标","slug":"history/interactive/5a2b8596863b4f2b5a550b5a","date":"2017-12-08T18:41:26.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/interactive/5a2b8596863b4f2b5a550b5a/","link":"","permalink":"https://wangxiuwen.github.io/history/interactive/5a2b8596863b4f2b5a550b5a/","excerpt":"","text":"确定页面的任务目的信息元素的组织分类对组块进行排版布局权衡平台规范和用户的使用习惯页面排版的设计验证","categories":[{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/categories/%E4%BA%A4%E4%BA%92/"}],"tags":[{"name":"interactive","slug":"interactive","permalink":"https://wangxiuwen.github.io/tags/interactive/"},{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E4%BA%92/"}],"author":"wangxiuwen"},{"title":"设计需求分析与方案选择","slug":"history/interactive/5a2b84cc863b4f2b5a550b59","date":"2017-12-08T18:38:04.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/interactive/5a2b84cc863b4f2b5a550b59/","link":"","permalink":"https://wangxiuwen.github.io/history/interactive/5a2b84cc863b4f2b5a550b59/","excerpt":"","text":"业务需求 = 业务目的(为什么做这个功能？问题在哪？) + 业务目标(产品期望的成果)用户需求 = 目标用户(谁来使用这些功能？特征，经验) + 场景 + 行为 + 体验目标用户体验路径 = 用户使用前，中，后的接触点 ， 确保设计闭环业务目标转化为用户行为: 如何让目标用户来使用设计的功能业务需求 注册 业务目的 用户管理 业务目标 提高注册页面转化率 用户行为 点击注册按钮","categories":[{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/categories/%E4%BA%A4%E4%BA%92/"}],"tags":[{"name":"interactive","slug":"interactive","permalink":"https://wangxiuwen.github.io/tags/interactive/"},{"name":"交互","slug":"交互","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E4%BA%92/"}],"author":"wangxiuwen"},{"title":"运营要求","slug":"history/operate/5a2a0c4150d13d3f764ddbaa","date":"2017-12-08T03:51:29.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/operate/5a2a0c4150d13d3f764ddbaa/","link":"","permalink":"https://wangxiuwen.github.io/history/operate/5a2a0c4150d13d3f764ddbaa/","excerpt":"","text":"与用户连的更近把用户分级运营","categories":[{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/categories/%E8%BF%90%E8%90%A5/"}],"tags":[{"name":"operate","slug":"operate","permalink":"https://wangxiuwen.github.io/tags/operate/"},{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E8%90%A5/"}],"author":"wangxiuwen"},{"title":"Spring boot zuul 网关设置跨域问题大坑","slug":"history/tech/5a2649ff50d13d3f764ddba8","date":"2017-12-04T19:25:51.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a2649ff50d13d3f764ddba8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2649ff50d13d3f764ddba8/","excerpt":"","text":"前后分离项目，在使用zuul 作微服务的网关的时候。需要设置跨域问题。除了设置CorsFilter 还需要额外忽略重复头文件的配置。 zuul.ignored-headers: Access-Control-Allow-Credentials, Access-Control-Allow-Origin 具体步骤： @Bean @Order public CorsFilter corsFilter() { final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); final CorsConfiguration config = new CorsConfiguration(); //允许跨域 config.setAllowCredentials(true); config.addAllowedOrigin(&quot;*&quot;); config.addAllowedHeader(&quot;*&quot;); config.addAllowedMethod(&quot;OPTIONS&quot;); config.addAllowedMethod(&quot;HEAD&quot;); config.addAllowedMethod(&quot;GET&quot;); config.addAllowedMethod(&quot;PUT&quot;); config.addAllowedMethod(&quot;POST&quot;); config.addAllowedMethod(&quot;DELETE&quot;); config.addAllowedMethod(&quot;PATCH&quot;); source.registerCorsConfiguration(&quot;/**&quot;, config); return new CorsFilter(source); } zuul: ignored-headers: Access-Control-Allow-Credentials, Access-Control-Allow-Origin","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"windows 命令行工具","slug":"history/tech/5a24bf2f50d13d3f764ddba7","date":"2017-12-04T03:21:19.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a24bf2f50d13d3f764ddba7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a24bf2f50d13d3f764ddba7/","excerpt":"","text":"官方网址http://cmder.net","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"安卓自动化测试","slug":"history/tech/5a23878d50d13d3f764ddba6","date":"2017-12-02T17:11:41.000Z","updated":"2020-11-29T01:42:08.767Z","comments":true,"path":"history/tech/5a23878d50d13d3f764ddba6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a23878d50d13d3f764ddba6/","excerpt":"","text":"安卓工具包安装完 android studio以后，安装 sdk，则一下路径会包含相应的工具包adb:C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools uiautomatorviewer.bat:C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools\\bin appium 测试框架安装官网:http://appium.io/ 安装 appium python 客户端pip install Appium-Python-Client 推荐网站testclasstesterhome","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"运营工作内容","slug":"history/operate/5a22244650d13d3f764ddb9f","date":"2017-12-02T03:55:50.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/operate/5a22244650d13d3f764ddb9f/","link":"","permalink":"https://wangxiuwen.github.io/history/operate/5a22244650d13d3f764ddb9f/","excerpt":"","text":"运营内容包括:营销 策划 文案 编辑 推广 传播 用户管理 活动 产品机制 拓展/销售 运营始终需要关注两个分支数据方向:数据分析 用户反馈 潜在产品方向 需求提炼 内容方向运营内容运营岗位:编辑，记者，社区运营，新媒体运营 用户方向运营用户运营岗位:推广，群运营，社区运营，核心用户运营 活动运营","categories":[{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/categories/%E8%BF%90%E8%90%A5/"}],"tags":[{"name":"operate","slug":"operate","permalink":"https://wangxiuwen.github.io/tags/operate/"},{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E8%90%A5/"}],"author":"wangxiuwen"},{"title":"搜索引擎营销","slug":"history/tech/5a2276a850d13d3f764ddba5","date":"2017-12-01T21:47:20.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a2276a850d13d3f764ddba5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2276a850d13d3f764ddba5/","excerpt":"","text":"http://sem.baidu.com/ 搜索引擎提交页面:百度:http://ziyuan.baidu.com/linksubmit/urlgoogle：https://www.google.com/webmasters/tools/submit-url?hl=zh-CN&amp;pli=1 搜索结果页分为:标题 &lt;title&gt; 内容 如果网页内容包含 meta 描述标签: 这个标签的内容就会作为搜索结果的描述， 控制在70个汉字左右 如果网页内容不包含 meta 标签: 搜索引擎会抓取网页中的一小段文字显示，当网页内容包含了搜索者搜索的关键词的时候， 搜索引擎会抓取内容里面第一次出现关键词的附近的一小段文字，然后用它作为搜索结果的描述 链接 网页的地址作为搜索结果的地址 提高页面排名 页面标题优化页面标题影响关键词排名 页面标题中需要包含关键词 页面标题与网页内容相关 网站的每个页面标题都要不同 提高内容的相关程度在内容中出现关键词，并尽量让关键词多出现几次，一般在一个页面内，出现 2~3 次想被搜索的关键词是合适的 关键词出现的位置影响排名，最好在内容最开始的位置出现关键词 内容中使用与关键词相关的词汇(使用关联词汇) 在段落标题中包含关键词 标题一最重要， 其次是标题二 强调加粗显示关键词 网站内部链接 提高网站内容的权威度外部链接 数量 质量 内容相关(外部内容和文章内容相关) 设计优化检测网站https://validator.w3.org使用现代的html网页布局不要使用 table 标签， 要使用基于 css 的布局方式 优化网页的性能 优化网页的效果(可用性) 引起注意 勾起兴趣 渴望得到 采取行动 关键词优化放弃高频付费关键词，关注不太热门，但是的确有人搜索的关键词 关键词与登录页(landing page)导航型搜索者 &quot;我知道我想要的&quot; 比如说他搜索 淘宝网, 将网站首页设置为登录页 信息型的搜索者 &quot;给我十个选择你的理由！&quot; 搜索者搜索 苹果电脑什么型号好， 这类搜索者需要一些评测或者对比的内容作为登录页 这类型的搜索者不会直接购买，他们会学习一段时间再购买 交易型的搜索者 &quot;别废话，就要他，能便宜点不？&quot; 这类型的搜索者一般会搜索具体的内容，比如说 ipad2， 苹果平板电脑 对于这类型的搜索者最好提供产品页面并加以促销打折的信息，来吸引这类型的搜索者购买 推荐工具站长工具http://tool.chinaz.com 书籍推荐《搜索引擎营销网站流量大提速》 《DONOT MAKE ME THINK》 《网站优化》 《seo 实战密码》 《网络营销实战密码》 seo每日一贴(seo 实战密码作者网站)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"产品协作流程","slug":"history/tech/5a22711b50d13d3f764ddba4","date":"2017-12-01T21:23:39.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a22711b50d13d3f764ddba4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a22711b50d13d3f764ddba4/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"不同产品形态的突破性增长引擎","slug":"history/operate/5a22601650d13d3f764ddba3","date":"2017-12-01T20:11:02.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/operate/5a22601650d13d3f764ddba3/","link":"","permalink":"https://wangxiuwen.github.io/history/operate/5a22601650d13d3f764ddba3/","excerpt":"","text":"工具类产品的成长驱动力体验 效率 社交分享场景打通 内容类产品的成长驱动力内容品质 独特性 互动 传播通路 三节课: 社交类产品的成长氛围 内容质量 话题 社交类产品的成长驱动力关系链 氛围 玩法 平台类产品的成长驱动力细分价值点 交叉补贴","categories":[{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/categories/%E8%BF%90%E8%90%A5/"}],"tags":[{"name":"operate","slug":"operate","permalink":"https://wangxiuwen.github.io/tags/operate/"},{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E8%90%A5/"}],"author":"wangxiuwen"},{"title":"不同业务类型产品的运营侧重点","slug":"history/operate/5a22599250d13d3f764ddba2","date":"2017-12-01T19:43:14.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/operate/5a22599250d13d3f764ddba2/","link":"","permalink":"https://wangxiuwen.github.io/history/operate/5a22599250d13d3f764ddba2/","excerpt":"","text":"网易云音乐核心业务逻辑脉脉核心业务逻辑不同业务类型产品的运营侧重点","categories":[{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/categories/%E8%BF%90%E8%90%A5/"}],"tags":[{"name":"operate","slug":"operate","permalink":"https://wangxiuwen.github.io/tags/operate/"},{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E8%90%A5/"}],"author":"wangxiuwen"},{"title":"产品生命周期","slug":"history/operate/5a224b1550d13d3f764ddba1","date":"2017-12-01T18:41:25.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/operate/5a224b1550d13d3f764ddba1/","link":"","permalink":"https://wangxiuwen.github.io/history/operate/5a224b1550d13d3f764ddba1/","excerpt":"","text":"","categories":[{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/categories/%E8%BF%90%E8%90%A5/"}],"tags":[{"name":"operate","slug":"operate","permalink":"https://wangxiuwen.github.io/tags/operate/"},{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E8%90%A5/"}],"author":"wangxiuwen"},{"title":"运营职业发展","slug":"history/operate/5a2247e350d13d3f764ddba0","date":"2017-12-01T18:27:47.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/operate/5a2247e350d13d3f764ddba0/","link":"","permalink":"https://wangxiuwen.github.io/history/operate/5a2247e350d13d3f764ddba0/","excerpt":"","text":"职能上分:公司发展上分:","categories":[{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/categories/%E8%BF%90%E8%90%A5/"}],"tags":[{"name":"operate","slug":"operate","permalink":"https://wangxiuwen.github.io/tags/operate/"},{"name":"运营","slug":"运营","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E8%90%A5/"}],"author":"wangxiuwen"},{"title":"ansible docker 修改配置自动重启","slug":"history/tech/5a20d4594b0d20bd5c4f7b59","date":"2017-12-01T04:02:33.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20d4594b0d20bd5c4f7b59/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20d4594b0d20bd5c4f7b59/","excerpt":"","text":"ansible docker 修改配置自动重启--- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: 安装 docker yum: name: docker-engine state:latest - name: 启动 docker service: name: docker state: started #主机每次重启后服务的状态,可选值 [started, stoped, reloaded, restarted] - name: 配置 docker 服务 copy: src: ./file/docker.service dest: /etc/systemd/system/ notify: - 重启 sysytemd - 重启 docker handlers: - name 重启 systemd command: /usr/bin/systemctl daemon-reload - name 重启 docker service: name: docker state: restart 查看服务状态:ansible all -a &quot;systemctl show docker&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible docker 安装启动并设置开机启动","slug":"history/tech/5a20d1674b0d20bd5c4f7b58","date":"2017-12-01T03:49:59.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20d1674b0d20bd5c4f7b58/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20d1674b0d20bd5c4f7b58/","excerpt":"","text":"ansible docker 安装启动并设置开机启动--- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: 安装 docker yum: name: docker-engine state:latest - name: 启动 docker service: name: docker state: started #主机每次重启后服务的状态,可选值 [started, stoped, reloaded, restarted]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible copy 模块","slug":"history/tech/5a20cb354b0d20bd5c4f7b57","date":"2017-12-01T03:23:33.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20cb354b0d20bd5c4f7b57/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20cb354b0d20bd5c4f7b57/","excerpt":"","text":"vim play.yml--- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: &quot;拷贝测试文件&quot; copy: src: ./files/test.txt dest: /home/test","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible yum 模块","slug":"history/tech/5a20c31c4b0d20bd5c4f7b56","date":"2017-12-01T02:49:00.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20c31c4b0d20bd5c4f7b56/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20c31c4b0d20bd5c4f7b56/","excerpt":"","text":"安装的 playbook: --- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: &quot;安装 epel&quot; yum: name: epel-release state: latest 测试：ansible all -a &quot;yum repolist&quot; 删除的 playbookplaybook: --- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: &quot;安装 epel&quot; yum: name: epel-release state: removed","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 拷贝密钥","slug":"history/tech/5a20c2b24b0d20bd5c4f7b55","date":"2017-12-01T02:47:14.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20c2b24b0d20bd5c4f7b55/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20c2b24b0d20bd5c4f7b55/","excerpt":"","text":"playbook: --- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: &quot;拷贝公钥&quot; - authorized_key: user: root key: &quot;{{lookup('file', '/root/.ssh/id_rsa.pub')}}&quot; state: present","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible playbook","slug":"history/tech/5a20c1634b0d20bd5c4f7b54","date":"2017-12-01T02:41:39.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20c1634b0d20bd5c4f7b54/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20c1634b0d20bd5c4f7b54/","excerpt":"","text":"创建 yml 文件:vim play.yml --- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: &quot;测试连接&quot; ping: 执行:ansible-playbook play.yml -v","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible","slug":"history/tech/5a20bb814b0d20bd5c4f7b53","date":"2017-12-01T02:16:33.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20bb814b0d20bd5c4f7b53/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20bb814b0d20bd5c4f7b53/","excerpt":"","text":"设置主机(inventory 库存，清单)/etc/ansible/hosts [test] 10.0.177.[239:242] ansible_user=root ansible_ssh_pass=123456 [swarm] 10.0.177.222 [swarm:vars] ansible_user=root ansible_ssh_pass=123456 可以通过设置变量的方式设置用户名和密码，还可以单独创建文件指定(文件名使用主机群组的名字)vim /etc/ansible/group_vars/swarm --- ansible_user： root ansible_ssh_pass：123456 检查主机状态ansible all -m ping -u [用户名] -k [密码] ansible swarm -m ping # swarm 为群组列表 使用命令行模块ansible all --module-name=ping --user=root --ask-pass ansible all --args &quot;echo ~&quot; --user root ansible all --args &quot;echo ~&quot; --user root --become #become 切换到 root 简写:ansible all --a &quot;echo ~&quot; -u root -b 使用 copy 模块ansible all -m copy -a 'src=~/hello.txt sest=/home/test' -u root ansible all -a &quot;ls /home/test&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"自动化测试框架","slug":"history/tech/5a2116c4b97e3c720ca1a0fb","date":"2017-11-30T20:45:56.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a2116c4b97e3c720ca1a0fb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2116c4b97e3c720ca1a0fb/","excerpt":"","text":"http://appium.io","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"混音基本概念","slug":"history/music/5a210fc5b97e3c720ca1a0fa","date":"2017-11-30T20:16:05.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5a210fc5b97e3c720ca1a0fa/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5a210fc5b97e3c720ca1a0fa/","excerpt":"","text":"声音的基本概念相位：声音的方向声相:左右位置频响:频率响应动态范围:最高电平与最低电平的差值动态余量:保留余量，以24bit为例，动态范围一般是 144db一般来讲，响度越大(响度取决于平均电平)，动态越小。 编码dsd编码采样精度过高，只有1bit， 6db的采样范围， 记录两个点的振幅差 psm编码量化精度软件内部处理精度大于24bit 16bit 上面有 8bit/db * 6db = 48db 16bit 下面有 16bit/db * 6db = 96db 也就是说 总的精度有 -144 + 96 = -240 常用混音设备电脑 声卡 asio core audio 话筒 话筒放大器 数字音频工作站(DAW digital audio workstation)protools studio one life makesbus ... 监听设备 监听音箱选择房间&lt;15m2 近场音箱 房间&gt;25m2 中小远场 房间 40~50m2 之间 远场 中远场低频表现好 按照喇叭位置同轴监听音箱(因为干涉小，所以相位失真小，工作室主流) 按照倒相孔位置前倒相孔 后倒相孔 监听耳机的选择不能用于主要的监听设备 用于听细节 全封闭 录音室使用 半封闭 后期听细节，对频响表现更好 监听控制器要求染色较小 话筒电容 适合录制民歌，如 u87 电子管 声压承受较小，适合录制流行歌，如 u47 动圈 声压承受好，频响窄，录制摇滚歌曲，作为鼓麦，录制底鼓，现场演出使用动圈，过滤噪声 按照振膜分大振膜 小振膜 对低频要求不高，适合录制吉他，小提琴 鼓的over head 做为补充话筒 话筒放大器声卡上的话筒放大器，一般不用于录制主声部，可以用于录制鼓 电子管放大器染色好，声压承受低，晶体管造价便宜 数字主时钟 效果器压缩器改变声音的动态EQ改变声音的频率，频率分布混响希望身处空间的描述 压缩器晶体管： 结实，更多的压缩痕迹 光学: 压缩动态比较大的，如人声等，最小的压缩痕迹 电子管: 染色大，让声音具有更多的弹性和甜美度，例如金属音色更需要温暖 EQ声音风格 声音力度 如何测量房间声学特性使用粉红噪声(粉红噪声是一种全频段噪声) + 测量话筒设备上自带的 EQ 校正会带来相位失真","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"}],"author":"wangxiuwen"},{"title":"ansible 角色(roles)","slug":"history/tech/5a20fca84b0d20bd5c4f7b62","date":"2017-11-30T18:54:32.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20fca84b0d20bd5c4f7b62/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20fca84b0d20bd5c4f7b62/","excerpt":"","text":"创建角色:mkdir roles cd roles ansible-galaxy init docker 文件夹介绍default: 默认的变量 files: 任务需要的文件 handlers: 任务需要的处理器 meta: 角色相关的信息，比如说角色的依赖 tasks: 角色的任务 templates: 角色需要用到的一些文件模板 tests: 测试 vars: 是一些变量","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 包含文件","slug":"history/tech/5a20fa704b0d20bd5c4f7b61","date":"2017-11-30T18:45:04.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20fa704b0d20bd5c4f7b61/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20fa704b0d20bd5c4f7b61/","excerpt":"","text":"include:--- - name: ansible playbook hosts: all remote_user: root become: yes vars: user_name: 'test' var_files: tasks: - include: test.yml test.yml: --- - name: 常用工具 yum: name： '{{ item }}' state: latest with_items: - tree - zip tags: - common","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 模板","slug":"history/tech/5a20f9784b0d20bd5c4f7b60","date":"2017-11-30T18:40:56.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20f9784b0d20bd5c4f7b60/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20f9784b0d20bd5c4f7b60/","excerpt":"","text":"play.yml--- - name: ansible playbook hosts: all remote_user: root become: yes vars: docker_registry_mirror: 'https://xxx.mirror.aliyun.com' var_files: tasks: - name: 拷贝文件 template: src: ./files/docker.service.j2 dest: /etc/systemd/system/ 模板文件：./files/docker.service.j2 ... --registry-mirror = {{ docker_registry_mirror }} ...","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 命令行使用模块","slug":"history/tech/5a20f7cb4b0d20bd5c4f7b5f","date":"2017-11-30T18:33:47.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20f7cb4b0d20bd5c4f7b5f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20f7cb4b0d20bd5c4f7b5f/","excerpt":"","text":"删除dockeransible all -m -a 'name=docker-engine state=absent' 删除 docker-engine-selinuxansible all -m -a 'name=docker-engine-selinux state=absent' 删除文件ansible all -m file -a 'path=/etc/yum.repos.d/docker-testing.repo state=absent' -u test -b","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 循环","slug":"history/tech/5a20f5614b0d20bd5c4f7b5e","date":"2017-11-30T18:23:29.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20f5614b0d20bd5c4f7b5e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20f5614b0d20bd5c4f7b5e/","excerpt":"","text":"安装通用软件--- - name: ansible playbook hosts: all remote_user: root become: yes vars: user_name: 'test' var_files: tasks: - name: 常用工具 yum: name： '{{ item }}' state: latest with_items: - tree - zip tags: - common hash 类型--- - name: ansible playbook hosts: all remote_user: root become: yes vars: user_name: 'test' var_files: tasks: - name: 常用工具 yum: name： '{{ item.name }}' state: '{{ item.state }}' state: latest with_items: - {name: tree, state: latest} - {name: zip, state: latest} tags: - common","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 条件判断","slug":"history/tech/5a20f4434b0d20bd5c4f7b5d","date":"2017-11-30T18:18:43.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20f4434b0d20bd5c4f7b5d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20f4434b0d20bd5c4f7b5d/","excerpt":"","text":"ansible 收集远程主机的一些信息:ansible all -m setup 应用到playbook中：--- - name: ansible playbook hosts: all remote_user: root become: yes vars: user_name: 'test' var_files: tasks: - name: Debian debug: msg: 'Debian' when: ansible_os_family == 'Debian' tags: - test 测试：ansible-playbook play.yml -t test","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 变量","slug":"history/tech/5a20f1f84b0d20bd5c4f7b5c","date":"2017-11-30T18:08:56.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20f1f84b0d20bd5c4f7b5c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20f1f84b0d20bd5c4f7b5c/","excerpt":"","text":"可以使用 vars 指定变量，也可以使用 var_files 指定变量文件--- - name: ansible playbook hosts: all remote_user: root become: yes vars: user_name: 'test' var_files: tasks: - name: 添加用户 user: name: '{{user_name}}' state: present groups: wheel,sudo append: yes tags: - user 使用:ansible-playbook play.yml -t user --extra-vars 'user_name=test1'","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 添加用户","slug":"history/tech/5a20e3d64b0d20bd5c4f7b5b","date":"2017-11-30T17:08:38.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20e3d64b0d20bd5c4f7b5b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20e3d64b0d20bd5c4f7b5b/","excerpt":"","text":"ansible 添加用户:--- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: 添加用户 user: name: test state: present groups: wheel,sudo append: yes tags: - user 测试:ansible-playbook play.yml -t user 查看:ansible all -a 'groups test' 如果想删除用户，可以将 state 设置成 absent， 如果想同时删除目录，则设置 remove 为 yes --- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: 添加用户 user: name: test state: absent remove: yes groups: wheel,sudo append: yes tags: - user 设置密码--- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: 添加用户 user: name: test state: present groups: wheel,sudo append: yes password: '加密后的密码' tags: - user","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ansible 标签","slug":"history/tech/5a20e2d74b0d20bd5c4f7b5a","date":"2017-11-30T17:04:23.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20e2d74b0d20bd5c4f7b5a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20e2d74b0d20bd5c4f7b5a/","excerpt":"","text":"给 playbook 的任务添加标签，在运行任务的时候指定标签--- - name: ansible playbook hosts: all remote_user: root become: yes tasks: - name: 测试连接 ping: tags: - test ansible tags:ansible-playbook play.yml --tags 'test' ansible-playbook play.yml --skip-tags 'test'","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"module object has no attribute process_time","slug":"history/tech/5a20211d4b0d20bd5c4f7b52","date":"2017-11-30T03:17:49.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a20211d4b0d20bd5c4f7b52/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a20211d4b0d20bd5c4f7b52/","excerpt":"","text":"报错:12tic = time.process_time()&apos;module&apos; object has no attribute &apos;process_time&apos;查看 python 官方文档:python2:https://docs.python.org/2/library/time.html#module-timepython3:https://docs.python.org/3/library/time.html#time.process_timetime.process_time 函数 python3 才有","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"python 广播","slug":"history/tech/5a2004154b0d20bd5c4f7b51","date":"2017-11-30T01:13:57.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a2004154b0d20bd5c4f7b51/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a2004154b0d20bd5c4f7b51/","excerpt":"","text":"https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"cassandra 搭建","slug":"history/tech/5a1fa69a4b0d20bd5c4f7b50","date":"2017-11-29T18:35:06.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1fa69a4b0d20bd5c4f7b50/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1fa69a4b0d20bd5c4f7b50/","excerpt":"","text":"打开 rpc:vim conf/cassandra.yaml start_rpc: true web ui:https://github.com/sebgiroux/Cassandra-Cluster-Admin.git","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"webgl 编程指南","slug":"history/tech/5a1ed4394b0d20bd5c4f7b4f","date":"2017-11-29T03:37:29.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1ed4394b0d20bd5c4f7b4f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1ed4394b0d20bd5c4f7b4f/","excerpt":"","text":"代码下载:https://sites.google.com/site/webglbook/home/downloads","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker-compose","slug":"history/tech/5a1e78b74b0d20bd5c4f7b4e","date":"2017-11-28T21:07:03.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1e78b74b0d20bd5c4f7b4e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1e78b74b0d20bd5c4f7b4e/","excerpt":"","text":"创建 docker-compose.yml 文件version： 3 services： nginx: image: nginx ports: - &quot;8080:80&quot; networks: - &quot;otest&quot; volumes: - nest:/mnt networks: otest: driver: bridge volumes: nest: driver: local 启动docker-compose up docker-compose up -d docker-compose up 会创建默认的网络查看docker-compose ps execdocker-compose exec web /bin/bash 停止docker-compose stop # 后面跟服务名则只停止具体的服务 删除docker-compose rm rm 不会删除掉创建的网络和数据卷同时删除掉网络docker-compose down","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker service","slug":"history/tech/5a1e6c684b0d20bd5c4f7b4d","date":"2017-11-28T20:14:32.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1e6c684b0d20bd5c4f7b4d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1e6c684b0d20bd5c4f7b4d/","excerpt":"","text":"创建一个服务：docker service create --name web --network otest --publish 4080:80 --replicas 1 nignx 水平扩展服务(可增加，可减少):docker service scale web=3 查看服务:docker service ps web 更新服务:docker service update web --image nginx:latest # 指定每次更新的数量，指定更新的间隔时间 docker service update web --image nginx:latest --update-parallelism 2 --update-delay 6s","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker swarm 集群","slug":"history/tech/5a1e63944b0d20bd5c4f7b4c","date":"2017-11-28T19:36:52.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1e63944b0d20bd5c4f7b4c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1e63944b0d20bd5c4f7b4c/","excerpt":"","text":"初始化 docker 集群 manage 节点:docker swarm init --listen-addr 10.0.177.242:2377 查看集群现有节点:docker node ls 添加节点到 swarm 集群:docker swarm join --listen-addr 10.0.177.243:2377 --token `token` 10.0.177.242:2377 在 manage 节点 查看节点:docker node ls 创建网络docker network create --driver overlay otest docker network ls","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker 基础命令","slug":"history/tech/5a1e5b6d4b0d20bd5c4f7b4b","date":"2017-11-28T19:02:05.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1e5b6d4b0d20bd5c4f7b4b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1e5b6d4b0d20bd5c4f7b4b/","excerpt":"","text":"搜索 nginx 镜像:docker search nginx 查看本地镜像docker images 拉取镜像docker pull ubuntu 使用阿里云加速https://dev.aliyun.com/search.html查看本地容器docker ps -a # docker ps --all docker ps --all --latest # 查看最近创建的容器 查看正在运行的容器docker ps 查看容器日志docker logs `容器名/ID` docker logs --follow `容器名/ID` 启动容器docker start `容器名/ID` 停止容器 docker stop `容器名/ID` 创建带交互的容器docker run --interactive --tty ubuntu /bin/bash 后台运行容器docker run --detach ubuntu ping baidu.com 提交对镜像的修改docker commit -m &quot;提交日志&quot; -a &quot;作者&quot; `容器名/ID` `用户名/镜像名`:latest 根据 dockerfile 创建镜像dockefile:FROM ubuntu RUN apt install nodejs-legacy 执行命令:docker build --tag qianrushi/nodejs:latest . 上传镜像docker login # 登录 docker hub docker push qianrushi/nodejs","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker 网络","slug":"history/tech/5a1e4e124b0d20bd5c4f7b4a","date":"2017-11-28T18:05:06.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1e4e124b0d20bd5c4f7b4a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1e4e124b0d20bd5c4f7b4a/","excerpt":"","text":"分类 bridge 网络创建容器的时候，如果不指定 --net 参数，则默认使用 bridge 网络，在 bridge 网络下的容器可以直接通信 none 网络和外界完全隔离的网络环境docker run -d --name test_none --net none nginx host 网络使用主机网络，即和主机 ip 一样 命令 查看 docker 网络docker network ls 具体查看某个网络docker network inspect bridge 查看 docker 镜像使用端口查找 ExposedPorts 字段:docker inspect jenkins 查看 docker 容器所使用的端口docker port `容器id/容器名` 端口绑定将容器的 80 端口 绑定到本机任意端口:docker run -d --name nginx --publish 80 nginx 将容器所需要绑定的端口绑定到本机的任意端口:docker run -d --name nginx --publish-all nginx 或者简写:docker run -d --name nginx -P nginx 自定义网络我们可以基于某个网络创建自定义网络，属于这个网络的容器会被单独隔离出来，这些容器可以直接通信，但是不在这个自定义网络的容器不能够直接访问他们，一个容器可以使用多个网络。在自定义网络中的容器可以通过 docker 内嵌的dns 功能使用各自的名字来访问对方。 创建一个新的网络docker network create --driver bridge nginx 把容器放入指定的网络docker network connect `连接到的网络名` `要放到网络中的容器名` 将容器从指定网络中移除docker network disconnect `要去掉的网络名` `要从网络中拿掉的容器名`","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"json to go","slug":"history/tech/5a1d79914b0d20bd5c4f7b49","date":"2017-11-28T02:58:25.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1d79914b0d20bd5c4f7b49/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1d79914b0d20bd5c4f7b49/","excerpt":"","text":"https://mholt.github.io/json-to-go/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 书籍","slug":"history/tech/5a1a3c9c4b0d20bd5c4f7b47","date":"2017-11-26T04:01:32.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1a3c9c4b0d20bd5c4f7b47/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1a3c9c4b0d20bd5c4f7b47/","excerpt":"","text":"https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"常见中文分词器","slug":"history/tech/5a1a72e34b0d20bd5c4f7b48","date":"2017-11-25T19:53:07.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1a72e34b0d20bd5c4f7b48/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1a72e34b0d20bd5c4f7b48/","excerpt":"","text":"ikansjjcsegHanLPwordjieya酷狗中文分词器：核心词典，简繁体词典，标点符号词典，排除词典，替换词典 混合字符分词 (英文分词，中英文，中文数字， 数字英文，标点非标点等) 基于MMSEG","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Spring boot jpa 使用 EntityManagerFactory 的注意事项。数据源使用的Druid","slug":"history/tech/5a17f8634b0d20bd5c4f7b46","date":"2017-11-23T22:45:55.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a17f8634b0d20bd5c4f7b46/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a17f8634b0d20bd5c4f7b46/","excerpt":"","text":"spring boot jpa 使用 EntityManagerFactory 自定语句查询。记得 close。否则连接数会持续的增加。托跨应用。问题排查办法：由于我使用的阿里的Druid配置连接的自动关闭。配置截图中的log-abandoned: true方便打印出日志，排查哪里的代码使用占用连接没有关闭。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"c 协程","slug":"history/tech/5a17db944b0d20bd5c4f7b45","date":"2017-11-23T20:43:00.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a17db944b0d20bd5c4f7b45/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a17db944b0d20bd5c4f7b45/","excerpt":"","text":"https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"判断两个平面平行","slug":"history/math/5a17d3a84b0d20bd5c4f7b44","date":"2017-11-23T20:09:12.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5a17d3a84b0d20bd5c4f7b44/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5a17d3a84b0d20bd5c4f7b44/","excerpt":"","text":"第一个平面找一个点，第二个平面找一个点，两点连线与其中一个平面的法向量正交，则两平面平行。","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"spring boot jpa 坑爹笔记","slug":"history/tech/5a1643684b0d20bd5c4f7b42","date":"2017-11-23T03:41:28.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1643684b0d20bd5c4f7b42/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1643684b0d20bd5c4f7b42/","excerpt":"","text":"1 使用jpa自带的delete方法删除 对象的时候。数据库不能为空的字段 必须传值。否者就报异常 该字段 not null解决办法。查询出这个对象。在给delete方法删除。2 自定义的id生成器。使用的雪花算法。业务需要，修改了位数的长度。使用jpa的save(list) 方法 在同一个事务中快速插入列表的时候。id 生成重复。导致插入列表失败。解决办法：暂时for list 调用saveFulsh方法。一个一个的插入刷新后在插入。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"springboot","slug":"springboot","permalink":"https://wangxiuwen.github.io/tags/springboot/"},{"name":"jpa","slug":"jpa","permalink":"https://wangxiuwen.github.io/tags/jpa/"}],"author":"baipeng"},{"title":"atom 同步编程","slug":"history/tech/5a1664614b0d20bd5c4f7b43","date":"2017-11-22T18:02:09.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a1664614b0d20bd5c4f7b43/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a1664614b0d20bd5c4f7b43/","excerpt":"","text":"https://atom.io/packages/teletype","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"notepad++ 配置 go 高亮","slug":"history/tech/5a143b794b0d20bd5c4f7b41","date":"2017-11-21T02:43:05.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a143b794b0d20bd5c4f7b41/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a143b794b0d20bd5c4f7b41/","excerpt":"","text":"下载notepad++的go语言支持包将文件userDefineLang_Go.xml内容copy至Application Data下Notepad++目录的userDefineLang.xml 如果此文件不存在，就直接将userDefineLang_Go.xml另存为userDefineLang.xml，首尾注释去掉 C:\\Users[username]\\AppData\\Roaming\\Notepad++ 将go.xml文件copy至notepad安装目录下的plugins\\APIs目录(例如：D:\\Program Files\\Notepad\\plugins\\APIs)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go json 标签使用小技巧","slug":"history/tech/5a12eb5e4b0d20bd5c4f7b40","date":"2017-11-20T02:49:02.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a12eb5e4b0d20bd5c4f7b40/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a12eb5e4b0d20bd5c4f7b40/","excerpt":"","text":"当你创建一个结构体的时候，这个结构体需要在其他类中修改内部的变量 我们定义为外部可访问的变量。type test struct {Con string}打印出json 的效果:a := test{“12”}data, _ := json.Marshal(a)fmt.Println(string(data)){“Con”:“12”}但是这个时候，变量是大小的，我在做json数据传输的时候，不希望是大写。那么可以使用 json 标签技巧。type test struct {Con stringjson:&quot;con,omitempty&quot;}再次打印json:{“con”:“12”}更多技巧，待补充。。。。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"chrome 页面跳转保留日志功能  Preserve log","slug":"history/tech/5a12ae524b0d20bd5c4f7b3f","date":"2017-11-19T22:28:34.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a12ae524b0d20bd5c4f7b3f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a12ae524b0d20bd5c4f7b3f/","excerpt":"","text":"Preserve log 在页面跳转后，控制台和网络控制台的内容暂时不清空，保留下来。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go &^ 运算","slug":"history/tech/5a129fe54b0d20bd5c4f7b3e","date":"2017-11-19T21:27:01.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a129fe54b0d20bd5c4f7b3e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a129fe54b0d20bd5c4f7b3e/","excerpt":"","text":"go &amp;^ 运算","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 反射练习","slug":"history/tech/5a100d4e4b0d20bd5c4f7b3d","date":"2017-11-17T22:37:02.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a100d4e4b0d20bd5c4f7b3d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a100d4e4b0d20bd5c4f7b3d/","excerpt":"","text":"代码:package main import ( &quot;fmt&quot; &quot;reflect&quot; ) type User struct { Id int Name string Age int } func (u User) Hello() { fmt.Println(&quot;Hello World&quot;) } func main() { /* 基本类型 */ var x float64 = 1.1 //TypeOf fmt.Println(&quot;-----------------TypeOf------------------&quot;) fmt.Println(&quot;reflect.TypeOf(x):&quot;, reflect.TypeOf(x)) fmt.Println(&quot;reflect.TypeOf(x).Kind():&quot;, reflect.TypeOf(x).Kind()) //ValueOf fmt.Println(&quot;-----------------ValueOf-----------------&quot;) fmt.Println(&quot;reflect.ValueOf(x):&quot;, reflect.ValueOf(x)) fmt.Println(&quot;reflect.ValueOf(x).Type():&quot;, reflect.ValueOf(x).Type()) fmt.Println(&quot;reflect.ValueOf(x).Canset():&quot;, reflect.ValueOf(x).CanSet()) fmt.Println(&quot;reflect.ValueOf(&amp;x).Elem():&quot;, reflect.ValueOf(&amp;x).Elem()) fmt.Println(&quot;reflect.ValueOf(&amp;x).Elem().CanSet():&quot;, reflect.ValueOf(&amp;x).Elem().CanSet()) reflect.ValueOf(&amp;x).Elem().SetFloat(1.21) fmt.Println(&quot;reflect.ValueOf(&amp;x).Elem().Interface():&quot;, reflect.ValueOf(&amp;x).Elem().Interface()) /* struct */ fmt.Println(&quot;-----------------struct-----------------&quot;) u := User{1, &quot;ok&quot;, 12} fmt.Println(reflect.TypeOf(u).Kind() == reflect.Struct) for i := 0; i &lt; reflect.TypeOf(u).NumField(); i++ { fmt.Printf(&quot;字段: %6s\\n&quot;, reflect.TypeOf(u).Field(i)) fmt.Printf(&quot;字段名: %6s | 字段类型: %v | 字段值: %v\\n&quot;, reflect.TypeOf(u).Field(i).Name, reflect.TypeOf(u).Field(i).Type, reflect.ValueOf(u).Field(i).Interface()) } for i := 0; i &lt; reflect.TypeOf(u).NumMethod(); i++ { fmt.Printf(&quot;reflect.TypeOf(u).Method(i).Name: %6s\\n reflect.TypeOf(u).Method(i).Type: %v\\n&quot;, reflect.TypeOf(u).Method(i).Name, reflect.TypeOf(u).Method(i).Type) } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"git socks5 代理","slug":"history/tech/5a0f06cbd102fd2345a053a2","date":"2017-11-17T03:56:59.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0f06cbd102fd2345a053a2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0f06cbd102fd2345a053a2/","excerpt":"","text":"设置ssgit config --global http.proxy 'socks5://127.0.0.1:1080' git config --global https.proxy 'socks5://127.0.0.1:1080' 设置代理git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 取消代理git config --global --unset http.proxy git config --global --unset https.proxy 参考：https://gist.github.com/laispace/666dd7b27e9116faece6","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go concurrency","slug":"history/tech/5a0e5124d102fd2345a053a0","date":"2017-11-17T03:01:56.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0e5124d102fd2345a053a0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0e5124d102fd2345a053a0/","excerpt":"","text":"concurrencypackage main import ( &quot;fmt&quot; &quot;time&quot; ) func main() { go Go() time.Sleep(2 * time.Second) } func Go() { fmt.Println(&quot;Go Go Go!!!&quot;) } 使用chanpackage main import ( &quot;fmt&quot; ) func main() { c := make(chan bool) go func(){ fmt.Println(&quot;Go Go Go!!!&quot;) c &lt;- true }() &lt;-c } for 版本package main import ( &quot;fmt&quot; ) func main() { c := make(chan bool) go func() { fmt.Println(&quot;Go Go Go!!!&quot;) c &lt;- true close(c) }() for v := range c { fmt.Println(v) } } 有缓存和没有缓存的 chanpackage main import ( &quot;fmt&quot; ) func main() { c := make(chan bool) //c := make(chan bool, 1) go func() { fmt.Println(&quot;Go Go Go!!!&quot;) &lt;-c }() c &lt;- true } 多个协程package main import ( &quot;fmt&quot; ) func main() { c := make(chan bool) for i := 0; i &lt; 10; i++ { go Go(c, i) } &lt;-c } func Go(c chan bool, index int) { a := 1 for i := 0; i &lt; 10000000; i++ { a += i } fmt.Println(index, a) if index == 9 { c &lt;- true } } 10个缓存并使用 多核的版本package main import ( &quot;fmt&quot; &quot;runtime&quot; ) func main() { runtime.GOMAXPROCS(runtime.NumCPU()) c := make(chan bool, 10) for i := 0; i &lt; 10; i++ { go Go(c, i) } for i := 0; i &lt; 10; i++ { &lt;-c } } func Go(c chan bool, index int) { a := 1 for i := 0; i &lt; 10000000; i++ { a += i } fmt.Println(index, a) c &lt;- true } wait group 版package main import ( &quot;fmt&quot; &quot;runtime&quot; &quot;sync&quot; ) func main() { runtime.GOMAXPROCS(runtime.NumCPU()) wg := sync.WaitGroup{} wg.Add(10) for i := 0; i &lt; 10; i++ { go Go(&amp;wg, i) } wg.Wait() } func Go(wg *sync.WaitGroup, index int) { a := 1 for i := 0; i &lt; 10000000; i++ { a += i } fmt.Println(index, a) wg.Done() } selectpackage main import ( &quot;fmt&quot; ) func main() { c1, c2 := make(chan int), make(chan string) o := make(chan bool, 2) go func() { for { select { case v, ok := &lt;-c1: if !ok { fmt.Println(&quot;c1 !ok&quot;) o &lt;- true break } fmt.Println(&quot;c1&quot;, v) case v, ok := &lt;-c2: if !ok { fmt.Println(&quot;c2 !ok&quot;) o &lt;- true break } fmt.Println(&quot;c2&quot;, v) } } }() c1 &lt;- 1 c2 &lt;- &quot;hi&quot; c1 &lt;- 3 c2 &lt;- &quot;hello&quot; close(c1) close(c2) for i := 1; i &lt; 2; i++ { &lt;-o } } 使用 select 发送package main import ( &quot;fmt&quot; ) func main() { c := make(chan int) go func() { for v := range c { fmt.Println(v) } }() for { select { case c &lt;- 0: case c &lt;- 1: } } } chan 超时package main import ( &quot;fmt&quot; &quot;time&quot; ) func main() { c := make(chan bool) select { case v := &lt;-c: fmt.Println(v) case &lt;-time.After(3 * time.Second): fmt.Println(&quot;timeout&quot;) } } 创建一个 goroutine，与主线程按顺序相互发送信息若干次并打印package main import ( &quot;fmt&quot; ) var c chan string func Pingpong() { i := 0 for { fmt.Println(&lt;-c) c &lt;- fmt.Sprintf(&quot;From Pingpong:Hi, #%d&quot;, i) i++ } } func main() { c = make(chan string) go Pingpong() for i := 0; i &lt; 10; i++ { c &lt;- fmt.Sprintf(&quot;From main: Hello,#%d&quot;, i) fmt.Println(&lt;-c) } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 反射","slug":"history/tech/5a0e4324d102fd2345a0539f","date":"2017-11-17T02:02:12.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0e4324d102fd2345a0539f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0e4324d102fd2345a0539f/","excerpt":"","text":"反射package main import ( &quot;fmt&quot; &quot;reflect&quot; ) type User struct { Id int Name string Age int } func (u User) Hello() { fmt.Println(&quot;Hello World&quot;) } func main() { u := User{1, &quot;ok&quot;, 12} Info(u) } func Info(o interface{}) { t := reflect.TypeOf(o) fmt.Println(&quot;Type:&quot;, t.Name()) if k := t.Kind(); k != reflect.Struct { fmt.Println(&quot;xxxx&quot;) return } v := reflect.ValueOf(o) fmt.Println(&quot;Fields:&quot;) for i := 0; i &lt; t.NumField(); i++ { f := t.Field(i) val := v.Field(i).Interface() fmt.Printf(&quot;%6s: %v = %v\\n&quot;, f.Name, f.Type, val) } for i := 0; i &lt; t.NumMethod(); i++ { m := t.Method(i) fmt.Printf(&quot;%6s: %v\\n&quot;, m.Name, m.Type) } } 获取字段内容package main import ( &quot;fmt&quot; &quot;reflect&quot; ) type User struct { Id int Name string Age int } type Manager struct { User title string } func main() { m := Manager{User: User{1, &quot;ok&quot;, 12}, title: &quot;123&quot;} t := reflect.TypeOf(m) fmt.Printf(&quot;%#v\\n&quot;, t.FieldByIndex([]int{0, 0})) } 通过反射修改基本类型package main import ( &quot;fmt&quot; &quot;reflect&quot; ) func main() { x := 123 v := reflect.ValueOf(&amp;x) v.Elem().SetInt(999) fmt.Println(x) } 通过反射对接口中的对象的值进行修改package main import ( &quot;fmt&quot; &quot;reflect&quot; ) type User struct { Id int Name string Age int } func main() { u := User{1, &quot;ok&quot;, 12} Set(&amp;u) fmt.Println(u) } func Set(o interface{}) { v := reflect.ValueOf(o) if v.Kind() == reflect.Ptr &amp;&amp; !v.Elem().CanSet() { fmt.Println(&quot;xx&quot;) return } v = v.Elem() f := v.FieldByName(&quot;Name&quot;) if !f.IsValid() { fmt.Println(&quot;BAD&quot;) return } if f.Kind() == reflect.String { f.SetString(&quot;BYEBYE&quot;) } } 通过反射进行方法调用package main import ( &quot;fmt&quot; &quot;reflect&quot; ) type User struct { Id int Name string Age int } func (u User) Hello(name string) { fmt.Println(&quot;Hello&quot;, name, &quot;, my name is&quot;, u.Name) } func main() { u := User{1, &quot;ok&quot;, 12} u.Hello(&quot;wang&quot;) v := reflect.ValueOf(u) mv := v.MethodByName(&quot;Hello&quot;) args := []reflect.Value{reflect.ValueOf(&quot;wang&quot;)} mv.Call(args) }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 坑","slug":"history/tech/5a0e8ea8d102fd2345a053a1","date":"2017-11-16T19:24:24.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0e8ea8d102fd2345a053a1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0e8ea8d102fd2345a053a1/","excerpt":"","text":"数组错误版本:package main import ( &quot;fmt&quot; ) var c chan string func Pingpong(s []int) { s = append(s, 3) } func main() { s := make([]int, 0) fmt.Println(s) Pingpong(s) fmt.Println(s) } 数组推荐版本:package main import ( &quot;fmt&quot; ) var c chan string func Pingpong(s []int) []int { s = append(s, 3) return s } func main() { s := make([]int, 0) fmt.Println(s) s = Pingpong(s) fmt.Println(s) } time 坑:package main import ( &quot;fmt&quot; &quot;time&quot; ) func main() { t := time.Now() fmt.Println(t) fmt.Println(t.Format(time.ANSIC)) fmt.Println(t.Format(&quot;Mon Jan _2 15:04:05 2006&quot;)) //自定义时间---巨坑 fmt.Println(t.Format(&quot;Fri Nov 17 15:27:00 2017&quot;)) } range 与闭包的坑:package main import ( &quot;fmt&quot; ) func main() { s := []string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;} for _, v := range s { go func(v string) { fmt.Println(v) }(v) // 这里需要传递参数 } select {}//这里报错，故意做的死锁，不用管 }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go interface","slug":"history/tech/5a0da268d102fd2345a0539e","date":"2017-11-16T02:36:24.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0da268d102fd2345a0539e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0da268d102fd2345a0539e/","excerpt":"","text":"例一:package main import &quot;fmt&quot; type USB interface { Name() string Connect() } type PhoneConnector struct { name string } func (pc PhoneConnector) Name() string { return pc.name } func (pc PhoneConnector) Connect() { fmt.Println(&quot;Connected:&quot;, pc.name) } func main() { a := PhoneConnector{&quot;PhoneConnector&quot;} a.Connect() Disconnect(a) } func Disconnect(usb USB) { fmt.Println(&quot;Disconnected.&quot;) } 例二:package main import &quot;fmt&quot; type USB interface { Name() string Connector } type Connector interface { Connect() } type PhoneConnector struct { name string } func (pc PhoneConnector) Name() string { return pc.name } func (pc PhoneConnector) Connect() { fmt.Println(&quot;Connected:&quot;, pc.name) } func main() { a := PhoneConnector{&quot;PhoneConnector&quot;} a.Connect() Disconnect(a) } func Disconnect(usb USB) { fmt.Println(&quot;Disconnected.&quot;) } 例三:package main import &quot;fmt&quot; type USB interface { Name() string Connector } type Connector interface { Connect() } type PhoneConnector struct { name string } func (pc PhoneConnector) Name() string { return pc.name } func (pc PhoneConnector) Connect() { fmt.Println(&quot;Connected:&quot;, pc.name) } func main() { a := PhoneConnector{&quot;PhoneConnector&quot;} a.Connect() Disconnect(a) } func Disconnect(usb USB) { if pc, ok := usb.(PhoneConnector); ok { fmt.Println(&quot;Disconnected.&quot;, pc.name) return } fmt.Println(&quot;unknown device.&quot;) } 参数为空接口的处理方法: package main import &quot;fmt&quot; type USB interface { Name() string Connector } type Connector interface { Connect() } type PhoneConnector struct { name string } func (pc PhoneConnector) Name() string { return pc.name } func (pc PhoneConnector) Connect() { fmt.Println(&quot;Connected:&quot;, pc.name) } func main() { a := PhoneConnector{&quot;PhoneConnector&quot;} a.Connect() Disconnect(a) } func Disconnect(usb interface{}) { switch v := usb.(type) { case PhoneConnector: fmt.Println(&quot;Disconnected&quot;, v.name) default: fmt.Println(&quot;Unknown device.&quot;) } } 在刚才的基础上修改main函数package main import &quot;fmt&quot; type USB interface { Name() string Connector } type Connector interface { Connect() } type PhoneConnector struct { name string } func (pc PhoneConnector) Name() string { return pc.name } func (pc PhoneConnector) Connect() { fmt.Println(&quot;Connected:&quot;, pc.name) } func main() { pc := PhoneConnector{&quot;PhoneConnector&quot;} var a Connector a = Connector(pc) a.Connect() } func Disconnect(usb interface{}) { switch v := usb.(type) { case PhoneConnector: fmt.Println(&quot;Disconnected&quot;, v.name) default: fmt.Println(&quot;Unknown device.&quot;) } } 无法互相转化的情况:package main import &quot;fmt&quot; type USB interface { Name() string Connector } type Connector interface { Connect() } type PhoneConnector struct { name string } func (pc PhoneConnector) Name() string { return pc.name } func (pc PhoneConnector) Connect() { fmt.Println(&quot;Connected:&quot;, pc.name) } type TVConnector struct { name string } func (tv TVConnector) Connect() { fmt.Println(&quot;Connected:&quot;, tv.name) } func main() { tv := TVConnector{&quot;TVConnector&quot;} var a USB a = USB(tv) a.Connect() } func Disconnect(usb interface{}) { switch v := usb.(type) { case PhoneConnector: fmt.Println(&quot;Disconnected&quot;, v.name) default: fmt.Println(&quot;Unknown device.&quot;) } } 将对象赋值给接口时，会发生拷贝，而接口内部存储的是指向这个复制品的指针，既无法修改复制品的状态，也无法获取指针package main import &quot;fmt&quot; type USB interface { Name() string Connector } type Connector interface { Connect() } type PhoneConnector struct { name string } func (pc PhoneConnector) Name() string { return pc.name } func (pc PhoneConnector) Connect() { fmt.Println(&quot;Connected:&quot;, pc.name) } func main() { pc := PhoneConnector{&quot;PhoneConnector&quot;} var a Connector a = Connector(pc) a.Connect() //完全无视对原来对象的修改，因此他得到的是一个拷贝 pc.name = &quot;pc&quot; a.Connect() } func Disconnect(usb interface{}) { switch v := usb.(type) { case PhoneConnector: fmt.Println(&quot;Disconnected&quot;, v.name) default: fmt.Println(&quot;Unknown device.&quot;) } } 只有当接口存储的类型和对象都为nil时，接口才等于nilpackage main import &quot;fmt&quot; func main() { var a interface{} fmt.Println(a == nil) var p *int = nil a = p fmt.Println(a == nil) }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 相关网站","slug":"history/tech/5a0d9738d102fd2345a0539d","date":"2017-11-16T01:48:40.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0d9738d102fd2345a0539d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0d9738d102fd2345a0539d/","excerpt":"","text":"http://gowalker.org/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go method","slug":"history/tech/5a0d9133d102fd2345a0539c","date":"2017-11-16T01:22:59.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0d9133d102fd2345a0539c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0d9133d102fd2345a0539c/","excerpt":"","text":"定义函数接收者package main import ( &quot;fmt&quot; ) type A struct { Name string } type B struct { Name string } func main() { a := A{} a.print() fmt.Println(a.Name) b := B{} b.print() fmt.Println(b.Name) } //这里定义了函数的接收者 func (a *A) print() { a.Name = &quot;AA&quot; fmt.Println(&quot;A&quot;) } func (b B) print() { b.Name = &quot;BB&quot; fmt.Println(&quot;B&quot;) } 给 int 添加方法(方法绑定必须在相同包中)package main import &quot;fmt&quot; type Test int func main() { var a Test a.print() } func (test Test) print() { fmt.Println(&quot;test&quot;) } Method Values 和 Method Expressionspackage main import &quot;fmt&quot; type Test int func main() { var a Test //Method Values a.print() // Method Expressions (*Test).print(&amp;a) } func (test *Test) print() { fmt.Println(&quot;test&quot;) } 给自定义类型添加方法package main import &quot;fmt&quot; type Test int func main() { var a Test a.increase(10) fmt.Println(a) } func (test *Test) increase(num Test) { *test += num }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go struct","slug":"history/tech/5a0d748fd102fd2345a0539b","date":"2017-11-15T23:20:47.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0d748fd102fd2345a0539b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0d748fd102fd2345a0539b/","excerpt":"","text":"第一种初始化方法:package main import ( &quot;fmt&quot; ) type person struct { Name string Age int } func main() { a := person{} a.Name = &quot;wang&quot; a.Age = 20 fmt.Println(a) } 第二种初始化方法:package main import ( &quot;fmt&quot; ) type person struct { Name string Age int } func main() { a := person{ Name: &quot;wang&quot;, Age: 22, } fmt.Println(a) } 第三种初始化方法:(匿名结构)package main import ( &quot;fmt&quot; ) func main() { a := struct { Name string Age int }{ Name: &quot;wang&quot;, Age: 22, } fmt.Println(a) } 嵌套匿名结构package main import ( &quot;fmt&quot; ) type person struct { Name string Age int //Contact 为匿名结构 Contact struct { Phone, City string } } func main() { a := person{Name: &quot;wang&quot;, Age: 19} //Contact 为匿名结构，只能按照如下方法初始化 a.Contact.City = &quot;bj&quot; a.Contact.Phone = &quot;111&quot; fmt.Println(a) } 注意: struct 为值类型， 所以在定义的时候，加上 &amp; 符号，便于修改 struct 中内容， 如 a := &amp;person{ Name string Age int }{ Name: &quot;wang&quot;, Age: 22, } 匿名字段package main import ( &quot;fmt&quot; ) type person struct { string int } func main() { a := person{&quot;wang&quot;, 19} fmt.Println(a) } 相互赋值/比较package main import ( &quot;fmt&quot; ) type person struct { string int } func main() { a := person{&quot;wang&quot;, 19} b := person{&quot;wang&quot;, 19} c := a // 注意 必须 类型相同才能比较 fmt.Println(a == b) fmt.Println(c) } 匿名嵌入结构package main import ( &quot;fmt&quot; ) type human struct { sex int } type student struct { //匿名嵌入结构，默认把human当作key名 human Name string Age int } func main() { a := student{Name: &quot;wang&quot;, Age: 19, human: human{sex: 0}} fmt.Println(a) } 结构体嵌套字段取值package main import ( &quot;fmt&quot; ) type A struct { Name string } type B struct { A } func main() { b := B{A: A{Name: &quot;wang&quot;}} fmt.Println(b.Name, b.A.Name) }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go panic/recover 处理错误模式","slug":"history/tech/5a0bb422d102fd2345a05398","date":"2017-11-15T03:27:30.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0bb422d102fd2345a05398/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0bb422d102fd2345a05398/","excerpt":"","text":"panic 可以在任何地方引发，但是只有在 defer 调用的函数中有效// main.go package main import &quot;fmt&quot; func main() { A() B() C() } func A() { fmt.Println(&quot;func A&quot;) } func B() { //defer 需要在panic之前 defer func() { if err := recover(); err != nil { fmt.Println(&quot;Recover in B&quot;) } }() panic(&quot;Panic in B&quot;) } func C() { fmt.Println(&quot;func C&quot;) }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go defer","slug":"history/tech/5a0bb02fd102fd2345a05397","date":"2017-11-15T03:10:39.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0bb02fd102fd2345a05397/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0bb02fd102fd2345a05397/","excerpt":"","text":"调用示例一:// main.go package main import &quot;fmt&quot; func main() { fmt.Println(&quot;a&quot;) defer fmt.Println(&quot;b&quot;) defer fmt.Println(&quot;c&quot;) } 调用示例二:// main.go package main import &quot;fmt&quot; func main() { for i := 0; i &lt; 3; i++ { defer fmt.Println(i) } } 调用示例三:// main.go 打印三个3 package main import &quot;fmt&quot; func main() { for i := 0; i &lt; 3; i++ { defer func() { fmt.Println(i) }() } } 调用示例四(示例三闭包版):// main.go package main import &quot;fmt&quot; func main() { for i := 0; i &lt; 3; i++ { defer func(a int) { fmt.Println(a) }(i) } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go func 闭包","slug":"history/tech/5a0baf9bd102fd2345a05396","date":"2017-11-15T03:08:11.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0baf9bd102fd2345a05396/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0baf9bd102fd2345a05396/","excerpt":"","text":"闭包:// main.go package main import &quot;fmt&quot; func main() { f := closure(10) fmt.Println(f(1)) fmt.Println(f(2)) } func closure(x int) func(int) int { fmt.Println(&quot;%p\\n&quot;, &amp;x) return func(y int) int { fmt.Println(&quot;%p\\n&quot;, &amp;x) return x + y } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 不定长变参","slug":"history/tech/5a0c0c34d102fd2345a0539a","date":"2017-11-14T21:43:16.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0c0c34d102fd2345a0539a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0c0c34d102fd2345a0539a/","excerpt":"","text":"go 不定长变参","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker 官方 debian 源失败解决方案","slug":"history/tech/5a0bf0a1d102fd2345a05399","date":"2017-11-14T19:45:37.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0bf0a1d102fd2345a05399/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0bf0a1d102fd2345a05399/","excerpt":"","text":"更新apt-get源 使用163的源RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\ echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;/etc/apt/sources.list &amp;&amp; \\ echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\ echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\ echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go ^ 单目运算符","slug":"history/tech/5a0aeaa40e68a3670593cc7d","date":"2017-11-14T01:07:48.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0aeaa40e68a3670593cc7d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0aeaa40e68a3670593cc7d/","excerpt":"","text":"按位取反代码fmt.Println(^1) -2 取一个负数的绝对值，就是按位取反再加1举例， 将-2的每一位分别打印出来:var x int32 = -2 for i := 0; i &lt; 32; i++ { //先打印低位，右移一位，在打印倒数第二位，直到打印完毕 fmt.Println(x &amp; 1) x = x &gt;&gt; 1 } 进制表示package main import ( &quot;fmt&quot; ) func main() { var x int32 = 0 //构造 -2 的 2 进制表示 for i := 32; i &gt;= 1; i-- { x += 1 &lt;&lt; uint32(i) } fmt.Printf(&quot;二进制x: %b\\n&quot;, x) fmt.Printf(&quot;十进制x: %d\\n&quot;, x) fmt.Printf(&quot;uint32(x): %b\\n&quot;, uint32(x)) fmt.Printf(&quot;int32(x): %b\\n&quot;, int32(x)) var y int = -2 for i := 0; i &lt; 32; i++ { fmt.Print(y &amp; 1) y = y &gt;&gt; 1 } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go map 操作","slug":"history/tech/5a0acc0c0e68a3670593cc7c","date":"2017-11-13T22:57:16.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0acc0c0e68a3670593cc7c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0acc0c0e68a3670593cc7c/","excerpt":"","text":"创建一个空的map:var m map[int]string m = map[int]string{} fmt.Println(m) 使用 make 关键字:var m map[int]string m = make(map[int]string) fmt.Println(m) 简写:var m map[int]string = make(map[int]string) // m := make(map[int]string) fmt.Println(m) 存取:m := make(map[int]string) m[1] = &quot;ok&quot; m[2] = &quot;ok&quot; fmt.Println(m) delete(m, 2) fmt.Println(m) 复杂map:m := make(map[int]map[int]string) m[1] = make(map[int]string) m[1][1] = &quot;ok&quot; fmt.Println(m) 利用多返回值处理未初始化的情况:m := make(map[int]map[int]string) a, ok := m[1][1] if !ok { m[1] = make(map[int]string) } m[1][1] = &quot;GOOD&quot; a, ok = m[1][1] fmt.Println(m, a) 数组嵌套 map 初始化(错误方法):sm := make([]map[int]string, 5) for _, v := range sm { //这里v是map中值的一个拷贝，修改v不会影响原值 v = make(map[int]string, 1) v[1] = &quot;ok&quot; fmt.Println(v) } fmt.Println(sm) 数组嵌套 map 初始化:sm := make([]map[int]string, 5) for i := range sm { sm[i] = make(map[int]string, 1) sm[i][1] = &quot;ok&quot; fmt.Println(sm[i]) } fmt.Println(sm) 完成 map 中 key 的排序:m := map[int]string{1: &quot;a&quot;, 2: &quot;b&quot;, 3: &quot;c&quot;} s := make([]int, len(m)) i := 0 for k, _ := range m { s[i] = k i++ } sort.Ints(s) fmt.Println(s) 输出: [1 2 3] 完成 map 中 key/value 的交换:package main import ( &quot;fmt&quot; ) func main() { m1 := map[int]string{1: &quot;a&quot;, 2: &quot;b&quot;, 3: &quot;c&quot;, 4: &quot;d&quot;, 5: &quot;e&quot;} fmt.Println(m1) m2 := make(map[string]int) for k, v := range m1 { m2[v] = k } fmt.Println(m2) }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go array 操作","slug":"history/tech/5a0aac8c0e68a3670593cc7b","date":"2017-11-13T20:42:52.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0aac8c0e68a3670593cc7b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0aac8c0e68a3670593cc7b/","excerpt":"","text":"数组初始化a := [...]int{1, 2} var b [2]int b = a fmt.Println(b) 指针数组c := [...]int{99: 1} var p *[100]int = &amp;c c[0] = 100 fmt.Println(p) 数组的比较a := [2]int{1, 2} b := [2]int{1, 2} fmt.Println(a == b) 数组之间不可以做大于小于的比较， 但是可以做 == 和 != 的比较(必须长度，类型都相同才行)new 一个数组:a := [10]int{} a[1] = 2 p := new([10]int) p[1] = 2 fmt.Println(a) fmt.Println(p) 多维数组:a := [2][3]int{ {1, 1, 2: 2}, {2, 2, 2}} fmt.Println(a) 多维数组第一个括号内数字可以省略a := [...][3]int{ {1, 1, 1}, {2, 2, 2}} fmt.Println(a) 切片a := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0} fmt.Println(a) s := a[:5] fmt.Println(s) 使用 make 初始化 slice://make(类型，大小， 容量) s := make([]int, 3, 10) fmt.Println(s, len(s), cap(s)) 数组和切片的容量:a := [3]int{1, 2, 3} b := a[1:] c := b[1:] fmt.Println(a, len(a), cap(a)) fmt.Println(b, len(b), cap(b)) fmt.Println(c, len(c), cap(c)) append 导致重新分配空间，reslice的切片和原始切片不在同一地址，修改s1切片不会改变s2切片a := []int{1, 2, 3, 4, 5} s1 := a[2:5] s2 := a[1:3] fmt.Println(s1, s2) s2 = append(s2, 6, 7, 8, 9, 0) s1[0] = 9 fmt.Println(s1, s2) copy 函数使用s1 := []int{1, 2, 3, 4, 5, 6} s2 := []int{7, 8, 9} copy(s2, s1) fmt.Println(s2) 输出: [1 2 3]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 查看 文档","slug":"history/tech/5a0aa92a0e68a3670593cc7a","date":"2017-11-13T20:28:26.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0aa92a0e68a3670593cc7a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0aa92a0e68a3670593cc7a/","excerpt":"","text":"命令:go doc fmt go doc fmt Println 或者启动内置文档网站:godoc -http :8080","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 带标签的continue ， break， goto","slug":"history/tech/5a0aa89f0e68a3670593cc79","date":"2017-11-13T20:26:07.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0aa89f0e68a3670593cc79/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0aa89f0e68a3670593cc79/","excerpt":"","text":"break 跳出两层循环, 接着执行循环后面的语句, 可以打出 ok:label1: for { for i := 1; i &lt; 10; i++ { if i &gt; 3 { break label1 } } } fmt.Println(&quot;ok&quot;) goto 跳出两层循环, 接着执行label1 后面的语句, 成为死循环， 无法打出 ok: label1: for { for i := 1; i &lt; 10; i++ { if i &gt; 3 { goto label1 } } } fmt.Println(&quot;ok&quot;) continue 可以表示继续执行，仍为死循环，无法打出 ok: label1: for { for i := 1; i &lt; 10; i++ { if i &gt; 3 { continue label1 } } } fmt.Println(&quot;ok&quot;)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Centos7 安装完毕后无法联网","slug":"history/tech/5a08fb000e68a3670593cc74","date":"2017-11-13T01:53:04.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a08fb000e68a3670593cc74/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a08fb000e68a3670593cc74/","excerpt":"","text":"解决方法:# cd /etc/sysconfig/network-scripts/ # vi ifcfg-ens33 ONBOOT=yes","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"wireshark 资料","slug":"history/tech/5a08f7c40e68a3670593cc73","date":"2017-11-13T01:39:16.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a08f7c40e68a3670593cc73/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a08f7c40e68a3670593cc73/","excerpt":"","text":"图书","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"gcc 安装","slug":"history/tech/5a095f9a0e68a3670593cc78","date":"2017-11-12T21:02:18.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a095f9a0e68a3670593cc78/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a095f9a0e68a3670593cc78/","excerpt":"","text":"https://gcc.gnu.org/install/binaries.htmltdm-gcchttp://blog.csdn.net/mecho/article/details/24305369","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"google linux 源","slug":"history/tech/5a0939200e68a3670593cc77","date":"2017-11-12T18:18:08.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0939200e68a3670593cc77/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0939200e68a3670593cc77/","excerpt":"","text":"https://packages.cloud.google.com/curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"centos 防火墙关闭","slug":"history/tech/5a0938ff0e68a3670593cc76","date":"2017-11-12T18:17:35.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0938ff0e68a3670593cc76/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0938ff0e68a3670593cc76/","excerpt":"","text":"centos 防火墙关闭systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动 firewall-cmd --state","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kubernets 镜像导入导出","slug":"history/tech/5a0938bd0e68a3670593cc75","date":"2017-11-12T18:16:29.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0938bd0e68a3670593cc75/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0938bd0e68a3670593cc75/","excerpt":"","text":"A 机器:ARCH=amd64 docker pull gcr.io/google_containers/hyperkube-${ARCH}:v1.8.3 docker pull gcr.io/google_containers/kube-apiserver-${ARCH}:v1.8.3 docker pull gcr.io/google_containers/kube-controller-manager-${ARCH}:v1.8.3 docker pull gcr.io/google_containers/kube-scheduler-${ARCH}:v1.8.3 docker pull gcr.io/google_containers/kube-proxy-${ARCH}:v1.8.3 docker pull gcr.io/google_containers/k8s-dns-sidecar-${ARCH}:1.14.4 docker pull gcr.io/google_containers/k8s-dns-kube-dns-${ARCH}:1.14.4 docker pull gcr.io/google_containers/k8s-dns-dnsmasq-nanny-${ARCH}:1.14.4 docker pull gcr.io/google_containers/etcd-${ARCH}:3.0.17 docker pull gcr.io/google_containers/kube-discovery-${ARCH}:1.0 docker pull gcr.io/google_containers/etcd-${ARCH}:3.0.4 docker pull gcr.io/google_containers/pause-${ARCH}:3.0 docker save `docker images -aq` &gt; images.tar tar -czvf images.tar.gz ./images.tar rm -rf ./images.tar B 机器:tar -xzvf images.tar.gz rm -rf images.tar.gz docker load &lt; images.tar ARCH=amd64 docker tag 75f8fab20be8 gcr.io/google_containers/hyperkube-${ARCH}:v1.8.3 docker tag cb809b44649a gcr.io/google_containers/kube-apiserver-${ARCH}:v1.8.3 docker tag daf30b917b69 gcr.io/google_containers/kube-controller-manager-${ARCH}:v1.8.3 docker tag 8c83f779e0f1 gcr.io/google_containers/kube-scheduler-${ARCH}:v1.8.3 docker tag b1c0d274f2fb gcr.io/google_containers/kube-proxy-${ARCH}:v1.8.3 docker tag 38bac66034a6 gcr.io/google_containers/k8s-dns-sidecar-${ARCH}:1.14.4 docker tag a8e00546bcf3 gcr.io/google_containers/k8s-dns-kube-dns-${ARCH}:1.14.4 docker tag f7f45b9cb733 gcr.io/google_containers/k8s-dns-dnsmasq-nanny-${ARCH}:1.14.4 docker tag 243830dae7dd gcr.io/google_containers/etcd-${ARCH}:3.0.17 docker tag c5e0c9a457fc gcr.io/google_containers/kube-discovery-${ARCH}:1.0 docker tag 3fe6c6f972cd gcr.io/google_containers/etcd-${ARCH}:3.0.4 docker tag 99e59f495ffa gcr.io/google_containers/pause-${ARCH}:3.0","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kubernetes 资料","slug":"history/tech/5a07d08b0e68a3670593cc71","date":"2017-11-12T04:39:39.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a07d08b0e68a3670593cc71/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a07d08b0e68a3670593cc71/","excerpt":"","text":"https://www.gitbook.com/book/rootsongjc/kubernetes-handbook/details","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kubernetes  安装","slug":"history/tech/5a07c7890e68a3670593cc70","date":"2017-11-12T04:01:13.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a07c7890e68a3670593cc70/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a07c7890e68a3670593cc70/","excerpt":"","text":"下载二进制包:文档地址: https://kubernetes.io/docs/getting-started-guides/binary_release/ github 二进制包: https://github.com/kubernetes/kubernetes/releases 解压:tar xzvf kubernetes.tar.gz cd kubernetes ./cluster/get-kube-binaries.sh 安装镜像:docker pull gcr.io/google_containers/pause-amd64:3.0 docker pull gcr.io/google_containers/hyperkube-amd64:v1.8.3 docker pull gcr.io/google_containers/kube-apiserver-amd64:v1.8.3 docker pull gcr.io/google_containers/kube-controller-manager-amd64:v1.8.3 docker pull gcr.io/google_containers/kube-scheduler-amd64:v1.8.3 docker pull gcr.io/google_containers/kube-discovery-amd64:1.0 docker pull gcr.io/google_containers/etcd-amd64:3.0.4 启动 kubelet:/usr/local/kubernetes/server/bin/kubelet --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0 初始化:# kubeadm init --skip-preflight-checks --pod-network-cidr=&quot;10.24.0.0/16&quot; 报错:[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters. unable to get URL &quot;https://dl.k8s.io/release/stable-1.8.txt&quot;: Get https://storage.googleapis.com/kubernetes-release/release/stable-1.8.txt: read tcp 10.0.177.242:37920-&gt;172.217.27.144:443: read: connection reset by peer 解决:kubeadm init --skip-preflight-checks --pod-network-cidr=&quot;10.24.0.0/16&quot; --kubernetes-version=v1.8.3 参考资料:http://oscogozpr.bkt.clouddn.com/赵梓旗－如何优雅的部署kubernetes集群.pdf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"gitlab 用docker 启动后， 无法通过 ssh 登陆容器","slug":"history/tech/5a07a00a0e68a3670593cc6f","date":"2017-11-12T01:12:42.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a07a00a0e68a3670593cc6f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a07a00a0e68a3670593cc6f/","excerpt":"","text":"进入容器查看:docker exec -it gitlab /bin/bash ps -ef | grep sshd 修改 /assets/sshd_config 文件:","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"privoxy +  ss 配置代理","slug":"history/tech/5a07f67b0e68a3670593cc72","date":"2017-11-11T19:21:31.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a07f67b0e68a3670593cc72/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a07f67b0e68a3670593cc72/","excerpt":"","text":"上官网下载:https://www.privoxy.org 编译安装:tar -zxvf privoxy.tar.gz cd privoxy ./configure —prefix=/usr/local/privoxy/ adduser privoxy make &amp;&amp; make install 修改配置:# vim /usr/local/privoxy/etc/config 增加一行 forward-socks5 / 127.0.0.1:1080 . # 后面有个点 否则会报错 Error: Wrong number of parameters for forward-socks4a directive in configuration file. 启动 /usr/local/privoxy/sbin/privoxy /usr/local/privoxy/etc/config","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker 离线安装","slug":"history/tech/5a05aeb20e68a3670593cc6e","date":"2017-11-10T01:50:42.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a05aeb20e68a3670593cc6e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a05aeb20e68a3670593cc6e/","excerpt":"","text":"下载地址:https://download.docker.com/linux/static/stable/x86_64/ 解压后:cp docker/* /usr/bin/ 运行服务:dockerd &amp; 测试:sudo docker run hello-world 添加 docker 组:sudo groupadd docker 将用户添加到docker组中：sudo usermod -aG docker $USER","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu service的添加和删除","slug":"history/tech/5a05ae820e68a3670593cc6d","date":"2017-11-10T01:49:54.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a05ae820e68a3670593cc6d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a05ae820e68a3670593cc6d/","excerpt":"","text":"添加一个服务:update-rc.d ServiceName defaults 删除一个服务:update-rc.d ServiceName remove","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"k8s 资料","slug":"history/tech/5a057bc50e68a3670593cc6c","date":"2017-11-09T22:13:25.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a057bc50e68a3670593cc6c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a057bc50e68a3670593cc6c/","excerpt":"","text":"中文文档:https://www.kubernetes.org.cn","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux windows 命令行计算文件 MD5","slug":"history/tech/5a0555b10e68a3670593cc6b","date":"2017-11-09T19:30:57.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0555b10e68a3670593cc6b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0555b10e68a3670593cc6b/","excerpt":"","text":"linux:md5sum kubernetes.tar.gz windows:certutil -hashfile kubernetes.tar.gz MD5 certutil -hashfile kubernetes.tar.gz SHA1 certutil -hashfile kubernetes.tar.gz SHA256","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"gitlab 备份恢复","slug":"history/tech/5a05482f0e68a3670593cc6a","date":"2017-11-09T18:33:19.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a05482f0e68a3670593cc6a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a05482f0e68a3670593cc6a/","excerpt":"","text":"创建备份:gitlab-rake gitlab:backup:create 恢复：# 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq 从1393513186编号备份中恢复gitlab-rake gitlab:backup:restore BACKUP=1393513666 启动Gitlabsudo gitlab-ctl start","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"docker run volume  和 publish 参数","slug":"history/tech/5a045b8d0ef83fdf30bef581","date":"2017-11-09T01:43:41.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a045b8d0ef83fdf30bef581/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a045b8d0ef83fdf30bef581/","excerpt":"","text":"命令如下sudo docker run \\ --publish 主机端口:容器端口 \\ --volume 主机目录:容器目录 \\ gitlab/gitlab-ce:latest","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"There was an error while trying to load the gem 'uglifier'.","slug":"history/tech/5a0418980ef83fdf30bef580","date":"2017-11-08T20:58:00.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0418980ef83fdf30bef580/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0418980ef83fdf30bef580/","excerpt":"","text":"原因:缺少 nodejs解决:ln -s /usr/local/node/bin/node /usr/bin/node","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"打包git 检出的包含隐藏文件的目录","slug":"history/tech/5a04184f0ef83fdf30bef57f","date":"2017-11-08T20:56:47.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a04184f0ef83fdf30bef57f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a04184f0ef83fdf30bef57f/","excerpt":"","text":"命令如下:tar -czvf gitlab.tar.gz ./gitlab/* ./gitlab/.[!.]*","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ngrok","slug":"history/tech/5a031d452072bfd4054686a6","date":"2017-11-08T03:05:41.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a031d452072bfd4054686a6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a031d452072bfd4054686a6/","excerpt":"","text":"生成证书NGROK_DOMAIN=&quot;qianrushi.org&quot; openssl genrsa -out base.key 2048 openssl req -new -x509 -nodes -key base.key -days 10000 -subj &quot;/CN=$NGROK_DOMAIN&quot; -out base.pem openssl genrsa -out server.key 2048 openssl req -new -key server.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out server.csr openssl x509 -req -in server.csr -CA base.pem -CAkey base.key -CAcreateserial -days 10000 -out server.crt cp base.pem assets/client/tls/ngrokroot.crt cp server.crt /root/ngrok/assets/client/tls/snakeoilca.crt sudo GOOS=linux GOARCH=arm make release-server release-client sudo GOOS=linux GOARCH=amd64 make release-server release-client 服务端 supervisor脚本[program:ngrok] command=/usr/local/bin/ngrokd -tlsKey=&quot;/usr/local/ngrok/keys/server.key&quot; -log-level=INFO -tlsCrt=&quot;/usr/local/ngrok/keys/server.crt&quot; -domain=&quot;qianrushi.org&quot; -httpAddr=&quot;:30001&quot; -httpsAddr=&quot;&quot; autostart=true autorestart=true user=root 客户端 ngrok.ymltCrtPaths: &quot;/usr/local/ngrok/certs/ngrokroot.crt&quot; server_addr: &quot;qianrushi.org:4443&quot; trust_host_root_certs: false tunnels: ssh: remote_port: 60000 proto: tcp: 22 web: subdomain: &quot;search&quot; proto: http: localhost:80 客户端 supervisor 脚本[program:ngrok] command=/usr/local/bin/ngrok -config=/usr/local/ngrok/conf.d/ngrok.yml start ssh autostart=true autorestart=true user=root","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"范数","slug":"history/math/5a02d1be2072bfd4054686a5","date":"2017-11-07T21:43:26.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5a02d1be2072bfd4054686a5/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5a02d1be2072bfd4054686a5/","excerpt":"","text":"什么是范数？我们知道距离的定义是一个宽泛的概念，只要满足非负、自反、三角不等式就可以称之为距离。范数是一种强化了的距离概念，它在定义上比距离多了一条数乘的运算法则。有时候为了便于理解，我们可以把范数当作距离来理解。在数学上，范数包括向量范数和矩阵范数，向量范数表征向量空间中向量的大小，矩阵范数表征矩阵引起变化的大小。一种非严密的解释就是，对应向量范数，向量空间中的向量都是有大小的，这个大小如何度量，就是用范数来度量的，不同的范数都可以来度量这个大小；对于矩阵范数，学过线性代数，我们知道，通过运算AX=B，可以将向量X变化为B，矩阵范数就是来度量这个变化大小的。范数理论的一个小推论告诉我们：ℓ1≥ℓ2≥ℓ∞","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"bfgminer","slug":"history/tech/5a0107ca2072bfd4054686a4","date":"2017-11-07T01:09:30.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a0107ca2072bfd4054686a4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a0107ca2072bfd4054686a4/","excerpt":"","text":"ubuntu 编译依赖配置:sudo apt-get install autoconf libtool libncurses-dev yasm curl libcurl4-openssl-dev libjansson-dev pkg-config libudev-dev uthash-dev libusb-dev libevent-dev","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"wordpress 报错 Call to undefined function gzinflate()","slug":"history/tech/5a003b52f2232a8203367ce7","date":"2017-11-05T22:37:06.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a003b52f2232a8203367ce7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a003b52f2232a8203367ce7/","excerpt":"","text":"报错信息:Call to undefined function gzinflate()","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 17.10 U盘安装","slug":"history/tech/5a00356ff2232a8203367ce6","date":"2017-11-05T22:11:59.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/5a00356ff2232a8203367ce6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5a00356ff2232a8203367ce6/","excerpt":"","text":"官方说明页面:https://help.ubuntu.com/community/Installation/FromUSBStickQuick安装器:https://rufus.akeo.ie/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"elasticsearch 5.6.3 启动报错","slug":"history/tech/59fe7e4120ed3d0209ab4de5","date":"2017-11-05T02:58:09.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fe7e4120ed3d0209ab4de5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fe7e4120ed3d0209ab4de5/","excerpt":"","text":"报错信息:ERROR: [1] bootstrap checks failed 修改配置文件，增加:# config/elasticsearch.yml transport.host: localhost","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"机器学习数据集分类","slug":"history/tech/59fd7faf20ed3d0209ab4de4","date":"2017-11-03T20:51:59.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fd7faf20ed3d0209ab4de4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fd7faf20ed3d0209ab4de4/","excerpt":"","text":"将数据分类:trainning set hold out validation set(development set) test set(为了无偏评估算法的运行情况) 小数据时代:trainning set: 70% test set: 30% 如果没有明确设置验证集, 也可以按照:trainning set: 60% dev set: 20% test set: 20% 现在验证集和测试集的比例有变小的趋势。比如说有 1,000,000 条数据， 拿出 10,000 条做为验证集， 10,000 作为测试集即可。如果不需要无偏评估， 可以不要 test set， 这时候 dev set 被称为 test set， 这时候其实是把 dev set 的数据过拟合到了 tranning set 中。吴恩达把这种叫做 “训练验证集”。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"supervisor 内存限制","slug":"history/tech/59fc672a20ed3d0209ab4de3","date":"2017-11-03T00:55:06.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fc672a20ed3d0209ab4de3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fc672a20ed3d0209ab4de3/","excerpt":"","text":"https://superlance.readthedocs.io/en/latest/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux 创建 swap 分区","slug":"history/tech/59fc2f658cb3a6b90388bedb","date":"2017-11-02T20:57:09.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fc2f658cb3a6b90388bedb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fc2f658cb3a6b90388bedb/","excerpt":"","text":"创建并激活文件:sudo dd if=/dev/zero of=/data/swapfile bs=1024 count=4066544 sudo mkswap swapfile //mkswap是在那个空白文件的基础上,建立swap的文件系统 sudo swapon swapfile //激活swap文件 修改fstab:#etc/fstab /data/swapfile swap swap defaults 0 0","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"MISCONF Redis is configured to save RDB snapshots","slug":"history/tech/59fc2ed08cb3a6b90388beda","date":"2017-11-02T20:54:40.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fc2ed08cb3a6b90388beda/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fc2ed08cb3a6b90388beda/","excerpt":"","text":"解决:config set stop-writes-on-bgsave-error no 参考:http://blog.csdn.net/song19890528/article/details/38536871","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"navicat 连接 mysql 报错","slug":"history/tech/59fc2da48cb3a6b90388bed9","date":"2017-11-02T20:49:40.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fc2da48cb3a6b90388bed9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fc2da48cb3a6b90388bed9/","excerpt":"","text":"报错:SSH Tunnel: Server does not support diffie-hellman-group1-sha1 for keyexchange 原因:SharpSSH或JSCH使用diffie-hellman-group1-sha1和diffie-hellman-group-exchange-sha1密钥交换算法，而OpenSSH在6.7p1版本之后默认不再采用以上算法，需要手工添加。 解决:# /etc/ssh/sshd_config Ciphers aes128-cbc,aes192-cbc,aes256-cbc,aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,arcfour128,arcfour256,arcfour,blowfish-cbc,cast128-cbc MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-sha1-96,hmac-md5-96 KexAlgorithms diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group1-sha1,curve25519-sha256@libssh.org 重启sshd服务:service sshd restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"查看php已安装扩展命令","slug":"history/tech/59fc2ca88cb3a6b90388bed8","date":"2017-11-02T20:45:28.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fc2ca88cb3a6b90388bed8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fc2ca88cb3a6b90388bed8/","excerpt":"","text":"命令:php -m","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"php 编译安装","slug":"history/tech/59fc2c8c8cb3a6b90388bed7","date":"2017-11-02T20:45:00.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fc2c8c8cb3a6b90388bed7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fc2c8c8cb3a6b90388bed7/","excerpt":"","text":"php 报错:checking for xml2-config path... configure: error: xml2-config not found. Please check your libxml2 installation. 解决:apt install libxml2 apt install libxml2-dev 编译安装 zlib(wordpress 报错 Call to undefined function gzinflate(), 特编译此项)：#https://zlib.net/ wget https://zlib.net/zlib-1.2.11.tar.gz ./configure --prefix=/mnt/apps/zlib make make install 编译:./configure --prefix=/mnt/apps/php7 --enable-fpm --with-pdo-mysql --with-mysqli --with-zlib-dir=/mnt/apps/zlib make make install","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"wordpress 修改表前缀","slug":"history/tech/59fc2c168cb3a6b90388bed6","date":"2017-11-02T20:43:02.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fc2c168cb3a6b90388bed6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fc2c168cb3a6b90388bed6/","excerpt":"","text":"修改配置文件# wp-config.php $table_prefix = 'work_'; 挨个修改表名:RENAME table `w_commentmeta` TO `work_commentmeta`; 修改表内容update work_options set option_name = replace(option_name,'work','work_'); update work_usermeta set meta_key = replace(meta_key,'work','work_');","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"区块链资料","slug":"history/tech/59fa821d29daf38b68d15485","date":"2017-11-02T02:25:33.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fa821d29daf38b68d15485/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fa821d29daf38b68d15485/","excerpt":"","text":"区块链技术指南(区块链原理、设计与应用)Node.js开发加密货币Sawtooth LakeHyperledger Fabric","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"配置 jupyter notebook","slug":"history/tech/59fb248229daf38b68d15486","date":"2017-11-02T01:58:26.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59fb248229daf38b68d15486/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59fb248229daf38b68d15486/","excerpt":"","text":"生成配置jupyter notebook --generate-config 设置密码:jupyter notebook password 启动:nohup jupyter notebook --ip 0.0.0.0 --port 80 --allow-root --no-browser /root/workspace &amp;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"jquery 拖拽插件","slug":"history/tech/59f931420e8491115f5314e2","date":"2017-11-01T02:28:18.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f931420e8491115f5314e2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f931420e8491115f5314e2/","excerpt":"","text":"http://www.jq22.com/yanshi10850http://www.jq22.com/yanshi2615","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"sqllite 客户端","slug":"history/tech/59f9929c0e8491115f5314e5","date":"2017-10-31T21:23:40.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f9929c0e8491115f5314e5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f9929c0e8491115f5314e5/","excerpt":"","text":"http://sqlitestudio.one.pl/http://blog.csdn.net/shellching/article/details/7979969","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Django admin 创建工程","slug":"history/tech/59f9852c0e8491115f5314e4","date":"2017-10-31T20:26:20.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f9852c0e8491115f5314e4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f9852c0e8491115f5314e4/","excerpt":"","text":"生成工程安装:pip install django 创建工程:django-admin.py startproject pykins 创建应用django-admin.py startapp app 注册 app 到工程：vim pykins/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'app' ] 生成数据库表单python manage.py migrate 创建超级用户python manage.py createsuperuser 运行工程:python manage.py runserver migrate 和 makemigrations 的区别python manger.py makemigrations 相当于 在该app下建立 migrations目录，并记录下你所有的关于 modes.py 的改动，比如 0001_initial.py， 但是这个改动还没有作用到数据库文件 python manage.py migrate 直接作用到数据库 遇到问题 无法更新数据库python manage.py makemigrations No changes detected 解决:python manage.py makemigrations app_name ‘WSGIRequest’ object has no attribute ‘user’这是Django版本的问题，1.10之前，中间件的key为MIDDLEWARE_CLASSES, 1.10之后，为MIDDLEWARE。解决:MIDDLEWARE = [ ..... ] 改为:MIDDLEWARE_CLASSES = [ ..... ] 增加 bootstrap:bootstrap:pip install django-admin-bootstrapped INSTALLED_APPS = [ 'django_admin_bootstrapped', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'app' ] bootstrap3:pip install django-bootstrap3 INSTALLED_APPS = [ 'django_admin_bootstrapped.bootstrap3', 'django_admin_bootstrapped', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'app' ] 报错:ImportError: No module named bootstrap3 解决:INSTALLED_APPS = [ 'bootstrap3', 'django_admin_bootstrapped', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'app' ] 汉化:增加 django.middleware.locale.LocaleMiddlewareMIDDLEWARE_CLASSES = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django.middleware.locale.LocaleMiddleware', ] sqllite 客户端:直接打开 django 生成的 db.sqlite3 文件即可http://blog.qianrushi.org/topic/59f9929c0e8491115f5314e5参考:http://www.huangwenchao.com.cn/2014/02/django-tip-2.html 使用django-celery完成异步任务pip install django-celery 修改 settings.py:import djcelery djcelery.setup_loader() BROKER_URL = 'django://' # 告诉Celery使用Django项目作为broker # Application definition INSTALLED_APPS = [ 'bootstrap3', 'django_admin_bootstrapped', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'app', 'djcelery', 'kombu.transport.django', ] 生成数据表:python manage.py migrate 一个task就是一个Pyhton function. 但Celery需要知道这一function是task,当settings.py中的 djcelery.setup_loader() 运行时,Celery便会查看所有INSTALLED_APPS中app目录中的tasks.py文件,找到标记为task的function, 并将它们注册为celery task。将function标注为task并不会妨碍他们的正常执行. 你还是可以像平时那样调用它: z = add(1, 2)。因此我们可以使用celery自带的装饰器decorator: @task. 在django app目录中创建taske.py:from celery import task @task() def add(x, y): return x + y Celery会将task加入到queue中, 并马上返回. 而在一旁待命的worker看到该task后,便会按照设定执行它, 并将他从queue中移除. 而worker则会执行以下代码:import app.tasks.add app.tasks.add(2, 2) 启动task打开新的terminal, 并切换到django项目目录:$ python manage.py shell &gt;&gt;&gt; from app.tasks import add &gt;&gt;&gt; add.delay(2, 2) 此时, 你可以在worker窗口中看到worker执行该task 在 web 请求中执行# views.py from app.tasks import do_something_with_form_data def view(request): form = SomeForm(request.POST) if form.is_valid(): data = form.cleaned_data # Schedule a task to process the data later do_something_with_form_data.delay(data) return render_to_response(...) # tasks.py @task def do_something_with_form_data(data): call_slow_web_service(data['user'], data['text'], ...) Eager 模式如果在settings.py设置:CELERY_ALWAYS_EAGER = True 那么Celery便以eager模式运行, 则task便不需要加delay运行:# 若启用eager模式, 则以下两行代码相同 add.delay(2, 2) add(2, 2) 定时任务还有一种Celery的常用模式便是执行定期任务. 执行定期任务时,Celery会通过celerybeat进程来完成. Celerybeat会保持运行,一旦到了某一定期任务需要执行时,Celerybeat便将其加入到queue中.不像worker进程, Celerybeat只有需要一个即可.启动Celerybeat:python manage.py celery beat 使Celery运行定期任务的方式有很多种, 我们先看第一种, 将定期任务储存在django数据库中.即使是在django和celery都运行的状态, 这一方式也可以让我们方便的修改定期任务.我们只需要设置settings.py中的一项便能开启这一方式:# settings.py CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler' Name: 这一定期任务的注册名 Task (registered): 可以选择所有已经注册的task之一, 例如前面的add function Task (custom): task的全名, 例如 app.tasks.add, 但最好还是用以上项 Enabled: 是否开启这一定期任务 Interval: 定期任务的间隔时间, 例如每隔5分钟 Crontab: 如果希望task在某一特定时间运行, 则使用Unix中的Crontab代替interval Arguments: 用于传参数到task中 Execution Options: 更高级的设置, 在此不详细说明, 请查看celery官方文档 worker 参数查看queue因为我们使用了django作为broker, queue储存在django的数据库中. 这就意味着我们可以通过django admin查看该queue:# admin.py from django.contrib import admin from kombu.transport.django import models as kombu_models admin.site.register(kombu_models.Message) 安装并启动flower(默认会启动一个webserver,端口为5555):pip install flower python manage.py celery flower 使用 Redispip install redis 设置 Redis 数据库的位置:BROKER_URL = ‘redis://localhost:6379/0’URL 的格式为:redis://password@hostname:port/db_number 在 Redis 中存储任务的状态和返回值:CELERY_RESULT_BACKEND = 'redis://localhost:6379/0' 使用 celery beat,注释 djcelery.schedulers.DatabaseScheduler , 因为默认为 celery.beat:PersistentScheduler.# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler' 使用 uwsgi 样式丢失 ----未解决STATIC_ROOT = BASE_DIR + '/static/' STATIC_URL = '/static/' STATICFILES_DIRS = [ os.path.join(BASE_DIR, &quot;static&quot;), ] 执行python manage.py collectstatic #收集Django项目中所有涉及到的静态资源，放到 STATIC_ROOT 中 启动uwsgi --http :9911 --chdir /root/pykins^C--wsgi-file /root/pykins/pykins/wsgi.py","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"kafka 权威指南翻译","slug":"history/tech/59f97ad90e8491115f5314e3","date":"2017-10-31T19:42:17.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f97ad90e8491115f5314e3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f97ad90e8491115f5314e3/","excerpt":"","text":"kafka 权威指南翻译作者博客作者 github","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"autojump 一键直达目录","slug":"history/tech/59f7cb199c97788655e00f20","date":"2017-10-31T01:00:09.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f7cb199c97788655e00f20/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f7cb199c97788655e00f20/","excerpt":"","text":"autojump 一键直达目录：sudo apt-get install autojump","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mysql 无法删除数据库 ERROR 13","slug":"history/tech/59f68e2366a84c463d4416da","date":"2017-10-30T02:27:47.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f68e2366a84c463d4416da/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f68e2366a84c463d4416da/","excerpt":"","text":"解决方法：sudo chown -R mysql:mysql /var/lib/mysql","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"常用图床","slug":"history/tech/59f6f5d7490e8b51096edd7b","date":"2017-10-29T21:50:15.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f6f5d7490e8b51096edd7b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f6f5d7490e8b51096edd7b/","excerpt":"","text":"qchan","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"常用几种wiki","slug":"history/tech/59f6f591490e8b51096edd7a","date":"2017-10-29T21:49:05.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f6f591490e8b51096edd7a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f6f591490e8b51096edd7a/","excerpt":"","text":"dokuwiki","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 执行命令行","slug":"history/tech/59f6c29766a84c463d4416dc","date":"2017-10-29T18:11:35.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f6c29766a84c463d4416dc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f6c29766a84c463d4416dc/","excerpt":"","text":"go 执行命令行:cmd=exec.Command(&quot;/bin/sh&quot;, &quot;-c&quot;,binPath)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows下常用 shell 工具包","slug":"history/tech/59f6c1ba66a84c463d4416db","date":"2017-10-29T18:07:54.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f6c1ba66a84c463d4416db/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f6c1ba66a84c463d4416db/","excerpt":"","text":"windows下集成linux常用工具包","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"巴西小伙","slug":"history/music/59f158d566a84c463d4416d3","date":"2017-10-26T03:39:01.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/59f158d566a84c463d4416d3/","link":"","permalink":"https://wangxiuwen.github.io/history/music/59f158d566a84c463d4416d3/","excerpt":"","text":"https://www.guitarrarockonline.com.br/tecnica/","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"}],"author":"wangxiuwen"},{"title":"Spring boot jpa ManyToOne 多对一查询错问排查。","slug":"history/tech/59f1afeb66a84c463d4416d8","date":"2017-10-25T21:50:35.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f1afeb66a84c463d4416d8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f1afeb66a84c463d4416d8/","excerpt":"","text":"关联查询属于只读行为，默认情况下@JoinColumn 中 insertable 和 updatable 是true 支持新增或更新列表。只读查询请设置为false，否则启动为报错Caused by: org.hibernate.MappingException: Repeated column in mapping for entity: cn.**.RcustomerModelDimensionAttribute column: attribute_code (should be mapped with insert=&quot;false&quot; update=&quot;false&quot;)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"SpringbootJpa","slug":"SpringbootJpa","permalink":"https://wangxiuwen.github.io/tags/SpringbootJpa/"}],"author":"baipeng"},{"title":"教学机器思考，理性和沟通。","slug":"history/tech/59f17a6366a84c463d4416d7","date":"2017-10-25T18:02:11.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f17a6366a84c463d4416d7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f17a6366a84c463d4416d7/","excerpt":"","text":"http://www.maluuba.com/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"微软","slug":"微软","permalink":"https://wangxiuwen.github.io/tags/%E5%BE%AE%E8%BD%AF/"},{"name":"深度学习","slug":"深度学习","permalink":"https://wangxiuwen.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"author":"baipeng"},{"title":"教机器学习阅读","slug":"history/tech/59f1799b66a84c463d4416d6","date":"2017-10-25T17:58:51.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59f1799b66a84c463d4416d6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59f1799b66a84c463d4416d6/","excerpt":"","text":"机器学会阅读将是人工智能在处理和理解人类语言进程中一个里程碑式的事件，是一个真正AI必须达到的标准。最近一家叫做Maluuba的科技公司，号称开发了目前最领先的机器阅读理解系统EpiReader[10]，成为了业界的领跑者，也被媒体盛赞。本文是一篇机器阅读理解的综述文章，系统地总结和对比一下最近阅读过的相关paper。问题描述首先定义下机器阅读理解问题的数学模型。问题可以表述为一个三元组(d,q,a)，这里d是指原文document，q是指问题query或者question（不同的paper可能称呼不同，但指的是同一回事），a是answer，即问题的答案。这个答案是来自一个固定大小的词汇表A中的一个词。我们要解决的问题就变成了：给定一个document-query对(d,q)，从A中找到最合适的答案a。经常听到这么一句话，没有分类解决不了的问题。虽然有一点夸张，但这个问题是一个典型的多分类问题，预测候选列表中每个word或者entity的条件概率，最大的那个就是正确答案。其实很多问题也都是这样，尤其是在生成问题上，给定context，来predict每一个word的概率。这里不同的paper在词汇表A中有些不同，有的paper将A定义为document和query中的所有词，而有的将A定义为所有的entity，而有的将会附带一个包括正确答案在内的10个候选答案，并且每个答案的词性都一致。语料语料对于NLP的研究有着十分重要的基础作用，尤其是大规模的语料为研究相关任务带来了革命性的变化。前些年的语料都非常小，比如MCTest。从2015年开始，出现了两大主流的大型数据集。1、CNN/Daily Mail[9]数据集构建基本的思路是受启发于自动文摘任务，从两个大型的新闻网站CNN和Daily Mail中获取数据源，用abstractive的方法生成每篇新闻的summary，用新闻原文作为document，将summary中去掉一个entity作为query，被去掉的entity作为answer，从而得到阅读理解的数据三元组(document,query,answer)。这里存在一个问题，就是有的query并不需要联系到document，通过query中的上下文就可以predict出answer是什么，也就失去了阅读理解的意义。因此，本文提出了用一些标识替换entity和重新排列的方法将数据打乱，防止上面现象的出现。处理之后的效果见下图：2、Children’s Book Test(CBT)[3]CBT的数据均来自Project Gutenberg，使用了其中的与孩子们相关的故事，这是为了保证故事叙述结构的清晰，从而使得上下文的作用更加突出。每篇文章只选用21句话，前20句作为document，将第21句中去掉一个词之后作为query，被去掉的词作为answer，并且给定10个候选答案，每个候选答案是从原文中随机选取的，并且这10个答案的词性是相同的，要是名词都是名词，要是命名实体都是实体，要是动词都是动词。例子看下图：左图为电子书的原文，右图为构建成数据集之后的几个元素，document、query、answer和candidate。数据集根据词性一共分为四类，第一类是Named Entity，第二类是Nouns，第三类是Verbs，第四类是Preposition。其实阅读理解问题的难度在于前两种词性，后面的两种用语言模型通过query的上下文就可以预测出来，不需要借助于document的信息。这个数据集并没有像CNN那样做替换和重排的处理，反而是鼓励大家用更少的信息来做阅读理解。说完最流行的两个数据集，接下来介绍一下昨天刚刚在arxiv上submit的一个数据集。3、Stanford Question Answering Dataset(SQuAD)[1]该数据集的构建分为三个步骤：在Wikipedia中选取质量排名在10000以内的article，（这里用了 Project Nayuki’s Wikipedia’s internal PageRanks来做rank），从每篇文章中提取出paragraph，经过一系列处理之后得到了23215个paragraph，涉及了很宽泛的话题。然后雇佣了crowdworkers给每个paragraph提问和回答，而且鼓励workers用自己的话来提问。（这一点和CNN中用abstractive的思路很像，只不过是用了人工来做。）第三步是让crowdworkers来用原文中的text（word或者是span）来回答这个问题，如果无法用原文回答的话，直接提交问题。这个数据集的答案类型非常丰富，看下表：4、LAnguage Modeling Broadened to Account for Discourse Aspects(LAMBADA)[11]该数据集的paper于2016年6月20日于arxiv上，特补充在此。这个数据集的数据源来自Book Corpus，一共包括10022个passage，平均每个passage包括4.6句话+1句target，每个passage大约75个单词。在选择数据的过程用了很多的人力来做，按照以下的过程：第一个人阅读全文之后来猜target word，如果猜对了。第二个人继续阅读全文来猜target word，如果猜对了。更多人不让阅读全文，只能读target sentence来猜target word，直到猜对或者达到猜的人数上限，比如说10.如果没有人猜的对，就将该数据归入LAMBADA中。这种方法很费时费力，但从质量上得到了保证，所获得的数据集都可以保证通过阅读全文之后一定会得到正确结果，不阅读全文一定找不到结果，避免了语言模型通过分析target sentence直接生成target word这种情况，给研究者提供了一个质量更高的数据集。模型本文所说的模型是指neural模型，人工features的模型就不介绍了。1、Deep LSTM Reader / Attentive Reader / Impatient Reader[9]这个模型是配套CNN/Daily Mail数据集的模型，只是作为后面研究的baseline，所以效果不会太好。Deep LSTM Reader看上图，其实非常简单，就是用一个两层LSTM来encode query|||document或者document|||query，然后用得到的表示做分类。Attentive Reader这个模型将document和query分开表示，其中query部分就是用了一个双向LSTM来encode，然后将两个方向上的last hidden state拼接作为query的表示，document这部分也是用一个双向的LSTM来encode，每个token的表示是用两个方向上的hidden state拼接而成，document的表示则是用document中所有token的加权平均来表示，这里的权重就是attention，权重越大表示回答query时对应的token的越重要。然后用document和query的表示做分类。Impatient Reader这个模型在Attentive Reader模型的基础上更细了一步，即每个query token都与document tokens有关联，而不是像之前的模型将整个query考虑为整体。感觉这个过程就好像是你读query中的每个token都需要找到document中对应相关的token。这个模型更加复杂一些，但效果不见得不好，从我们做阅读理解的实际体验来说，你不可能读问题中的每一个词之后，就去读一遍原文，这样效率太低了，而且原文很长的话，记忆的效果就不会很好了。2、Attention Sum Reader[6]step 1 通过一层Embedding层将document和query中的word分别映射成向量。step 2 用一个单层双向GRU来encode document，得到context representation，每个time step的拼接来表示该词。step 3 用一个单层双向GRU来encode query，用两个方向的last state拼接来表示query。step 4 每个word vector与query vector作点积后归一化的结果作为attention weights，就query与document中的每个词之前的相关性度量。step 5 最后做一次相同词概率的合并，得到每个词的概率，最大概率的那个词即为answer。3、Memory Networks[3][5]模型将document中的每一个word保存为一个memory m(i)，每个memory本质上就是一个向量，这一点与embedding是一回事，只是换了一个名词。另外每个word还与一个输出向量c(i)相关联。可以理解为每个word表示为两组不同的embedding A和C。同样的道理，query中的每个单词可以用一个向量来表示，即对应着另一个embedding B。在Input memory表示层，用query向量与document中每个单词的m(i)作内积，再用softmax归一化得到一组权重，这组权重就是attention，即query与document中每个word的相关度，与昨天的AS Reader模型有些类似。接下来，将权重与document中的另一组embedding c(i)作加权平均得到Output memory的表示。最后，利用query的表示和output memory的表示去预测answer。然后，介绍下右图的多层模型。根据单层模型的结构，非常容易构造出多层模型。每一层的query表示等于上一层query表示与上一层输出memory表示的和。每一层中的A和C embedding有两种模式，第一种是邻接，即A(k+1) = C(k)，依次递推；第二种是类似于RNN中共享权重的模式，A(1) = A(2) = … = A(k),C(1) = C(2) = … = C(k)。其他的过程均和单层模型无异。本文模型的特点是易于构造更多层的模型，从而取得更好的效果。后面Gate Attention Reader模型正式借助了这个思想。4、Dynamic Entity Representation[7]计算出entity的动态表示之后，通过attention mechanism计算得到query与每个entity之间的权重，然后计算每个entity在document和query条件下的概率，找到最终的answer。query向量的计算与动态entity计算过程类似，这里需要填空的地方记作placeholder，也是包括四个部分，其中两个是表示placeholder上下文的last hidden state，另外两个是表示placeholder的hidden state。模型的整个计算过程就是这样。如果遇到一个entity在document中出现多次的情况，该entity就会会有不同的表示，本文采用CNN中常用的max-pooling从各个表示中的每个维度获取最大的那一个组成该entity最终的表示，这个表示包括了该entity在document中各种context下的信息，具有最全面的信息，即原文中所说的accumulate information。如下图：5、Gate Attention Reader[8]step 1 document和query通过一个Lookup层，使得每个词都表示成一个低维向量。step 2 将document中的词向量通过一个双向GRU，将两个方向的state做拼接获得该词的新表示。同时也将query通过一个双向GRU，用两个方向上的last hidden state作为query的表示。step 3 将document中每个词的新表示与query的新表示逐元素相乘得到下一个GRU层的输入。step 4 重复step 2和3，直到通过设定的K层，在第K层时，document的每个词向量与query向量做内积，得到一个最终的向量。step 5 将该向量输入到softmax层中，做概率归一化。step 6 因为document中有重复出现的词，聚合之后得到最终的分类结果，即确定应该填哪个词。6、Iterative Alternating Attention[2]step 1 将document和query通过一个Lookup层，使得每个词都表示成一个低维向量。step 2 将document和query中的词向量通过一个双向GRU，将两个方向的state拼接获得该词的新表示。step 3 这一步文章中称为Iterative Alternating Attention，1）根据前一个inference状态s(t-1)来计算query的attention，得到query glimpse q(t)，对应图中的1;2)根据前一个状态s(t-1)和当前的query glimpse q(t)来计算document的attention，得到document glimpse d(t)，对应图中的2；3)用GRU来将前一个状态s(t-1)和当前的query glimpse q(t)和当前的document glimpse d(t)做处理得到当前的状态s(t)。step 4 重复step 3 直到t达到给定的T为止。step 5 用最后得到的每个词向量进行归一化，并且聚合相同的词概率，得到预测结果。结果所有模型都是在两大主流数据集上进行对比[2][8]，结果如下：Maluuba公司的模型在CBT数据集上是最好的，在CNN/Daily Mail数据集上并没有最测试，而Gate Attention Reader占据了CNN数据集上的头把交椅。model ensemble可以将single model的效果提升很多，是一种非常有效的技术。从第一个模型Attentive Reader到最后一个模型Iterative Alternating Attention时间跨度大概是半年左右的时间，阅读理解的正确率提升了近20个百分点。CBT数据集上包含了人工测试的结果，最高的准确率为81.6%，而目前计算机可以达到的最高正确率是72%，离人类仍有不小的差距，需要更多更牛的model涌现出来。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"神经网络","slug":"神经网络","permalink":"https://wangxiuwen.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}],"author":"baipeng"},{"title":"mac下nodejs 更新到最新版本的最新方法","slug":"history/tech/59e9652666a84c463d4416d1","date":"2017-10-20T02:53:26.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59e9652666a84c463d4416d1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59e9652666a84c463d4416d1/","excerpt":"","text":"mac下nodejs 更新到最新版本的最新方法前提条件mac上安装了npm第一步：使用npm安装n模块n模块是专门用来管理nodejs版本的sudo npm install -g n1 提示 : 如果不使用sudo作为前缀，很可能出现权限访问异常导致安装失败第二步：升级nodejs升级nodejs是有两种方法：第一种是升级到最新版本sudo n latest1第二种是升级到稳定版本sudo n stable1提示 : 建议是稳定版本","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"迁移学习资料","slug":"history/tech/59e9bb1a66a84c463d4416d2","date":"2017-10-19T21:00:10.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59e9bb1a66a84c463d4416d2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59e9bb1a66a84c463d4416d2/","excerpt":"","text":"http://www.cse.ust.hk/TL/index.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"电子设计从零开始","slug":"history/tech/59e5b61d66a84c463d4416d0","date":"2017-10-16T19:49:49.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59e5b61d66a84c463d4416d0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59e5b61d66a84c463d4416d0/","excerpt":"","text":"官网http://www.circuitfly.com/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"色彩","slug":"history/ui/59e37b8466a84c463d4416cf","date":"2017-10-15T03:15:16.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/59e37b8466a84c463d4416cf/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/59e37b8466a84c463d4416cf/","excerpt":"","text":"后续学习：色彩像素 色彩性格 色相环 色彩搭配","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"LTspice 相关","slug":"history/tech/59df2ec166a84c463d4416ce","date":"2017-10-11T20:58:41.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59df2ec166a84c463d4416ce/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59df2ec166a84c463d4416ce/","excerpt":"","text":"官方下载：http://www.linear.com/designtools/software/ 简要说明适合仿真场景教学与电路图演示仿真 模拟电路图仿真 开关电源电路图仿真 信号处理和放大电路图仿真 HIFI电路图仿真 模拟电路图噪音分析 线性电路图仿真 PLL电路图仿真 时钟电路图仿真 基准电压源电流源仿真 电路图讲解与仿真 功放电路图仿真 模拟滤波器电路图仿真 模拟信号频谱分析 大部分pspice，multisim的应用可以用ltspice替代 仿真菜单的设置 电压源设置 仿真配置 FFT 查看在xxxx.RAW窗口，右键，在View下面点击FFT，根据提示选择要分析的网络。 LTspice 存放模型的路径Ltspice默认安装原理图符号和spice模型文件夹地址： C:\\Program Files\\LTC\\LTspiceIV\\lib\\Sym 存放原理符号 C:\\Program Files\\LTC\\LTspiceIV\\lib\\sub 存放spice模型","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Arduino 在线模拟器","slug":"history/tech/59dcbed766a84c463d4416cd","date":"2017-10-10T00:36:39.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59dcbed766a84c463d4416cd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59dcbed766a84c463d4416cd/","excerpt":"","text":"https://circuits.io/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"supervisor 报错","slug":"history/tech/59d4f8d7bf49b6713c31b010","date":"2017-10-04T03:05:59.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59d4f8d7bf49b6713c31b010/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59d4f8d7bf49b6713c31b010/","excerpt":"","text":"报错信息：pkg_resources.DistributionNotFound: meld3&gt;=0.6.5 解决方案：# pip install --upgrade pip # pip install --upgrade --force-reinstall setuptools supervisor pip Distribute","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"photoshop 常用知识","slug":"history/ui/59d4ee3c9a1ae75e264daf60","date":"2017-10-04T02:20:44.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/ui/59d4ee3c9a1ae75e264daf60/","link":"","permalink":"https://wangxiuwen.github.io/history/ui/59d4ee3c9a1ae75e264daf60/","excerpt":"","text":"性能配置菜单栏--编辑--首选项--性能 常见故障 复位启动在双击软件图标后的两秒内按下 ctrl+shift+alt， 然后会跳出提示。 常见文件格式jpg 丢失半透明效果 gif 可以存储半透明，但是效果不好 png 适合存储半透明效果 保存成 jpg 格式，一般选择质量 高 就可以了 常用操作 ps 载入选区ctrl + 鼠标单击图层缩览图 ps 取消选区ctrl + d 自由变换在一次自由变换之后， ctrl+shift+t 会重复上一次的变换 在一次自由变换之后， ctrl+shift+alt+t 会重复上一次的变换， 并将变换结果保存到新的图层上 复制图层ctrl+j 拖拽图层到新建按钮上放开 移动工具按住 alt 键 前景色填充alt + delete (backspace) 背景色填充ctrl + delete (backspace) 调整图层顺序ctrl+] 向上一层 ctrl+[ 向下一层 ctrl+shift+] 置顶 ctrl+shift+[ 置底(北京永远在最下面) 选中所有图层ctrl+alt+a 变换ctrl + T 自由变换 斜切 自由变换时 按住 ctrl+shift 扭曲 自由变换时 按住 ctrl 透视 自由变换时 按住 ctrl+shift+alt 变形 自由变换时 右击选择变形即可 颜色HSB颜色：H 色相： 0-360度 S 饱和度 B 明度 名片印刷：CMYK 颜色 （C青 M品 Y黄 印刷三原色） 分辨率 300 像素/英寸 90mm*54mm 名片尺寸 出血 3mm 新建文件96*60mm cmyk颜色 分辨率 300 标注出血标尺： 呼出/隐藏 ctrl+r （标尺上右击可以修改单位名称） 新建参考线： 可以从标尺上拖拽出来 删除参考线， 移动工具拖拽出去 全部删除：视图菜单-清除参考线 绘制出血位置参考线： alt-v-e 借助选框工具（快捷键M）标出参考线 可以直接绘制矩形选区，按住 shift 键，可以绘制正方形选区 在矩形选框工具的属性栏内，找到样式修改为固定大小，设置 3mm*3mm 在画布的角点击， 即可绘制出 3*3 的选区，然后拖拽参考线，吸附 文字工具快捷键 T 文字工具和文字蒙版工具（文字工具写出来的是文字，文字蒙版工具写出来的是选区） 点文本 通过点击确定光标位置，开始输入文字 在输入文字的过程中按住 ctrl 可以随时调整文字的大小及旋转角度及位置移动 修改文字颜色、字体、大小，在属性栏即可修改 前景色填充与背景色填充对于文字层同样有效 快捷操作 修改文字间距 alt+左右方向键 调整基线偏移量 alt+shift+上下方向键 调整行距 alt+上下方向键 名片排版两行文字或者两张图片对齐： 同时选中两个层，使用移动工具的对齐功能 想让某个元素在正中间位置： 绘制整体的选区 选中该元素，使用移动工具的水平居中 图层分组： 选中要放到组里的图层，ctrl+g 输入文字： 按照版式排版， 完成制作 段落文本 输入段落文本，使用文字工具画框 首行缩进 标点符号在最前面 对齐方式 海报版式设计 图片贴杯子上 放置素材 椭圆选框工具 快捷键 M 在使用选框工具绘制选区的时候，按住空格键可以调整选区的位置 绘制正圆： 按住 shift 沿着杯口绘制椭圆选区，与杯口基本一致 新建透明层，前景色填充 向下移动，到合适位置后，自由变换，调整有色区域的宽度与该处杯体宽度一致 对贴图进行自由变换 选区的运算按住 shift 可以实现加运算 按住 alt 可以实现减运算 按住 shift + alt 实现 交 运算 选区的变换在绘制选区的过程中，按住空格键可以临时调整选区的位置，放开空格，继续绘制 变换选区， alt-s-t 选区的移动与移动一样，都可以通过键盘的方向键来调整位置，按一次移动一个像素；按住shift时， 按一次方向移动十个像素 钢笔工具锚点 空心的锚点代表未选中，实心的锚点代表选中 路径 连接两个锚点的线段就是路径，按两次 esc 可以取消所有锚点与路径 手柄 控制曲线的方向和弯曲程度 手柄分为来向手柄和去向手柄(鼠标拽着的叫去向，控制将要产生的路径) 按住 ctrl 可以调整任意一个锚点的位置(其实是切换到直接选择工具) 按住 alt 可以调整去向手柄， 其实是使用转换点工具 按住 shift 拖拽手柄的时候可以保持水平，竖直或45° 按 ctrl+enter 可以将路径转换为选区（再 ctrl+j ） 自由钢笔下，属性栏内有个磁性的选项，也叫磁性钢笔工具，使用方法同磁性套索 注意：一般我们在使用钢笔工具进行抠图的时候，要注意保持路径平滑，不要出现拐点，尤其是扣人物肌肤的时候；解决办法：在调整去向手柄的时候，尽量不要改变其方向，只调整长短 蒙版图层蒙版我们常说的蒙版是图层蒙版，图层蒙版可以保护图层 图层蒙版有很强大的控制性 蒙版在早期 ps 版本中叫遮罩，fl 和 AE 中仍然叫遮罩 按住alt点击蒙版缩览图，即可查看蒙版的样子 蒙版白色，代表不遮挡 蒙版灰色，代表半遮挡 蒙版黑色，代表遮挡 按住 shift 单击蒙版的缩览图，可以停止蒙版的使用 剪切蒙版打开镜框素材 绘制椭圆选区 [m-拖拽] 调整椭圆选区与黑色区域重叠 [alt-s-t]，并复制[ctrl+j] 打开美女 移动工具将美女移动到镜框文件内 按住alt，在复制层和美女层之间单击 对美女曾进行自由变换，调整到合适大小 其实就是使用下一层的不透明区显示上一层的东西 快速蒙版快捷键 Q 色彩混合混合方式 加色混合 减色混合 中性混合 印刷文件常规 颜色模式 CMYK 分辨率 300+ 出血 显示器 颜色模式 RGB 分辨率 72 （96） 光与色 直射: 光直接进入眼睛 反射: 光源经过物体反射进入人眼 加色混合(色光混合)色光混合其实就是 RGB 色彩模式 RGB 是光的三原色: 红绿蓝 不可再分解 使用三原色合成任意颜色 三个颜色可以合成白色 红色+绿色=黄色 蓝色+绿色=青色 红色+蓝色=洋红(品红) 红色+蓝色+绿色=白色 减色模式减色模式即 CMYK CMYK 其中CMY是油墨的三原色， k 是黑色 C 青色 M 品红 Y 黄色 K 黑色(black) 中性混合加色混合与减色混合都是色彩先混合再进入人眼 中性混合是先进入人眼然后我们大脑对色彩进行的混合 位图与矢量图位图由像素拼成的 像素是矩形的 矢量图矢量图是有数学公式描述的 矢量图缩放不失真 矢量图的文件一般比较小 AI CDR CAD 矢量图软件 矢量图没有位图细节丰富 logo设计 名片设计 包装画册 展架 DM单。。。 颜色与通道RGB 通道 (复合通道) 还有一种专色通道，该通道在 CMYK 颜色模式下新建产生 通道是灰白的图像这种灰白色的图我们称之为灰度图 这些灰， 最暗的灰色为黑色， 最亮灰为白色，分为256个等级 黑色为0， 白色为 255 通道内的灰度表示该颜色的亮度 黑 rgb（0，0，0）绿 rgb（0， 255，0） 红 rgb（255，0，0） 蓝 rgb（0，0，255） 白 rgb（255，255，255） 中性灰(128,128,128) 黄 rgb(255,255,0) 青 rgb(0,255,255) 杨红rgb(255,0,255) 通道抠图原理打开文件，打开通道面板，选取要使用的通道 使用色阶命令调整图像 通道抠图就是把要抠的部分做成白色，不扣的部分做成黑色 只有纯黑和纯白的时候，边缘过于锐利，容易产生锯齿，且部分图像需要半透明的存在 通道还原法打开图片 复制图层 反相 ctrl+I 打开通道面板 载入红色通道，加载绿通道和蓝通道[ctrl+shift 分别单击绿通道和蓝通道] 回到图层对原图进行复制 [ctrl+j] 动画就是通过快速切换，让人产生动的感觉 切换的画面我们称之为 &quot;帧&quot; 打开动画窗口，窗口菜单--时间轴 进入动画面板 动画实例 写字 扣玫瑰 写字 对文字进行栅格化 对文字进行复制和笔画拆解 打开动画窗口，编辑动画 存储【文件-存储为web所用格式】 gif 文件 广告实例 自由变换后 ctrl+shift+t 重复上一次变化， 按住 ctrl+shift+alt+t是重复上一次并将结果保存为一个新的图层 渐变工具 使用过渡帧 使用渐变工具 快捷键G 直接拖拽就有效果，类型：线性渐变，角度渐变，菱形渐变 渐变编辑器单击即可进入编辑状态 色标分为两种，一种是颜色色标，一种是不透明度色标(至少要有两个色标存在) 渐变编辑器 制作动画 旋转的地球打开素材对素材画布进行两倍宽度放大， 复制图像，对图像进行拼接 先绘制一个球体，然后使用剪切蒙版（按住 alt 在两个图层中间单击） 调整混合模式(线性光) 编辑动画 按住shift拖动背景（保证水平拖动) 增加过渡帧，调整切换时间 动画实例动作的录制和使用 动作面板（窗口---动作） 滤镜 下雨效果 新建图层-填充黑色 添加杂色（高斯分布） 动感模糊滤镜 结束动作录制 播放动作两次 实现动画 关于抠图规则的形状 圆的 方的 椭圆的 多边形抠图； 钢笔或多边形套索，建议使用钢笔来抠图 纯底色的抠图 主要讲解的是魔术棒 快捷键 W 容差理解 能用魔术棒的必然可以使用色彩范围(选择--色彩范围)进行抠图 调整边缘，其实就是抽出滤镜进化版 智能半径保留 平滑 1-3 即可 羽化 1像素 对比度 稍微给点 11% 移动边缘 0 净化颜色 勾选 输出不用更改 记住配置即可 边缘清晰可见，使用钢笔抠图 液化滤镜向前变形工具 密度建议不要太大，耐心操作 笔触建议大一点 在高级模式下调整压力大小，压力越大拖住的结果越尖锐 重建工具 对于不太满意的结果部分 褶皱工具 周围向中心进行挤压，瘦身的操作 膨胀工具 用于放大眼睛，隆胸等 冻结与解冻工具 文字效果制作网点文字新建文件尺寸 800*800 输入文字 大小","categories":[{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/categories/UI/"}],"tags":[{"name":"ui","slug":"ui","permalink":"https://wangxiuwen.github.io/tags/ui/"},{"name":"UI","slug":"UI","permalink":"https://wangxiuwen.github.io/tags/UI/"}],"author":"wangxiuwen"},{"title":"paddlepaddle 线性回归预测房价","slug":"history/tech/59ca5038c51d80451db0c010","date":"2017-09-26T01:03:52.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59ca5038c51d80451db0c010/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59ca5038c51d80451db0c010/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"三种梯度下降算法","slug":"history/tech/59ca22c5c51d80451db0c00f","date":"2017-09-25T21:49:57.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59ca22c5c51d80451db0c00f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59ca22c5c51d80451db0c00f/","excerpt":"","text":"http://bit.baidu.com/course/detail/id/137.html这里 a 是超参数","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"机器学习基础知识","slug":"history/tech/59ca183bc51d80451db0c00e","date":"2017-09-25T21:04:59.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59ca183bc51d80451db0c00e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59ca183bc51d80451db0c00e/","excerpt":"","text":"基本概念机器学习是从数据中产生模型的过程。模型的能力：拟合：描述已有数据之间的映射关系 预测：对未知数据有预测能力(泛化 generalization) 假设函数：用来描述两个数据之间的映射关系 损失函数：用数学的方法衡量假设函数预测结果与真实值之间的&quot;误差&quot; 超参数：需要人为确定的参数 机器学习分类：监督学习: 分类： 决策树： decision tree svm 回归： 线性回归： linear Regression 非线性回归： GBRT 无监督学习: 聚类： clustering 词嵌入： word embeding 问题建模：假设函数(hypothesis function): 线性假设函数 神经网络 损失函数(cost function): 均方差(mean square error) 交叉熵(cross entropy) 优化算法(梯度下降 gradient descent): 三种优化框架: BGD SGD MBGD 多种优化算法: Momentum Adadelta Adam Adagrad 三种梯度下降算法http://bit.baidu.com/course/detail/id/137.html这里 a 是超参数 线性回归预测房价线性回归优点：形式简单，易于建模 同时蕴含着机器学习中一些重要的基本思想 可演变成其他复杂模型 许多功能强大的非线性模型(nonlinear model)可在线性模型基础上演变而来。 可解释性好 权重可以表达各属性在预测中的重要性，因此线性模型有很好的可解释性。 术语：监督学习(supervised learning) 非监督学习(unsupervised learning) 假设函数(hypothesis function) 均方差(mean square error) 损失函数(cost function) 梯度下降(gradient descent) 数据集操作 paddle.dataset/paddle.reader 全连接层 paddle.layer.fc() 线性激活函数 paddle.activation.Linear() 均方差损失函数 paddle.layer.mse_cost() 参数优化器 paddle.optimizer.Momentum() 梯度下降训练器 paddle.trainer.SGD() 数字识别全连接 激活函数 卷积 池化 Softmax 回归模型 多层感知器模型 卷积神经网络模型 数据集：MNIST 手写开源数据集(6万训练，1万测试) 重要的积木全连接(fully connected): 每一个神经元都和上一层所有神经元相连。 激活函数(activation function) 卷积(convolution) 池化(pooling) 分类器softmax 回归模型 多层感知机模型 卷积神经网络 全连接神经网络的缺点：参数太多 没有利用像素之间的信息 为什么要用激活函数：神经网络每层输出都是上层输入的线性变化。 y = Wx 无论神经网络有多少层，输出都是输入的线性组合 引入非线性激活函数，神经网络才可以逼近任意函数 y = f(Wx) softmax 回归模型：常用于神经网络输出层的多分类 对于N个类别的多分类问题，将结果向量归一化为 N 个 [0,1] 范围内的实数值 每个实数值对应一个类别的预测概率 步骤：将输入层经过全连接得到的特征 通过softmax 激活函数进行分类输出 ReLu 激活函数的梯度（倒数图）：x &lt; 0, 梯度为 0 x &gt; 0, 梯度为 1 多层感知器模型计算方法： 将输入层连续经过两个全连接隐层 经过输出层 softmax 函数进行分类 卷积(Convolution)卷积是卷积神经网络的核心基石， 卷积操作可以提取出图像低级到高级的特征 滤波器(也称作卷积核) 与二维图像做卷积操作来提取特征 卷积操作被广泛应用于图像处理领域， 不同卷积核可以提取不同的特征，如边沿，线性，角等特征。 卷积核滑动到二维图像上所有位置，并在每个位置上与该像素点及其周围像素点做内积 在卷积层，通常采用多组卷积核提取不同特征，即对应不同深度切片的特征 通过卷积核，使得仅与输入神经元的一块区域连接，这块局部区域称作感受野 这种局部连接保证了学习后的过滤器能够对于局部的特征有最强的响应 卷积主要特性：局部连接 每个神经元仅仅与输入神经元的一块区域连接， 减少很多参数 权重共享 一组连接共享同一个权重， 这样又减少了很多参数 卷积层使得需要学习的参数大大减小， 这样也有利于训练较大卷积神经网络 池化(polling)池化是非线性下采样的一种形式 池化包括最大池化，平均池化 最大池化是将输入分成不同的区域，对于每个区域的数取最大值作为输出 通过减少网络的参数来减小计算量 能够在一定程度上控制过拟合 通常在卷积层的后面会加上一个池化层进行下采样 LeNet-5 卷积神经网络的演示经过两次卷积层到池化层 经过全连接层 + Softmax 分类 总结全连接神经网络模型，将图像展开成一维向量输入到网络中，忽略了图像的位置和结构信息 卷积神经网络利用卷积和池化，能够更好地利用图像的结构信息 卷积神经网络通过尽可能保留重要的参数， 通过去掉大量不重要的参数来达到更好的学习效果 图像分类图像识别：计算机对图像进行处理分析、识别、理解。 图像识别：识别出汽车，马路 图像检测：识别出汽车位置，进一步识别出拥堵等语意图像分类挑战：http://cs231n.github.io/classification/ 模型概览：AlexNet VGG GoogleNet ResNet 传统方法表示(含有大量冗余和噪声)底层特征表示 ---&gt; (进一步整合底层特征得到)中层特征表示 ---&gt; 分类器 传统方法特点：多个步骤 （需要多步优化，多步优化就会造成错误的累积） 手工设计特征，通常需要多种特征进行融合 发展缓慢 常用分类器：svm Adaboost 卷积神经网络的方法：底层特征 ---&gt; 中层特征 ---&gt; 高层(语意)特征 ---&gt; 分类器 特点：学习特征(不需要多个步骤，一步到位端到端的方法)端到端精度高较好的迁移能力大规模视觉挑战赛http://image-net.org/indexCNN 积木回顾卷积层 局部链接 权重共享 输入输出：（N、C、H、W）四维数据结构 N: Batch Size C: Channel H: Height W: Width 全连接层 池化层 ReLu 函数 softmax 总结特征迁移：其他细粒度图像分类: 使用 ImageNet 模型 finetune医疗图像识别: 使用 ImageNet 模型 finetune使用 Oxford-flowers/ImageNet 数据进行训练 个性化推荐背景介绍 推荐系统和搜索引擎的区别: 信息找人，而不是人找信息 模型设计 文本卷积神经网络 LTR: Learn to Rank 文本卷积神经网络文本输入 =》上下问词向量拼接 =》全连接卷积层 =》 池化 =》输出 LTR 基本方法pointwise 排序可以被建模为分类、回归等模型 输入: 单个商品的特征向量 输出: query 与每个商品的相关度 优点: 简单易用 局限性: 未考虑商品与商品之间的联系 pairwise 输入: 具有偏序关系的商品对 输出: 每对商品的偏好值(1 或 -1) listwise 输入: 某个 query 下所有商品 输出: 排好序的列表或排列 微软 刘铁岩博士 论文数据集MovieLens 百万数据集 6000 位用户对 4000 部电影的一百万条评分 用户特征: ID、性别、 职业、年龄 电影特征: ID、类别、电影名 地址：http://files.grouplens.org/datasets/movielens/ml-1m-README.txt为了简化 ， PaddlePaddle 对数据做了预处理https://github.com/PaddlePaddle/Paddle/blob/develop/python/paddle/v2/dataset/movielens.py模型结构paddlepaddle 数据类型文档地址http://doc.paddlepaddle.org/develop/doc/api/v2/data.html延伸http://files.grouplens.org/datasets/movielens/ml-latest-README.htmlhttps://www.themoviedb.org/documentation/api通过数据集中的电影 ID 调用 api 得到电影的海报，使用神经网络对海报进行学习。 情感分析情感分析 意见抽取， 意见挖掘 自然语言处理任务 判断一段文本所表达的情绪状态 文本: 一句话， 一个段落，一个文档 情绪: 正面， 负面 情感分析任务 最基本的: 一段文本表达的态度是正向的还是负向 稍微复杂: 将文本表达的态度分成 1-5 个等级 情感分析应用 电影， 购物， 社交， 金融， 机器人 模型设计情感分类文本分类循环神经网络RNNLSTM栈式双向LSTM模型训练RNN模型计算Batch计算文本情感分类(面向文本处理)基于情感词典及规则基于机器学习方法有监督的机器学习实现端到端的情感分类文本分类文档分类垃圾邮件过滤循环神经网络(Recurrent Neural Network) 上一时刻的输出作为下一时刻的输入 自然语言，典型的序列数据(词序列) 长序列长期依赖(Long Term Dependencies) 梯度消失/梯度爆炸 LSTM 网络为了解决简单 RNN 网络里面的长距离依赖和梯度消失的问题， 有了 LSTM 网络增强了处理远距离依赖问题的能力，同时缩短了梯度的传播路径类似的设计还有门控循环神经网络单元 GRU数据集IMDB 情感分析数据集分别包含25000训练样本和测试样本标注为正面评论或负面评论dataset/imdb.py 自动下载 读取字典、训练数据、测试数据 API 语义角色标注语义角色标注是实现浅层语义分析的一种方式谓词: 对主语的陈述或说明， 通常是一个动词论元: 跟谓词搭配的名词语义角色: 论元在动词所指事件中担任的角色通过让计算机提取出重要的结构化信息，来&quot;理解&quot;语言的含义。传统角色标注方法缺陷 高度依赖句法分析--------&gt;只利用文本输入 每个步骤的错误会累积---------&gt;端到端学习序列标注结果 总结栈式双向 LSTM 学习句子表示 CRF层在特征基础上完成序列标注 序列标注还能做: 分词， 词性标注， 语义角色标注， 命名实体识别 机器翻译两个变长序列之间的映射问题 端到端的神经网络机器翻译原理及相关模型门控循环单元(GRU) 和双向 RNN 编码器-解码器框架(Encoder-Decoder) 注意力机制(Attention) 柱搜索算法(Beam Search) 机器翻译概念解释源语言: 被翻译的语言 目标语言: 翻译后的语言 平行语料（parallel corpus）: 一一对应的源/目标语言 定义: 用计算机来实现从源语言到目标语言的转换过程 训练过程: 用大量的平行语料，来训练模型 生成过程: 根据预先训练的模型来翻译源语言句子 基于规则的翻译系统(早期)转换规则: 由语言学家编写， 再将其录入计算机 缺点: 对语言学家的要求非常高，几乎无法总结一门语言会用到的所有规则， 更何况两种以上的语言。 统计机器翻译(Statistical Machine Translation, SMT)转换规则: 由机器从大规模语料中学习得到 缺点: 人为设计许多特征，但是永远无法覆盖所有语言现象 难以利用全局的特征 依赖许多预处理环节， 如词语对齐、分词或符号化等 每个环节的错误会逐步累积， 对最终翻译影响也越来越多 深度学习技术(端到端的神经网络机器翻译)End-to-End Neural Machine Translation, 简称 NMT 1. 利用神经网络来改进其中的关键模块 2. 直接用神经网络将源语言映射到目标语言 序列到序列的学习问题主要思想(2014年) &quot;Sequence to Sequence Learning with Neural Networks&quot; &quot;Learning Phrase Representation using RNN Encoder-Decoder for Statistical Machine Translation&quot; 应用场景 文本到文本: 如智能机器人，文本摘要，绘画建模 图像到文本: 如看图说话，图片问答，图片搜索 文本到图像: 如基于文本描述生成一张图片 视频到文本: 如看视频说话， 视频搜索(视频 ------&gt; 一句话或多句话) LSTM 回顾(详见情感分析课程) LSTM特点: 记忆单元、输入门、遗忘门及输出门 好处: 大大提升了 RNN 处理远距离依赖问题的能力 GRU 介绍 LSTM的简化版本， 只有两个门: 重置门和更新门 在多个任务上都和LSTM有相近的表现 编码-解码器框架编码：将整个源序列表征成一个向量解码:通过最大化预测序列概率， 从中解码出整个目标序列解码思路 计算下一个隐层状态 根据隐层状态得到词概率 根据词概率计算代价(训练)或采样出单词(生成) 循环以上三个步骤 训练: 直到目标语言序列中的所有词处理完毕 生成: 直到获得句子结束标记&lt;e&gt;或超过句子的最大生成长度 数据集WMT14 数据集","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"author":"wangxiuwen"},{"title":"paddle 库编译安装","slug":"history/tech/59ca0da0c51d80451db0c00d","date":"2017-09-25T20:19:44.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59ca0da0c51d80451db0c00d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59ca0da0c51d80451db0c00d/","excerpt":"","text":"官方文档：http://doc.paddlepaddle.org/develop/doc/getstarted/build_and_install/build_from_source_en.html参考这里 安装 boost 库https://blog.qianrushi.org/topic/59c9ff4dc51d80451db0c00c","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux boost 库 安装","slug":"history/tech/59c9ff4dc51d80451db0c00c","date":"2017-09-25T19:18:37.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59c9ff4dc51d80451db0c00c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59c9ff4dc51d80451db0c00c/","excerpt":"","text":"下载 wget https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.tar.bz2 解压 tar -xjvf boost_1_65_1.tar.bz2 -C /usr/local/ mv /usr/local/boost_1_65_1 /usr/local/boost 安装bootstrap.sh 脚本执行之后会产生 bjam 和 b2 两个工具cd /usr/local/boost_1_65_1 ./bootstrap.sh ./b2 install 安装完成之后：/usr/local/include 下会产生boost的头文件 /usr/local/lib下面会产生boost库 导出环境变量BOOST_ROOT 为 boost的解压路径vim /etc/profile export BOOST_ROOT=/usr/local/boost export BOOST_INCLUDE=/usr/local/include/boost export BOOST_LIB==/usr/local/lib source /etc/profile 执行sudo chmod +x boost.sh ./boost.sh 测试#include &lt;boost/utility.hpp&gt; #include &lt;iostream&gt; using namespace std; int main() { return 0; }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 桌面版配置开机启动脚本","slug":"history/tech/59c86c0cc51d80451db0c009","date":"2017-09-25T02:38:04.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59c86c0cc51d80451db0c009/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59c86c0cc51d80451db0c009/","excerpt":"","text":"编辑文件 vim /etc/init.d/startup.sh #! /bin/sh ### BEGIN INIT INFO # Provides: supervisord # Required-Start: $remote_fs # Required-Stop: $remote_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Example initscript # Description: This file should be used to construct scripts to be # placed in /etc/init.d. ### END INIT INFO # Author: Dan MacKinlay &lt;danielm@phm.gov.au&gt; # Based on instructions by Bertrand Mathieu # http://zebert.blogspot.com/2009/05/installing-django-solr-varnish-and.html # Do NOT &quot;set -e&quot; # PATH should only include /usr/* if it runs after the mountnfs.sh script PATH=/sbin:/usr/sbin:/bin:/usr/bin DESC=&quot;Description of the service&quot; NAME=supervisord DAEMON=/usr/local/bin/supervisord DAEMON_ARGS=&quot;-c /usr/local/supervisord.conf&quot; PIDFILE=/var/run/$NAME.pid SCRIPTNAME=/etc/init.d/$NAME # Exit if the package is not installed [ -x &quot;$DAEMON&quot; ] || exit 0 # Read configuration variable file if it is present [ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME # Load the VERBOSE setting and other rcS variables . /lib/init/vars.sh # Define LSB log_* functions. # Depend on lsb-base (&gt;= 3.0-6) to ensure that this file is present. . /lib/lsb/init-functions # # Function that starts the daemon/service # do_start() { # Return # 0 if daemon has been started # 1 if daemon was already running # 2 if daemon could not be started start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test &gt; /dev/null \\ || return 1 start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \\ $DAEMON_ARGS \\ || return 2 # Add code here, if necessary, that waits for the process to be ready # to handle requests from services started subsequently which depend # on this one. As a last resort, sleep for some time. } # # Function that stops the daemon/service # do_stop() { # Return # 0 if daemon has been stopped # 1 if daemon was already stopped # 2 if daemon could not be stopped # other if a failure occurred start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME RETVAL=&quot;$?&quot; [ &quot;$RETVAL&quot; = 2 ] &amp;&amp; return 2 # Wait for children to finish too if this is a daemon that forks # and if the daemon is only ever run from this initscript. # If the above conditions are not satisfied then add some other code # that waits for the process to drop all resources that could be # needed by services started subsequently. A last resort is to # sleep for some time. start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON [ &quot;$?&quot; = 2 ] &amp;&amp; return 2 # Many daemons don't delete their pidfiles when they exit. rm -f $PIDFILE return &quot;$RETVAL&quot; } # # Function that sends a SIGHUP to the daemon/service # do_reload() { # # If the daemon can reload its configuration without # restarting (for example, when it is sent a SIGHUP), # then implement that here. # start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME return 0 } case &quot;$1&quot; in start) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_daemon_msg &quot;Starting $DESC&quot; &quot;$NAME&quot; do_start case &quot;$?&quot; in 0|1) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 0 ;; 2) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 1 ;; esac ;; stop) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_daemon_msg &quot;Stopping $DESC&quot; &quot;$NAME&quot; do_stop case &quot;$?&quot; in 0|1) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 0 ;; 2) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 1 ;; esac ;; #reload|force-reload) # # If do_reload() is not implemented then leave this commented out # and leave 'force-reload' as an alias for 'restart'. # #log_daemon_msg &quot;Reloading $DESC&quot; &quot;$NAME&quot; #do_reload #log_end_msg $? #;; restart|force-reload) # # If the &quot;reload&quot; option is implemented then remove the # 'force-reload' alias # log_daemon_msg &quot;Restarting $DESC&quot; &quot;$NAME&quot; do_stop case &quot;$?&quot; in 0|1) do_start case &quot;$?&quot; in 0) log_end_msg 0 ;; 1) log_end_msg 1 ;; # Old process is still running *) log_end_msg 1 ;; # Failed to start esac ;; *) # Failed to stop log_end_msg 1 ;; esac ;; *) #echo &quot;Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}&quot; &gt;&amp;2 echo &quot;Usage: $SCRIPTNAME {start|stop|restart|force-reload}&quot; &gt;&amp;2 exit 3 ;; esac : 更新 # 在这里 60 表明一个优先级，越高表示执行的越晚 update-rc.d startup.sh defaults 60 移除脚本sudo update-rc.d -f startup.sh remove","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"美图分享笔记","slug":"history/tech/59c9031ac51d80451db0c00b","date":"2017-09-25T01:22:34.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59c9031ac51d80451db0c00b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59c9031ac51d80451db0c00b/","excerpt":"","text":"评论反垃圾评论垃圾分类：广告传播 涉黄涉政 批量攻击 评论购买 人工求关注 垃圾识别算法：最长公共子串算法lru聚类行为识别:数据预处理行为分析:关注点赞等得到辅助用户行为各个维度的质量用户分析：回归算法模型验证：人工筛选用户反馈… 文本分析磁性分析， 粒子聚网分析？ 时间衰减，热力学定律事件的 上升 衰减， 新增， 计算出事件的热点评论 分为 正向 负向 中性情感词匹配支持向量机 搜索演进模型：繁简大小写转换 倒排索引 相关度排序 结合产品策略二次排序 问题:搜索词太长，影响性能 单索引资源浪费，性能压力 低质量视频不值得索引 调优模型：英文 n-gram 切词， 直接查询，相关度计算有问题分级索引 ：先查询一级索引， 一级索引不足， 对二级索引进行补充查询 一级索引，二级索引数据比例 1：40 (5亿视频中只有一千万) 一级索引： 人工筛选，优质， 离线 ccr 算法， 剔除低转化视频数据 视频文本匹配度高，不代表转化率高，根据播放数，点赞数，评论数，搜索意图特征（搜索词在平台的类别属性映射，分为三类： 用户意图特征(用户视频，与用户有关的视频)，视频分类特征(体育，美食， 旅游, 分析查询在视频标签中的概率，做特征映射 )，平台视频特征（长视频，短视频， 直播， 教程类偏向于长视频， 吃饭适合直播））， 对倾向概率向视频特征做映射。对于意图特征，使用搜索反馈日志，做模型训练。 长尾查询语义归一查询重写：拼音转化 查询时序分析： 多次查询词 协同分析 个性化：用户画像： 性别， 年龄， 收入， 职业 用户兴趣： 观看兴趣， 体现在标签体系, 美食，旅游等 用户环境： 手机机型，地点，网络，时间 用户社群： 相似的用户看同样的视频。 用户个性化排序：数据一次排序后， 取 top N 数据，进行描述扩展，再进行数据二次排序。 描述扩展： 通过图像分类技术识别视频一级标签 语音识别 baidu 机器学习房产分区分析：poi 信息","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 配置 vncserver,  解决 vnc 灰屏","slug":"history/tech/59c8ae7cc51d80451db0c00a","date":"2017-09-24T19:21:32.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59c8ae7cc51d80451db0c00a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59c8ae7cc51d80451db0c00a/","excerpt":"","text":"安装apt-get install vnc4server 修改配置文件vim ~/.vnc/xstartup #!/bin/sh # Uncomment the following two lines for normal desktop: #unset SESSION_MANAGER #exec /etc/X11/xinit/xinitrc # #[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup #[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources #xsetroot -solid grey #vncconfig -iconic &amp; #x-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp; #export STARTUP=&quot;/usr/bin/gnome-session --session=Ubuntu&quot; #$STARTUP def export XKL_XMODMAP_DISABLE=1 unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS gnome-panel &amp; gnome-settings-daemon &amp; metacity &amp; nautilus &amp; gnome-terminal &amp; 启动 vncserver 连接使用 vnc 客户端 输入 ip:1","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"elasticsearch 添加字段设置默认值。","slug":"history/tech/59c08907c51d80451db0c006","date":"2017-09-19T03:03:35.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59c08907c51d80451db0c006/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59c08907c51d80451db0c006/","excerpt":"","text":"开启动态脚本功能，在config/elasticsearch.yml文件,在最后添加以下代码：script.inline: on script.indexed: on script.file: on 配置后，重启Elasticsearch。POSThttp://127.0.0.1:9200/my_index/my_type/_update_by_query { &quot;script&quot;: { &quot;inline&quot;: &quot;if (ctx._source.status_code == null) {ctx._source.status_code= '02'}&quot; } } 使用string 类型的字段设置默认值http://127.0.0.1:9200/my_index/mapp/my_type put { &quot;properties&quot;: { &quot;status_code&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;index&quot;: &quot;not_analyzed&quot;, &quot;null_value&quot;: &quot;NULL&quot; } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"baipeng"},{"title":"安卓 apk 破解","slug":"history/tech/59bb2d25c51d80451db0c005","date":"2017-09-15T01:30:13.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59bb2d25c51d80451db0c005/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59bb2d25c51d80451db0c005/","excerpt":"","text":"AXMLPrinter2,smali,baksmali：http://blog.csdn.net/android_tutor/article/details/5724435mainfest：http://blog.csdn.net/linux_eve/article/details/5529312Android APK反编译就这么简单 详解（附图）：http://blog.csdn.net/vipzjyno1/article/details/21039349/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"阿里 maven 库","slug":"history/tech/59b8eb42c51d80451db0c004","date":"2017-09-12T20:24:34.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59b8eb42c51d80451db0c004/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b8eb42c51d80451db0c004/","excerpt":"","text":"http://maven.aliyun.com/nexus/#nexus-search;quick~mysql","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"安装rvm 多版本 Ruby 环境 管理和切换工具","slug":"history/tech/59b600f21db485493d6cc384","date":"2017-09-11T03:20:18.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59b600f21db485493d6cc384/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b600f21db485493d6cc384/","excerpt":"","text":"官网https://rvm.io/ RVM 安装$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 $ \\curl -sSL https://get.rvm.io | bash -s stable $ source ~/.bashrc $ source ~/.bash_profile 修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器，这样能提高安装速度$ mkdir -p ~/.rvm/user/ $ echo &quot;ruby_url=http://cache.ruby-china.org/pub/ruby&quot; &gt; ~/.rvm/user/db 列出已知的 Ruby 版本rvm list known 安装一个 Ruby 版本rvm install 2.2.0 --disable-binary 切换 Ruby 版本rvm use 2.2.0 如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本rvm use 2.2.0 --default 查询已经安装的rubyrvm list 卸载一个已安装版本rvm remove 1.8.7 安装 bundlergem install bundle","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"logstash 插件开发报错解决","slug":"history/tech/59b5ff901db485493d6cc383","date":"2017-09-11T03:14:24.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59b5ff901db485493d6cc383/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b5ff901db485493d6cc383/","excerpt":"","text":"bundle install 报错：There was a NoMethodError while loading logstash-input-rss.gemspec: undefined method metadata=' for #&lt;Gem::Specification name=logstash 解决：安装ruby新版：http://blog.qianrushi.org/topic/59b600f21db485493d6cc384 bundle install 接着报错：Could not find gem 'logstash-devutils' in any of the gem sources listed in your Gemfile. 解决：安装 jrubyrvm install jruby rvm use jruby-9.1.13.0 --default gem install bundle 再次安装依赖包： bundle install 成功","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"sublime 命令行启动","slug":"history/tech/59b3f7321db485493d6cc382","date":"2017-09-09T02:14:10.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59b3f7321db485493d6cc382/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b3f7321db485493d6cc382/","excerpt":"","text":"在程序目录中新建批处理文件 subl.bat:@和 echo 之间没有空格 @ echo off start sublime_text %1","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"各种编辑器官方下载地址","slug":"history/tech/59b3f39a1db485493d6cc381","date":"2017-09-09T01:58:50.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59b3f39a1db485493d6cc381/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b3f39a1db485493d6cc381/","excerpt":"","text":"sublime text3：http://www.sublimetext.com/3notepad++：https://notepad-plus-plus.org","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"windows 下 安装 go 出现 2502/2503 错误码","slug":"history/tech/59b3ebd51db485493d6cc380","date":"2017-09-09T01:25:41.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59b3ebd51db485493d6cc380/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b3ebd51db485493d6cc380/","excerpt":"","text":"管理员身份运行命令提示符：msiexec /package &quot;C:\\Users\\Administrator\\Desktop\\go1.9.windows-amd64.msi&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"go 简介","slug":"history/tech/59b3e1031db485493d6cc37f","date":"2017-09-09T00:39:31.000Z","updated":"2020-11-29T01:42:08.763Z","comments":true,"path":"history/tech/59b3e1031db485493d6cc37f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b3e1031db485493d6cc37f/","excerpt":"","text":"wiki原：code.google.com/p/go-wiki/w/list已迁移：https://github.com/golang/go/wiki qq 群https://docs.google.com/spreadsheets/d/13Q6whxkLpYxDkLFJnbMPR5VlkiM322WeJSjGgopjtNk/edit 查看环境变量 go env 测试文件 *_test.go 默认是测试文件 查看帮助查看包帮助： go doc fmt 查看包内单个函数： godoc fmt Println godoc cmd/fmt Println 启动 doc 服务: godoc -http=:8080","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Sizzle 选择器","slug":"history/tech/59b29a071db485493d6cc37e","date":"2017-09-08T01:24:23.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59b29a071db485493d6cc37e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b29a071db485493d6cc37e/","excerpt":"","text":"Sizzle 选择器","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"线上工具链 官方下载","slug":"history/tech/59b25b951db485493d6cc37d","date":"2017-09-07T20:57:57.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59b25b951db485493d6cc37d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b25b951db485493d6cc37d/","excerpt":"","text":"The Definitive Guide for Production Tools ：http://land.overops.com/production-tools/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"vscode 配置开发环境 官方文档","slug":"history/tech/59b113f61db485493d6cc37c","date":"2017-09-06T21:40:06.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59b113f61db485493d6cc37c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59b113f61db485493d6cc37c/","excerpt":"","text":"https://code.visualstudio.com/docs/?dv=win","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"深度学习网站","slug":"history/tech/59ad57b81db485493d6cc37b","date":"2017-09-04T01:40:08.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59ad57b81db485493d6cc37b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59ad57b81db485493d6cc37b/","excerpt":"","text":"http://zh.gluon.ai/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"python mysql库安装","slug":"history/tech/59a8d8901db485493d6cc378","date":"2017-09-01T03:48:32.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59a8d8901db485493d6cc378/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59a8d8901db485493d6cc378/","excerpt":"","text":"报错：root@localhost:~/test# pip install mysql-python Collecting mysql-python Using cached MySQL-python-1.2.5.zip Complete output from command python setup.py egg_info: sh: mysql_config: command not found Traceback (most recent call last): File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt; File &quot;/tmp/pip-build-vkQhN1/mysql-python/setup.py&quot;, line 17, in &lt;module&gt; metadata, options = get_config() File &quot;/tmp/pip-build-vkQhN1/mysql-python/setup_posix.py&quot;, line 43, in get_config libs = mysql_config(&quot;libs_r&quot;) File &quot;/tmp/pip-build-vkQhN1/mysql-python/setup_posix.py&quot;, line 25, in mysql_config raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,)) EnvironmentError: mysql_config not found 解决：apt-get install libmysqlclient-dev","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"snowflakes","slug":"history/tech/59a91cf71db485493d6cc37a","date":"2017-08-31T20:40:23.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59a91cf71db485493d6cc37a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59a91cf71db485493d6cc37a/","excerpt":"","text":"https://github.com/wujunshen/vesta-id-generator","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"修改网络内核对TCP连接的有关限制","slug":"history/tech/59a9123e1db485493d6cc379","date":"2017-08-31T19:54:38.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59a9123e1db485493d6cc379/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59a9123e1db485493d6cc379/","excerpt":"","text":"尽管已经解除了系统对用户同时打开文件数的限制，但仍会出现并发TCP连接数增加到一定数量时，再也无法成功建立新的TCP连接。原因一： 本地端口号范围有限制问题出在connect()调用返回失败，查看系统错误提示消息是 “Can’t assign requestedaddress”。同时，如果在此时用 tcpdump 工具监视网络，会发现根本没有TCP连接时客户端发SYN包的网络流量。这些情况说明问题在于本地Linux系统内核中有限制。其实，问题的根本原因在于Linux内核的TCP/IP协议实现模块对系统中所有的客户端TCP连接对应的本地端口号的范围进行了限制(例如间)。当系统中某一时刻同时存在太多的TCP客户端连接时，由于每个TCP客户端连接都要占用一个唯一的本地端，内核限制本地端口号的范围为1024~32768之中)，如果现有的TCP客户端连接已将所有的本地端口号占满，则此时就无法为新的TCP客户端连接分配一个本地端口号了，因此系统会在这种情况下在connect()调用中返回失败，并将错误提示消息设为“Can’t assignrequested address”。有关这些控制逻辑可以查看Linux内核源代码，以linux2.6内核为例，可以查看tcp_ipv4.c文件中如下函数： static int tcp_v4_hash_connect(struct sock *sk) 请注意上述函数中对变量 sysctl_local_port_range 的访问控制。变量 sysctl_local_port_range 的初始化则是在 tcp.c 文件中的如下函数中设置： void __init tcp_init(void) 解决方案: vim /etc/sysctl.conf net.ipv4.ip_local_port_range = 1024 65000 # 端口范围的最大值则应小于或等于65535，理论上单独一个进程最多可以同时建立60000多个TCP客户端连接 sysctl -p 原因二：Linux网络内核的IP_TABLE防火墙对最大跟踪的TCP连接数有限制。此时程序会表现为在 connect()调用中阻塞，如同死机，如果用 tcpdump 工具监视网络，也会发现根本没有 TCP 连接时客户端发 SYN 包的网络流量。由于 IP_TABLE防火墙在内核中会对每个TCP连接的状态进行跟踪，跟踪信息将会放在位于内核内存中的conntrackdatabase中，这个数据库的大小有限，当系统中存在过多的TCP连接时，数据库容量不足，IP_TABLE无法为新的TCP连接建立跟踪信息，于是表现为在connect()调用中阻塞。此时就必须修改内核对最大跟踪的TCP连接数的限制，方法同修改内核对本地端口号范围的限制是类似的： vim /etc/sysctl.conf net.ipv4.ip_conntrack_max = 10240 # 系统对最大跟踪的TCP连接数限制设置为10240，此限制值要尽量小，以节省对内核内存的占用。理论上单独一个进程最多可以同时建立10000多个TCP客户端连接 $ sysctl -p","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"方程组解的充要条件","slug":"history/math/59a7c1e00dba5b0a0dc9b579","date":"2017-08-30T19:59:28.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/59a7c1e00dba5b0a0dc9b579/","link":"","permalink":"https://wangxiuwen.github.io/history/math/59a7c1e00dba5b0a0dc9b579/","excerpt":"","text":"","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"高斯消去","slug":"history/math/59a7b9e40dba5b0a0dc9b578","date":"2017-08-30T19:25:24.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/59a7b9e40dba5b0a0dc9b578/","link":"","permalink":"https://wangxiuwen.github.io/history/math/59a7b9e40dba5b0a0dc9b578/","excerpt":"","text":"","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"三维平面的交点","slug":"history/math/59a67b4e0dba5b0a0dc9b577","date":"2017-08-29T20:46:06.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/59a67b4e0dba5b0a0dc9b577/","link":"","permalink":"https://wangxiuwen.github.io/history/math/59a67b4e0dba5b0a0dc9b577/","excerpt":"","text":"两个平面： 三个平面： 结论：","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"apache 设置环境变量","slug":"history/tech/59a51e2b0dba5b0a0dc9b576","date":"2017-08-28T19:56:27.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59a51e2b0dba5b0a0dc9b576/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59a51e2b0dba5b0a0dc9b576/","excerpt":"","text":"需要在 VirtualHost 标签中： SetEnv PHP_ENV production","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Redis Keyspace Notifications","slug":"history/tech/59a3cf8e0dba5b0a0dc9b575","date":"2017-08-27T20:08:46.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59a3cf8e0dba5b0a0dc9b575/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59a3cf8e0dba5b0a0dc9b575/","excerpt":"","text":"修改redis.conf 或者通过config.set: notify-keyspace-events &quot;Ex&quot; 终端1输入： redis-cli --csv psubscribe '__key*__:*' 另开终端输入 root@test:~# redis-cli 127.0.0.1:6379&gt; setex aaa 5 2 OK 127.0.0.1:6379&gt; 终端1中接收： root@test:~# redis-cli --csv psubscribe '__key*__:*' Reading messages... (press Ctrl-C to quit) &quot;psubscribe&quot;,&quot;__key*__:*&quot;,1 &quot;pmessage&quot;,&quot;__key*__:*&quot;,&quot;__keyevent@0__:expired&quot;,&quot;aaa&quot; 参考资料https://redis.io/topics/notifications http://doc.redisfans.com/topic/notification.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"通过 ip 查询域名的网站","slug":"history/tech/59a2db820dba5b0a0dc9b574","date":"2017-08-27T02:47:30.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59a2db820dba5b0a0dc9b574/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59a2db820dba5b0a0dc9b574/","excerpt":"","text":"http://www.yougetsignal.com/tools/web-sites-on-web-server/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"吉他网站","slug":"history/music/599fb5bc0dba5b0a0dc9b573","date":"2017-08-24T17:29:32.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/599fb5bc0dba5b0a0dc9b573/","link":"","permalink":"https://wangxiuwen.github.io/history/music/599fb5bc0dba5b0a0dc9b573/","excerpt":"","text":"http://www.the-art-of-guitar.com","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"}],"author":"wangxiuwen"},{"title":"vim 在行首或行尾添加字符","slug":"history/tech/599ab5900dba5b0a0dc9b572","date":"2017-08-20T22:27:28.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/599ab5900dba5b0a0dc9b572/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/599ab5900dba5b0a0dc9b572/","excerpt":"","text":"行首 :%s/^/your_word/ 行尾 :%s/$/your_word/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"dubbo类图","slug":"history/tech/5993f76e0dba5b0a0dc9b571","date":"2017-08-15T19:42:38.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5993f76e0dba5b0a0dc9b571/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5993f76e0dba5b0a0dc9b571/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"判断两个平面重合","slug":"history/math/5993e8ca0dba5b0a0dc9b570","date":"2017-08-15T18:40:10.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5993e8ca0dba5b0a0dc9b570/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5993e8ca0dba5b0a0dc9b570/","excerpt":"","text":"从第一个平面找一个点，再从第二个平面找一个点，如果两个点的连线与平面的法向量正交，则两平面为同一平面。注意：最后一对第一个方程式的 z 轴坐标应该是 -7.212，而不是 -7.217。方法：通过变换系数，如果能乘除一个公因子得到相同的方程则为同一平面， 如果只是k不同，则为平行平面。否则为相交平面。","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"ubuntu 异常无法远程登录","slug":"history/tech/59910e660dba5b0a0dc9b56f","date":"2017-08-14T02:43:50.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59910e660dba5b0a0dc9b56f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59910e660dba5b0a0dc9b56f/","excerpt":"","text":"ssh 远程无法连接服务器， 控制台登录查看：这个程序是一个索引扫描进程，会自动在后台启动。主要用来索引软件包的扩展数据，不是系统的必选依赖，对新立得等程序没有影响。直接干掉：apt-get autoremove --purge apt-xapian-index","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"二维空间里的直线","slug":"history/math/5983e8c51f6e62230f2aa012","date":"2017-08-04T03:23:49.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5983e8c51f6e62230f2aa012/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5983e8c51f6e62230f2aa012/","excerpt":"","text":"","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"二维空间的直线交点","slug":"history/math/59842de31f6e62230f2aa013","date":"2017-08-03T20:18:43.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/59842de31f6e62230f2aa013/","link":"","permalink":"https://wangxiuwen.github.io/history/math/59842de31f6e62230f2aa013/","excerpt":"","text":"","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"β系数","slug":"history/math/5982c8cf1f6e62230f2aa011","date":"2017-08-02T18:55:11.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5982c8cf1f6e62230f2aa011/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5982c8cf1f6e62230f2aa011/","excerpt":"","text":"β系数：β系数也称为贝塔系数（Beta coefficient），是一种风险指数，用来衡量个别股票或股票基金相对于整个股市的价格波动情况。 β系数是一种评估证券系统性风险的工具，用以度量一种证券或一个投资证券组合相对总体市场的波动性，在股票、基金等投资术语中常见。 全体市场本身的β系数为1，若基金投资组合净值的波动大于全体市场的波动幅度，则β系数大于1。反之，若基金投资组合净值的波动小于全体市场的波动幅度，则β系数就小于1。","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"数学相关网站","slug":"history/math/5981a4a51f6e62230f2aa010","date":"2017-08-01T22:08:37.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5981a4a51f6e62230f2aa010/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5981a4a51f6e62230f2aa010/","excerpt":"","text":"数学搜索http://www.wolframalpha.com","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"向量叉积","slug":"history/math/597ff0fa1f6e62230f2aa00f","date":"2017-08-01T03:09:46.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/597ff0fa1f6e62230f2aa00f/","link":"","permalink":"https://wangxiuwen.github.io/history/math/597ff0fa1f6e62230f2aa00f/","excerpt":"","text":"概念 练习题","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"pm2 命令行给 app.js 传递参数","slug":"history/tech/597fe0071f6e62230f2aa00e","date":"2017-08-01T01:57:27.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/597fe0071f6e62230f2aa00e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/597fe0071f6e62230f2aa00e/","excerpt":"","text":"传递 -p , 1000:pm2 start app.js -- -p 1000","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"向量的平行与正交","slug":"history/math/597ea8f11f6e62230f2aa00b","date":"2017-07-31T03:50:09.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/597ea8f11f6e62230f2aa00b/","link":"","permalink":"https://wangxiuwen.github.io/history/math/597ea8f11f6e62230f2aa00b/","excerpt":"","text":"概念 题目","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"向量的投影","slug":"history/math/597ef79c1f6e62230f2aa00d","date":"2017-07-30T21:25:48.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/597ef79c1f6e62230f2aa00d/","link":"","permalink":"https://wangxiuwen.github.io/history/math/597ef79c1f6e62230f2aa00d/","excerpt":"","text":"概念：然后衡量从这个角度的箭头v的星等，v将比实际看起来短些，除非v和b完全平行。 计算： 练习：答案：输出结果：","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"扫描局域网IP","slug":"history/tech/597ee5771f6e62230f2aa00c","date":"2017-07-30T20:08:23.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/597ee5771f6e62230f2aa00c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/597ee5771f6e62230f2aa00c/","excerpt":"","text":"windows 显示同一个 VLAN 下的 IP 及其 MAC 地址：arp -a linux 下：nmap -sP 192.168.1.0/24","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"向量的点积(内积)","slug":"history/math/597aa959c2f1375f6de38d52","date":"2017-07-28T03:02:49.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/597aa959c2f1375f6de38d52/","link":"","permalink":"https://wangxiuwen.github.io/history/math/597aa959c2f1375f6de38d52/","excerpt":"","text":"题目：","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"在notepad++中编辑时，将按tab键设置为插入4个空格而不是tab字符","slug":"history/tech/597b0c4ac2f1375f6de38d54","date":"2017-07-27T22:04:58.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/597b0c4ac2f1375f6de38d54/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/597b0c4ac2f1375f6de38d54/","excerpt":"","text":"在notepad++中编辑时，将按tab键设置为插入4个空格而不是tab字符","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"notepad++ tab 转空格","slug":"history/tech/597b0babc2f1375f6de38d53","date":"2017-07-27T22:02:19.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/597b0babc2f1375f6de38d53/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/597b0babc2f1375f6de38d53/","excerpt":"","text":"当前有一文件，所有内容缩进使用的都是tab，当前要将每个tab换成4个空格","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"向量标准化","slug":"history/math/5979affbc2f1375f6de38d51","date":"2017-07-26T21:18:51.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5979affbc2f1375f6de38d51/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5979affbc2f1375f6de38d51/","excerpt":"","text":"概念：寻找给定向量指向同一方向的单位向量，称为向量的标准化。标准化后新向量的长度刚好是1。零向量没有标准化向量。向量长度：v是n维空间的向量(向量两边有双斜杠表示大小) 范数","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"}],"author":"wangxiuwen"},{"title":"ERROR 1805 (HY000)","slug":"history/tech/59798f1008fdf0bf0c7c96df","date":"2017-07-26T18:58:24.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59798f1008fdf0bf0c7c96df/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59798f1008fdf0bf0c7c96df/","excerpt":"","text":"报错：ERROR 1805 (HY000): Column count of mysql.user is wrong. Expected 45, found 43. The table is probably corrupted 解决方案：mysql_upgrade -u root -p 13456","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"基础线性代数代码","slug":"history/math/5979835708fdf0bf0c7c96de","date":"2017-07-26T18:08:23.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/math/5979835708fdf0bf0c7c96de/","link":"","permalink":"https://wangxiuwen.github.io/history/math/5979835708fdf0bf0c7c96de/","excerpt":"","text":"https://github.com/wangxiuwen/linear_algebra.git","categories":[{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"math","slug":"math","permalink":"https://wangxiuwen.github.io/tags/math/"},{"name":"数学","slug":"数学","permalink":"https://wangxiuwen.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"线性代数基础","slug":"线性代数基础","permalink":"https://wangxiuwen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E7%A1%80/"}],"author":"wangxiuwen"},{"title":"机器学习资源","slug":"history/tech/59785dac08fdf0bf0c7c96dd","date":"2017-07-25T21:15:24.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59785dac08fdf0bf0c7c96dd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59785dac08fdf0bf0c7c96dd/","excerpt":"","text":"机器学习日报机器学习入门资源不完全汇总UFLDL教程机器学习资源站吴恩达在线习题，在线编程题等整理吴恩达习题 koala_tree吴恩达习题 justry24用 Python 进行实用机器学习教程fast.ai斯坦福机器学习Deep Learning 中文翻译Deep Learning 原版aqinet 人工智能论坛","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"openvpn设置固定ip","slug":"history/tech/597717cc08fdf0bf0c7c96dc","date":"2017-07-24T22:05:00.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/597717cc08fdf0bf0c7c96dc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/597717cc08fdf0bf0c7c96dc/","excerpt":"","text":"配置文件：vim /etc/openvpn/server.conf 增加：client-config-dir /etc/openvpn/ccd 然后在 /etc/openvpn/ccd 目录中放针对每个客户端的个性化配置文件。文件名就用客户端名 生成 key 的时候输入的 “Common Name” 名字比如要设置客户端 zhangsan 为 192.168.77.7只要在 /etc/openvpn/ccd/zhangsan 文件中包含一行:ifconfig-push 192.168.77.7 255.255.255.0","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 17.04 系统里面没有 rc.local","slug":"history/tech/5976fd3c08fdf0bf0c7c96db","date":"2017-07-24T20:11:40.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5976fd3c08fdf0bf0c7c96db/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5976fd3c08fdf0bf0c7c96db/","excerpt":"","text":"新安装 ubuntu 17.04，发现系统里没有 rc.local, 原因是 rc.local 服务化了。解决方法：首先创建systemd的服务脚本 vim /etc/systemd/system/rc-local.service [Unit] Description=/etc/rc.local Compatibility ConditionPathExists=/etc/rc.local [Service] Type=forking ExecStart=/etc/rc.local start TimeoutSec=0 StandardOutput=tty RemainAfterExit=yes SysVStartPriority=99 #sysVstart这行可以删掉，我看启动日志中貌似报忽略这个了。。 [Install] WantedBy=multi-user.target 执行： systemctl enable rc-local.service touch /etc/rc.local chmod +x /etc/rc.local 然后按以前的格式编辑 /etc/rc.local 就好了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu修改dash 为 bash","slug":"history/tech/5976fb4c08fdf0bf0c7c96da","date":"2017-07-24T20:03:24.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5976fb4c08fdf0bf0c7c96da/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5976fb4c08fdf0bf0c7c96da/","excerpt":"","text":"如果要修改默认的sh，可以采用命令 sudo dpkg-reconfigure dash 然后选择【否】成功后执行 ls -l /bin/sh 结果是：/bin/sh -&gt; bash","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"VMware ESXi 虚拟硬盘格式:厚置备延迟置零、厚置备置零、精简置备","slug":"history/tech/5976ed1708fdf0bf0c7c96d9","date":"2017-07-24T19:02:47.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5976ed1708fdf0bf0c7c96d9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5976ed1708fdf0bf0c7c96d9/","excerpt":"","text":"创建磁盘时，会进行两个操作：分配空间、置零厚置备延迟置零：默认的创建格式，创建磁盘时，直接从磁盘分配空间，但对磁盘保留数据不置零。所以当有I/O操作时，只需要做置零的操作。磁盘性能较好，时间短，适合于做池模式的虚拟桌面厚置备置零（thick）：创建群集功能的磁盘。创建磁盘时，直接从磁盘分配空间，并对磁盘保留数据置零。所以当有I/O操作时，不需要等待直接执行。磁盘性能最好，时间长，适合于做跑运行繁重应用业务的虚拟机精简置备（thin）：创建磁盘时，占用磁盘的空间大小根据实际使用量计算，即用多少分多少，提前不分配空间，对磁盘保留数据不置零，且最大不超过划分磁盘的大小。所以当有I/O操作时，需要先分配空间，在将空间置零，才能执行I/O操作。当有频繁I/O操作时，磁盘性能会有所下降I/O不频繁时，磁盘性能较好；I/O频繁时，磁盘性能较差。时间短，适合于对磁盘I/O不频繁的业务应用虚拟机","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"vmware esxi 折腾记录","slug":"history/tech/5974ad6808fdf0bf0c7c96d8","date":"2017-07-23T02:06:32.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5974ad6808fdf0bf0c7c96d8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5974ad6808fdf0bf0c7c96d8/","excerpt":"","text":"先看一下 vmware 的各组件的架构图只要安装esxi 就可以实现服务器虚拟化了，分两步第一步：开机 F10-建立逻辑分区 第二步重启后，使用","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Confluence pdf 丢失中文","slug":"history/tech/5974ac5a08fdf0bf0c7c96d7","date":"2017-07-23T02:02:02.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5974ac5a08fdf0bf0c7c96d7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5974ac5a08fdf0bf0c7c96d7/","excerpt":"","text":"需要在Confluence-全局配置-PDF导出语言支持中上传一个中文字体。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mac 开启 ftp","slug":"history/tech/596f84385a209ca30c8a60bc","date":"2017-07-20T04:09:28.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596f84385a209ca30c8a60bc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596f84385a209ca30c8a60bc/","excerpt":"","text":"开启：sudo -s launchctl load -w /System/Library/LaunchDaemons/ftp.plist 关闭：sudo -s launchctl unload -w /System/Library/LaunchDaemons/ftp.plist 访问：ftp://localhost/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"No module named SimpleHTTPServer","slug":"history/tech/596f83805a209ca30c8a60bb","date":"2017-07-20T04:06:24.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596f83805a209ca30c8a60bb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596f83805a209ca30c8a60bb/","excerpt":"","text":"使用 SimpleHTTPServer:1python -m SimpleHTTPServer报错：1234 No module named SimpleHTTPServer``` 解决：python -m http.server","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"大数据 sql 平台 impala","slug":"history/tech/596ea8b05a209ca30c8a60b9","date":"2017-07-19T00:32:48.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596ea8b05a209ca30c8a60b9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596ea8b05a209ca30c8a60b9/","excerpt":"","text":"impala","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"devops 工具","slug":"history/tech/596ea8925a209ca30c8a60b8","date":"2017-07-19T00:32:18.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596ea8925a209ca30c8a60b8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596ea8925a209ca30c8a60b8/","excerpt":"","text":"chef, puppet, saltstack, ansible","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"es 数据导出","slug":"history/tech/596f119c5a209ca30c8a60ba","date":"2017-07-18T20:00:28.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596f119c5a209ca30c8a60ba/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596f119c5a209ca30c8a60ba/","excerpt":"","text":"方案1：https://github.com/taskrabbit/elasticsearch-dump方案2：https://github.com/medcl/elasticsearch-migration这里使用方案1（方案2报错没时间研究了）安装 elasticdumpnpm install elasticdump -g 导出：elasticdump --input=http://192.168.1.100:9200/test --output=./my_index.json --type=data 导入：elasticdump --input=./my_index.json --output=http://192.168.1.100:9200/test --type=data","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"open-falcon 折腾记录","slug":"history/tech/596e23795a209ca30c8a60b7","date":"2017-07-18T03:04:25.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596e23795a209ca30c8a60b7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596e23795a209ca30c8a60b7/","excerpt":"","text":"Open-Falcon的开源社区:官网: http://open-falcon.orgGithub: https://github.com/open-falconQQ讨论组: 373249123 / 516088946 / 469342415微信公众号: OpenFalcon falcon-plus 安装按照官方文档操作报错：Makefile:47: recipe for target 'graph' failed falcon issue 地址：https://github.com/open-falcon/falcon-plus/issues/169 解决方案：git clone https://github.com/open-falcon/rrdlite $GOPATH/src/github.com/open-falcon/rrdlite 设置端口：vim /usr/local/open-falcon/api/config/cfg.json &quot;web_port&quot;: &quot;0.0.0.0:8060&quot; Dashboard 安装报错： Modules/errors.h:8:18: fatal error: lber.h: No such file or directory compilation terminated. error: command 'x86_64-linux-gnu-gcc' failed with exit status 1 解决：apt install ldap-auth-config apt-get install libldap2-dev apt-get install libsasl2-dev 测试环境设置端口：vim wsgi.py app.run(host=&quot;0.0.0.0&quot;, port=8061, debug=True) 正式环境：vim gunicorn.conf bind = ':8061' 找了半天没找到密码，后来发现右上角有个注册，注册后即可登录。接入 openldap 报错：SimpleLDAPObject has no attribute '_l' 明天接着折腾。。。。。。。。。。。中文文档https://www.gitbook.com/book/laiwei/open-falcon/details","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ubuntu 安装 openVPN 服务端","slug":"history/tech/596e17535a209ca30c8a60b6","date":"2017-07-18T02:12:35.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596e17535a209ca30c8a60b6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596e17535a209ca30c8a60b6/","excerpt":"","text":"安装openvpnapt-get update apt-get install openvpn apt install easy-rsa 配置服务器 初始化服务端gzip -d /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf /etc/openvpn/ cp -r /usr/share/easy-rsa/* /etc/openvpn 配置PKIcd /etc/openvpn/ vim vars 找到“export KEY_SIZE=”这行，根据情况把1024改成2048或者4096再定位到最后面，会看到类似下面这样的export KEYCOUNTRY=&quot;US&quot; export KEYPROVINCE=&quot;CA&quot; export KEYCITY=&quot;SanFrancisco&quot; export KEYORG=&quot;Fort-Funston&quot; export &lt;KEY_EMAIL=&quot;me@myhost.mydomain&quot;&gt; 这个自己根据情况改一下，不改也可以运行。其实不改vars这个文件，vpn也可以跑起来。例如：export KEYCOUNTRY=&quot;CN&quot; export KEYPROVINCE=&quot;SH&quot; export KEYCITY=&quot;Shanghai&quot; export KEYORG=&quot;ds-mc.cn&quot; export &lt;KEY_EMAIL=&quot;xxx@ds-mc.cn&quot;&gt; 注：在后面生成服务端ca证书时，这里的配置会作为缺省配置修改vars文件可执行并调用chmod +x vars 产生证书 产生CA证书source ./vars NOTE: If you run ./clean-all, I will be doing a rm -rf on /etc/openvpn/keys注：也就是如果执行./clean-all，就会清空/etc/openvpn/keys下所有文件开始配置证书：清空原有证书./clean-all 注：下面这个命令在第一次安装时可以运行，以后在添加完客户端后慎用，因为这个命令会清除所有已经生成的证书密钥，和上面的提示对应生成服务器端ca证书./build-ca 注：由于之前做过缺省配置，这里一路回车即可产生服务器证书./build-key-server openvpn.ds-mc.cn 生成DH验证文件./build-dh 生成客户端证书./build-key client1 （名字任意，建议写成你要发给的人的姓名，方便管理）注：这里与生成服务端证书配置类似，中间一步提示输入服务端密码，其他按照缺省提示一路回车即可。生成ta.key文件openvpn --genkey --secret /etc/openvpn/keys/ta.key 编辑服务配置文件vim /etc/openvpn/server.conf # 设置监听IP，默认是监听所有IP ;local a.b.c.d # 设置监听端口，必须要对应的在防火墙里面打开 port 1194 # 设置用TCP还是UDP协议？ ;proto tcp proto tcp # 设置创建tun的路由IP通道，还是创建tap的以太网通道，由于路由IP容易控制，所以推荐使用tunnel； # 但如果如IPX等必须使用第二层才能通过的通讯，则可以用tap方式，tap也就是以太网桥接 ;dev tap dev tun # 这里是重点，必须指定SSL/TLS root certificate (ca), # certificate(cert), and private key (key) # ca文件是服务端和客户端都必须使用的，但不需要ca.key # 服务端和客户端指定各自的.crt和.key # 请注意路径,可以使用以配置文件开始为根的相对路径, # 也可以使用绝对路径 # 请小心存放.key密钥文件 ca keys/ca.crt cert keys/openvpn.example.com.crt key keys/openvpn.example.com.key # This file should be kept secret # 指定Diffie hellman parameters. (默认是2048，如果生成ca的时候修改过dh参数&quot;export KEY_SIZE&quot;，则改为对应的数字) dh keys/dh1024.pem # 配置VPN使用的网段，OpenVPN会自动提供基于该网段的DHCP服务，但不能和任何一方的局域网段重复，保证唯一 server 10.8.0.0 255.255.255.0 # 维持一个客户端和virtual IP的对应表，以方便客户端重新连接可以获得同样的IP ifconfig-pool-persist ipp.txt # 为客户端创建对应的路由,以另其通达公司网内部服务器 # 但记住，公司网内部服务器也需要有可用路由返回到客户端 ;push &quot;route 192.168.20.0 255.255.255.0&quot; push &quot;route 10.X.0.0 255.255.0.0&quot; （其中X按照机房的网段修改） # 若客户端希望所有的流量都通过VPN传输,则可以使用该语句 # 其会自动改变客户端的网关为VPN服务器,推荐关闭 # 一旦设置，请小心服务端的DHCP设置问题 ;push &quot;redirect-gateway def1 bypass-dhcp&quot; # 用OpenVPN的DHCP功能为客户端提供指定的DNS、WINS等 ;push &quot;dhcp-option DNS 208.67.222.222&quot; ;push &quot;dhcp-option DNS 208.67.220.220&quot; # 默认客户端之间是不能直接通讯的，除非把下面的语句注释掉 client-to-client # 下面是一些对安全性增强的措施 # For extra security beyond that provided by SSL/TLS, create an &quot;HMAC firewall&quot; # to help block DoS attacks and UDP port flooding. # # Generate with: # openvpn --genkey --secret ta.key # # The server and each client must have a copy of this key. # The second parameter should be 0 on the server and 1 on the clients. ;tls-auth ta.key 0 # This file is secret (这句要注释掉) # 使用lzo压缩的通讯,服务端和客户端都必须配置 comp-lzo # 输出短日志,每分钟刷新一次,以显示当前的客户端 status /var/log/openvpn/openvpn-status.log # 缺省日志会记录在系统日志中，但也可以导向到其他地方 # 建议调试的使用先不要设置,调试完成后再定义 log /var/log/openvpn/openvpn.log log-append /var/log/openvpn/openvpn.log # 设置日志的级别 # # 0 is silent, except for fatal errors # 4 is reasonable for general usage # 5 and 6 can help to debug connection problems # 9 is extremely verbose verb 3 下面是 server.conf 的实际配置文件port 1194 proto udp dev tun ca keys/ca.crt cert keys/openvpn.ds-mc.cn.crt key keys/openvpn.ds-mc.cn.key dh keys/dh2048.pem server 192.168.66.0 255.255.255.0 push &quot;route 10.0.177.0 255.255.255.0&quot; ifconfig-pool-persist ipp.txt client-to-client keepalive 10 20 duplicate-cn comp-lzo persist-key persist-tun status /var/log/openvpn/openvpn-status.log log /var/log/openvpn/openvpn.log log-append /var/log/openvpn/openvpn.log verb 3 crl-verify /etc/openvpn/keys/crl.pem 启动服务service openvpn start 或者/etc/init.d/openvpn start 如果遭遇启动失败的情况，可以在配置文件中加上一行log-append openvpn.log再尝试启动，然后到/var/log/openvpn/检查openvpn.log文件来查看错误发生原因。开启路由转发功能vim /etc/sysctl.conf net.ipv4.ip_forward = 1 sysctl -p 设置iptables（这一条至关重要，通过配置nat将vpn网段IP转发到server内网）iptables -t nat -A POSTROUTING -s 10.20.0.0/24 -o eth0 -j MASQUERADE 设置openvpn端口通过iptables -A INPUT -p UDP --dport 1194 -j ACCEPT iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT 这边需要注意的是Debian/Ubuntu上iptables是不会保存规则的。需要按如下步骤进行配置，让网卡关闭时保存iptables规则，启动时加载iptables规则：创建/etc/network/if-post-down.d/iptables 文件vim /etc/network/if-post-down.d/iptables #!/bin/bash iptables-save &gt; /etc/iptables.rules chmod +x /etc/network/if-post-down.d/iptables 创建/etc/network/if-pre-up.d/iptables 文件vim /etc/network/if-pre-up.d/iptables #!/bin/bash iptables-restore &lt; /etc/iptables.rules chmod +x /etc/network/if-pre-up.d/iptables 客户端配置将服务器端生成的key（ca.crt，client.crt，client.key）下载到本地。进入客户端OpenVPN目录，将sample-config下的client.ovpn文件复制到config目录，client端做相应的修改：client dev tun proto udp remote xxx.xxx.xxx.xxx 1194 ca ca.crt cert xxx.crt key xxx.key ;tls-auth ta.key 0 (这句要注释掉) comp-lzo user nobody group nobody persist-key persist-tun Windows客户端下载地址：http://openvpn.net/index.php/download.htmlhttp://swupdate.openvpn.org/community/releases/openvpn-2.2.2-install.exe将key和新建的client.ovpn放到C:/Program Files/OpenVPN/config目录下，到桌面双击openvpn图标即可。Mac客户端https://code.google.com/p/tunnelblick/1.打开Tunnelblick2.点击左下角+3.我有设置文件4.OpenVPN设置5.打开私人设置文件夹6.将key和新建的client.ovpn放到此目录下Linux客户端apt install openvpn openvpn --daemon --config client.ovpn","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"决策树与随机森林","slug":"history/tech/596d30425a209ca30c8a60b2","date":"2017-07-17T21:46:42.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596d30425a209ca30c8a60b2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596d30425a209ca30c8a60b2/","excerpt":"","text":"信息熵熵，联合熵，条件熵，互信息决策树信息增益ID3、C4.5、CART(classification and Regression Tree)Bagging 与随机森林CARTclassification &amp; Regression Tree树的深度过深容易过拟合联合概率 边缘概率php 决策树","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"author":"wangxiuwen"},{"title":"openvpn 配置参数","slug":"history/tech/596d2cd45a209ca30c8a60b1","date":"2017-07-17T21:32:04.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596d2cd45a209ca30c8a60b1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596d2cd45a209ca30c8a60b1/","excerpt":"","text":"服务端 server.conf 配置文件:#openvpn的默认监听端口 port 1194 #默认使用的协议 proto udp #采用路由模式，不过使用的却是tap dev tap #验证客户端证书是否合法 ca /etc/openvpn/easy-rsa/2.0/keys/ca.crt #server端使用的证书 cert /etc/openvpn/easy-rsa/2.0/keys/server.crt key /etc/openvpn/easy-rsa/2.0/keys/server.key #dh文件 dh /etc/openvpn/easy-rsa/2.0/keys/dh1024.pem #设定server端虚拟出来的网段 server 10.8.9.0 255.255.255.0 #防止Openvpn 重启后忘记client端曾经使用过的IP地址 ifconfig-pool-persist ipp.txt #给客户端push一条路由 push &quot;route 192.168.250.0 255.255.255.0&quot; #客户端所在的子网网段 route 10.1.1.0 255.255.255.0 #Nat后面使用VPN，如果长时间不通信，NAT session 可能会失效，导致vpn连接丢失。#所有keepalive提供一个类似ping的机制，每10秒通过vpn的control通道ping对方， #如果120秒无法ping通，则认为丢失，并重启vpn,重新连接。 keepalive 10 120 #可以让vpn的client之间互相访问，直接通过openvpn程序转发 client-to-client #允许多个客户端使用同一个证书连接服务端 duplicate-cn #对数据进行压缩，注意server和client 一致 comp-lzo #通过keepalive检测超时后，重新启动vpn，不重新读取keys,保留第一次使用的keys persist-key #通过keepalive检测超时后,重新启动vpn,一直保持tun或tap设备是linkup的，否则网络连接会先linkdown然后linkup persist-tun #把openvpn的状态写入日志中 status openvpn-status.log #openvpn的log log openvpn.log #openvpn重启后会删除log内容，log-append则是追加log内容，并不删除。 log-append openvpn.log #日志记录级别 verb 5 客户端配置文件:vi /etc/openvpn/client.conf #指定openvpn为客户端 client dev tap proto udp #openvpn服务端的IP地址和端口，如果有多台服务端做负载均衡，则可以出现多个#remote remote 10.1.1.174 1194 #始终重新解析Server的IP地址，如果remote后面跟的是域名，保证Server IP地址是动#态的使用DDNS动态更新DNS后，Client在自动重新连接时重新解析Server的IP地址，这#样无需人为重新启动，即可重新接入VPN resolv-retry infinite #在本机不绑定任何端口监听进入的数据 nobind persist-key persist-tun ca ca.crt cert client.crt key client.key ns-cert-type server comp-lzo verb 3 针对多个客户端的OpenVPN 2.0 的客户端配置文件示例 ############################################# # 针对多个客户端的OpenVPN 2.0 的客户端配置文件示例 # # 该配置文件可以被多个客户端使用，当然每个客户端都应该有自己的证书和密钥文件 # # 在Windows上此配置文件的后缀应该是&quot;.ovpn&quot;，在Linux/BSD系统中则是&quot;.conf&quot; ############################################## # 指定这是一个客户端，我们将从服务器获取某些配置文件指令 client # 在大多数系统中，除非你部分禁用或者完全禁用了TUN/TAP接口的防火墙，否则VPN将不起作用。 ;dev tap dev tun # 在Windows系统中，如果你想配置多个隧道，则需要该指令。 # 你需要用到网络连接面板中TAP-Win32适配器的名称(例如&quot;MyTap&quot;)。 # 在XP SP2或更高版本的系统中，你可能需要禁用掉针对TAP适配器的防火墙。 ;dev-node MyTap # 指定连接的服务器是采用TCP还是UDP协议。 # 这里需要使用与服务器端相同的设置。 ;proto tcp proto udp # 指定服务器的主机名(或IP)以及端口号。 # 如果有多个VPN服务器，为了实现负载均衡，你可以设置多个remote指令。 remote my-server-1 1194 ;remote my-server-2 1194 # 如果指定了多个remote指令，启用该指令将随机连接其中的一台服务器， # 否则，客户端将按照指定的先后顺序依次尝试连接服务器。 ;remote-random # 启用该指令，与服务器连接中断后将自动重新连接，这在网络不稳定的情况下(例如：笔记本电脑无线网络)非常有用。 resolv-retry infinite # 大多数客户端不需要绑定本机特定的端口号 nobind # 在初始化完毕后，降低OpenVPN的权限(该指令仅限于非Windows系统中使用) ;user nobody ;group nobody # 持久化选项可以尽量避免访问在重启时由于用户权限降低而无法访问的某些资源。 persist-key persist-tun # 如果你是通过HTTP代理方式来连接到实际的VPN服务器，请在此处指定代理服务器的主机名(或IP)和端口号。 # 如果你的代理服务器需要身份认证，请参考官方手册页面。 ;http-proxy-retry # 连接失败时自动重试 ;http-proxy [proxy server] [proxy port #] # 无线网络通常会产生大量的重复数据包。设置此标识将忽略掉重复数据包的警告信息。 ;mute-replay-warnings # SSL/TLS 参数配置。 # 更多描述信息请参考服务器端配置文件。 # 最好为每个客户端单独分配.crt/.key文件对。 # 单个CA证书可以供所有客户端使用。 ca ca.crt cert client.crt key client.key # 指定通过检查证书的nsCertType字段是否为&quot;server&quot;来验证服务器端证书。 # 这是预防潜在攻击的一种重要措施。 # # 为了使用该功能，你需要在生成服务器端证书时，将其中的nsCertType字段设为&quot;server&quot; # easy-rsa文件夹中的build-key-server脚本文件可以达到该目的。 ns-cert-type server # 如果服务器端使用了tls-auth密钥，那么每个客户端也都应该有该密钥。 ;tls-auth ta.key 1 # 指定密码的加密算法。 # 如果服务器端启用了cipher指令选项，那么你必须也在这里指定它。 ;cipher x # 在VPN连接中启用压缩。 # 该指令的启用/禁用应该与服务器端保持一致。 comp-lzo # 设置日志文件冗余级别(0~9)。 # 0 表示静默运行，只记录致命错误。 # 4 表示合理的常规用法。 # 5 和 6 可以帮助调试连接错误。 # 9 表示极度冗余，输出非常详细的日志信息。 verb 3 # 忽略过多的重复信息。 # 相同类别的信息只有前20条会输出到日志文件中。 ;mute 20","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"初始化 mongodb","slug":"history/tech/596daf015a209ca30c8a60b5","date":"2017-07-17T18:47:29.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596daf015a209ca30c8a60b5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596daf015a209ca30c8a60b5/","excerpt":"","text":"mongodb shell 执行 use admin db.createUser( { &quot;user&quot; : &quot;admin&quot;, &quot;pwd&quot;: &quot;123456&quot;, &quot;roles&quot; : [ { &quot;role&quot; : &quot;__system&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;backup&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;clusterAdmin&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;clusterManager&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;clusterMonitor&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;dbAdmin&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;dbAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;dbOwner&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;enableSharding&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;hostManager&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;read&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;readAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;readWrite&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;readWriteAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;restore&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;root&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;userAdmin&quot;, &quot;db&quot; : &quot;admin&quot; }, { &quot;role&quot; : &quot;userAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; } ] } );","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"mysql 镜像","slug":"history/tech/596da1df5a209ca30c8a60b4","date":"2017-07-17T17:51:27.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596da1df5a209ca30c8a60b4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596da1df5a209ca30c8a60b4/","excerpt":"","text":"souhu 镜像http://mirrors.sohu.com/mysql/MySQL-5.7/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"bootstrap","slug":"history/tech/596da1cf5a209ca30c8a60b3","date":"2017-07-17T17:51:11.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596da1cf5a209ca30c8a60b3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596da1cf5a209ca30c8a60b3/","excerpt":"","text":"bootstrap 清除样式","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"吉他资源","slug":"history/music/59699ef7388dc1a03e20106e","date":"2017-07-15T04:49:59.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/59699ef7388dc1a03e20106e/","link":"","permalink":"https://wangxiuwen.github.io/history/music/59699ef7388dc1a03e20106e/","excerpt":"","text":"studio guitar tuning tuningOpen Tunings for Rock And Metal++ Naomi Campbell Flaunts Her Supermodel Figure for L’Officiel Ukraine by An Le++ Van Weelden Royal Overdrive+++ Blog | Jamtrackcentral+++ Guitare :: improvisation - improviser à la guitare+++ Top 5 Heavy Rig Rundowns | Premier Guitar*++++ Guitar School Garden | Cours de guitare gratuits en ligne**++++ Guitariste Metal - Interviews, Cours, Tests, Concours et plus !*108 Rock Star Guitars | Premier Guitar3ème pilier : montant du versement maximum, imposition et retrait - www.ch.ch50 steps to better electric guitar tone | 50 steps to better guitar tone | MusicRadar50 ways to become a better guitarist | Think outside the box | MusicRadarA tribute to MAchieving the Right Balance Between Volume and ToneAllen Hinds testing the Royal Overdrive by Peter van Weelden pt 2 - YouTubeAmazon.com: Lanikai LU-11 Soprano Ukulele: Musical InstrumentsApprendre à jouer de la guitare en ligne | HGuitare.comAsile ParisAvis de Les Cowboys Etanches - Novation Launchpad - AudiofanzineBondage Film featuring Miley CyrusBrainworx | bx_rockrackBridge (music) - Wikipedia, the free encyclopediaChoosing the Right Mics for your Studiochuckdaloiamusic.comConnect With Your Favorite Guitarists | FRET12Dart: Structured web appsDavid Gilmour’s 10 Weirdest RecordingsDavid Mead: Guitar Gym iOS AppDemeter TGA-1-180D Mighty Minnie Review | Premier GuitarDigging Deeper: Pentatonic Chords | 2014-04-10 | Premier GuitarDunlop Blog » How to Install the Straplok® Strap Retainer System: A Step by Step PictorialDunlop Blog » The Distortion Guide (for Non-Engineers)Everything You Ever Wanted to Know About Preamp TubesEVH® Product InformationFearedFidelity | Bimbo Story Clubfilter - larsjung.de &gt; h5ai &gt; demo &gt; filterForgotten Heroes: Emily Remler | Premier GuitarFree Lessonsfreestompboxes.org • Index pageFretboard Workshop: 10 Essential Turnarounds | 2013-12-13 | Premier GuitarFuture Rock: Shred Those Sequences | 2013-11-27 | Premier GuitarGary Clark Jr.: The Next Texas Flood | Fender Artist NewsGtpTabs.com - Guitar Pro TabsGuitar Adoptions - WallpaperGuitar Backing Tracks - YouTubeGuitar FX LayoutsGuitar Lovers | Gitarren Enzyklopädie | Guitar Encyclopediaguitar moderne | The Zine for Adventurous GuitaristsGuitar Shop 101: The Great Guitar Cleanup | Premier GuitarGuitar Tracks: Building a Mix | 2013-10-14 | Premier Guitarguitarforce.comHELIUMHome | JamtrackcentralHot-Rod Your Electric: Tiny Tone Tweaks, Done Dirt CheapHow to Balance Pickups on Strats and Teles - Premier GuitarHow to fix loose output jack on guitar with JackTight ToolsHow to Order Production Models | .strandberg* GuitarsHow to sound like Jerry Cantrell | I Heart GuitarHTML EntitiesInterview MagazineJobfactory Guitarcare - HomeJohnny A. “Krea Gata” 8-17-13 - YouTubeJulia Anna Gospodarou - Architect | B&amp;W Fine Art PhotographerJulia Anna Gospodarou | Fine Art PhotographyKeira Knightley poses topless for Interview Magazine (Glamour.com UK)La Révolution DeuxLearn to Play the Piano with the PianoMaestro USB Learning DeviceList of musical symbols - Wikipedia, the free encyclopediaLoog Guitars | The Best Guitars For ChildrenMetal Guitar Covers | A place for metal-heads and music-lovers alike.MMA Home PageMod Garage: Humbucker Height Adjustment | Premier GuitarMod Kits DIY Introduces the Aggressor | 2014-09-03 | Premier GuitarMusica VivaMusik Olar: Musikinstrumente Import Grosshandel VertriebNews Xotic lance une petite pédale Wah Wah - AudiofanzineOliver Ackermann: Death By Audio | Tape Op - the Creative Music Recording MagazineOWASP Zed Attack Proxy Project - OWASPpeggo - Record MP3s from YouTube and SoundCloudPiano Tutorials - Piano and Math Tutorialsplaythisriff.comPower Chords - Guitar NoisePremier Guitar - Premier Clinic - Premier Guitar magazine has the latest in guitar information and equipment along with music interviews, product reviews and much more.Rhythm Guitar For Intermediate To Advanced Players | Lessons @ Ultimate-Guitar.ComRhythm Rules: 6 Essential Exercises to Improve Your Groove | 2013-07-22 | Premier GuitarRhythm Rules: Syncopated 16th-Note Rhythms | Premier GuitarRiff of the Week® | RiffOfTheWeek.com | got riffs?™Riffstation - Amazing Guitar SoftwareRig Rundown: Adrian Belew | Premier GuitarRig Rundown: The Sword | Premier GuitarRobert BakersecSecrets of Signal FlowSellThisGuitar.comShredmental: Hell-Bent for Rhythm! | 2014-12-19 | Premier GuitarSix-String Samurai | Gear talk for the GAS-afflicted.Speed Playing | Lessons @ Ultimate-Guitar.ComStyle Guide: All About Arpeggios | 2014-02-14 | Premier GuitarStyle Guide: Essential Blues Progressions | 2013-09-13 | Premier GuitarTech 21 Fly Rig 5 Review | Premier GuitarTempleboards - Pedalboards - Zubehör - GitarrenoaseTerminologie du jazz — WikipédiaThe 50 greatest guitar tones of all time… ever! | David Gilmour - Comfortably Numb, Pink Floyd: The Wall (1979) | MusicRadarThe Gibson Interview: Mastodon’s Bill Kelliher on His ‘Golden Axe’ ExplorerThe Guitarist’s Guide to Writing Charts | 2014-11-28 | Premier GuitarTHE HIDDEN MASTERSThe Mattson 2: Twinterconnectivity | Premier GuitarThe Quest for Good Guitar ToneThe Recording Guitarist: Dances with Compressors | Premier GuitarThe Road Guitarist’'s StudioTone-Guard® HomeTutorial | HydrogenVox StompLab IG | Guitar Reviews | MusicRadarWampler Pedals | Hand Made Boutique Guitar Effect Pedals | Heritage Series | Plexi-DrivewatchWelcome to Impro-VisorWILDSIDETRIBUTE.COM | Tribute to Motley CrueWonderful Watersportswww.riffstation.comwww.vanweelden.com 伴奏 (backing tracks)Custom Backing Tracks - Guitar, Drums, Piano, Bass - Karaoke VersionFree Guitar Backing Tracks @ GuitarBackingTrack.comMon premier bluesNew Backing Tracksbona jam - YouTube++ db loops Blues - Volume 1 - db loops loopingIn The Loop: An Introduction to Looping | Guitar Worldguitar loop tutorial - Google SearchHow to Use a Looper Pedal: Basics - Guitar Gear FinderLooping Tips and TricksNail The Timing On Your First Loop | Looping Live","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"}],"author":"wangxiuwen"},{"title":"ldap-account-manager 安装","slug":"history/tech/596821e02139e0ad358b591a","date":"2017-07-14T01:44:00.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596821e02139e0ad358b591a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596821e02139e0ad358b591a/","excerpt":"","text":"官网：https://www.ldap-account-manager.org/lamcms/https://www.ldap-account-manager.org/static/doc/manual/index.html报错:Your PHP has no LDAP support! Please install the LDAP extension for PHP. Your PHP has no XML support! Please install the XML extension for PHP. Your PHP has no ZIP support. Please install the ZIP extension for PHP. 解决:apt install php-ldap apt install php-xml apt install php-zip 安装完毕后，可以调整通用设置输入默认密码:lam","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"linux 内核参数优化","slug":"history/tech/59686581388dc1a03e20106d","date":"2017-07-13T18:32:33.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59686581388dc1a03e20106d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59686581388dc1a03e20106d/","excerpt":"","text":"如下：vm.swappiness = 0 net.ipv4.neigh.default.gc_stale_time=121 net.ipv4.conf.all.rp_filter=1 net.ipv4.conf.default.rp_filter=1 net.ipv4.conf.default.arp_announce = 2 net.ipv4.conf.all.arp_announce=2 net.ipv4.tcp_max_tw_buckets = 5111 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_max_syn_backlog = 1124 net.ipv4.tcp_synack_retries = 2 net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1 net.ipv4.conf.lo.arp_announce=2 fs.file-max=65535 fs.inotify.max_user_instances = 8192 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_fin_timeout = 31 net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_tw_recycle = 1 net.ipv4.ip_local_port_range = 1124 65111 net.ipv4.tcp_max_syn_backlog = 65536 net.ipv4.tcp_max_tw_buckets = 6111 net.ipv4.route.gc_timeout = 111 net.ipv4.tcp_syn_retries = 1 net.ipv4.tcp_synack_retries = 1 net.core.somaxconn = 65535 net.core.netdev_max_backlog = 262144 net.ipv4.tcp_timestamps = 0 net.ipv4.tcp_max_orphans = 262144 net.ipv4.ip_forward = 1 vm.max_map_count=262144 默认配置文件:# # /etc/sysctl.conf - Configuration file for setting system variables # See /etc/sysctl.d/ for additional system variables. # See sysctl.conf (5) for information. # #kernel.domainname = example.com # Uncomment the following to stop low-level messages on console #kernel.printk = 3 4 1 3 ##############################################################3 # Functions previously found in netbase # # Uncomment the next two lines to enable Spoof protection (reverse-path filter) # Turn on Source Address Verification in all interfaces to # prevent some spoofing attacks # Uncomment the next line to enable TCP/IP SYN cookies # See http://lwn.net/Articles/277146/ # Note: This may impact IPv6 TCP sessions too # Uncomment the next line to enable packet forwarding for IPv4 #net.ipv4.ip_forward=1 # Uncomment the next line to enable packet forwarding for IPv6 # Enabling this option disables Stateless Address Autoconfiguration # based on Router Advertisements for this host #net.ipv6.conf.all.forwarding=1 ################################################################### # Additional settings - these settings can improve the network # security of the host and prevent against some network attacks # including spoofing attacks and man in the middle attacks through # redirection. Some network environments, however, require that these # settings are disabled so review and enable them as needed. # # Do not accept ICMP redirects (prevent MITM attacks) #net.ipv4.conf.all.accept_redirects = 0 #net.ipv6.conf.all.accept_redirects = 0 # _or_ # Accept ICMP redirects only for gateways listed in our default # gateway list (enabled by default) # net.ipv4.conf.all.secure_redirects = 1 # # Do not send ICMP redirects (we are not a router) #net.ipv4.conf.all.send_redirects = 0 # # Do not accept IP source route packets (we are not a router) #net.ipv4.conf.all.accept_source_route = 0 #net.ipv6.conf.all.accept_source_route = 0 # # Log Martian Packets #net.ipv4.conf.all.log_martians = 1 # vm.swappiness = 0 net.ipv4.neigh.default.gc_stale_time=120 # see details in https://help.aliyun.com/knowledge_detail/39428.html net.ipv4.conf.all.rp_filter=0 net.ipv4.conf.default.rp_filter=0 net.ipv4.conf.default.arp_announce = 2 net.ipv4.conf.lo.arp_announce=2 net.ipv4.conf.all.arp_announce=2 # see details in https://help.aliyun.com/knowledge_detail/41334.html net.ipv4.tcp_max_tw_buckets = 5000 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_max_syn_backlog = 1024 net.ipv4.tcp_synack_retries = 2 net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1 net.ipv4.ip_forward = 1 修改方法:修改swappiness值为0:sysctl vm.swappiness=0 //临时修改 或者vim /etc/sysctl.conf vm.swappiness=0 sysctl -p 参数含义： vm.swappiness （/proc/sys/vm/swappiness）取值范围：0~100 解释:linux 会使用硬盘的一部分做为SWAP分区，用来进行进程调度–进程是正在运行的程序–把当前不用的进程调成‘等待（standby），甚至‘睡眠（sleep），一旦要用，再调成‘活动（active），睡眠的进程就躺到SWAP分区睡大觉，把内存空出来让给活动的进程。swappiness=0 的时候表示最大限度使用物理内存，然后才是 swap空间，swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"ssh 不登录执行命令","slug":"history/tech/5966c9a12139e0ad358b5917","date":"2017-07-13T01:15:13.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5966c9a12139e0ad358b5917/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5966c9a12139e0ad358b5917/","excerpt":"","text":"如下：ssh -o StrictHostKeyChecking=no -l username serverip &quot;touch 111&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"此地址使用了一个通常用于网络浏览以外的端口。出于安全原因，Firefox 取消了该请求","slug":"history/tech/59672b0d2139e0ad358b5919","date":"2017-07-12T20:10:53.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59672b0d2139e0ad358b5919/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59672b0d2139e0ad358b5919/","excerpt":"","text":"在Firefox地址栏输入about:config然后在右键新建一个字符串键 network.security.ports.banned.override, 添加将需访问网站的端口号（值就是那个端口号，如有多个,就半角逗号隔开,例：81,88,98。在能保证安全的前提下,还简化成这样写0-65535）。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"confluence 乱码解决","slug":"history/tech/59672af22139e0ad358b5918","date":"2017-07-12T20:10:26.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59672af22139e0ad358b5918/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59672af22139e0ad358b5918/","excerpt":"","text":"JDBC的链接设置： jdbc:mysql://hostname:port/database?useUnicode=true&amp;characterEncoding=utf8 如果设置界面设置错误，之后可以在 /var/atlassian/application-data/confluence/confluence.cfg.xml 修改: &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://hostname:port/database?useUnicode=true&amp;amp;characterEncoding=utf8&lt;/property&gt; confluence 默认安装路径：/opt/atlassian/confluenceconfluence 默认数据路径：/var/atlassian/application-data/confluencemysql 需要是 utf-8 的数据库: CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin; mysql 配置文件: vim /etc/mysql/conf.d/mysql.cnf [mysql] default-character-set=utf8","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"confluence","slug":"confluence","permalink":"https://wangxiuwen.github.io/tags/confluence/"},{"name":"乱码","slug":"乱码","permalink":"https://wangxiuwen.github.io/tags/%E4%B9%B1%E7%A0%81/"}],"author":"wangxiuwen"},{"title":"摇滚码农聚集地","slug":"history/music/5965a0f92139e0ad358b5912","date":"2017-07-12T04:09:29.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5965a0f92139e0ad358b5912/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5965a0f92139e0ad358b5912/","excerpt":"","text":"摇滚码农聚集地!","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"摇滚码农聚集地","slug":"摇滚码农聚集地","permalink":"https://wangxiuwen.github.io/tags/%E6%91%87%E6%BB%9A%E7%A0%81%E5%86%9C%E8%81%9A%E9%9B%86%E5%9C%B0/"}],"author":"baipeng"},{"title":"openldap 编译安装","slug":"history/tech/5965ed472139e0ad358b5916","date":"2017-07-11T21:35:03.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5965ed472139e0ad358b5916/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5965ed472139e0ad358b5916/","excerpt":"","text":"遇到的坑README 里面有一句:SLAPD: BDB and HDB backends require Oracle Berkeley DB 4.4 - 4.8, or 5.0 - 5.1. It is highly recommended to apply the patches from Oracle for a given release. 刚开始下载了wget http://download.oracle.com/berkeley-db/db-6.2.32.tar.gz //这里在oracle页面上找到版本号wget下载，可以跳过注册账号的步骤 结果报错:configure: error: BDB/HDB: BerkeleyDB not available 配置库路径:CPPFLAGS=&quot;-I/usr/local/berkeley-db/include/&quot; \\ LDFLAGS=&quot;-L/usr/local/berkeley-db/lib&quot; \\ LD_LIBRARY_PATH=&quot;/usr/local/berkeley-db/lib&quot; \\ ./configure --prefix=/usr/local/openldap 报错:configure: error: C compiler cannot create executables 所以正确的步骤:编译安装 berkeley-db:wget http://download.oracle.com/berkeley-db/db-5.1.29.tar.gz tar -xzvf db-5.1.29.tar.gz cd db-5.1.29/build_unix ../dist/configure --prefix=/usr/local/berkeley-db make -j4 make install 获取 openldap:http://www.openldap.org/software/download/ 编译安装:CPPFLAGS=&quot;-I/usr/local/berkeley-db/include/&quot; \\ LDFLAGS=&quot;-L/usr/local/berkeley-db/lib&quot; \\ LD_LIBRARY_PATH=&quot;/usr/local/berkeley-db/lib&quot; \\ ./configure --prefix=/usr/local/openldap make depend make make install 添加schema:vim /usr/local/openldap/etc/openldap/slapd.confinclude /usr/local/openldap/etc/openldap/schema/corba.schemainclude /usr/local/openldap/etc/openldap/schema/core.schemainclude /usr/local/openldap/etc/openldap/schema/cosine.schemainclude /usr/local/openldap/etc/openldap/schema/duaconf.schemainclude /usr/local/openldap/etc/openldap/schema/dyngroup.schemainclude /usr/local/openldap/etc/openldap/schema/inetorgperson.schemainclude /usr/local/openldap/etc/openldap/schema/java.schemainclude /usr/local/openldap/etc/openldap/schema/misc.schemainclude /usr/local/openldap/etc/openldap/schema/nis.schemainclude /usr/local/openldap/etc/openldap/schema/openldap.schemainclude /usr/local/openldap/etc/openldap/schema/ppolicy.schemainclude /usr/local/openldap/etc/openldap/schema/collective.schema编辑文件:vim /etc/ld.so.conf /usr/local/berkeley-db/lib/ ldconfig -v 启动:/usr/local/openldap/libexec/slapd 前台启动:/usr/local/openldap/libexec/slapd -d 256 导入树:ldapadd -x -D &quot;cn=Manager,dc=wangxiuwen,dc=com&quot; -w password -f setup.ldif adding new entry &quot;dc=wangxiuwen,dc=cn&quot; setup.ldif:dn: dc=wangxiuwen,dc=com ou: wangxiuwen.com objectClass: dcObject objectClass: organizationalUnit dc: wangxiuwen dn: ou=people,dc=wangxiuwen,dc=com ou: people objectClass: organizationalUnit dn: ou=groups,dc=wangxiuwen,dc=com ou: groups objectClass: organizationalUnit dn: cn=devops,ou=groups,dc=wangxiuwen,dc=com description:: 6L+Q57u0 cn: devops objectClass: posixGroup objectClass: top gidNumber: 501 memberUid: sync 客户端：mac：http://www.ldapbrowsermac.com/windows:http://www.ldapadmin.org/download/ldapadmin.html参考资料：http://www.openldap.org/doc/admin22/quickstart.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"openldap","slug":"openldap","permalink":"https://wangxiuwen.github.io/tags/openldap/"}],"author":"wangxiuwen"},{"title":"linux 增加库路径","slug":"history/tech/5965eb622139e0ad358b5915","date":"2017-07-11T21:26:58.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5965eb622139e0ad358b5915/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5965eb622139e0ad358b5915/","excerpt":"","text":"编辑文件:vim /etc/ld.so.conf 使之生效:ldconfig -v","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"gem国内镜像","slug":"history/tech/5965b78d2139e0ad358b5914","date":"2017-07-11T17:45:49.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5965b78d2139e0ad358b5914/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5965b78d2139e0ad358b5914/","excerpt":"","text":"https://gems.ruby-china.orggem sources -l gem sources --remove https://rubygems.org/ gem sources -l gem sources -a https://gems.ruby-china.org gem sources -l","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"gem","slug":"gem","permalink":"https://wangxiuwen.github.io/tags/gem/"},{"name":"ruby","slug":"ruby","permalink":"https://wangxiuwen.github.io/tags/ruby/"}],"author":"wangxiuwen"},{"title":"redmine 安装","slug":"history/tech/5965b6da2139e0ad358b5913","date":"2017-07-11T17:42:50.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5965b6da2139e0ad358b5913/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5965b6da2139e0ad358b5913/","excerpt":"","text":"下载地址: http://www.redmine.org/projects/redmine/wiki/Download 安装环境:apt-get install ruby apt-get install ruby-dev apt-get install libmysqlclient-dev apt-get install libmagickwand-dev gem install mysql2 gem install bundler --no-rdoc --no-ri cd redmine 修改源:vim Gemfilesource ‘https://gems.ruby-china.org’安装依赖包:bundle install -V --without development test postgresql sqlite 配置数据库:cp /usr/share/redmine/config/database.yml.example /usr/share/redmine/config/database.yml vim /usr/share/redmine/config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: &quot;my_password&quot; encoding: utf8 配置邮件:cp /usr/share/redmine/config/configuration.yml.example /usr/share/redmine/config/configuration.yml vim /usr/share/redmine/config/configuration.yml production: email_delivery: delivery_method: :smtp smtp_settings: address: &quot;smtp.126.com&quot; port: 465 authentication: :login domain: 'smtp.126.com' user_name: 'xxx@126.com' password: 'xxx' 生成 session store secret:rake generate_secret_token 连接数据库创建redmine数据库，执行以下命令导入数据库:cd redmine RAILS_ENV=production rake db:migrate 导入默认数据：RAILS_ENV=production rake redmine:load_default_data 启动测试：ruby bin/rails server webrick -e production -b 192.168.1.119 -p 4000 登录：账号： admin 密码： admin","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redmine","slug":"redmine","permalink":"https://wangxiuwen.github.io/tags/redmine/"}],"author":"wangxiuwen"},{"title":"mysql 1055","slug":"history/tech/5963a49d2139e0ad358b5909","date":"2017-07-11T04:00:29.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5963a49d2139e0ad358b5909/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5963a49d2139e0ad358b5909/","excerpt":"","text":"报错信息:[Err] 1055 - Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'information_schema.PROFILING.SEQ' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by 打开mysql命令行，执行:`select @@sqlmode` ONLY_FULL_GROUP_BY：对于GROUP BY聚合操作，若select中的列没有在group by中出现，那么这句SQL是不合法的。解决办法下my.cnf中添加以下几行：[mysqld] sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' 在sql_mode 中去掉only_full_group_by，然后重启MySQL Server即可。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"},{"name":"1055","slug":"1055","permalink":"https://wangxiuwen.github.io/tags/1055/"}],"author":"wangxiuwen"},{"title":"好站推荐","slug":"history/share/5964482a2139e0ad358b590b","date":"2017-07-11T03:38:18.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/share/5964482a2139e0ad358b590b/","link":"","permalink":"https://wangxiuwen.github.io/history/share/5964482a2139e0ad358b590b/","excerpt":"","text":"A place to share knowledge and better understand the world","categories":[{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"share","slug":"share","permalink":"https://wangxiuwen.github.io/tags/share/"},{"name":"分享","slug":"分享","permalink":"https://wangxiuwen.github.io/tags/%E5%88%86%E4%BA%AB/"}],"author":"wangxiuwen"},{"title":"私有npm服务","slug":"history/tech/596417242139e0ad358b590a","date":"2017-07-11T00:09:08.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596417242139e0ad358b590a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596417242139e0ad358b590a/","excerpt":"","text":"sinopiahttps://github.com/rlidwka/sinopiataobaohttps://github.com/cnpm/npm.taobao.org","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"apache ClientDeniedByServer","slug":"history/tech/5964a42e2139e0ad358b590e","date":"2017-07-10T22:10:54.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5964a42e2139e0ad358b590e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5964a42e2139e0ad358b590e/","excerpt":"","text":"2.2:&lt;Directory /&gt; Order deny,allow Deny from all &lt;/Directory&gt; 2.4:&lt;Directory /&gt; Require all denied &lt;/Directory&gt; https://wiki.apache.org/httpd/ClientDeniedByServerConfiguration","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"apache","slug":"apache","permalink":"https://wangxiuwen.github.io/tags/apache/"}],"author":"wangxiuwen"},{"title":"服务器超时解决","slug":"history/tech/5964a3982139e0ad358b590d","date":"2017-07-10T22:08:24.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5964a3982139e0ad358b590d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5964a3982139e0ad358b590d/","excerpt":"","text":"默认情况下，该值为1，即启用:# vi /etc/sysctl.conf，设置 net.ipv4.tcp_timestamps = 0 参考资料:http://www.centoscn.com/CentosBug/osbug/2013/0726/651.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"运维","slug":"运维","permalink":"https://wangxiuwen.github.io/tags/%E8%BF%90%E7%BB%B4/"}],"author":"wangxiuwen"},{"title":"决策树和随机森林","slug":"history/tech/596399312139e0ad358b5908","date":"2017-07-10T03:11:45.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596399312139e0ad358b5908/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596399312139e0ad358b5908/","excerpt":"","text":"cart解释：classification and regression tree","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"决策树","slug":"决策树","permalink":"https://wangxiuwen.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"},{"name":"随机森林","slug":"随机森林","permalink":"https://wangxiuwen.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"}],"author":"wangxiuwen"},{"title":"Ridge/LASSO 回归","slug":"history/tech/596398972139e0ad358b5907","date":"2017-07-10T03:09:11.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596398972139e0ad358b5907/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596398972139e0ad358b5907/","excerpt":"","text":"Ridge/LASSO 回归Ridge:岭回归 加上正则化， 也可以做，需要输入超参数，可能是个alpha值，需要人工制定，往往使用交叉验证指定GridSearchCV 中的 CV 就是 cross vilidation。2016年9月之前可能是 0.17 版本的 sklearn 是from sklearn.cross_validation import GridSearchCV加上一定的平方的约束项， L1 Norm, L2 Norm问题正则化是什么？超参数是什么？一般的结论是 加上 L2 正则化(radge)指标上往往是比LASSO更好的。但是LASSO 可以帮助我们得到稀疏的模型? 很多参数可以是 0, 或者是比较小的数，帮助我们做特征提取alpha_can 是什么？radgeR 方 其实指的是拟合效果， R方越大，拟合效果越好， R 方可以为负 完整代码import numpy as np import matplotlib.pyplot as plt import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import Lasso, Ridge from sklearn.model_selection import GridSearchCV if __name__ == &quot;__main__&quot;: # pandas读入 data = pd.read_csv('8.Advertising.csv') # TV、Radio、Newspaper、Sales x = data[['TV', 'Radio', 'Newspaper']] # x = data[['TV', 'Radio']] y = data['Sales'] print x print y x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1) # print x_train, y_train model = Lasso() # model = Ridge() alpha_can = np.logspace(-3, 2, 10) lasso_model = GridSearchCV(model, param_grid={'alpha': alpha_can}, cv=5) lasso_model.fit(x, y) print '验证参数：\\n', lasso_model.best_params_ y_hat = lasso_model.predict(np.array(x_test)) mse = np.average((y_hat - np.array(y_test)) ** 2) # Mean Squared Error rmse = np.sqrt(mse) # Root Mean Squared Error print mse, rmse t = np.arange(len(x_test)) plt.plot(t, y_test, 'r-', linewidth=2, label='Test') plt.plot(t, y_hat, 'g-', linewidth=2, label='Predict') plt.legend(loc='upper right') plt.grid() plt.show()","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"Ridge","slug":"Ridge","permalink":"https://wangxiuwen.github.io/tags/Ridge/"},{"name":"LASSO","slug":"LASSO","permalink":"https://wangxiuwen.github.io/tags/LASSO/"},{"name":"回归","slug":"回归","permalink":"https://wangxiuwen.github.io/tags/%E5%9B%9E%E5%BD%92/"}],"author":"wangxiuwen"},{"title":"线性回归","slug":"history/tech/5963985b2139e0ad358b5906","date":"2017-07-10T03:08:11.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5963985b2139e0ad358b5906/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5963985b2139e0ad358b5906/","excerpt":"","text":"线性回归y = ax + b advertising 数据分析 数据集数据集 数据的读取手写读取数据f = file(path) x = [] y = [] for i, d in enumerate(f): if i == 0: continue d = d.strip() if not d: continue d = map(float, d.split(',')) x.append(d[1:-1]) y.append(d[-1]) print x print y x = np.array(x) y = np.array(y) 使用 Python自带库import csv f = file(path, 'rb') print f d = csv.reader(f) for line in d: print line f.close() 使用numpy:p = np.loadtxt(path, delimiter=',', skiprows=1) print p 完整读取代码import numpy as np import matplotlib.pyplot as plt import pandas as pd path = 'advertising.csv' data = pd.read_csv(path) # TV、Radio、Newspaper、Sales x = data[['TV', 'Radio', 'Newspaper']] y = data['Sales'] 数据显示绘制1 plt.plot(data['TV'], y, 'ro', label='TV') plt.plot(data['Radio'], y, 'g^', label='Radio') plt.plot(data['Newspaper'], y, 'mv', label='Newspaer') plt.legend(loc='lower right') plt.grid() plt.show() 绘制2 plt.figure(figsize=(9,12)) plt.subplot(311) # 分成 3*1 占用第一行 plt.plot(data['TV'], y, 'ro') plt.title('TV') plt.grid() plt.subplot(312) plt.plot(data['Radio'], y, 'g^') plt.title('Radio') plt.grid() plt.subplot(313) plt.plot(data['Newspaper'], y, 'b*') plt.title('Newspaper') plt.grid() plt.tight_layout() plt.show() 数据拆分样本数据只有一份，所以需要一部分作为训练数据，剩下的部分作为测试数据。x_train，y_train 为训练数据。 x_test， y_test 为测试数据。这里使用 sklearn 库x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1) # print x_train, y_train 还可以指定训练数据大小x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, random_state=1) # print x_train, y_train 为了避免每次 python 都随机选择训练数据和测试数据，导致每次结果都不一样，这里 random_state 指定为1， 以便于测试。train_size 设置训练数据和测试数据的比例，可以不设置。线性模型linreg = LinearRegression() 利用线性模型做拟合，得到模型:model = linreg.fit(x_train, y_train) print model 得到系数:print linreg.coef_ [ 0.04647758 0.18534601 -0.00231602] 因为 y= ax1 + bx2 + cx3 + b所以是三个系数得到截距:print linreg.intercept_ 利用得到的模型预测:y_hat = linreg.predict(np.array(x_test)) 求 均方误差(Mean Squared Error, MSE):mse = np.average((y_hat - np.array(y_test)) ** 2) # Mean Squared Error rmse = np.sqrt(mse) # Root Mean Squared Error print mse, rmse 1.97304562023 1.40465142303 将预测值和真实值画到一张图上，看一下预测效果:t = np.arange(len(x_test)) plt.plot(t, y_test, 'r-', linewidth=2, label='Test') plt.plot(t, y_hat, 'g-', linewidth=2, label='Predict') plt.legend(loc='upper right') plt.grid() plt.show() 红色线为测试数据， 绿色线为根据模型到预测数据完整代码import numpy as np import matplotlib.pyplot as plt import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression if __name__ == &quot;__main__&quot;: path = 'advertising.csv' data = pd.read_csv(path) # TV、Radio、Newspaper、Sales x = data[['TV', 'Radio', 'Newspaper']] y = data['Sales'] x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1) # print x_train, y_train linreg = LinearRegression() model = linreg.fit(x_train, y_train) y_hat = linreg.predict(np.array(x_test)) mse = np.average((y_hat - np.array(y_test)) ** 2) # Mean Squared Error rmse = np.sqrt(mse) # Root Mean Squared Error print mse, rmse t = np.arange(len(x_test)) plt.plot(t, y_test, 'r-', linewidth=2, label='Test') plt.plot(t, y_hat, 'g-', linewidth=2, label='Predict') plt.legend(loc='upper right') plt.grid() plt.show() 分析我们发现 newspaper 和 y 似乎没有关系， 所以直接去掉这一列重新分析，代码如下： import numpy as np import matplotlib.pyplot as plt import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression if __name__ == &quot;__main__&quot;: path = 'advertising.csv' data = pd.read_csv(path) # TV、Radio、Newspaper、Sales x = data[['TV', 'Radio']] y = data['Sales'] #print x #print y x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.9, random_state=1) linreg = LinearRegression() model = linreg.fit(x_train, y_train) y_hat = linreg.predict(np.array(x_test)) mse = np.average((y_hat - np.array(y_test)) ** 2) # Mean Squared Error rmse = np.sqrt(mse) # Root Mean Squared Error print mse, rmse 1.92627604187 1.38790346994 问题train_size 设置 0.9, 结果反而不好了2.4823957548 1.5755620441 你的训练数据越多，那么这个直线就会去尝试拟合更多的点。这个直线就会摆动。摆动，就导致了w和b的变化。两点就能确定直线了。点越多，直线拟合效果越差。mse, rmse 如何解释？均方差，均方根","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"线性回归","slug":"线性回归","permalink":"https://wangxiuwen.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"},{"name":"regression","slug":"regression","permalink":"https://wangxiuwen.github.io/tags/regression/"}],"author":"wangxiuwen"},{"title":"回归","slug":"history/tech/5963973f8976b5fe0f14cb3e","date":"2017-07-10T03:03:27.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5963973f8976b5fe0f14cb3e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5963973f8976b5fe0f14cb3e/","excerpt":"","text":"如果样本数值为连续值，我们对数据的分析称为回归。反之，如果样本的数值不连续，我们对数据的分析称之为分类。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"author":"wangxiuwen"},{"title":"sklearn 的使用","slug":"history/tech/596396dc8976b5fe0f14cb3d","date":"2017-07-10T03:01:48.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596396dc8976b5fe0f14cb3d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596396dc8976b5fe0f14cb3d/","excerpt":"","text":"http://scikit-learn.org/stable/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"sklearn","slug":"sklearn","permalink":"https://wangxiuwen.github.io/tags/sklearn/"}],"author":"wangxiuwen"},{"title":"机器学习笔记","slug":"history/tech/596395d78976b5fe0f14cb3c","date":"2017-07-10T02:57:27.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596395d78976b5fe0f14cb3c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596395d78976b5fe0f14cb3c/","excerpt":"","text":"python 库的使用numpy 的使用matplotlib 的使用scipy 的使用sklearn 的使用算法回归线性回归Ridge 回归决策树和随机森林","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"author":"wangxiuwen"},{"title":"matplotlib 的使用","slug":"history/tech/596395a98976b5fe0f14cb3b","date":"2017-07-10T02:56:41.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596395a98976b5fe0f14cb3b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596395a98976b5fe0f14cb3b/","excerpt":"","text":"matplotlib 的使用 文档地址http://matplotlib.org/ 默认规则:import matplotlib as mpl import matplotlib.pyplot as plt 解决中文字体缺失mpl.rcParams['font.sans-serif'] = [u'SimHei'] mpl.rcParams['axes.unicode_minus'] = False pltplt.plotplot(x, y) # xplot x and y using default line style and colorplot(x, y, ‘bo’) # plot x and y using blue circle markersplot(y) # plot y using x as index array 0…N-1plot(y, ‘r+’) # ditto, but with red plussesplt.legendplt.legend(loc=‘lower right’)plt.gridplt.show 坐标轴 坐标区间设置例import numpy as np import matplotlib.pyplot as plt x = np.arange(-5, 5, 0.01) y = x**3 plt.axis([-6, 6, -10, 10]) plt.plot(x, y) plt.show() 另外一种设置方法 plt.xlim((xmin, xmax)) # 设置x坐标轴的最大最小区间 plt.xlim(xmin, xmax) plt.ylim((ymin, ymax)) # 设置y坐标轴的最大最小区间 plt.ylim(ymin, ymax) 示例代码: import numpy as np import matplotlib.pyplot as plt x = np.arange(-5, 5, 0.01) y = x**3 plt.plot(x,y) plt.xlim(-6, 6) plt.ylim(-500, 500) plt.show() 设置网格线plt.grid 函数提供显示网格的选项，在 plot 之后则可以在坐标上显示网格 import numpy as np import matplotlib.pyplot as plt x = np.arange(-5, 5, 0.01) y = x**3 plt.plot(x,y) plt.xlim(-6, 6) plt.ylim(-500, 500) plt.grid(True) plt.show() 自定义坐标轴刻度 自动标注坐标轴刻度线条支持的线条形状和标记characterdescription'-'solid line style'--'dashed line style'-.'dash-dot line style':'dotted line style'.'point marker','pixel marker'o'circle marker'v'triangle_down marker'^'triangle_up marker'&lt;'triangle_left marker'&gt;'triangle_right marker'1'tri_down marker'2'tri_up marker'3'tri_left marker'4'tri_right marker's'square marker'p'pentagon marker'*'star marker'h'hexagon1 marker'H'hexagon2 marker'+'plus marker'x'x marker'D'diamond marker'd'thin_diamond marker‘|’vline marker'_'hline marker支持的颜色缩写charactercolor‘b’blue‘g’green‘r’red‘c’cyan‘m’magenta‘y’yellow‘k’black‘w’white标签注释图像排版 subplotsubplot(numRows, numCols, plotNum) plt.subplot(221) //分成2x2，占用第一个，即第一行第一列的子图 plt.subplot(222)//分成2x2，占用第二个，即第一行第二列的子图 plt.subplot(212)//分成2x1，占用第二个，即第二行 3D 绘图","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://wangxiuwen.github.io/tags/matplotlib/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"author":"wangxiuwen"},{"title":"numpy 库的使用","slug":"history/tech/596394978976b5fe0f14cb3a","date":"2017-07-10T02:52:07.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596394978976b5fe0f14cb3a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596394978976b5fe0f14cb3a/","excerpt":"","text":"numpy 库的使用 文档地址http://numpy.org/ 默认规则:import numpy as np 列表：标准Python的列表(list)中，元素本质是对象。如：L = [1, 2, 3]，需要3个指针和三个整数对象，对于数值运算比较浪费内存和CPU。因此，Numpy提供了ndarray(N-dimensional array object)对象：存储单一数据类型的多维数组。例：通过array函数传递list对象：L = [1, 2, 3, 4, 5, 6]a = np.array(L)print aprint type(a)若传递的是多层嵌套的list，将创建多维数组:b = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) print b 数组大小可以通过其shape属性获得:print a.shape a.shape = 4, 3 print b 注：从(3,4)改为(4,3)并不是对数组进行转置，而只是改变每个轴的大小，数组元素在内存中的位置并没有改变当某个轴为-1时，将根据数组元素的个数自动计算此轴的长度:b.shape = 2, -1 print b print b.shape b.shape = 3, 4 使用reshape方法，可以创建改变了尺寸的新数组，原数组的shape保持不变c = b.reshape(4, -1) print &quot;b = \\n&quot;, b print 'c = \\n', c 数组b和c共享内存，修改任意一个将影响另外一个:b[0][1] = 20 print &quot;b = \\n&quot;, b print &quot;c = \\n&quot;, c 数组的元素类型可以通过dtype属性获得:print a.dtype print b.dtype 可以通过dtype参数在创建时指定元素类型:d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], dtype=np.float) f = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], dtype=np.complex) print d print f 如果更改元素类型，可以使用astype安全的转换f = d.astype(np.int) print f 但不要强制仅修改元素类型，如下面这句，将会以int来解释单精度float类型d.dtype = np.int print d np.arangenp.arange 函数类似于python的range函数, 通过指定起始值、终止值和步长来创建数组生成矩阵，和Python的range类似，arange同样不包括终值；但arange可以生成浮点类型，而range只能是整数类型:np.arange(起始值, 终止值, 步长) 例:np.arange(0, 60, 10)改变形状：np.arange(0, 60, 10).reshape((-1, 1)) 相加(行列分别相加)：a = np.arange(0, 60, 10).reshape((-1, 1)) + np.arange(6) np.linspacenp.linspace 函数通过指定起始值、终止值和元素个数来创建数组，缺省包括终止值:b = np.linspace(1, 10, 10) print 'b = ', b 可以通过endpoint关键字指定是否包括终值:c = np.linspace(1, 10, 10, endpoint=False) print 'c = ', c 终止值默认为 50:np.linspace(0, 10) array([ 0. , 0.20408163, 0.40816327, 0.6122449 , 0.81632653, 1.02040816, 1.2244898 , 1.42857143, 1.63265306, 1.83673469, 2.04081633, 2.24489796, 2.44897959, 2.65306122, 2.85714286, 3.06122449, 3.26530612, 3.46938776, 3.67346939, 3.87755102, 4.08163265, 4.28571429, 4.48979592, 4.69387755, 4.89795918, 5.10204082, 5.30612245, 5.51020408, 5.71428571, 5.91836735, 6.12244898, 6.32653061, 6.53061224, 6.73469388, 6.93877551, 7.14285714, 7.34693878, 7.55102041, 7.75510204, 7.95918367, 8.16326531, 8.36734694, 8.57142857, 8.7755102 , 8.97959184, 9.18367347, 9.3877551 , 9.59183673, 9.79591837, 10. ]) np.logspace和linspace类似，logspace可以创建等比数列下面函数创建起始值为101，终止值为102，有20个数的等比数列d = np.logspace(1, 2, 10, endpoint=True) print d 下面创建起始值为20，终止值为210(包括)，有10个数的等比数列f = np.logspace(0, 10, 11, endpoint=True, base=2) print f np.frombuffer, np.fromstring, np.fromfile使用 np.frombuffer, np.fromstring, np.fromfile 等函数可以从字节序列创建数组s = 'abcd' g = np.fromstring(s, dtype=np.int8) print g math 库的实现sin cos log画一个正弦函数在区间 [-pi, pi] 的图像:x = np.arange(-np.pi, np.pi, 0.01) y = np.sin(x) 存取数组元素的存取方法和Python的标准方法相同随机生成数组:a = np.arange(10) print a 获取某个元素:print a[3] 切片[3,6)，左闭右开:print a[3:6] 省略开始下标，表示从0开始:print a[:5] 省略结束下标，表示到最后一个:print a[3:] 下标为负表示从后向前数:print a[3:-2] 步长为2:print a[1:9:2] 步长为-1，即翻转print a[::-1] 切片数据是原数组的一个视图，与原数组共享内容空间，可以直接修改元素值a[1:4] = 10, 20, 30 print a 因此，在实践中，切实注意原始数据是否被破坏，如：b = a[2:5] b[0] = 200 print a 整数/布尔数组存取根据整数数组存取：当使用整数序列对数组元素进行存取时，将使用整数序列中的每个元素作为下标，整数序列可以是列表(list)或者数组(ndarray)。使用整数序列作为下标获得的数组不和原始数组共享数据空间。生成数据a = np.logspace(0, 9, 10, base=2) print a i = np.arange(0, 10, 2) print i 利用i取a中的元素b = a[i] print b b的元素更改，a中元素不受影响b[2] = 1.6 print b print a 使用布尔数组i作为下标存取数组a中的元素：返回数组a中所有在数组b中对应下标为True的元素a = np.random.rand(10) #生成10个满足[0,1)中均匀分布的随机数 print a print a &gt; 0.5 #大于0.5的元素索引 b = a[a &gt; 0.5] #大于0.5的元素 print b 将原数组中大于0.5的元素截取成0.5a[a &gt; 0.5] = 0.5 print a print b #b不受影响 二维数组的切片生成数据a = np.arange(0, 60, 10) # 行向量 print 'a = ', a b = a.reshape((-1, 1)) # 转换成列向量 print b c = np.arange(6) print c f = b + c # 行 + 列 print f 合并上述代码：a = np.arange(0, 60, 10).reshape((-1, 1)) + np.arange(6) print a [[ 0 1 2 3 4 5] [10 11 12 13 14 15] [20 21 22 23 24 25] [30 31 32 33 34 35] [40 41 42 43 44 45] [50 51 52 53 54 55]] 二维数组的切片print a[(0,1,2,3), (2,3,4,5)] [ 2 13 24 35] print a[3:, [0, 2, 5]] [[30 32 35] [40 42 45] [50 52 55]] i = np.array([True, False, True, False, False, True]) print a[i] [[ 0 1 2 3 4 5] [20 21 22 23 24 25] [50 51 52 53 54 55]] print a[i, 3] [ 3 23 53] 科学计算np.exp(x) 计算 e 的 x 次方https://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.exp.htmlimport numpy as np # example of np.exp x = np.array([1, 2, 3]) print(np.exp(x)) # result is (exp(1), exp(2), exp(3))","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"author":"wangxiuwen"},{"title":"linux 下命令行安装 oracle java 的 command","slug":"history/tech/5963931d8976b5fe0f14cb39","date":"2017-07-10T02:45:49.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5963931d8976b5fe0f14cb39/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5963931d8976b5fe0f14cb39/","excerpt":"","text":"command: wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://wangxiuwen.github.io/tags/java/"}],"author":"wangxiuwen"},{"title":"好教程收集","slug":"history/tech/596392498976b5fe0f14cb38","date":"2017-07-10T02:42:17.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596392498976b5fe0f14cb38/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596392498976b5fe0f14cb38/","excerpt":"","text":"基于文学编程理念设计的 React Native 入门教程, 循序渐进的提供 Material 风格 Dribbble 第三方客户端开发指引:)https://github.com/borisding1994/RNMaterialDribbble日志收集与部署文档https://pengqiuyuan.gitbooks.io/elkbook/content/OpenResty最佳实践https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/main.htmlPython新员工教材https://chu888chu888.gitbooks.io/pythonstudy/content/香草https://moonbingbing.gitbooks.io/openresty-best-practices/content/others/vanilla/intro.htmlgit教程http://git.oschina.net/progit/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"教程","slug":"教程","permalink":"https://wangxiuwen.github.io/tags/%E6%95%99%E7%A8%8B/"}],"author":"wangxiuwen"},{"title":"lora 演示网址","slug":"history/tech/596391198976b5fe0f14cb37","date":"2017-07-10T02:37:13.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596391198976b5fe0f14cb37/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596391198976b5fe0f14cb37/","excerpt":"","text":"demonstrator","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"lora","slug":"lora","permalink":"https://wangxiuwen.github.io/tags/lora/"},{"name":"semtech","slug":"semtech","permalink":"https://wangxiuwen.github.io/tags/semtech/"}],"author":"wangxiuwen"},{"title":"git windows  客户端 Segmentation fault","slug":"history/tech/5963438634d44ca80cc288cf","date":"2017-07-09T21:06:14.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5963438634d44ca80cc288cf/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5963438634d44ca80cc288cf/","excerpt":"","text":"这是git 客户端的bug，升级即可git --version git version 2.13.1.windows.2 for git commit command (Windows)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"Invalid command 'Header'","slug":"history/tech/5963434134d44ca80cc288ce","date":"2017-07-09T21:05:05.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5963434134d44ca80cc288ce/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5963434134d44ca80cc288ce/","excerpt":"","text":"Invalid command ‘Header’sudo a2enmod headers sudo service apache2 restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"apache","slug":"apache","permalink":"https://wangxiuwen.github.io/tags/apache/"}],"author":"wangxiuwen"},{"title":"ubuntu 配置 php 开发环境","slug":"history/tech/596340b634d44ca80cc288cd","date":"2017-07-09T20:54:14.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596340b634d44ca80cc288cd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596340b634d44ca80cc288cd/","excerpt":"","text":"先更新系统：apt update 安装php7:apt install php 安装apacheapt install apache2 安装apache php 扩展:apt-get install libapache2-mod-php //配置APACHE+PHP pdo_mysql:apt install php-mysql 重启apache:apachectl restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"php","slug":"php","permalink":"https://wangxiuwen.github.io/tags/php/"},{"name":"pdo_mysql","slug":"pdo-mysql","permalink":"https://wangxiuwen.github.io/tags/pdo-mysql/"}],"author":"wangxiuwen"},{"title":"pure-ftpd 安装","slug":"history/tech/596314c334d44ca80cc288cc","date":"2017-07-09T17:46:43.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/596314c334d44ca80cc288cc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/596314c334d44ca80cc288cc/","excerpt":"","text":"获取:wget https://download.pureftpd.org/pub/pure-ftpd/releases/pure-ftpd-1.0.46.tar.gz 解压:tar -xzvf pure-ftpd-1.0.46.tar.gz 配置:cd pure-ftpd-1.0.46/ ./configure --prefix=/usr/local/pure-ftpd/ --with-language=english --with-everything 编译安装:make &amp;&amp; make check &amp;&amp; make install 增加系统用户:useradd ftpuser -g ftpgroup -d /data -s /sbin/nologin 增加虚拟用户:pure-pw useradd test -u ftpuser -d /data 生成数据文件:pure-pw mkdb 修改配置文件:vim /usr/local/pure-ftpd/etc/pure-ftpd.conf # 指定数据库文件 PureDB /usr/local/pure-ftpd/etc/pureftpd.pdb 启动:/usr/local/pure-ftpd/sbin/pure-ftpd /usr/local/pure-ftpd/etc/pure-ftpd.conf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"pure-ftpd","slug":"pure-ftpd","permalink":"https://wangxiuwen.github.io/tags/pure-ftpd/"},{"name":"ftp","slug":"ftp","permalink":"https://wangxiuwen.github.io/tags/ftp/"}],"author":"wangxiuwen"},{"title":"机器学习资源","slug":"history/tech/595ef10eeeae4db50d2052bf","date":"2017-07-07T02:25:18.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595ef10eeeae4db50d2052bf/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595ef10eeeae4db50d2052bf/","excerpt":"","text":"用 Python 进行实用机器学习教程http://www.fast.ai","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"},{"name":"机器学习","slug":"机器学习","permalink":"https://wangxiuwen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"author":"wangxiuwen"},{"title":"百度 create","slug":"history/tech/595d90ed11cc69e805232c82","date":"2017-07-06T01:22:53.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595d90ed11cc69e805232c82/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595d90ed11cc69e805232c82/","excerpt":"","text":"摘要：百度 create 主要发布了两款产品 duer 语音助手 和 appllo(开源) 自动驾驶，另外百度还开放了百度ai平台，开源了类似于 tensorflow 的 paddlepaddle 分布式深度学习平台，在百度云上可以创建基于 paddlepaddle 的实例， 自建模型训练， 也可以通过调用 api 的傻瓜式方式使用百度的技术积淀。 标签：duer， appllo， paddlepaddle 百度ai 开放平台百度ai开放平台文档主要包含以下功能：语音识别/文字识别/人脸识别/自然语言处理/图像审核/知识图谱/理解与交互unit 这里重点介绍一下 unit 。 unit 实现了场景式对话。尝试了一下htc u11 上的百度语音助手 今天天气怎么样？ 今天的天气.... 那明天呢？ 明天的天气... 特别说明的是，百度不是以app sdk 的方式合作， 而是内嵌到操作系统。ai开放平台截图：刚打开就报错了，还是不太放心使用百度创建机器学习集群， 配备了英伟达的显卡，要一小时五块大洋，我还是自己在虚拟机里面搭吧： duerosdueros首页没什么好说的，想让你的产品具有语音功能，接入sdk即可。 特别提一下， 如果只是语音唤起，设备是不需要联网的。 这可能得益于百度全资收购的 kitt.ai的产品 snowboy ， 它可以将一个神经网络内嵌到嵌入式设备中实现离线语音唤起。 Apollo百度现在想进军无人车主要的问题是车厂没有开放 can 总线的控制能力给百度， 同时百度需要巨量的行驶数据，百度现在的策略是提供Apollo的源码和虚拟场景测试平台，以吸引车厂使用百度无人车的技术方案。 有幸和百度无人车集成的负责人聊了一会，和 L3级别的无人车不同， Apollo 只有三个部件，工控机，rtk差分（用于提高定位精度）, GPS 接收机， 还有一个4g的路由器打酱油（下载个地图什么的），这些市面上都可以买到。 Apollo 现在也只做到了封闭场地测试。 未来 Apollo 提供障碍信息， 和控制能力，开发者可以 new 一个 具体的车型， 给车发命令左转右转即可。特别说明的是， 车辆的每一次决策都是在本地完成， 现在无线网络的速度还不能达到实时回传决策。因为不可能每个开发者都有一辆造价200多万的 Apollo 无人车, 百度提供了虚拟场景测试平台（暂时未开放）。还有部分前端项目：https://lavas.baidu.com https://www.mipengine.org/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"ai","slug":"ai","permalink":"https://wangxiuwen.github.io/tags/ai/"},{"name":"baidu","slug":"baidu","permalink":"https://wangxiuwen.github.io/tags/baidu/"},{"name":"create","slug":"create","permalink":"https://wangxiuwen.github.io/tags/create/"},{"name":"百度","slug":"百度","permalink":"https://wangxiuwen.github.io/tags/%E7%99%BE%E5%BA%A6/"}],"author":"wangxiuwen"},{"title":"各大公司技术板块","slug":"history/tech/595e1f814567d61553eb7487","date":"2017-07-05T23:31:13.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595e1f814567d61553eb7487/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595e1f814567d61553eb7487/","excerpt":"","text":"UX腾讯ISUX腾讯alloyteam UE网易用户体验中心(网易uedc) 技术美团点评技术团队360 addopselastic中文社区七牛架构师实践日","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"腾讯","slug":"腾讯","permalink":"https://wangxiuwen.github.io/tags/%E8%85%BE%E8%AE%AF/"},{"name":"ux","slug":"ux","permalink":"https://wangxiuwen.github.io/tags/ux/"}],"author":"wangxiuwen"},{"title":"nginx 动态缓存清理脚本","slug":"history/tech/59587cff3c6b907114565a3c","date":"2017-07-02T04:56:31.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59587cff3c6b907114565a3c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59587cff3c6b907114565a3c/","excerpt":"","text":"nginx 动态缓存清理脚本 clearcache.sh #! /bin/sh #Auto Clean Nginx Cache Shell Scripts #2013-06-12 wugk #Define Path CACHE_DIR=/home/tmp/proxy_cache_dir/ FILE=&quot;$*&quot; #To determine whether the input script，If not, then exit 判断脚本是否有输入，没有输入然后退出 if [ &quot;$#&quot; -eq &quot;0&quot; ];then echo &quot;Please Insert clean Nginx cache File, Example: $0 index.html index.js&quot; sleep 2 &amp;&amp; exit fi echo &quot;The file : $FILE to be clean nginx Cache ,please waiting .....&quot; #Wrap processing for the input file, for grep lookup，对输入的文件进行换行处理，利于grep查找匹配相关内容 for i in `echo $FILE |sed ':%s//\\n/g'` do grep -ra $i ${CACHE_DIR}| awk -F':' '{print $1}' &gt; /tmp/cache_list.txt for j in `cat /tmp/cache_list.txt` do rm -rf $j echo &quot;$i $j is Deleted Success !&quot; done done","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticsearch 近义词文件","slug":"history/tech/59587a453c6b907114565a3b","date":"2017-07-02T04:44:53.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59587a453c6b907114565a3b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59587a453c6b907114565a3b/","excerpt":"","text":"elasticsearch 近义词文件: i-pod, i pod, i pad =&gt; ipod, sea biscuit, sea biscit =&gt; seabiscuit, 中文,汉语,汉字 测试： _analyze?analyzer=ik_syno&amp;pretty=true&amp;text=我爱中文 http://127.0.0.1:9200/blog/_analyze?analyzer=ik_syno&amp;pretty=true&amp;text=%E6%88%91%E7%88%B1%E4%B8%AD%E6%96%87","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"mysql 去除标签函数","slug":"history/tech/595879c93c6b907114565a3a","date":"2017-07-02T04:42:49.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595879c93c6b907114565a3a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595879c93c6b907114565a3a/","excerpt":"","text":"mysql 去除标签函数 DELIMITER $$ USE `blog`$$ DROP FUNCTION IF EXISTS `strip_tags`$$ CREATE DEFINER=`root`@`%` FUNCTION `strip_tags`($str TEXT) RETURNS TEXT CHARSET utf8 BEGIN DECLARE $START, $END INT DEFAULT 1; LOOP SET $START = LOCATE(&quot;&lt;&quot;, $str, $START); IF (!$START) THEN RETURN $str; END IF; SET $END = LOCATE(&quot;&gt;&quot;, $str, $START); IF (!$END) THEN SET $END = $START; END IF; SET $str = INSERT($str, $START, $END - $START + 1, &quot;&quot;); END LOOP; END$$ DELIMITER ;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"elasticsearch maping 示例","slug":"history/tech/595879473c6b907114565a39","date":"2017-07-02T04:40:39.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595879473c6b907114565a39/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595879473c6b907114565a39/","excerpt":"","text":"//mapping示例curl -XPOST http://127.0.0.1:9200/blog/topics/_mapping -d' { &quot;topics&quot;: { &quot;properties&quot;: { &quot;status&quot;: { &quot;type&quot;: &quot;integer&quot; }, &quot;name&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; }, &quot;desc&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; } } } }' //settings示例curl -XPUT http://127.0.0.1:9200/blog/_settings -d' { &quot;index&quot; : { &quot;analysis&quot; : { &quot;analyzer&quot; : { &quot;pinyin_analyzer&quot; : { &quot;tokenizer&quot; : &quot;my_pinyin&quot;, &quot;filter&quot; : [&quot;standard&quot;] } }, &quot;tokenizer&quot; : { &quot;my_pinyin&quot; : { &quot;type&quot; : &quot;pinyin&quot;, &quot;first_letter&quot; : &quot;append&quot;, &quot;padding_char&quot; : &quot; &quot; } } } } }' //示例PUT http://127.0.0.1:9200/index1 { &quot;settings&quot;: { &quot;refresh_interval&quot;: &quot;5s&quot;, &quot;number_of_shards&quot; : 1, // 一个主节点 &quot;number_of_replicas&quot; : 0 // 0个副本，后面可以加 }, &quot;mappings&quot;: { &quot;_default_&quot;:{ &quot;_all&quot;: { &quot;enabled&quot;: false } // 关闭_all字段，因为我们只搜索title字段 }, &quot;resource&quot;: { &quot;dynamic&quot;: false, // 关闭“动态修改索引” &quot;properties&quot;: { &quot;title&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;fields&quot;: { &quot;cn&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;ik&quot; }, &quot;en&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;english&quot; } } } } } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"nginx api 慢查询","slug":"history/tech/595877f73c6b907114565a38","date":"2017-07-02T04:35:03.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595877f73c6b907114565a38/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595877f73c6b907114565a38/","excerpt":"","text":"nginx api 慢查询：tac /var/log/nginx/blog.qianrushi.org-access.log |awk -F'(&quot; &quot;|&quot;)' '{printf(&quot;%s %s %s\\n&quot;,$20,$2,$1)}' |head -n 1000 |sort -nr |head -n 20","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"查看python 包安装路径","slug":"history/tech/595877a83c6b907114565a37","date":"2017-07-02T04:33:44.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595877a83c6b907114565a37/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595877a83c6b907114565a37/","excerpt":"","text":"查看python 包安装路径： python -c &quot;from distutils.sysconfig import get_python_lib; print get_python_lib()&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"elasticsearch 启动命令","slug":"history/tech/595877433c6b907114565a36","date":"2017-07-02T04:32:03.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595877433c6b907114565a36/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595877433c6b907114565a36/","excerpt":"","text":"elasticsearch 启动命令：/data/apps/elasticsearch-1.6.0/bin/elasticsearch -Des.node.name=ES-1 -Des.http.port=8379 -d curl -XPOST http://user:passwd@127.0.0.1:8379/blog/users/_all","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"logstash  output elasticsearch 配置","slug":"history/tech/595876e23c6b907114565a35","date":"2017-07-02T04:30:26.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595876e23c6b907114565a35/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595876e23c6b907114565a35/","excerpt":"","text":"logstash output elasticsearch 配置output { #stdout { codec =&gt; rubydebug } elasticsearch { user =&gt; &quot;admin&quot; password =&gt; &quot;admin&quot; index =&gt; &quot;logstash-%{type}-%{+YYYY.MM.dd}&quot; codec =&gt; &quot;json&quot; hosts =&gt; [&quot;192.168.1.241:8379&quot;] } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"logstash","slug":"logstash","permalink":"https://wangxiuwen.github.io/tags/logstash/"}],"author":"wangxiuwen"},{"title":"mongo-connector  安装路径","slug":"history/tech/5958760a94f89b890e5e9198","date":"2017-07-02T04:26:50.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5958760a94f89b890e5e9198/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5958760a94f89b890e5e9198/","excerpt":"","text":"mongo-connector 安装路径 ： /usr/lib/python2.6/site-packages/mongo_connector-2.2.dev0-py2.6.egg/mongo_connector/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"nested  类型处理","slug":"history/tech/5958759294f89b890e5e9197","date":"2017-07-02T04:24:50.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5958759294f89b890e5e9197/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5958759294f89b890e5e9197/","excerpt":"","text":"nested 类型处理GET /abc { &quot;query&quot;: { &quot;filtered&quot;: { &quot;query&quot;: { &quot;match_all&quot;: {} }, &quot;filter&quot;: { &quot;bool&quot;: { &quot;must&quot;: [ { &quot;term&quot;: { &quot;appid.raw&quot;: &quot;wx3763889cf8825b9a&quot; } },{ &quot;term&quot;: { &quot;content.from&quot;: &quot;appLog&quot; } } ] } } } }, &quot;aggs&quot;: { &quot;result&quot;: { &quot;nested&quot;: { &quot;path&quot;: &quot;content&quot; }, &quot;aggs&quot;: { &quot;from&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;content.from&quot; }, &quot;aggs&quot;: { &quot;tag&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;content.tag&quot; }, &quot;aggs&quot;: { &quot;pv&quot;: { &quot;sum&quot;: { &quot;field&quot;: &quot;content.count&quot; } } } } } } } } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"日志处理脚本","slug":"history/tech/5958754994f89b890e5e9196","date":"2017-07-02T04:23:37.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5958754994f89b890e5e9196/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5958754994f89b890e5e9196/","excerpt":"","text":"日志处理：#!/bin/bash file_name=0529 cd ./$file_name file_list=$(ls .) for file in $file_list do if [ -f $file ];then line=`cat $file | wc -l` first=`head -1 $file` last=`tail -1 $file` seed_first=`echo $first | awk -F '&quot;send_count&quot;:' '{print $2}' | awk -F '}' '{print $1}'` seed_last=`echo $last | awk -F '&quot;send_count&quot;:' '{print $2}' | awk -F '}' '{print $1}'` echo &quot;sn: &quot;${file%-*} &quot;line: &quot; $line &quot;first: &quot; $seed_first &quot;seed_last: &quot; $seed_last &gt;&gt; ../$file_name.txt fi done","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"shell脚本","slug":"shell脚本","permalink":"https://wangxiuwen.github.io/tags/shell%E8%84%9A%E6%9C%AC/"}],"author":"wangxiuwen"},{"title":"elasticsearch 近义词配置","slug":"history/tech/595880963c6b907114565a40","date":"2017-07-01T17:11:50.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595880963c6b907114565a40/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595880963c6b907114565a40/","excerpt":"","text":"近义词配置文件elasticsearch-1.6.0/config/ik/IKAnalyzer.cfg.xml elasticsearch-synonyms-reloader.tar.gzelasticsearch-synonyms-reloader-1.0-SNAPSHOT.zipelasticsearch.yml: ##################### Elasticsearch Configuration Example ##################### # This file contains an overview of various configuration settings, # targeted at operations staff. Application developers should # consult the guide at &lt;http://elasticsearch.org/guide&gt;. # # The installation procedure is covered at # &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html&gt;. # # Elasticsearch comes with reasonable defaults for most settings, # so you can try it out without bothering with configuration. # # Most of the time, these defaults are just fine for running a production # cluster. If you're fine-tuning your cluster, or wondering about the # effect of certain configuration option, please _do ask_ on the # mailing list or IRC channel [http://elasticsearch.org/community]. # Any element in the configuration can be replaced with environment variables # by placing them in ${...} notation. For example: # #node.rack: ${RACK_ENV_VAR} # For information on supported formats and syntax for the config file, see # &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html&gt; ################################### Cluster ################################### # Cluster name identifies your cluster for auto-discovery. If you're running # multiple clusters on the same network, make sure you're using unique names. # #cluster.name: elasticsearch #################################### Node ##################################### # Node names are generated dynamically on startup, so you're relieved # from configuring them manually. You can tie this node to a specific name: # node.name: &quot;MSBES-1&quot; # Every node can be configured to allow or deny being eligible as the master, # and to allow or deny to store the data. # # Allow this node to be eligible as a master node (enabled by default): # #node.master: true # # Allow this node to store data (enabled by default): # #node.data: true # You can exploit these settings to design advanced cluster topologies. # # 1. You want this node to never become a master node, only to hold data. # This will be the &quot;workhorse&quot; of your cluster. # #node.master: false #node.data: true # # 2. You want this node to only serve as a master: to not store any data and # to have free resources. This will be the &quot;coordinator&quot; of your cluster. # #node.master: true #node.data: false # # 3. You want this node to be neither master nor data node, but # to act as a &quot;search load balancer&quot; (fetching data from nodes, # aggregating results, etc.) # #node.master: false #node.data: false # Use the Cluster Health API [http://localhost:9200/_cluster/health], the # Node Info API [http://localhost:9200/_nodes] or GUI tools # such as &lt;http://www.elasticsearch.org/overview/marvel/&gt;, # &lt;http://github.com/karmi/elasticsearch-paramedic&gt;, # &lt;http://github.com/lukas-vlcek/bigdesk&gt; and # &lt;http://mobz.github.com/elasticsearch-head&gt; to inspect the cluster state. # A node can have generic attributes associated with it, which can later be used # for customized shard allocation filtering, or allocation awareness. An attribute # is a simple key value pair, similar to node.key: value, here is an example: # #node.rack: rack314 # By default, multiple nodes are allowed to start from the same installation location # to disable it, set the following: #node.max_local_storage_nodes: 1 #################################### Index #################################### # You can set a number of options (such as shard/replica options, mapping # or analyzer definitions, translog settings, ...) for indices globally, # in this file. # # Note, that it makes more sense to configure index settings specifically for # a certain index, either when creating it or by using the index templates API. # # See &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html&gt; and # &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html&gt; # for more information. # Set the number of shards (splits) of an index (5 by default): # #index.number_of_shards: 5 # Set the number of replicas (additional copies) of an index (1 by default): # #index.number_of_replicas: 1 # Note, that for development on a local machine, with small indices, it usually # makes sense to &quot;disable&quot; the distributed features: # #index.number_of_shards: 1 #index.number_of_replicas: 0 # These settings directly affect the performance of index and search operations # in your cluster. Assuming you have enough machines to hold shards and # replicas, the rule of thumb is: # # 1. Having more *shards* enhances the _indexing_ performance and allows to # _distribute_ a big index across machines. # 2. Having more *replicas* enhances the _search_ performance and improves the # cluster _availability_. # # The &quot;number_of_shards&quot; is a one-time setting for an index. # # The &quot;number_of_replicas&quot; can be increased or decreased anytime, # by using the Index Update Settings API. # # Elasticsearch takes care about load balancing, relocating, gathering the # results from nodes, etc. Experiment with different settings to fine-tune # your setup. # Use the Index Status API (&lt;http://localhost:9200/A/_status&gt;) to inspect # the index status. #################################### Paths #################################### # Path to directory containing configuration (this file and logging.yml): # #path.conf: /path/to/conf # Path to directory where to store index data allocated for this node. # #path.data: /path/to/data # # Can optionally include more than one location, causing data to be striped across # the locations (a la RAID 0) on a file level, favouring locations with most free # space on creation. For example: # #path.data: /path/to/data1,/path/to/data2 # Path to temporary files: # #path.work: /path/to/work # Path to log files: # #path.logs: /path/to/logs # Path to where plugins are installed: # #path.plugins: /path/to/plugins #################################### Plugin ################################### # If a plugin listed here is not installed for current node, the node will not start. # #plugin.mandatory: mapper-attachments,lang-groovy ################################### Memory #################################### # Elasticsearch performs poorly when JVM starts swapping: you should ensure that # it _never_ swaps. # # Set this property to true to lock the memory: # #bootstrap.mlockall: true # Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set # to the same value, and that the machine has enough memory to allocate # for Elasticsearch, leaving enough memory for the operating system itself. # # You should also make sure that the Elasticsearch process is allowed to lock # the memory, eg. by using `ulimit -l unlimited`. ############################## Network And HTTP ############################### # Elasticsearch, by default, binds itself to the 0.0.0.0 address, and listens # on port [9200-9300] for HTTP traffic and on port [9300-9400] for node-to-node # communication. (the range means that if the port is busy, it will automatically # try the next port). # Set the bind address specifically (IPv4 or IPv6): # #network.bind_host: 192.168.0.1 # Set the address other nodes will use to communicate with this node. If not # set, it is automatically derived. It must point to an actual IP address. # #network.publish_host: 192.168.0.1 # Set both 'bind_host' and 'publish_host': # #network.host: 192.168.0.1 # Set a custom port for the node to node communication (9300 by default): # transport.tcp.port: 9533 # Enable compression for all communication between nodes (disabled by default): # #transport.tcp.compress: true # Set a custom port to listen for HTTP traffic: # http.port: 9002 # Set a custom allowed content length: # #http.max_content_length: 100mb # Disable HTTP completely: # #http.enabled: false ################################### Gateway ################################### # The gateway allows for persisting the cluster state between full cluster # restarts. Every change to the state (such as adding an index) will be stored # in the gateway, and when the cluster starts up for the first time, # it will read its state from the gateway. # There are several types of gateway implementations. For more information, see # &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html&gt;. # The default gateway type is the &quot;local&quot; gateway (recommended): # #gateway.type: local # Settings below control how and when to start the initial recovery process on # a full cluster restart (to reuse as much local data as possible when using shared # gateway). # Allow recovery process after N nodes in a cluster are up: # #gateway.recover_after_nodes: 1 # Set the timeout to initiate the recovery process, once the N nodes # from previous setting are up (accepts time value): # #gateway.recover_after_time: 5m # Set how many nodes are expected in this cluster. Once these N nodes # are up (and recover_after_nodes is met), begin recovery process immediately # (without waiting for recover_after_time to expire): # #gateway.expected_nodes: 2 ############################# Recovery Throttling ############################# # These settings allow to control the process of shards allocation between # nodes during initial recovery, replica allocation, rebalancing, # or when adding and removing nodes. # Set the number of concurrent recoveries happening on a node: # # 1. During the initial recovery # #cluster.routing.allocation.node_initial_primaries_recoveries: 4 # # 2. During adding/removing nodes, rebalancing, etc # #cluster.routing.allocation.node_concurrent_recoveries: 2 # Set to throttle throughput when recovering (eg. 100mb, by default 20mb): # #indices.recovery.max_bytes_per_sec: 20mb # Set to limit the number of open concurrent streams when # recovering a shard from a peer: # #indices.recovery.concurrent_streams: 5 ################################## Discovery ################################## # Discovery infrastructure ensures nodes can be found within a cluster # and master node is elected. Multicast discovery is the default. # Set to ensure a node sees N other master eligible nodes to be considered # operational within the cluster. This should be set to a quorum/majority of # the master-eligible nodes in the cluster. # #discovery.zen.minimum_master_nodes: 1 # Set the time to wait for ping responses from other nodes when discovering. # Set this option to a higher value on a slow or congested network # to minimize discovery failures: # #discovery.zen.ping.timeout: 3s # For more information, see # &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html&gt; # Unicast discovery allows to explicitly control which nodes will be used # to discover the cluster. It can be used when multicast is not present, # or to restrict the cluster communication-wise. # # 1. Disable multicast discovery (enabled by default): # discovery.zen.ping.multicast.enabled: false discovery.zen.ping.unicast.hosts: [&quot;10.168.79.187:9533&quot;,&quot;10.168.87.18:9533&quot;] # # 2. Configure an initial list of master nodes in the cluster # to perform discovery when new nodes (master or data) are started: # #discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;] # EC2 discovery allows to use AWS EC2 API in order to perform discovery. # # You have to install the cloud-aws plugin for enabling the EC2 discovery. # # For more information, see # &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html&gt; # # See &lt;http://elasticsearch.org/tutorials/elasticsearch-on-ec2/&gt; # for a step-by-step tutorial. # GCE discovery allows to use Google Compute Engine API in order to perform discovery. # # You have to install the cloud-gce plugin for enabling the GCE discovery. # # For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-gce&gt;. # Azure discovery allows to use Azure API in order to perform discovery. # # You have to install the cloud-azure plugin for enabling the Azure discovery. # # For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-azure&gt;. ################################## Slow Log ################################## # Shard level query and fetch threshold logging. index.search.slowlog.threshold.query.warn: 10s index.search.slowlog.threshold.query.info: 5s index.search.slowlog.threshold.query.debug: 2s index.search.slowlog.threshold.query.trace: 500ms index.search.slowlog.threshold.fetch.warn: 1s index.search.slowlog.threshold.fetch.info: 800ms index.search.slowlog.threshold.fetch.debug: 500ms index.search.slowlog.threshold.fetch.trace: 200ms index.indexing.slowlog.threshold.index.warn: 10s index.indexing.slowlog.threshold.index.info: 5s index.indexing.slowlog.threshold.index.debug: 2s index.indexing.slowlog.threshold.index.trace: 500ms ################################## GC Logging ################################ #monitor.jvm.gc.young.warn: 1000ms #monitor.jvm.gc.young.info: 700ms #monitor.jvm.gc.young.debug: 400ms #monitor.jvm.gc.old.warn: 10s #monitor.jvm.gc.old.info: 5s #monitor.jvm.gc.old.debug: 2s ################################## Security ################################ # Uncomment if you want to enable JSONP as a valid return transport on the # http server. With this enabled, it may pose a security risk, so disabling # it unless you need it is recommended (it is disabled by default). # #http.jsonp.enable: true ################################## ik ################################ index: analysis: analyzer: ik: alias: [ik_analyzer] type: org.elasticsearch.index.analysis.IkAnalyzerProvider ik_max_word: type: ik use_smart: false ik_smart: type: ik use_smart: true ik_syno: type: custom tokenizer: ik filter: [my_synonym_filter] ik_syno_smart: type: custom tokenizer: ik filter: [my_synonym_filter] use_smart: true filter: my_synonym_filter: type: synonym_reloader synonyms_path: analysis/synonym.txt index.analysis.analyzer.default.type: ik ################################## http-basic ################################ http.basic.enabled: true http.basic.user: 'admin' http.basic.password: 'admin' http.basic.ipwhitelist: ['localhost', '127.0.0.1'] http.basic.trusted_proxy_chains: [] http.basic.log: false http.basic.xforward: '' ############################################################################# index.refresh_interval: 1s threadpool: index: type: fixed size: 100 queue_size: 1000 search: type: fixed size: 100 queue_size: 1000","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"mongostat","slug":"history/tech/59587efb3c6b907114565a3f","date":"2017-07-01T17:04:59.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59587efb3c6b907114565a3f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59587efb3c6b907114565a3f/","excerpt":"","text":"mongostat 脚本date &quot;+%Y-%m-%d-%H:%M:%S&quot;错误的：/data/mongodb/bin/mongostat -h 127.0.0.1 --port 27017 -u admin -p 'admin' --noheaders --discover |sed &quot;s/\\([0-9]\\{2\\}:[0-9]\\{2\\}:[0-9]\\{2\\}\\)/${today}-\\1/g;s/k\\|g\\|\\*\\|%//g;s/|/ /g;s/\\([a-zA-Z]\\+\\):/\\1 /g;/^$\\|no data\\|connected/d&quot; &gt;&gt; /data/logs/mongostat/${today}.log 正确的：/data/mongodb-3.0.3/bin/mongostat -h 127.0.0.1 --port 10000 -u admin -p 'admin' --authenticationDatabase admin --noheaders --discover | while read line; do today=`date &quot;+%Y-%m-%d&quot;`; echo $line | sed &quot;s/\\([0-9]\\{2\\}:[0-9]\\{2\\}:[0-9]\\{2\\}\\)/${today}-\\1/g;s/k\\|g\\|\\*\\|%//g;s/|/ /g;s/\\([a-zA-Z]\\+\\):/\\1 /g;/^$\\|no data\\|connected/d&quot; &gt;&gt; $today.log; done;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"mysql river 增量查询","slug":"history/tech/59587e763c6b907114565a3e","date":"2017-07-01T17:02:46.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59587e763c6b907114565a3e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59587e763c6b907114565a3e/","excerpt":"","text":"mysql river 增量查询 select id as _id,keyboard,title,ftitle,smalltext from ecms_news where lastdotime &gt; UNIX_TIMESTAMP(now())-100 curl -XPOST http://127.0.0.1:9200/groups/_mapping -d' { &quot;groups&quot;: { &quot;properties&quot;: { &quot;status&quot;: { &quot;type&quot;: &quot;integer&quot; }, &quot;name&quot;: { &quot;type&quot;: &quot;multi_field&quot;, &quot;fields&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; }, &quot;name_en&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;pinyin_analyzer&quot;, &quot;searchAnalyzer&quot;: &quot;pinyin_analyzer&quot; } } }, &quot;desc&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; } } } }'","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticsearch mysql revier","slug":"history/tech/59587e1b3c6b907114565a3d","date":"2017-07-01T17:01:15.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59587e1b3c6b907114565a3d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59587e1b3c6b907114565a3d/","excerpt":"","text":"elasticsearch mysql revier curl -XPOST http://127.0.0.1:9002/news/_close curl -XPUT http://127.0.0.1:9002/news/_settings -d' { &quot;index&quot; : { &quot;analysis&quot; : { &quot;analyzer&quot; : { &quot;pinyin_analyzer&quot; : { &quot;tokenizer&quot; : &quot;my_pinyin&quot;, &quot;filter&quot; : [&quot;standard&quot;] } }, &quot;tokenizer&quot; : { &quot;my_pinyin&quot; : { &quot;type&quot; : &quot;pinyin&quot;, &quot;first_letter&quot; : &quot;append&quot;, &quot;padding_char&quot; : &quot; &quot; } } } } }' curl -XPOST http://127.0.0.1:9002/news/ms_ecms_article/_mapping -d' { &quot;ms_ecms_article&quot;: { &quot;properties&quot;: { &quot;keyboard&quot;: { &quot;type&quot;: &quot;multi_field&quot;, &quot;fields&quot;: { &quot;keyboard&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; }, &quot;keyboard_en&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;pinyin_analyzer&quot;, &quot;searchAnalyzer&quot;: &quot;pinyin_analyzer&quot; } } }, &quot;title&quot;: { &quot;type&quot;: &quot;multi_field&quot;, &quot;fields&quot;: { &quot;title&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; }, &quot;title_en&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;pinyin_analyzer&quot;, &quot;searchAnalyzer&quot;: &quot;pinyin_analyzer&quot; } } }, &quot;ftitle&quot;: { &quot;type&quot;: &quot;multi_field&quot;, &quot;fields&quot;: { &quot;ftitle&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; }, &quot;ftitle_en&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;pinyin_analyzer&quot;, &quot;searchAnalyzer&quot;: &quot;pinyin_analyzer&quot; } } }, &quot;smalltext&quot;: { &quot;type&quot;: &quot;multi_field&quot;, &quot;fields&quot;: { &quot;smalltext&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;ik&quot;, &quot;searchAnalyzer&quot;: &quot;ik&quot; }, &quot;smalltext_en&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;store&quot;: &quot;yes&quot;, &quot;index&quot;: &quot;analyzed&quot;, &quot;indexAnalyzer&quot;: &quot;pinyin_analyzer&quot;, &quot;searchAnalyzer&quot;: &quot;pinyin_analyzer&quot; } } } } } }' curl -XPUT 'http://127.0.0.1:9002/_river/who_jdbc_river/_meta' -d '{ &quot;type&quot;: &quot;jdbc&quot;, &quot;jdbc&quot;: { &quot;driver&quot;: &quot;com.mysql.jdbc.Driver&quot;, &quot;url&quot;: &quot;jdbc:mysql://127.0.0.1:3306/news&quot;, &quot;user&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;admin&quot;, &quot;sql&quot;: &quot;select id as _id,keyboard,title,ftitle,smalltext from ecms_article&quot;, &quot;index&quot;: &quot;news&quot;, &quot;type&quot;: &quot;ms_ecms_article&quot;, &quot;bulk_size&quot;: 100, &quot;max_bulk_requests&quot;: 30, &quot;bulk_timeout&quot;: &quot;10s&quot;, &quot;flush_interval&quot;: &quot;5s&quot;, &quot;schedule&quot;: &quot;0 0-59 0-23 ? * *&quot; } }' curl -XDELETE '127.0.0.1:8379/_river/who_jdbc_river' curl -XPUT 'http://127.0.0.1:8379/_river/who_jdbc_river/_meta' -d '{ &quot;type&quot;: &quot;jdbc&quot;, &quot;jdbc&quot;: { &quot;driver&quot;: &quot;com.mysql.jdbc.Driver&quot;, &quot;url&quot;: &quot;jdbc:mysql://localhost:3306/profile&quot;, &quot;user&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;admin&quot;, &quot;sql&quot;: [ { &quot;statement&quot;: &quot;select id as _id,name,login_name from user where mytimestamp &gt; UNIX_TIMESTAMP(?)&quot;, &quot;parameter&quot;: [ &quot;$river.state.last_active_begin&quot; ] } ], &quot;index&quot;: &quot;profile&quot;, &quot;type&quot;: &quot;user&quot;, &quot;bulk_size&quot;: 100, &quot;max_bulk_requests&quot;: 30, &quot;bulk_timeout&quot;: &quot;10s&quot;, &quot;flush_interval&quot;: &quot;5s&quot;, &quot;schedule&quot;: &quot;0 0-59 0-23 ? * *&quot; } }' http://xbib.org/repository/org/xbib/elasticsearch/plugin/elasticsearch-river-jdbc/2.1.0.0/elasticsearch-river-jdbc-2.1.0.0-plugin.zip http://xbib.org/repository/org/xbib/elasticsearch/importer/elasticsearch-jdbc/2.1.0.0/elasticsearch-jdbc-2.1.0.0-dist.zip","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticsearch 资源列表","slug":"history/tech/595522fe49332b320bc50118","date":"2017-06-29T03:55:42.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595522fe49332b320bc50118/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595522fe49332b320bc50118/","excerpt":"","text":"elasticsearch 资源列表：es.xiaoleilu.com入门笔记1Elasticsearch学习笔记","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"mongodb 单节点迁移到复制集","slug":"history/tech/59551f7049332b320bc50117","date":"2017-06-29T03:40:32.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59551f7049332b320bc50117/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59551f7049332b320bc50117/","excerpt":"","text":"增加节点:rs0:PRIMARY&gt; rs.add(&quot;10.0.177.200:27017&quot;) rs0:PRIMARY&gt; rs.addArb(&quot;10.0.177.201:27017&quot;)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"Mongo与ES同步的5种方式","slug":"history/tech/59551cc049332b320bc50116","date":"2017-06-29T03:29:04.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59551cc049332b320bc50116/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59551cc049332b320bc50116/","excerpt":"","text":"Mongo与ES同步的5种方式","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"发个帖测一下1","slug":"history/training/59546cb63ac7f074423315a4","date":"2017-06-29T02:57:58.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/training/59546cb63ac7f074423315a4/","link":"","permalink":"https://wangxiuwen.github.io/history/training/59546cb63ac7f074423315a4/","excerpt":"","text":"发个帖测一下2","categories":[{"name":"培训","slug":"培训","permalink":"https://wangxiuwen.github.io/categories/%E5%9F%B9%E8%AE%AD/"}],"tags":[{"name":"training","slug":"training","permalink":"https://wangxiuwen.github.io/tags/training/"},{"name":"培训","slug":"培训","permalink":"https://wangxiuwen.github.io/tags/%E5%9F%B9%E8%AE%AD/"}],"author":"wangxiuwen"},{"title":"kafka hello world","slug":"history/tech/595455f767b4ebc07d5aee3a","date":"2017-06-29T01:20:55.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595455f767b4ebc07d5aee3a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595455f767b4ebc07d5aee3a/","excerpt":"","text":"kafka hello worldbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"kafka","slug":"kafka","permalink":"https://wangxiuwen.github.io/tags/kafka/"}],"author":"wangxiuwen"},{"title":"mac 提示 Cannot connect to the Docker daemon. Is the docker daemon running on this host?","slug":"history/tech/5954556c67b4ebc07d5aee39","date":"2017-06-29T01:18:36.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5954556c67b4ebc07d5aee39/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5954556c67b4ebc07d5aee39/","excerpt":"","text":"解决：eval “$(docker-machine env default)&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"Logstash往ES发数据,  指定某个字段不分词","slug":"history/tech/595453e267b4ebc07d5aee38","date":"2017-06-29T01:12:02.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/595453e267b4ebc07d5aee38/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/595453e267b4ebc07d5aee38/","excerpt":"","text":"示例： {&quot;flow_id&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;index&quot;: &quot;not_analyzed&quot;, &quot;doc_values&quot;: true }}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"程序员网站集合","slug":"history/tech/5954defe672ca0410ae0f0e9","date":"2017-06-28T23:05:34.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5954defe672ca0410ae0f0e9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5954defe672ca0410ae0f0e9/","excerpt":"","text":"http://longmenwaideyu.com/http://yeasy.github.io/https://timyang.nethttps://jayshao.com/archives/http://www.shenyanchao.cn/http://blog.codinglabs.org/http://www.hyjiacan.comhttps://toontong.github.iohttps://imququ.com滚雪球https://zhu327.github.io/http://www.zhuhengshu.com/https://riccardo.forina.mehttp://dmdgeeker.com/http://www.wisely.tophttps://www.androiddev.net/http://tonybai.comhttps://daryl.moehttps://g2ex.github.iohttp://www.winseliu.comhttps://briian.com/https://cokebar.infohttp://www.codexiu.cnhttp://www.opscoder.info/boltdb_intro.htmlhttp://www.cfad.tech/http://hardog.net/http://wiki.7diary.comhttps://alanli7991.github.io/https://www.codedump.info/https://zhgxun.github.io/国外:https://www.kevinhooke.comhttps://morvanzhou.github.io/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"springboot的tomcat启动过慢的问题分析","slug":"history/tech/5954d6ab5d68c4453ced2dc8","date":"2017-06-28T22:30:03.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5954d6ab5d68c4453ced2dc8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5954d6ab5d68c4453ced2dc8/","excerpt":"","text":"tomcat的启动慢， 罪魁祸首是 SecureRandom类。tomcat7以上的版本，在启动时会调用SecureRandom类来生成随机数。如果用于初始化SecureRandom的熵源是个短熵（熵不够用）, 就会报 warning。jdk的配置文件中，使用 securerandom.source 设置了熵源： cat /usr/java/jdk1.8.0_121/jre/lib/security/java.security securerandom.source=file:/dev/random 可以看到默认值是：/dev/random。所以程序启动后SecureRandom类会读取/dev/random以获取随机序列，这是一个同步操作。当熵池（entropy pool） 中没有足够的熵时，读取/dev/random就会造成阻塞，直到收集到了足够的熵，程序才会继续往下进行。解决方法是修改成非阻塞的熵源/dev/urandom。可以修改java.security文件中的securerandom.source值，也可以使用参数java.security.egd： java -jar app.jar -Djava.security.egd=file:/dev/./urandom 至于为什么是/dev/./urandom，而不是/dev/urandom，这源于java的一个bug。大意是/dev/urandom在某些情况下可能还是最终会转换成调用/dev/random。所以为了保险起见，还是使用/dev/./urandom吧！","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"springboot","slug":"springboot","permalink":"https://wangxiuwen.github.io/tags/springboot/"}],"author":"wangxiuwen"},{"title":"机器学习开发环境(python)","slug":"history/tech/59548da45d68c4453ced2dc7","date":"2017-06-28T17:18:28.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/59548da45d68c4453ced2dc7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/59548da45d68c4453ced2dc7/","excerpt":"","text":"用pycharm+anaconda组合需要安装的 python 包: sklearn","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"machine","slug":"machine","permalink":"https://wangxiuwen.github.io/tags/machine/"}],"author":"wangxiuwen"},{"title":"mysql5.7 添加用户","slug":"history/tech/5953ae76b58108ec343cf66b","date":"2017-06-28T01:26:14.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953ae76b58108ec343cf66b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953ae76b58108ec343cf66b/","excerpt":"","text":"创建用户： CREATE USER 'cms'@'%' IDENTIFIED BY 'password'; 控制权限： GRANT ALL ON drupal.* TO 'cms'@'%'; GRANT SELECT ON drupal TO 'cms'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION; 修改plugin： select user,host,plugin,password,authentication_string from user; update user set plugin = &quot;mysql_native_password&quot; where user = 'test_user'; 修改密码 ： update user set authentication_string = &quot;&quot; where user = 'test_user'; update user set password = PASSWORD('test_user') where user = 'test_user';","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql5.7","slug":"mysql5-7","permalink":"https://wangxiuwen.github.io/tags/mysql5-7/"}],"author":"wangxiuwen"},{"title":"tsung 压力测试","slug":"history/tech/5953abf8b58108ec343cf66a","date":"2017-06-28T01:15:36.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953abf8b58108ec343cf66a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953abf8b58108ec343cf66a/","excerpt":"","text":"date: 2017-06-27 09:11:14 安装安装 erlang 环境: apt install erlang 安装 gnuplot: apt install gnuplot # tsung_stats.pl 需要用到的 gnuplot 安装 tsung(http://tsung.erlang-projects.org/dist/): wget http://tsung.erlang-projects.org/dist/tsung-1.6.0.tar.gz tar -zxf tsung-1.6.0.tar.gz cd tsung-1.6.0 ./configure # 配置，生成 Makefile 文件 make -j4 make install 下载并安装perl Template,用于生成报告模版: wget http://cpan.org/modules/by-module/Template/Template-Toolkit-2.24.tar.gz tar -zxvf Template-Toolkit-2.24.tar.gz cd Template-Toolkit-2.24 perl Makefile.PL make make test make install 说明示例文件: /root/tsung-1.6.0/examples 拷贝示例: mkdir /root/http_simple cd /root/http_simple cp /root/tsung-1.6.0/examples/examples/http_simple.xml ./ 测试:tsung -f http_simple.xml start # 默认使用 ~/.tsung/tsung.xml, 可指定查看实时记录: tail -f ~/.tsung/log/20170627-0908/tsung.log 生成报表: /usr/lib/tsung/bin/tsung_stats.pl --stats ~/.tsung/log/20170627-0908/tsung.log # http_simple 目录下生成3个目录和1个 log 文件，其中 images 目录下就是报表图片 配置文件 clients: &lt;clients&gt; &lt;client host=&quot;localhost&quot; use_controller_vm=&quot;true&quot; maxusers=&quot;30000&quot;/&gt; &lt;/clients&gt; tsung运行时可以由很多的虚拟机组成，client配置指明这个client机器上最多生成的用户数，如果use_controller_vm为true的话，那么当用户数达到maxusers，tsung会自动生成新的VM。 servers: &lt;servers&gt; &lt;server host=&quot;api.evcos.wm-motor.com&quot; port=&quot;80&quot; type=&quot;tcp&quot;&gt;&lt;/server&gt; &lt;/servers&gt; 也可以配置成集群: &lt;servers&gt; &lt;server host=&quot;server1&quot; port=&quot;80&quot; type=&quot;tcp&quot; weight=&quot;4&quot;&gt;&lt;/server&gt; &lt;server host=&quot;server2&quot; port=&quot;80&quot; type=&quot;tcp&quot; weight=&quot;1&quot;&gt;&lt;/server&gt; &lt;/servers&gt; tsung会根据weight值来选择发起请求的serverhttps: &lt;servers&gt; &lt;server host=”web_server_name” port=”443″ type=”ssl“&gt;&lt;/server&gt; &lt;/servers&gt; https://jackiechen.org/2015/12/04/use-tsung-to-test-https-site/ monitoring &lt;monitoring&gt; &lt;monitor host=&quot;garden&quot; type=&quot;erlang&quot;&gt; &lt;mysqladmin port=&quot;3306&quot; username=&quot;root&quot; /&gt; &lt;/monitor&gt; &lt;/monitoring&gt; 系统监控服务，配置完后可获取被测server的cpu，内存，负载，数据库的相关信息。可以配置成erlang的监控服务和snmp的监控服务。 load &lt;load&gt; &lt;arrivalphase phase=&quot;1&quot; duration=&quot;3&quot; unit=&quot;minute&quot;&gt; &lt;users maxnumber=&quot;100&quot; interarrival=&quot;0.02&quot; unit=&quot;second&quot; &gt;&lt;/users&gt; &lt;/arrivalphase&gt; &lt;/load&gt; load段可配置访问的负载，访问可以配成多个阶段，由phase值指定。duration是测试持续时间，unit是单位。users段的maxnumber限制了生成的最大用户数，interarrival=”0.02”表示0.02秒产生一个新用户，用户按照session的配置顺序执行session中的request。 options &lt;options&gt; &lt;option type=&quot;ts_http&quot; name=&quot;user_agent&quot;&gt; &lt;user_agent probability=&quot;80&quot;&gt;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) Gecko/20050513 Galeon/1.3.21&lt;/user_agent&gt; &lt;user_agent probability=&quot;20&quot;&gt;Mozilla/5.0 (Windows; U; Windows NT 5.2; fr-FR; rv:1.7.8) Gecko/20050511 Firefox/1.0.4&lt;/user_agent&gt; &lt;/option&gt; &lt;/options&gt; sessions &lt;sessions&gt; &lt;session name=&quot;http-example&quot; probability=&quot;70&quot; type=&quot;ts_http&quot;&gt; &lt;setdynvars sourcetype=&quot;random_number&quot; start=&quot;1&quot; end =&quot;100&quot;&gt; &lt;var name=&quot;itemid&quot; /&gt; &lt;/setdynvars&gt; &lt;transaction name='getlist'&gt; &lt;request subst=&quot;true&quot;&gt; &lt;http url=&quot;/comment/getList&quot; method=&quot;POST&quot; contents = &quot;item_type=image&amp;amp;item_id=%%_itemid%%&quot;&gt;&lt;/http&gt; &lt;/request&gt; &lt;/transaction&gt; &lt;/session&gt; &lt;session name=&quot;http-example&quot; probability=&quot;30&quot; type=&quot;ts_http&quot;&gt; &lt;setdynvars sourcetype=&quot;random_number&quot; start=&quot;1&quot; end=&quot;100&quot;&gt; &lt;var name=&quot;itemid&quot; /&gt; &lt;/setdynvars&gt; &lt;setdynvars sourcetype=&quot;random_number&quot; start=&quot;20&quot; end=&quot;5000000&quot;&gt; &lt;var name=&quot;content&quot; /&gt; &lt;/setdynvars&gt; &lt;transaction name='getlist'&gt; &lt;request subst=&quot;true&quot;&gt; &lt;http url=&quot;/comment/addComment&quot; method=&quot;POST&quot; contents = &quot;item_type=image&amp;amp;item_id=%%_itemid%%&amp;amp;content=%%_content%%&quot;&gt;&lt;/http&gt; &lt;/request&gt; &lt;/transaction&gt; &lt;/session&gt; &lt;/sessions&gt; 可配置多个子session，进而可测试多个api，可以设置请求概率，在probability里被定义，要求每个session的probability之和是100。类型是http。sessions里可用for来设定请求次数，如下: &lt;for from=&quot;1&quot; to=&quot;@loop&quot; incr=&quot;1&quot; var=&quot;counter&quot;&gt; 在里面可以设置请求的具体信息。在请求参数里可以带上随机数。随机数和随机字符串的定义如下: &lt;setdynvars sourcetype=&quot;random_number&quot; start=&quot;20&quot; end=&quot;5000000&quot;&gt; &lt;var name=&quot;xxx&quot; /&gt; &lt;/setdynvars&gt; &lt;setdynvars sourcetype=&quot;random_string&quot; length=&quot;10&quot;&gt; &lt;var name=&quot;xxx&quot; /&gt; &lt;/setdynvars&gt; 以%%_xxx%%的形式来调用，这里必须注意的是，要使用随机数，request必须加上subst=”true”参数，不然随机数无法被引用成功。随机数也可从文件读取，如csv。http内部可定义header参数: &lt;http_header name=&quot;Authorization&quot; value=&quot;111&quot;/&gt; &lt;http_header name=&quot;Cookie&quot; value=&quot;authToken=%%_auth_token%%; Path=/&quot;/&gt; &lt;!-- content-Type：POST请求参数的格式，如果是json格式可以这样写 --&gt; &lt;http_header name=&quot;Content-Type&quot; value=&quot;application/json&quot;/&gt; thinktime可用于定义两个请求的间隔时间: &lt;thinktime value=&quot;1&quot;/&gt; 另外可定义不同的transaction ，这样子结果里就会显示不同transaction的具体信息。 生成报告 /usr/lib/tsung/bin/tsung_stats.pl --stats /root/.tsung/log/20170627-1144/tsung.log 查看报告 report.html 注意tsung测试HTTP服务器时，GET或POST方法有时需配置参数。参数固定的情况:GET： &lt;http url='http://www.xxx/v1/xxx?var=3&amp;amp;b=4' method='GET'/&gt; 注意，如果多个变量连接必须用实体&amp;amp; 而不是单独的 '&amp;' POST： &lt;http url='http://www.xxx/v1/xxx' method='POST' contents='username=admin&amp;passwd=123456'/&gt; 注意：post方法中不需要写实体，直接用'&amp;' 文档:Tsung 1.6.0 documentationLoad Testing using TsungTest the Performance and Scalability of Your Web Applications With Tsung压力测试工具tsung用法简介","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"pressure_test","slug":"pressure-test","permalink":"https://wangxiuwen.github.io/tags/pressure-test/"}],"author":"wangxiuwen"},{"title":"瓦力背景","slug":"history/training/59535957c7b0042a6cd9c320","date":"2017-06-27T19:23:03.000Z","updated":"2020-11-29T01:42:08.779Z","comments":true,"path":"history/training/59535957c7b0042a6cd9c320/","link":"","permalink":"https://wangxiuwen.github.io/history/training/59535957c7b0042a6cd9c320/","excerpt":"","text":"瓦力背景","categories":[{"name":"培训","slug":"培训","permalink":"https://wangxiuwen.github.io/categories/%E5%9F%B9%E8%AE%AD/"}],"tags":[{"name":"training","slug":"training","permalink":"https://wangxiuwen.github.io/tags/training/"},{"name":"培训","slug":"培训","permalink":"https://wangxiuwen.github.io/tags/%E5%9F%B9%E8%AE%AD/"}],"author":"wangxiuwen"},{"title":"python 安装 ansible报错","slug":"history/tech/5953c73311a1d5578f3f9a6d","date":"2017-06-12T22:00:39.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a6d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a6d/","excerpt":"","text":"报错: Command &amp;quot;/usr/bin/python -u -c &amp;quot;import setuptools, tokenize;__file__='/tmp/pip-build-wP1NZu/cryptography/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))&amp;quot; install --record /tmp/pip-Bjx54G-record/install-record.txt --single-version-externally-managed --compile&amp;quot; failed with error code 1 in /tmp/pip-build-wP1NZu/cryptography/ 解决： apt install libssl-dev -y","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"ImportError  No module named _sqlite3","slug":"history/tech/5953c73311a1d5578f3f9a6c","date":"2017-06-05T01:03:04.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a6c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a6c/","excerpt":"","text":"1ImportError: No module named _sqlite3解决方案：1LDFLAGS=&amp;quot;-L/usr/local/opt/sqlite/lib -L/usr/local/opt/zlib/lib&amp;quot; CPPFLAGS=&amp;quot;-I/usr/local/opt/sqlite/include -I/usr/local/opt/zlib/include&amp;quot; pyenv install -v 3.4.5","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"kafka彻底删除topic的两种方法","slug":"history/tech/5953c73311a1d5578f3f9a6b","date":"2017-05-23T18:10:32.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a6b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a6b/","excerpt":"","text":"方法一：快速配置删除法1.kafka启动之前，在server.properties配置delete.topic.enable=true2.执行命令bin/kafka-topics.sh --delete --topic test --zookeeper zk:2181或者使用kafka-manager集群管理工具删除注意：如果kafka启动之前没有配置delete.topic.enable=true，topic只会标记为marked for deletion，加上配置，重启kafka，之前的topick就真正删除了。方法二：手动删除法（不推荐）前提：不允许更改server.properties配置1.删除zk下面topic（test）启动bin/zkCli.shls /brokers/topicsrmr /brokers/topics/testls /brokers/topics查topic是否删除：bin/kafka-topics.sh --list --zookeeper zk:21812.删除各broker下topic数据，默认目录为/tmp/kafka-logs","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"kafka","slug":"kafka","permalink":"https://wangxiuwen.github.io/tags/kafka/"}],"author":"wangxiuwen"},{"title":"arange 和 linspace 的区别","slug":"history/tech/5953c73311a1d5578f3f9a6a","date":"2017-04-05T18:45:20.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a6a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a6a/","excerpt":"","text":"arange()类似于内置函数range()，通过指定开始值、终值和步长创建表示等差数列的一维数组，注意得到的结果数组不包含终值。 linspace()通过指定开始值、终值和元素个数创建表示等差数列的一维数组，可以通过endpoint参数指定是否包含终值，默认值为True，即包含终值。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"vsftpd 无法登录","slug":"history/tech/5953c73311a1d5578f3f9a69","date":"2017-03-02T01:12:48.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a69/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a69/","excerpt":"","text":"pam_service_name=ftp","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"python 阿里云镜像","slug":"history/tech/5953c4d0c2b92f5665eeda68","date":"2017-02-28T18:01:50.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda68/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda68/","excerpt":"","text":"http://mirrors.aliyun.com/pypi/simple/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"Mac OS X 上修改主机名","slug":"history/tech/5953c4d0c2b92f5665eeda67","date":"2016-10-22T02:20:06.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda67/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda67/","excerpt":"","text":"修改主机名称:sudo scutil --set HostName MacBookPro 修改共享名称:sudo scutil --set ComputerName MacBookPro","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"系统操作","slug":"系统操作","permalink":"https://wangxiuwen.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"}],"author":"wangxiuwen"},{"title":"TPS和QPS的区别","slug":"history/tech/5953c4d0c2b92f5665eeda66","date":"2016-09-29T03:28:05.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda66/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda66/","excerpt":"","text":"一、TPS：Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。二、QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"彻底删除mysql","slug":"history/tech/5953c4d0c2b92f5665eeda65","date":"2016-09-28T02:18:19.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda65/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda65/","excerpt":"","text":"彻底删除mysql: sudo dpkg -P `sudo dpkg -l | grep mysql | awk '{print $2}'`","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"什么是 撮合系统","slug":"history/tech/5953c4d0c2b92f5665eeda64","date":"2016-09-27T03:14:45.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda64/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda64/","excerpt":"","text":"什么是撮合系统","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"default","slug":"default","permalink":"https://wangxiuwen.github.io/tags/default/"}],"author":"wangxiuwen"},{"title":"规则引擎","slug":"history/tech/5953c4d0c2b92f5665eeda63","date":"2016-09-27T03:13:58.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda63/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda63/","excerpt":"","text":"drools","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"default","slug":"default","permalink":"https://wangxiuwen.github.io/tags/default/"}],"author":"wangxiuwen"},{"title":"git 清理保存 https 用户名密码","slug":"history/tech/5953c73311a1d5578f3f9a68","date":"2016-09-26T01:45:50.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a68/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a68/","excerpt":"","text":"清理密码：[quote]git config --global credential.helper clean[/quote]设置记住密码（默认15分钟）：[quote]git config --global credential.helper cache[/quote]如果想自己设置时间，可以这样做：[quote]git config credential.helper ‘cache --timeout=3600’ //这样就设置一个小时之后失效[/quote]长期存储密码：[quote]git config --global credential.helper store[/quote]增加远程地址的时候带上密码也是可以的:[quote][url]http://yourname:password@github.com/name/project.git[/url] 补充：使用客户端也可以存储密码的。[/quote]如果你正在使用ssh而且想体验https带来的高速，那么你可以这样做：切换到项目目录下,移除远程ssh方式的仓库地址：[quote]git remote rm origin[/quote]增加https远程仓库地址[quote]git remote add origin http://yourname:password@github.com/name/project.git[/quote]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"修改已经git commit的注释信息","slug":"history/tech/5953c4d0c2b92f5665eeda62","date":"2016-07-28T03:45:14.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda62/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda62/","excerpt":"","text":"这个应该很多人都需要git commit -m ‘xxxxx’之后突然觉得注释信息不太好，想修改那么执行 git commit --amend 修改最后一次提交的信息如果你对nano不感冒的话，git config --global core.editor vim如果不幸把不正确的注释git push到远程服务器，那就 执行 ‘git push origin +master:master’ 强制更新","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"mac pycharm 搭建 spark 开发环境","slug":"history/tech/5953c4d0c2b92f5665eeda61","date":"2016-07-27T18:46:30.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda61/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda61/","excerpt":"","text":"安装pycharm安装py4j[code]pip install py4j[/code]配置环境变量[quote]&quot;Run&quot; -&gt;&quot;Edit Configurations&quot; -&gt; &quot;Environment variables&quot;SPARK_HOME /usr/local/sparkPYTHONPATH /usr/local/spark/python[/quote]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"spark","slug":"spark","permalink":"https://wangxiuwen.github.io/tags/spark/"}],"author":"wangxiuwen"},{"title":"php new DateTime($dtStr); 报错","slug":"history/tech/5953c4d0c2b92f5665eeda60","date":"2016-07-23T22:17:44.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda60/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda60/","excerpt":"","text":"[code]PHP Warning: date(): It is not safe to rely on the system’s timezone settings. You are required to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected the timezone ‘UTC’ for now, but please set date.timezone to select your timezone. in /var/www/blog/get.php on line 3PHP Fatal error: Uncaught exception ‘Exception’ with message ‘DateTime::__construct(): It is not safe to rely on the system’s timezone settings. You are required to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected the timezone ‘UTC’ for now, but please set date.timezone to select your timezone.’ in /var/www/blog/get.php:4Stack trace:[/code]解决方案：代码前面插入一行：[code]date_default_timezone_set(‘PRC’);[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"php","slug":"php","permalink":"https://wangxiuwen.github.io/tags/php/"}],"author":"wangxiuwen"},{"title":"docker exec","slug":"history/tech/5953c4d0c2b92f5665eeda5f","date":"2016-07-18T03:35:54.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda5f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda5f/","excerpt":"","text":"[code]docker exec -it nodejs /bin/sh[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"docker compose 安装","slug":"history/tech/5953c4d0c2b92f5665eeda5e","date":"2016-07-14T19:48:57.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda5e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda5e/","excerpt":"","text":"[code]apt-get install python-pip python-devpip install -U docker-composedocker-compose -version[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"Docker Dockerfile COPY vs ADD","slug":"history/tech/5953c4d0c2b92f5665eeda5d","date":"2016-07-14T04:32:16.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda5d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda5d/","excerpt":"","text":"ADD 多了2个功能, 下载URL和解压. 其他都一样.如果你不希望压缩文件拷贝到container后会被解压的话, 那么使用COPY.如果需要自动下载URL并拷贝到container的话, 请使用ADD.","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"git https协议缓存删除","slug":"history/tech/5953c4d0c2b92f5665eeda5b","date":"2016-07-13T02:01:36.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda5b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda5b/","excerpt":"","text":"123git credential-osxkeychain erasehost=github.comprotocol=https","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"docker-compose","slug":"history/tech/5953c4d0c2b92f5665eeda5c","date":"2016-07-12T19:12:30.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda5c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda5c/","excerpt":"","text":"[code]pip install -U docker-compose -i http://pypi.douban.com/simple [/code][quote]-U 最新版-i 使用豆瓣源[/quote]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"IETester","slug":"history/tech/5953c4d0c2b92f5665eeda5a","date":"2016-07-11T19:49:28.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda5a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda5a/","excerpt":"","text":"[quote]http://www.my-debugbar.com/wiki/IETester/HomePage[/quote]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"front-end","slug":"front-end","permalink":"https://wangxiuwen.github.io/tags/front-end/"}],"author":"wangxiuwen"},{"title":".gitignore文件不起作用","slug":"history/tech/5953c4d0c2b92f5665eeda57","date":"2016-06-29T04:31:11.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda57/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda57/","excerpt":"","text":"当我们用git时常常会习惯把我们不想上传到远程代码库中的一些本地文件（夹）放在一个叫做.gitignore的文件中，例如常见的本地build文件夹，一些IDE如Intellig,Eclipse的项目管理文件，但有些时候我们会遇到这样的问题：放入gitignore文件夹中的文件却还是被git index, 当你通过git status 显示文件状态时，他们并没有被忽略。问题场景当你在git库中编写某些代码文件，并已经stage该文件之后，你发现某个文件你不想用了，想在以后的改变中忽略它。然后你再你的.gitignore文件中加入该文件名，结果它并没有被忽略。当你从远程代码库中git clone一份代码中本地并做些修改，build，然后通过git add .等stage了这些改变，当你通过git status查看状态时发现不小心把build/文件夹给add进来了。于是你在.gitignore文件中加入了build/，但发现并不起作用。根本原因.gitignore文件只是ignore没有被staged(cached)文件，对于已经被staged文件，加入ignore文件时一定要先从staged移除。下面这段话来自github： .gitignore文件不工作 因此，要想用gitignore忽略文件，必须先把它们从staged中移除：[code]git rm --cached file/path/to/be/ignored[/code]commit你已有的改变，保存当前的工作。[code]git rm --cached file/path/to/be/ignoredgit add .git commit -m &quot;fixed untracked files&quot;[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"brew 安装  go 两个环境变量如何配置","slug":"history/tech/5953c4d0c2b92f5665eeda59","date":"2016-06-28T20:41:30.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda59/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda59/","excerpt":"","text":"[code]GOROOT: go的安装路径,官方包路径根据这个设置自动匹配GOPATH: 工作路径(其实不应该用中文翻译解释，直接说GOPATH更合适)[/code][code]export GOROOT=/usr/local/opt/go/libexecexport GOPATH=/Users/wangwilliam/Applications/Goexport PATH=GOROOT/bin:GOROOT/bin:GOROOT/bin:PATH[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"go","slug":"go","permalink":"https://wangxiuwen.github.io/tags/go/"}],"author":"wangxiuwen"},{"title":"mac 添加sublime 命令行快捷键","slug":"history/tech/5953c4d0c2b92f5665eeda58","date":"2016-06-28T19:42:49.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda58/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda58/","excerpt":"","text":"[code]vim ~/.bash_profile[/code]添加：[code]alias subl=’’/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl’’[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mac","slug":"mac","permalink":"https://wangxiuwen.github.io/tags/mac/"}],"author":"wangxiuwen"},{"title":"git 提交报错 src refspec master does not match any","slug":"history/tech/5953c4d0c2b92f5665eeda56","date":"2016-06-27T22:08:18.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda56/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda56/","excerpt":"","text":"报错信息：[code]error: src refspec master does not match any[/code]原因：我只是添加了目录，没有文件可以提交。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"logstash hadoop Failed to flush outgoing items AlreadyBeingCreatedException","slug":"history/tech/5953c4d0c2b92f5665eeda55","date":"2016-06-25T02:24:40.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda55/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda55/","excerpt":"","text":"logstash 配置文件：[code]input {kafka {zk_connect =&gt; &quot;xxxxxxx:2181/kafka/xxx&quot;group_id =&gt; &quot;logstash_hadoop&quot;topic_id =&gt; &quot;log&quot;reset_beginning =&gt; trueconsumer_threads =&gt; 5decorate_events =&gt; truecodec =&gt; json}}filter {date {locale =&gt; &quot;en&quot;match =&gt; [&quot;timestamp&quot;, &quot;yyyy-MM-dd HH:mm:ss&quot;]}}webhdfs {use_httpfs =&gt; falseflush_size =&gt; 5idle_flush_time =&gt; 0.5workers =&gt; 1host =&gt; “xxx.xxx.xx.x”port =&gt; 50070user =&gt; “logstash”path =&gt; “/api/logs/dt=%{+YYYY-MM-dd}/logstash-%{+HH}.log”}[/code]问题 1: Failed to flush outgoing items[code]{:timestamp=&gt;“2016-06-25T09:26:37.151000+0800”, :message=&gt;“Failed to flush outgoing items”, :outgoing_count=&gt;1, :exception=&gt;“WebHDFS::ServerError”, :backtrace=&gt;[&quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/webhdfs-0.8.0/lib/webhdfs/client_v1.rb:351:in request'&amp;quot;, &amp;quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/webhdfs-0.8.0/lib/webhdfs/client_v1.rb:349:inrequest’&quot;, “/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/webhdfs-0.8.0/lib/webhdfs/client_v1.rb:270:in operate_requests'&amp;quot;, &amp;quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/webhdfs-0.8.0/lib/webhdfs/client_v1.rb:73:increate’”, “/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-output-webhdfs-2.0.4/lib/logstash/outputs/webhdfs.rb:210:in write_data'&amp;quot;, &amp;quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-output-webhdfs-2.0.4/lib/logstash/outputs/webhdfs.rb:205:inwrite_data’”, “/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-output-webhdfs-2.0.4/lib/logstash/outputs/webhdfs.rb:195:in flush'&amp;quot;, &amp;quot;org/jruby/RubyHash.java:1342:ineach’”, “/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-output-webhdfs-2.0.4/lib/logstash/outputs/webhdfs.rb:183:in flush'&amp;quot;, &amp;quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/stud-0.0.22/lib/stud/buffer.rb:219:inbuffer_flush’”, “org/jruby/RubyHash.java:1342:in each'&amp;quot;, &amp;quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/stud-0.0.22/lib/stud/buffer.rb:216:inbuffer_flush’”, “/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/stud-0.0.22/lib/stud/buffer.rb:159:in buffer_receive'&amp;quot;, &amp;quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-output-webhdfs-2.0.4/lib/logstash/outputs/webhdfs.rb:166:inreceive’”, “/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-core-2.0.0-java/lib/logstash/outputs/base.rb:80:in handle'&amp;quot;, &amp;quot;(eval):409:inoutput_func’”, “/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-core-2.0.0-java/lib/logstash/pipeline.rb:252:in outputworker'&amp;quot;, &amp;quot;/usr/local/logstash-2.0.0/vendor/bundle/jruby/1.9/gems/logstash-core-2.0.0-java/lib/logstash/pipeline.rb:169:instart_outputs’”], :level=&gt;:warn}[/code]解决方案：需要在 logstash 所在机器 /etc/hosts 配置 hadoop 所在机器，logstash 配置的用户要对 hdfs 目录有写权限 (root 用户则不用 chown chgrp)[code]hdfs dfs -mkdir -p /api/logs/hdfs dfs -chown logstash /api/logs/hdfs dfs -chgrp logstash /api/logs/[/code]问题 2: AlreadyBeingCreatedException原因：1台机器，数据备份默认设置为3，通过webhdfs写报错。修改备份数为1正常。[quote]hdfs-site.conf[/quote][code]&lt;configuration&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;&lt;value&gt;master:9001&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;&lt;value&gt;file:/data/hadoop/dfs/name&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;&lt;value&gt;file:/data/hadoop/dfs/data&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.replication&lt;/name&gt;&lt;value&gt;1&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.support.append&lt;/name&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.support.broken.append&lt;/name&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"hdfs","slug":"hdfs","permalink":"https://wangxiuwen.github.io/tags/hdfs/"}],"author":"wangxiuwen"},{"title":"git 启用大小写敏感","slug":"history/tech/5953c4d0c2b92f5665eeda54","date":"2016-06-22T22:39:41.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda54/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda54/","excerpt":"","text":"在mac 下面将已经push到远端的文件，改变其文件名的大小写时，Git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置：git config core.ignorecase false","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"mongoose  mpromise 报错","slug":"history/tech/5953c4d0c2b92f5665eeda53","date":"2016-06-16T02:15:34.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda53/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda53/","excerpt":"","text":"mongoose mpromise 报错：code DeprecationWarning: Mongoose: mpromise (mongoose’s default promise library) is deprecated, plug in your own promise library instead: http://mongoosejs.com/docs/promises.html[/code]解决方案：[code]mongoose.Promise = global.Promise;[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"koa-rest mongodb 报错","slug":"history/tech/5953c4d0c2b92f5665eeda52","date":"2016-06-15T03:23:51.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda52/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda52/","excerpt":"","text":"[code]WangWilliamdeMacBook-Pro-3:koa-rest wangwilliam$ npm test&gt; koa-rest@1.0.0 test /Users/wangwilliam/projects/others/koa-rest&gt; mocha --harmony{ Error: Cannot find module ‘…/build/Release/bson’at Function.Module._resolveFilename (module.js:440:15)at Function.Module._load (module.js:388:25)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/bson/ext/index.js:15:10)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/bson/lib/bson/index.js:3:24)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/mongodb/lib/mongodb/index.js:2:22)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/monk/node_modules/mongoskin/lib/index.js:14:13)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/monk/node_modules/mongoskin/index.js:1:132)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/monk/lib/manager.js:5:17)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/monk/lib/monk.js:6:28)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/controllers/books.js:4:12)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/app.js:2:13)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/test/routeSpec.js:4:11)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Module.require (module.js:468:17)at require (internal/module.js:20:19)at /Users/wangwilliam/projects/others/koa-rest/node_modules/mocha/lib/mocha.js:220:27at Array.forEach (native)at Mocha.loadFiles (/Users/wangwilliam/projects/others/koa-rest/node_modules/mocha/lib/mocha.js:217:14)at Mocha.run (/Users/wangwilliam/projects/others/koa-rest/node_modules/mocha/lib/mocha.js:469:10)at Object.&lt;anonymous&gt; (/Users/wangwilliam/projects/others/koa-rest/node_modules/mocha/bin/_mocha:404:18)at Module._compile (module.js:541:32)at Object.Module._extensions…js (module.js:550:10)at Module.load (module.js:458:32)at tryModuleLoad (module.js:417:12)at Function.Module._load (module.js:409:3)at Function.Module.runMain (module.js:575:10)at startup (node.js:160:18)at node.js:456:3 code: ‘MODULE_NOT_FOUND’ }js-bson: Failed to load c++ bson extension, using pure JS version[/code]解决方案：[quote]/Users/wangwilliam/projects/others/koa-rest/node_modules/bson/ext/index.js[/quote]将[code] // Load the precompiled win32 binaryif(process.platform == “win32” &amp;&amp; process.arch == “x64”) {bson = require(’./win32/x64/bson’);} else if(process.platform == “win32” &amp;&amp; process.arch == “ia32”) {bson = require(’./win32/ia32/bson’);} else {bson = require(’…/build/Release/bson’);} [/code]修改为：[code] // Load the precompiled win32 binaryif(process.platform == “win32” &amp;&amp; process.arch == “x64”) {bson = require(’./win32/x64/bson’);} else if(process.platform == “win32” &amp;&amp; process.arch == “ia32”) {bson = require(’./win32/ia32/bson’);} else {bson = require(‘bson’);} [/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"nodejs mac 下蓝牙","slug":"history/tech/5953c4d0c2b92f5665eeda51","date":"2016-06-11T18:16:23.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda51/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda51/","excerpt":"","text":"主设备：noble从设备：bleno","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"nodejs module.parent","slug":"history/tech/5953c4d0c2b92f5665eeda50","date":"2016-06-05T19:08:46.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda50/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda50/","excerpt":"","text":"module.parent 对象","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"centos 7 安装 pptpd vpn","slug":"history/tech/5953c4d0c2b92f5665eeda4f","date":"2016-06-03T19:17:03.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda4f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda4f/","excerpt":"","text":"安装 pptp：[code] yum -y install ppp pptpd[/code]配置pptpd：[code]vi /etc/pptpd.conflocalip 192.168.100.100remoteip 192.168.100.101-110vi /etc/ppp/options.pptpdms-dns 8.8.8.8ms-dns 8.8.4.4vi /etc/ppp/chap-secrets[/code]配置内核转发：[code]vi /etc/sysctl.confnet.ipv4.ip_forward = 1sysctl -p[/code]pptpd 开机启动：[code]/bin/systemctl start pptpd.servicesystemctl enable pptpd.service[/code]安装iptables 并添加规则：[code] yum install iptables-services -yiptables -t nat -A POSTROUTING -s 192.1.100.0/24 -j SNAT --to-source 58.33.244.126iptables -A FORWARD -p tcp --syn -s 192.1.100.0/255.255.255.0 -j TCPMSS --set-mss 1356service iptables saveiptables: Saving firewall rules to /etc/sysconfig/iptables:[ OKsystemctl enable iptables[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"OS X 安装 lrzsz","slug":"history/tech/5953c4d0c2b92f5665eeda4e","date":"2016-06-03T04:37:43.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda4e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda4e/","excerpt":"","text":"服务器安装：[code]apt-get install lrzsz[/code]mac 安装：[code]brew install lrzsz[/code]下载命令脚本：[code]git clone https://github.com/mmastrac/iterm2-zmodem.gitcd iterm2-zmodemcp ./item* /usr/local/bin/chmod 777 /usr/local/bin/item*[/code]item command ＋ ，[attach]7[/attach][attach]6[/attach][code] Regular expression: rz waiting to receive.**B0100Action: Run Silent CoprocessParameters: /usr/local/bin/iterm2-send-zmodem.shRegular expression: \\*\\*B00000000000000 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-recv-zmodem.sh[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"OSX","slug":"OSX","permalink":"https://wangxiuwen.github.io/tags/OSX/"}],"author":"wangxiuwen"},{"title":"git 分支常用命令","slug":"history/tech/5953c4d0c2b92f5665eeda4d","date":"2016-06-02T03:09:43.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda4d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda4d/","excerpt":"","text":"显示origin仓库下所有分支：[code]git remote show origin[/code]将本地develop分支推到mocha仓库master分支[code]git push mocha develop:master[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"docker 删除了 ~/.docker 报错","slug":"history/tech/5953c4d0c2b92f5665eeda4b","date":"2016-06-01T00:06:26.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda4b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda4b/","excerpt":"","text":"docker 删除了 ~/.docker 报错：[code]Last login: Wed Jun 1 07:57:49 on ttys000localhost:~ wangwilliam$ bash --login ‘/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh’Error checking TLS connection: Something went wrong running an SSH command!command : ip addr showerr : exit status 255[/code]解决：[code]$ docker-machine rm default$ docker-machine create --driver virtualbox default[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"MAC 下 docker 报错 Cannot connect to the Docker daemon","slug":"history/tech/5953c4d0c2b92f5665eeda4c","date":"2016-05-31T22:11:20.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda4c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda4c/","excerpt":"","text":"[code]WangWilliamdeMacBook-Pro-3:~ wangwilliam$ docker ps -aCannot connect to the Docker daemon. Is the docker daemon running on this host?WangWilliamdeMacBook-Pro-3:~ wangwilliam$ docker versionClient:Version: 1.11.1API version: 1.23Go version: go1.5.4Git commit: 5604cbeBuilt: Tue Apr 26 23:44:17 2016OS/Arch: darwin/amd64Cannot connect to the Docker daemon. Is the docker daemon running on this host?[/code]解决方案：在shell中执行：[code]eval &quot;$(docker-machine env default)&quot;[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"mac ssh 代理","slug":"history/tech/5953c4d0c2b92f5665eeda4a","date":"2016-05-31T17:19:09.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda4a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda4a/","excerpt":"","text":"[code]ssh -qTfnN -D 8080 root@qianrushi.org[/code][code]ssh -qTfnN -D 7070 username@remote_serverAll the added options are for a ssh session that’s used for tunneling.-q :- be very quite, we are acting only as a tunnel.-T :- Do not allocate a pseudo tty, we are only acting a tunnel.-f :- move the ssh process to background, as we don’t want to interact with this ssh session directly.-N :- Do not execute remote command.-n :- redirect standard input to /dev/null.In addition on a slow line you can gain performance by enabling compression with the -C option.[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"OSX","slug":"OSX","permalink":"https://wangxiuwen.github.io/tags/OSX/"}],"author":"wangxiuwen"},{"title":"取文件第一行 最后一行 截取行指定部分  截取文件名指定部分","slug":"history/tech/5953c4d0c2b92f5665eeda49","date":"2016-05-31T02:29:25.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda49/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda49/","excerpt":"","text":"取文件第一行 最后一行 截取行指定部分 截取文件名指定部分#!/bin/bash file_list=$(ls .) for file in $file_list do if [ -f $file ];then first=`head -1 $file` last=`tail -1 $file` msg=`echo $first | awk -F ':' '{print $2}'` echo ${file%-*} echo $first echo $last echo $msg fi done","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"shell脚本","slug":"shell脚本","permalink":"https://wangxiuwen.github.io/tags/shell%E8%84%9A%E6%9C%AC/"}],"author":"wangxiuwen"},{"title":"shell 截取字符串","slug":"history/tech/5953c4d0c2b92f5665eeda48","date":"2016-05-31T02:22:51.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda48/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda48/","excerpt":"","text":"截取 ‘-’ 号前面的元素[code]${var%-*}[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"shell脚本","slug":"shell脚本","permalink":"https://wangxiuwen.github.io/tags/shell%E8%84%9A%E6%9C%AC/"}],"author":"wangxiuwen"},{"title":"awk 基本分割命令","slug":"history/tech/5953c4d0c2b92f5665eeda47","date":"2016-05-31T02:21:35.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda47/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda47/","excerpt":"","text":"以冒号分割，并打印第二个元素[code]awk -F ‘:’ ‘{print $2}’[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"shell脚本","slug":"shell脚本","permalink":"https://wangxiuwen.github.io/tags/shell%E8%84%9A%E6%9C%AC/"}],"author":"wangxiuwen"},{"title":"linux pptp vim 打开文件卡死","slug":"history/tech/5953c4d0c2b92f5665eeda46","date":"2016-05-30T02:40:42.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda46/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda46/","excerpt":"","text":"问题：客户端A，客户端B分别连接 pptp server ，客户端A通过ssh登录客户端B，vim 打开文件卡死。猜想：网络mtu大过了中间的网络mtu值。分别在server client执行[code]netstat -i[/code]可以看到ppp0默认的mtu值都在300左右。原理：MTU:Maximum Transmission Unit 网络上传送的最大数据包，单位字节，默认一般是1500。大于mtu的包，在系统层会被拆成多个来发。各层级的网络路由设备，会协商大家的mtu，选择一个最小的。协商mtu的时候要发送ICMP包，很多厂商的防火墙会关闭它的传输（防ddos等）。真凶在此。在无法实现协商mtu的时候，各种事件都会影响mtu的确定，实际表现为在传大文件的时候，寻找mtu的过程中，数据包丢了。原理在此。解决方案：解决下载慢：[quote]server: /etc/ppp/options.pptpd 最后一行添加 mtu 1500[/quote]解决上传慢的问题：[quote]client: ifconfig ppp0 mtu 1500[/quote]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"mysql 重置密码","slug":"history/tech/5953c73311a1d5578f3f9a67","date":"2016-05-29T04:06:31.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a67/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a67/","excerpt":"","text":"停止mysql服务：[code]service mysqld stop[size=13] [/size][/code]跳过授权：[code]mysqld_safe --skip-grant-tables[/code]登录mysql修改密码：[code]# mysql -uroot -p ----要求输入密码时，直接回车即可。&gt; use mysql;&gt; update user set password=PASSWORD(‘12345678’) where user=“root”; //将root密码设置为12345678&gt; flush privileges;&gt; quit[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"mysql 远程登录","slug":"history/tech/5953c73311a1d5578f3f9a66","date":"2016-05-29T04:04:27.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a66/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a66/","excerpt":"","text":"缺省状态下，mysql的用户没有远程访问的权限。 改表法mysql -u root -p use mysql; update user set host = '%' where user = 'root'; select host, user from user; 授权法GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'WITH GRANT OPTION；//赋予任何主机访问数据的权限 FLUSH PRIVILEGES；//修改生效 GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%'IDENTIFIED BY 'mypassword' WITH GRANT OPTION; GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'192.168.1.3'IDENTIFIED BY 'mypassword' WITH GRANT OPTION;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"卸载 mysql 先删除了/var/lib/mysql","slug":"history/tech/5953c4d0c2b92f5665eeda45","date":"2016-05-28T19:52:24.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda45/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda45/","excerpt":"","text":"场景是 想卸载重装mysql，先删除了[quote]/var/lib/mysql[/quote]预想的卸载方式失败：[code]sudo apt-get remove mysql-server //卸载[/code]或者[code]apt-get --purge remove mysql-server //配置文件和设置之类的全面删除[/code]随后清理掉多余的dependence：[code]apt-get autoremove[/code]且再次安装报错：[code]root@ubuntu-server:/home# apt-get install mysql-server正在读取软件包列表… 完成正在分析软件包的依赖关系树正在读取状态信息… 完成您可能需要运行“apt-get -f install”来纠正下列错误：下列软件包有未满足的依赖关系：mysql-server-5.7 : 预依赖: mysql-common (&gt;= 5.5) 但是它将不会被安装依赖: mysql-client-5.7 (&gt;= 5.7.12-0ubuntu1) 但是它将不会被安装依赖: mysql-common (&gt;= 5.6.22-1~) 但是它将不会被安装依赖: mysql-server-core-5.7 (= 5.7.12-0ubuntu1) 但是它将不会被安装E: 有未能满足的依赖关系。请尝试不指明软件包的名字来运行“apt-get -f install”(也可以指定一个解决办法)。[/code]网上搜索到一个解决方案，失败：[code]apt-get --fix-broken install[/code]正确的方式：看一下哪一个软件出问题:[code]apt-get -f install[/code]2.卸载，尝试使用sudo dpkg --force-depends --purge xxxx[code]sudo dpkg --force-depends --purge mysql-clientsudo dpkg --force-depends --purge mysql-client-5.7sudo dpkg --force-depends --purge mysql-client-core-5.7sudo dpkg --force-depends --purge mysql-commonsudo dpkg --force-depends --purge mysql-server-5.7[/code][quote]如果遭遇了没有卸载干净或者依赖安装出现问题，会导致你无论怎么重装都报错失败。会提示你安装依赖方面的问题，在这之后无论你安装别的啥，都会提示你当前安装过一个什么东西安装失败了是因为某些依赖的问题。这时候就需要清理掉这些问题重新安装。[/quote]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"spark 从下载到 hello world","slug":"history/tech/5953c73311a1d5578f3f9a65","date":"2016-05-28T04:48:48.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a65/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a65/","excerpt":"","text":"Spark 采用的是 master/slave 架构。Spark 可以运行在yarn mesos 等资源管理框架之上， 也可以以 Standalone cluster manager 进行集群资源管理。Spark 依赖 Hadoop HDFS 作为数据存储。如果是纯计算集群，可以不依赖Hadoop。Spark本身的启动运行是不依赖Hadoop的。Spark集群可以以下方式运行：[quote]主节点 (Spark master node 和 Hadoop NameNode)从节点 (Spark worker nodes 和 Hadoop DataNodes)客户端 (Driver node)[/quote]用户的 driver program 运行在 driver node上。以下是Spark 架构图：以 ubuntu 为例：[code]root@qianrushi:/usr/local/spark-1.6.0-bin-hadoop2.6/conf# cat /etc/issueUbuntu 14.04.4 LTS \\n \\l[/code]首先我们需要配置主机名称，这需要配置两个文件：[quote]/etc/hosts[/quote][quote]/etc/hostname[/quote][code]root@qianrushi:/usr/local/spark-1.6.0-bin-hadoop2.6/conf# cat /etc/hostnameqianrushiroot@qianrushi:/usr/local/spark-1.6.0-bin-hadoop2.6/conf# cat /etc/hosts#127.0.0.1 localhost192.168.200.111 localhost192.168.200.111 qianrushi#127.0.1.1 localhost.localdomain localhost192.168.200.111 localhost.localdomain localhost[/code] [code]root@ubuntu-server:~# tail -n 10 /etc/profileexport JAVA_HOME=/usr/local/java/jdk1.8.0_91export JRE_HOME=JAVAHOME/jreexportCLASSPATH=.:JAVA_HOME/jre export CLASSPATH=.:JAVA​H​​OME/jreexportCLASSPATH=.:JAVA_HOME/lib/dt.jar:JAVAHOME/lib/tools.jarexportPATH=JAVA_HOME/lib/tools.jar export PATH=JAVA​H​​OME/lib/tools.jarexportPATH=JAVA_HOME/bin:$PATHexport SCALA_HOME=/usr/local/scalaexport PATH=PATH:PATH:PATH:SCALA_HOME/binexport HADOOP_HOME=/usr/local/hadoopexport PATH=PATH:PATH:PATH:HADOOP_HOME/bin[/code][code]//----------------------------------------------------------------core-site.xml&lt;configuration&gt;&lt;property&gt;&lt;name&gt;fs.defaultFS&lt;/name&gt;&lt;value&gt;hdfs://ubuntu-server:9011/&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;&lt;value&gt;file:/data/hadoop/tmp&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;//----------------------------------------------------------------hadoop-env.shexport JAVA_HOME=/usr/local/java/jdk1.8.0_91//----------------------------------------------------------------hdfs-site.xml&lt;configuration&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;&lt;value&gt;ubuntu-server:9001&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;&lt;value&gt;file:/data/hadoop/dfs/name&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;&lt;value&gt;file:/data/hadoop/dfs/data&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.replication&lt;/name&gt;&lt;value&gt;3&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;将Hadoop.tmp.dir所指定的目录删除。重新执行命令：hadoop namenode -format只有namenode需要format，secondarynamenode和datanode不需要format。[/code]可以通过spark-shell做简单测试：[quote]SPARK_EXECUTOR_MEMORY 的大小不能超过节点可用内存[/quote][code]SPARK_EXECUTOR_MEMORY=2g ./bin/spark-shell --master spark://master:7077[/code]测试1:[code]scala&gt;val data = new ArrayIntscala&gt;for (i &lt;- 0 until data.length)| data(i) = i + 1scala&gt;val distData = sc.parallelize(data)scala&gt;distData.reduce(+)[/code]测试2:先将文件传到hdfs上：[code]root@qianrushi:~# cat test.txtabcdroot@qianrushi:~# hdfs dfs -ls /root@qianrushi:~# hdfs dfs -put test.txt /[/code]进入sparks-shell：[code]scala&gt;val textFile = sc.textFile(&quot;hdfs://master:9000/test.txt&quot;)scala&gt;textFile.filter(line =&gt; line.contains(&quot;a&quot;)).count()[/code]spark官方文档测试 sparksql：[code]scala&gt;val sqlContext = new org.apache.spark.sql.SQLContext(sc)scala&gt;val df = sqlContext.read.json(&quot;examples/src/main/resources/people.json&quot;)scala&gt;df.show()scala&gt;df.printSchema()scala&gt;df.select(&quot;name&quot;).show()[/code]默认端口：[quote]Hadoop NameNode 50070 http://&lt;Hadoop NameNode private IP&gt;:50070Spark master 8080 http://&lt;spark master private IP&gt;:8080[/quote]cankao:[quote]http://www.cnblogs.com/ringwang/p/3623149.htmlhttp://hsrong.iteye.com/blog/1374734http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=4702http://blog.csdn.net/yeruby/article/details/21542465[/quote]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"spark","slug":"spark","permalink":"https://wangxiuwen.github.io/tags/spark/"}],"author":"wangxiuwen"},{"title":"pdf.js","slug":"history/tech/5953c4d0c2b92f5665eeda42","date":"2016-05-27T03:46:27.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda42/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda42/","excerpt":"","text":"[code]git clone git://github.com/mozilla/pdf.js.gitnpm installnode make generic/generic/web/viewer.html[/code]可以传递参数[code]/generic/web/viewer.html?file=test.pdf[/code]增添一个php文件做跳转：[code]&lt;?phpheader(‘Location: /web/viewer.html’);[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"front-end","slug":"front-end","permalink":"https://wangxiuwen.github.io/tags/front-end/"}],"author":"wangxiuwen"},{"title":"linux 以某个用户身份执行","slug":"history/tech/5953c4d0c2b92f5665eeda44","date":"2016-05-26T19:35:05.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda44/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda44/","excerpt":"","text":"[code]su username -c &quot;command&quot;[/code]例如：[code]su elasticsearch -c &quot;/usr/local/elasticsearch/bin/elasticsearch -d&quot;[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"svnserve 部署","slug":"history/tech/5953c4d0c2b92f5665eeda43","date":"2016-05-26T19:17:40.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda43/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda43/","excerpt":"","text":"启动命令：svnserve -d -r /svn/ --config-file /svn/conf/svnserve.conf --log-file /var/log/svn/svn.log --pid-file /var/run/svn/svn.pid --listen-port 3690配置：/svn/conf/svnserve.conf： anon-access = none auth-access = read password-db = /svn/conf/passwd authz-db = /svn/conf/authz /svn/conf/authz: svn_group = admin [/] @svn_group = r /svn/conf/passwd: admin = 123456","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"svn","slug":"svn","permalink":"https://wangxiuwen.github.io/tags/svn/"}],"author":"wangxiuwen"},{"title":"elasticsearch提示Parse Failure [No mapping found for [filed] in order to sort on]]的解决办法","slug":"history/tech/5953c4d0c2b92f5665eeda41","date":"2016-05-23T19:17:58.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda41/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda41/","excerpt":"","text":"排序代码如下:[code]{&quot;sort&quot;: [{&quot;@timestamp&quot;: {&quot;order&quot;: &quot;desc&quot;}}]}[/code]直接报错[quote]Parse Failure [No mapping found for [filed] in order to sort on]][/quote]修改后的代码如下:[code]{&quot;sort&quot;: [{&quot;@timestamp&quot;: {&quot;order&quot;: &quot;desc&quot;,&quot;ignore_unmapped&quot;: true}}]}[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"awk 命令","slug":"history/tech/5953c4d0c2b92f5665eeda40","date":"2016-05-23T03:18:41.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda40/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda40/","excerpt":"","text":"[code]awk ‘{a[$2]=$0}’[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"unix 下查看so文件信息","slug":"history/tech/5953c4d0c2b92f5665eeda3f","date":"2016-05-18T18:53:00.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda3f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda3f/","excerpt":"","text":"很多非常熟悉windows 进程依赖那个dll，使用depends，linux使用ldd命令。查看函数windows使用dumpbin，linux使用[code]objdump -tT libCavium4J.so |grep generateKeynm -D libCavium4J.so |grep generateKeyreadelf -a libdld.so[/code]lipo -info命令查看.a包属性","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"mac 烧写 ubuntu u盘 启动盘","slug":"history/tech/5953c4d0c2b92f5665eeda3e","date":"2016-05-15T04:41:30.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda3e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda3e/","excerpt":"","text":"将ISO转换成IMG:[code]hdiutil convert -format UDRW -o ubuntu-16.04-desktop-amd64.img ubuntu-16.04-desktop-amd64.iso[/code]查看磁盘设备名，找到U盘的设备名[code]diskutil list[/code]卸载U盘[code]diskutil umountDisk /dev/disk2[/code]使用dd将ubuntu的img写入U盘[code]sudo dd if=ubuntu-16.04-desktop-amd64.dmg of=/dev/disk2 bs=1m[/code]完成！","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mac","slug":"mac","permalink":"https://wangxiuwen.github.io/tags/mac/"}],"author":"wangxiuwen"},{"title":"硬件工程师培训教材.pdf","slug":"history/tech/5953c4d0c2b92f5665eeda3d","date":"2016-05-13T03:46:45.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda3d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda3d/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"硬件设计","slug":"硬件设计","permalink":"https://wangxiuwen.github.io/tags/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"author":"wangxiuwen"},{"title":"mongodb实战pdf","slug":"history/tech/5953c4d0c2b92f5665eeda3c","date":"2016-05-13T00:05:40.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda3c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda3c/","excerpt":"","text":"mongodb实战pdf：mongodb实战","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"nodejs字符串中找数字","slug":"history/tech/5953c4d0c2b92f5665eeda3b","date":"2016-05-12T04:07:09.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda3b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda3b/","excerpt":"","text":"[code]var str = ‘abc123def345’;var args = ;str = str.replace(/\\d+/g, function(){console.log(arguments);args.push(Number(arguments[0]));});console.log(args);[/code]得到结果：[code]/usr/local/bin/node test.js{ ‘0’: ‘123’, ‘1’: 3, ‘2’: ‘abc123def345’ }{ ‘0’: ‘345’, ‘1’: 9, ‘2’: ‘abc123def345’ }[ 123, 345 ][/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"async参数位置","slug":"history/tech/5953c4d0c2b92f5665eed973","date":"2016-05-12T03:57:00.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed973/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed973/","excerpt":"","text":"今天调试nodejs代码，一直报 cb is not a function，查阅官方文档，原来是async 新版本(“async”: “^2.0.0-rc.4”,)将cb参数挪到了后面：[code]async.auto({// this function will just be passed a callbackreadData: async.apply(fs.readFile, ‘data.txt’, ‘utf-8’)showData: [‘readData’, function (results, cb) {// results.readData is the file’s contents// …}]}, callback);[/code]将代码参数互换，问题解决。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"git 暂存区","slug":"history/tech/5953c4d0c2b92f5665eeda0e","date":"2016-05-10T04:03:01.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda0e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda0e/","excerpt":"","text":"当你正在写接口A， 同事过来请你修改bug B， 这时， 可以[code] git stash[/code]将现在的本地修改暂存下来，接着修改 bug B， 将bug B 提交以后， 可以[code]git stash pop[/code]将修改拉出来 接着开发接口A。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"Numpy中使用loadtxt获取单一列数据时设置usecols参数的方法","slug":"history/tech/5953c73311a1d5578f3f9a64","date":"2016-05-08T17:10:13.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a64/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a64/","excerpt":"","text":"loadtxt的功能是读入数据文件，这里的数据文件要求每一行数据的格式相同。这个函数有几个常用的参数，这里给出了参数的意义。[quote]fname：读取文件的文件名。例如C:/Dataset/iris.txt。delimiter：数据之间的分隔符。如使用逗号&quot;,&quot;。dtype：数据类型。如float，str等。usecols：选取数据的列。[/quote]这里主要说一下usecols的用法。如果iris.txt中的前4列，则usecols=(0,1,2,3)。如果取第5列这一列，则usecols=(4,)。这种取单一列的情况容易出问题，请大家多注意。整个语句如下：[code]loadtxt(&quot;./data.csv&quot; , delimiter = &quot;,&quot; , usecols=(0,1,2,3) , dtype=float)loadtxt(&quot;./data.csv&quot; , delimiter = &quot;,&quot; , usecols=(4,) , dtype=str)[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"numpy","slug":"numpy","permalink":"https://wangxiuwen.github.io/tags/numpy/"}],"author":"wangxiuwen"},{"title":"matplotlib 报错","slug":"history/tech/5953c4d0c2b92f5665eeda3a","date":"2016-05-08T02:58:40.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda3a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda3a/","excerpt":"","text":"code localhost:python wangwilliam$ python test.pyTraceback (most recent call last):File “test.py”, line 6, in &lt;module&gt;import matplotlib.pyplot as pltFile “/Users/wangwilliam/projects/mycode/python/venv/lib/python2.7/site-packages/matplotlib/pyplot.py”, line 114, in &lt;module&gt;_backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup()File “/Users/wangwilliam/projects/mycode/python/venv/lib/python2.7/site-packages/matplotlib/backends/init.py”, line 32, in pylab_setupglobals(),locals(),[backend_name],0)File “/Users/wangwilliam/projects/mycode/python/venv/lib/python2.7/site-packages/matplotlib/backends/backend_macosx.py”, line 24, in &lt;module&gt;from matplotlib.backends import _macosxRuntimeError: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework. See the Python documentation for more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or try one of the other backends. If you are Working with Matplotlib in a virtual enviroment see ‘Working with Matplotlib in Virtual environments’ in the Matplotlib FAQ.[/code]在 [url=http://stackoverflow.com/questions/31373163/anaconda-runtime-error-python-is-not-installed-as-a-framework]stackoverflow[/url] 搜索到以下解决方案：[quote]I was having the same problem. Installing an older version of matplotlib did the trick for me. Try this command in your terminal while in your virtual environment:[code]pip install matplotlib==1.4.3[/code][/quote]重新安装matplotlib：[code]pip install matplotlib==1.4.3[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://wangxiuwen.github.io/tags/matplotlib/"}],"author":"wangxiuwen"},{"title":"mac 快捷键","slug":"history/tech/5953c73311a1d5578f3f9a63","date":"2016-05-08T01:04:36.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a63/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a63/","excerpt":"","text":"[url=https://support.apple.com/zh-cn/HT201236]官方链接地址[/url]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"OSX","slug":"OSX","permalink":"https://wangxiuwen.github.io/tags/OSX/"}],"author":"wangxiuwen"},{"title":"删除 mac time machine 本地备份","slug":"history/tech/5953c73311a1d5578f3f9a62","date":"2016-05-08T00:29:42.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a62/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a62/","excerpt":"","text":"进入磁盘目录管理，可以看到有一个MobileBackups文件夹，打开发现里面有一个Backups.backupdb，就是本地备份文件！我们需要删除它。[code]cd /Volumes[/code]错误方式：[code]sudo rm -R xxxxx[/code]正确方式：关闭：[code]sudo tmutil disablelocal[/code]开启：[code]sudo tmutil enablelocal [/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"OSX","slug":"OSX","permalink":"https://wangxiuwen.github.io/tags/OSX/"}],"author":"wangxiuwen"},{"title":"mac 安装pcre openssl","slug":"history/tech/5953c73311a1d5578f3f9a61","date":"2016-05-07T21:59:54.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a61/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a61/","excerpt":"","text":"[code]brew install pcrebrew install openssl[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"OSX","slug":"OSX","permalink":"https://wangxiuwen.github.io/tags/OSX/"}],"author":"wangxiuwen"},{"title":"linux 杀死远程登录用户","slug":"history/tech/5953c73311a1d5578f3f9a60","date":"2016-05-05T19:37:17.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a60/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a60/","excerpt":"","text":"1.首先看一下当前有哪些用户在服务器中，用who 命令也行， w 命令显示的信息更全一些[code][root@Scpman ~]# w13:12:29 up 1:46, 5 users, load average: 0.18, 0.16, 0.23USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot tty3 - 12:10 53:04 0.07s 0.07s -bashroot tty1 :0 11:27 1:46m 5:25 5:25 /usr/bin/Xorg :root pts/0 :0.0 12:34 21:40 0.12s 0.07s man scproot pts/2 :0.0 12:54 0.00s 0.05s 0.00s wxxx pts/3 192.168.99.7 13:12 23.00s 0.01s 0.01s -bash //这个人，人品不好，我不想让他在里面玩了[/code] [code][root@Scpman ~]# ps -aux | grep pts/3 //注意看好这个哦，不要搞错了，用ps -aux 显示进程，然后用grep 筛选对我们有用的信息Warning: bad syntax, perhaps a bogus ‘-’? See /usr/share/doc/procps-3.2.8/FAQxxx 4890 0.0 0.0 108796 1704 ? S 13:12 0:00 sshd: xxx@pts/3 // t第一条xxx 4891 0.0 0.0 110564 1856 pts/3 Ss+ 13:12 0:00 -bash //第二条root 4943 0.0 0.0 103392 820 pts/2 S+ 13:12 0:00 grep –color=auto pts/3[/code] [code][root@Scpman ~]# kill 4890 //注意在上面的时候有两条，一般杀掉数字小的进程。4890小于4891[/code]好了，再看一下当前有谁在系统里[code][root@Scpman ~]# w13:23:22 up 1:57, 4 users, load average: 0.36, 0.23, 0.23USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot tty3 - 12:10 1:03m 0.07s 0.07s -bashroot tty1 :0 11:27 1:57m 5:56 5:56 /usr/bin/Xorg :root pts/0 :0.0 12:34 32:33 0.12s 0.07s man scproot pts/2 :0.0 12:54 0.00s 0.07s 0.00s w[root@Scpman ~]#[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"事务日志 translog","slug":"history/tech/5953c73311a1d5578f3f9a5f","date":"2016-05-03T00:06:00.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a5f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a5f/","excerpt":"","text":"每个分片都有一个事务日志文件，事务日志文件主要是为了保证索引写和删除过程的可靠性，你不需要显式的去提交每个请求（对应于lucene的commit），这一切都是自动的，你也可以显式的执行flush操作来进行请求的提交，还可以使用下面这些参数来进行控制:设置当累计操作达到多少时就执行flush操作，默认值 5000：[code]index.translog.flush_threshold_ops[/code]一旦你的事务日志文件的大小（translog）达到设置的这个值，则开始执行flush操作，默认值500mb：[code]index.translog.flush_threshold_size[/code]每隔多长时间执行一次flush，默认 60m：[code]index.translog.flush_threshold_period [/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"mongodb oplog的格式","slug":"history/tech/5953c73311a1d5578f3f9a5c","date":"2016-04-29T02:48:26.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a5c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a5c/","excerpt":"","text":"它的格式在不同版本的mongodb上有所区别，大致是：[code]PRIMARY&gt; db.version()2.2.2PRIMARY&gt; db.oplog.rs.findOne(){&quot;ts&quot; : Timestamp(1364186197000, 58),&quot;h&quot; : NumberLong(&quot;-7878220425718087654&quot;),&quot;v&quot; : 2,&quot;op&quot; : &quot;u&quot;,&quot;ns&quot; : &quot;exaitem_gmsbatchtask.jdgmsbatchtask&quot;,&quot;o2&quot; : {&quot;_id&quot; : &quot;83f09a98-6a41-497b-a988-99ba5399d296&quot;},&quot;o&quot; : {&quot;_id&quot; : &quot;83f09a98-6a41-497b-a988-99ba5399d296&quot;,&quot;status&quot; : 2,&quot;content&quot; : &quot;&quot;,&quot;type&quot; : 17,&quot;business&quot; : &quot;832722&quot;,&quot;optype&quot; : 2,&quot;addDate&quot; : ISODate(&quot;2013-03-25T04:36:38.511Z&quot;),&quot;modifyDate&quot; : ISODate(&quot;2013-03-25T04:36:39.131Z&quot;),&quot;source&quot; : 5}[/code]ts 由4个字节的timestamp 和 4字节的自增计数器表示。op：[code]“i”： insert“u”： update“d”： delete“c”： db cmd“db”：声明当前数据库 (其中ns 被设置成为=&gt;数据库名称+ ‘.’)“n”: no op,即空操作，其会定期执行以确保时效性 。ns：操作的namespaceo：操作对应的document，即当前操作的内容（比如更新操作时要更新的的字段和值，那些没有被更新的字段及对应的值也会在这里面）o2：执行更新操作的条件，只有update才有该属性。[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"删除文档","slug":"history/tech/5953c73311a1d5578f3f9a5b","date":"2016-04-29T02:42:14.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a5b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a5b/","excerpt":"","text":"删除文档是相当直观的。以下的例子展示了我们怎样删除ID为2的文档：[code]curl -XDELETE ‘localhost:9200/customer/external/2?pretty’ [/code]我们也能够一次删除符合某个查询条件的多个文档。以下的例子展示了如何删除名字中包含“John”的所有的客户： [code]curl -XDELETE ‘localhost:9200/customer/external/_query?pretty’ -d ’ { “query”: { “match”: { “name”: “John” } } }’[/code]注意，以上的URI变成了/_query，以此来表明这是一个“查询删除”API，其中删除查询标准放在请求体中，但是我们仍然使用DELETE。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"python 看文档","slug":"history/tech/5953c73311a1d5578f3f9a5a","date":"2016-04-29T02:27:06.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a5a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a5a/","excerpt":"","text":"[code]import scipyprint scipy.quiver.doc[/code]或者[code]import scipyprint help(scipy.quiver)[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"linux 搜索文件内容","slug":"history/tech/5953c73311a1d5578f3f9a5e","date":"2016-04-28T19:04:05.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a5e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a5e/","excerpt":"","text":"[code]grep -Rn --color=auto --include=&quot;.&quot; &quot;config_file&quot; ./ -C 0[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"hdfs 合并生成的文件","slug":"history/tech/5953c73311a1d5578f3f9a5d","date":"2016-04-28T18:57:22.000Z","updated":"2020-11-29T01:42:08.759Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a5d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a5d/","excerpt":"","text":"[code]bin/hdfs dfs -getmerge hdfs://master:8080/output result[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"hdfs","slug":"hdfs","permalink":"https://wangxiuwen.github.io/tags/hdfs/"}],"author":"wangxiuwen"},{"title":"redis 3.0.7编译安装","slug":"history/tech/5953c73311a1d5578f3f9a59","date":"2016-04-28T03:35:37.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c73311a1d5578f3f9a59/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c73311a1d5578f3f9a59/","excerpt":"","text":"1234cd deps; make hiredis lua jemalloc linenoisecd ..make MALLOC=libcmake PREFIX=/usr/local/redis install或1234cd deps; make hiredis lua jemalloc linenoisecd ..make MALLOC=jemallocmake PREFIX=/usr/local/redis install","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"supervisord 常用操作","slug":"history/tech/5953c4d0c2b92f5665eeda39","date":"2016-04-18T03:31:30.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda39/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda39/","excerpt":"","text":"help 查看命令帮助，如：[code]supervisorctl help rereadupdate Reload config and add/remove as necessaryreload Restart the remote supervisord.reread Reload the daemon’s configuration filesstart/restart/stop program_name (注意,这里不会重新update配置,所以要reread下)[/code]","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"mongodb 增量备份","slug":"history/tech/5953c4d0c2b92f5665eeda38","date":"2016-04-17T21:30:19.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda38/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda38/","excerpt":"","text":"mongodb数据量变大后，备份数据就会成为头疼的问题了，备份耗时会越来越长了。下面介绍一款mongodb增量备份与恢复工具mongobackup。介绍mongobackup是用于复制集的增量备份与恢复工具。在恢复时，需要结合全量备份与恢复使用。参见：http://pan.baidu.com/s/1u1vwu#dir增量备份2.1 全量备份 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 -h 10.1.11.99 --backup1 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 -h 10.1.11.99 --backup2.2 流模式备份 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 –h 10.1.11.99 --backup --stream1 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 –h 10.1.11.99 --backup --stream2.3 指定备份初始时间点 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 -h 10.1.11.99 --backup -s 1385367056,11 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 -h 10.1.11.99 --backup -s 1385367056,1增量 恢复必须指定起止时间点，配合全备，可以恢复到任意时间点（结束时间点），开始时间点可以理解为全备的时间点。 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 -h 10.1.11.99 --recovery -s 1385367098,27350 -t 1385367132,35490 ./backup/1 mongobackup -u ttlsa -p ‘www.ttlsa.com’ --port 27017 -h 10.1.11.99 --recovery -s 1385367098,273","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"python中文注释方法","slug":"history/tech/5953c4d0c2b92f5665eeda37","date":"2016-04-16T19:06:54.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda37/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda37/","excerpt":"","text":"在python编写代码的时候，避免不了会出现或是用到中文，这时候你需要在文件开头加上中文注释。如果开头不声明保存编码的格式是什么，那么它会默认使用ASKII码保存文件，这时如果你的代码中有中文就会出错了，即使你的中文是包含在注释里面的。所以加上中文注释很重要。#coding=utf-8或者：#coding=gbk","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"Numpy中使用loadtxt获取单一列数据时设置usecols参数的方法","slug":"history/tech/5953c4d0c2b92f5665eeda36","date":"2016-04-16T18:59:13.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda36/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda36/","excerpt":"","text":"loadtxt的功能是读入数据文件，这里的数据文件要求每一行数据的格式相同。这个函数有几个常用的参数，http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html给出了参数的意义。fname：读取文件的文件名。例如C:/Dataset/iris.txt。delimiter：数据之间的分隔符。如使用逗号&quot;,&quot;。dtype：数据类型。如float，str等。usecols：选取数据的列。这里主要说一下usecols的用法。如果iris.txt中的前4列，则usecols=(0,1,2,3)。如果取第5列这一列，则usecols=(4,)。这种取单一列的情况容易出问题，请大家多注意。整个语句如下：loadtxt(“C:/Dataset/iris.txt” , delimiter = “,” , usecols=(0,1,2,3) , dtype=float)loadtxt(“C:/Dataset/iris.txt” , delimiter = “,” , usecols=(4,) , dtype=str)顶0","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"No space left on device","slug":"history/tech/5953c4d0c2b92f5665eeda35","date":"2016-04-16T01:22:59.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda35/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda35/","excerpt":"","text":"今天想要设置crontab时出现，No space left on device，后来查了下，才知道是因为inode已经满了，所以系统无法再创建文件在/var/spoo/clientmqueue/下有超多的文件 ls 半天没反应用rm -rf * 会自动跳出root，用xargs来解决。# cd /var/spool/clientmqueue# ls | xargs rm -f原因分析：系统中cron执行的程序有输出内容，输出内容会以邮件形式发给cron的用户，而sendmail没有启动所以就产生了这些文件；解决办法: 将crontab里面的命令后面加上&gt; /dev/null 2&gt;&amp;1接下来我从网上收集的也积累下，省得下次再遇到别的又找，如下：故障现象:1 when you create a new directory or file , system will say : No space left on device# mkdir aamkdir: cannot create directory aa': No space left on device 2 when create crontab for account shelladm , you will receive error information as follows: &quot;crontab.6655&quot; 1L, 13C writtencrontab: installing new crontabcron/tmp.6655: No space left on devicecrontab: edits left in /tmp/crontab.6655处理步骤:1 检查分区使用率# df -lk Filesystem 1K-blocks Used Available Use% Mounted on /dev/hda2 3020172 136008 2730744 5% / /dev/hda1 101089 9378 86492 10% /boot /dev/hda7 105708092 38996880 61341488 39% /b2006 none 1028548 0 1028548 0% /dev/shm /dev/hda3 3020172 1421092 1445660 50% /usr /dev/hda6 497829 371795 100332 79% /var 分区/var的使用率只有79%，系统有空间可以用2 检查/var/lock下的文件，删除/var/lock/subsys/nfs后，touch /var/aa，成功创建文件，删除/var/aa3 发现删除/var/lock下的任意一个文件后#touch /var/aa -------------------成功# touch aa1 -------------------失败 touch: creatingaa1’: No space left on device4 将检查扩大到/var下的其他目录， cd /var/www/icons mv a.gif /tmp mv a.png /tmp -------------------移走两个文件 df -li touch aa touch bb touch cctouch: creating `cc’: No space left on device -----------只能创建两个文件，当创建第三个文件时，出错5 怀疑分区/var的inode用尽导致上述问题，检查inode使用率# df -liFilesystem Inodes IUsed IFree IUse% Mounted on/dev/hda2 384000 23698 360302 7% //dev/hda1 26104 41 26063 1% /boot/dev/hda7 13434880 7964 13426916 1% /b2006none 257137 1 257136 1% /dev/shm/dev/hda3 384000 78026 305974 21% /usr/dev/hda6 128520 128520 0 100% /var发现/var的inode使用率已经达到100%，空余的inode为06 分区/var没有配置quota ,平均每个inode的占用空间为：497829k(var size)/128520(inodes)=3.87k，说明分区的最小block为4k，无法增加inode限额。7 发现/var/spool/clientmqueue下面有太多的文件，共有127679个，占用了127679/128520(inodes)=99.3%的inode系统的邮件配置有问题，导致系统发出的邮件堆积在队列中，占用的大量的inode.处理方法：确认/var/spool/clientmqueue下的文件已经无用后，删除之。然后/var写入正常。最好的解决办法是重新设置系统邮件，使其能正常发送。删除文件后的inode使用情况 df -liFilesystem Inodes IUsed IFree IUse% Mounted on/dev/hda2 384000 23698 360302 7% //dev/hda1 26104 41 26063 1% /boot/dev/hda7 13434880 7964 13426916 1% /b2006none 257137 1 257136 1% /dev/shm/dev/hda3 384000 78026 305974 21% /usr/dev/hda6 128520 4561 123959 4% /var结论：分区/var的inode全部用尽，free inode为0，导致无法创建新的文件或目录，以后遇到类似的问题要注意用df -li 检查inode的使用情况。################################################################################当启动apache的时候报这种错：No space left on device: Couldn’t create accept lockdf -h 一下发现不是磁盘空间的问题，google了一下发现是系统的Semaphore Arrays不够用了，用以下命令可以查看所有的Semaphore Arrays：ipcs -s 然后用这行命令删除所有的Semaphore Arrays即可：ipcs -s | grep nobody | perl -lane 'print ipcrm sem $F’ （其中nobody表示用户名）","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"elasticsearch 遇到的一些问题","slug":"history/tech/5953c4d0c2b92f5665eeda34","date":"2016-04-16T01:19:31.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda34/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda34/","excerpt":"","text":"1.由gc引起节点脱离集群因为gc时会使jvm停止工作，如果某个节点gc时间过长，master ping3次（zen discovery默认ping失败重试3次）不通后就会把该节点剔除出集群，从而导致索引进行重新分配。解决方法：（1）优化gc，减少gc时间。（2）调大zen discovery的重试次数（es参数：ping_retries）和超时时间（es参数：ping_timeout）。后来发现根本原因是有个节点的系统所在硬盘满了。导致系统性能下降。2.out of memory错误因为默认情况下es对字段数据缓存（Field Data Cache）大小是无限制的，查询时会把字段值放到内存，特别是facet查询，对内存要求非常高，它会把结果都放在内存，然后进行排序等操作，一直使用内存，直到内存用完，当内存不够用时就有可能出现out of memory错误。解决方法：（1）设置es的缓存类型为Soft Reference，它的主要特点是据有较强的引用功能。只有当内存不够的时候，才进行回收这类内存，因此在内存足够的时候，它们通常不被回收。另外，这些引 用对象还能保证在Java抛出OutOfMemory 异常之前，被设置为null。它可以用于实现一些常用图片的缓存，实现Cache的功能，保证最大限度的使用内存而不引起OutOfMemory。在es的配置文件加上index.cache.field.type: soft即可。（2）设置es最大缓存数据条数和缓存失效时间，通过设置index.cache.field.max_size: 50000来把缓存field的最大值设置为50000，设置index.cache.field.expire: 10m把过期时间设置成10分钟。3.无法创建本地线程问题es恢复时报错： RecoverFilesRecoveryException[ Failed to transfer files with total size of ]; nested: OutOfMemoryError; ]]刚开始以为是文件句柄数限制，但想到之前报的是too many open file这个错误，并且也把数据改大了。查资料得知一个进程的jvm进程的最大线程数为：虚拟内存/（堆栈大小10241024），也就是说虚拟内存越大或堆栈越小，能创建的线程越多。重新设置后还是会报那这错，按理说可创建线程数完全够用了的，就想是不是系统的一些限制。后来在网上找到说是max user processes的问题，这个值默认是1024，这个参数单看名字是用户最大打开的进程数，但看官方说明，就是用户最多可创建线程数，因为一个进程最少有一个线程，所以间接影响到最大进程数。调大这个参数后就没有报这个错了。解决方法：（1）增大jvm的heap内存或降低xss堆栈大小（默认的是512K）。（2）打开/etc/security/limits.conf ，把soft nproc 1024这行的1024改大就行了。4.集群状态为黄色时并发插入数据报错: index , type , id , message [UnavailableShardsException[ shardIt, active : Timeout waiting for , request: org.elasticsearch.action.bulk.BulkShardRequest@5989fa07]]这是错误信息，当时集群状态为黄色，即副本没有分配。当时副本设置为2，只有一个节点，当你设置的副本大于可分配的机器时，此时如果你插入数据就有可能报上面的错，因为es的写一致性默认是使用quorum，即quorum值必须大于（副本数/2+1），我这里2/2+1=2也就是说要要至少插入到两份索引中，由于只有一个节点，quorum等于1，所以只插入到主索引，副本找不到从而报上面那个错。解决方法：（1）去掉没分配的副本。（2）把写一致性改成one，即只写入一份索引就行。5.设置jvm锁住内存时启动警告当设置bootstrap.mlockall: true时，启动es报警告Unknown mlockall error 0，因为linux系统默认能让进程锁住的内存为45k。解决方法：设置为无限制，linux命令：ulimit -l unlimited6.错误使用api导致集群卡死其实这个是很低级的错误。功能就是更新一些数据，可能会对一些数据进行删除，但删除时同事使用了deleteByQuery这个接口，通过构造BoolQuery把要删除数据的id传进去，查出这些数据删除。但问题是BoolQuery最多只支持1024个条件，100个条件都已经很多了，所以这样的查询一下子就把es集群卡死了。解决方法：用bulkRequest进行批量删除操作。7.org.elasticsearch.transport.RemoteTransportException: Failed to deserialize exception response from stream原因:es节点之间的JDK版本不一样解决方法：统一JDK环境8 **. org.elasticsearch.client.transport.NoNodeAvailableException: No node available**1） 端口错client = new TransportClient().addTransportAddress(new InetSocketTransportAddress(ipAddress, 9300));这里9300 写成9200的话会No node available要是你连的不是本机，注意IP有没有正确2 ）jar报引用版本不匹配，开启的服务是什么版本，引用的jar最好匹配（这个我没有去试，反正我的是匹配的）3） 要是你改了集群名字，还有设置集群名字Settings settings = ImmutableSettings.settingsBuilder().put(“cluster.name”, “xxx”).build(); client = new TransportClient(settings).addTransportAddress(new InetSocketTransportAddress(ipAddress, 9300));4）集群超过5s没有响应解决方法1.设置client.transport.ping_timeout设大2.代码内加入while (true) {try {bulk.execute().actionGet(getRetryTimeout());break;}catch (NoNodeAvailableException cont) {Thread.sleep(5000);continue;}}9.elasticsearch近日被发现漏洞，可以远程执行任意代码，由于 elasticsearch提供了http接口，导致可能通过CSRF等方式借助恶意页面浏览发生攻击。漏洞影响版本:elasticsearch 1.2以下测试代码：http:// ESSERVERIP:9200/search?source=%7B%22size%22%3A1%2C%22query%22%3A%7B%22filtered%22%3A%7B%22query%22%3A%7B%22match_all%22%3A%7B%7D%7D%7D%7D%2C%22script_fields%22%3A%7B%22%2Fetc%2Fhosts%22%3A%7B%22script%22%3A%22import%20java.util.%3B%5Cnimport%20java.io.%3B%5Cnnew%20Scanner(new%20File(%5C%22%2Fetc%2Fhosts%5C%22)).useDelimiter(%5C%22%5C%5C%5C%5CZ%5C%22).next()%3B%22%7D%2C%22%2Fetc%2Fpasswd%22%3A%7B%22script%22%3A%22import%20java.util.%3B%5Cnimport%20java.io.%3B%5Cnnew%20Scanner(new%20File(%5C%22%2Fetc%2Fpasswd%5C%22)).useDelimiter(%5C%22%5C%5C%5C%5CZ%5C%22).next()%3B%22%7D%7D%7D&amp;callback=jQuery111102863897154977554_1400571156308&amp;=1400571156309浏览器会返回/etc/passwd内容解决方案：1、在配置文件elasticsearch.yml里设置script.disable_dynamic: true2、严格限制可访问elasticsearch服务的IP地址**参考：**http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_disabling_dynamic_scripts重启后报503错误详情如此下： Message not fully read (request) for andaction , resetting failed to send join request to master [[UG2WbJpDTHOB-EjzJFRsow][inet]], reason [org.elasticsearch.transport.RemoteTransportException:[inet]; org.elasticsearch.transport.RemoteTransportException: [inet]; org.elasticsearch.ElasticsearchIllegalArgumentException: No custom index metadata factory registered for type ]问题原因：都采用默认集群名字的话，不同人不同I配置发到集群会进行连接并选Master，有时候可能因为IP限制连接不上。更改：自己的测试服务尽量个性命名参考文献： http://blog.csdn.net/laigood/article/details/8193170from http://blog.csdn.net/july_2/article/details/24728733","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"搭建docker仓库2","slug":"history/tech/5953c4d0c2b92f5665eeda33","date":"2016-04-13T18:56:26.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda33/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda33/","excerpt":"","text":"https://hub.docker.com/ 是 Docker 官方的公共仓库服务器，用户在 DockerHub 上只能创建一个私有仓库，这对于有些用户是不够用的，而且 DockerHub 服务器的访问速度也是个很大问题，那么我们希望能在自己本地的服务器上创建一个类似于 DockerHub 仓库服务器供团队使用，这也是可以的。我测试的环境是 Mac OSX 下，已经通过 Boot2Docker 工具安装好 Docker 的环境，通过 命令boot2docker ip 可以查看虚拟机的 IP 是 192.168.59.104。那么下面我就在自己虚拟机上搭建一个私有的 Docker 仓库服务器：安装运行 Docker-Registry运行官方提供的 registry 镜像，将端口映射到主机的 5000 端口上，其它均使用默认配置：guohl@ghl-MBP ⮀ ~ ⮀ docker run -d -p 5000:5000 registryUnable to find image ‘registry:latest’ locally6cfde7386ab2: Pull complete9789d95d9fda: Pull complete19443e64f223: Pull completeb329371ab73c: Pull completef0daee9a4e8f: Pull completea66e50e56475: Pull complete8ab3d2988df5: Pull complete5f60fa7ea945: Pull completedb22a140c899: Pull complete5b2fff9306bd: Pull complete511136ea3c5a: Already existsf3c84ac3a053: Already existsa1a958a24818: Already exists9fec74352904: Already existsd0955f21bf24: Already existsregistry:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.Status: Downloaded newer image for registry:latest8fb8e82e61822e593e10b59a4e7bbad18c789b34e3b38942d5b63dccb497ed09上传镜像到私有仓库创建好私有仓库之后，我们就可以向该仓库上传镜像，别人也可以从该仓库下载镜像了。查看本地已有的镜像：guohl@ghl-MBP ⮀ ~ ⮀ docker imagesREPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZEnginx latest 637d3b2f5fb5 4 days ago 93.44 MBmysql latest 0feafece277d 11 days ago 282.9 MBwordpress latest f90659c8fdb9 2 weeks ago 451.5 MBubuntu latest d0955f21bf24 4 weeks ago 188.3 MBgoogle/golang latest 3cc1d7ae0e9c 11 weeks ago 611.3 MBhello-world latest e45a5af57b00 3 months ago 910 B通过 docker tage 命令将 hello-world 这个镜像标记为 192.168.59.104:5000/hello-world之后，再 push 到该镜像到私有仓库：guohl@ghl-MBP ⮀ ~ ⮀ docker tag hello-world 192.168.59.104:5000/hello-worldguohl@ghl-MBP ⮀ ~ ⮀ docker push 192.168.59.104:5000/hello-worldFATA Error: v1 ping attempt failed with error: Get https://192.168.59.104:5000/v1/_ping: dial tcp 192.168.59.104:5000: connection refused. If this private registry supports only HTTP or HTTPS with an unknown CA certificate, please add --insecure-registry 192.168.59.104:5000 to the daemon’s arguments. In the case of HTTPS, if you have access to the registry’s CA certificate, no need for the flag; simply place the CA certificate at /etc/docker/certs.d/192.168.59.104:5000/ca.crt发现报错，使用 http://stackoverflow.com/questions/28712455/pushing-files-into-private-registry-in-docker 的解决方法可以解决上面的错误：To use the --insecure-registry option, add it to the file /var/lib/boot2docker/profile inside the boot2docker VM. You can get into the VM with boot2docker ssh. The file contents should look like:EXTRA_ARGS=&quot;–insecure-registry REGISTRY_IP:PORT&quot; You will then need to restart boot2docker (e.g. boot2docker restart).步骤如下：使用 boot2docker ssh 登陆到 boot2docker 虚拟机修改 /var/lib/boot2docker/profile 文件，向该文件中增加一行：EXTRA_ARGS=&quot;–insecure-registry 192.168.59.104:5000&quot;退出该虚拟机并使用命令 boot2docker restart 重启 boot2docker完成重启之后，将私有仓库服务器运行起来，并 push hello-world 到该仓库：guohl@ghl-MBP ⮀ ~ ⮀ docker run -d -p 5000:5000 registry4935607095a22655da1ef91feb6f569264a50529cb8d594d520fe62da81250dbguohl@ghl-MBP ⮀ ~ ⮀ docker push 192.168.59.104:5000/testThe push refers to a repository (len: 1)Sending image listPushing repository 192.168.59.104:5000/test (1 tags)511136ea3c5a: Image successfully pushed31cbccb51277: Image successfully pushede45a5af57b00: Image successfully pushedPushing tag for rev on {http://192.168.59.104:5000/v1/repositories/test/tags/latest}使用 Docker 的 RESTful API 可以查看仓库服务器中的镜像：guohl@ghl-MBP ⮀ ~ ⮀ curl http://192.168.59.104:5000/v1/search{“num_results”: 1, “query”: “”, “results”: }%表示 hello-world 镜像已成功长传至私有仓库服务器了。从私有仓库中下载、搜索镜像其他机器可以从私有仓库服务器上下载、搜索镜像等，与从 Docker Hub 上操作无异，只不过需要指出仓库的位置，如：guohl@ghl-MBP ⮀ ~ ⮀ docker rmi -f 192.168.59.104:5000/hello-worldUntagged: 192.168.59.104:5000/hello-world:latestDeleted: e45a5af57b00862e5ef5782a9925979a02ba2b12dff832fd0991335f4a11e5c5Deleted: 31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5dguohl@ghl-MBP ⮀ ~ ⮀ docker search 192.168.59.104:5000/hello-worldNAME DESCRIPTION STARS OFFICIAL AUTOMATEDlibrary/hello-world 0guohl@ghl-MBP ⮀ ~ ⮀ docker pull 192.168.59.104:5000/hello-worldPulling repository 192.168.59.104:5000/hello-worlde45a5af57b00: Download complete511136ea3c5a: Download complete31cbccb51277: Download completeStatus: Downloaded newer image for 192.168.59.104:5000/hello-world:latest参考资料： http://dockerpool.com/static/books/docker_practice/repository/local_repo.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"搭建docker 镜像仓库","slug":"history/tech/5953c4d0c2b92f5665eeda32","date":"2016-04-13T18:55:29.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda32/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda32/","excerpt":"","text":"在国内docker-hub是肯定用不了的，不解释😓。所以最好还是建一个私有的docker-registry，存储一些常用的images方便随时pull。相关链接****github： https://github.com/dotcloud/docker-registry****api： http://docs.docker.com/reference/api/registry_api/****安装docker-registry官方直接给出了一个创建container的命令，在装有docker的机器上运行 docker run -d -p 5000:5000 registry ，这个貌似要下载很多东西，大概500M左右，免去了手工安装的过程，很方便。安装安成之后直接访问 http://ip:5000 就可以看到“docker-registry server (dev) (v0.7.3)”说明安装成功了，更多安装细节，或者配置请参考**https://github.com/dotcloud/docker-registry** 。push到私有docker-registry首先解释一下docker中镜像的命名规则，如：registry.domain.com/mycom/base:latest ，这是一个完整的image名称，下面说下各部分的作用registry.domain.com： image所在服务器地，如果是官方的hub部分忽略mycom：namespace，被称为命名空间，或者说成是你镜像的一个分类base：这个是镜像的具体名字latest：这是此image的版本号，当然也可能是其它的，如1.1之类的然后是如何push到私有docker-registry，直接上命令：docker tag b750fe79269d 127.0.0.1：5000/mycom/baseb750fe79269d 是现有image一个id，你可以从docker hub中pull，或者自己构建image。后面的部分参考上面解释。这一步的工作主要是给image指定一个服务器地址，让docker知道往哪里push。然后就是push，命令：docker push 127.0.0.1：5000/mycom/base然后等待docker push完成就可以从私有docker-registry中pull或者run了，如：docker run 127.0.0.1：5000/mycom/base这里直接使用本机ip，正式使用最好指定一个二级域名，这样ip变了以后也不影响使用。私有docker-registry的使用其实 http://docs.docker.com/reference/api/registry_api/ 这里有docker-registry的api，只是没有如何获取所有image列表的方法，后来查了下，可通过**http://127.0.0.1:5000/v1/search** 查出如果需要的话建立一个页面，可供查询所有可用的image，同事们就可以随时从你的docker-registry中pull他想要的image，这个速度当然是不言而喻的了，更重要的是不用担心会失败👍。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"通过配置CPU参数 worker_cpu_affinity 提升nginx性能","slug":"history/tech/5953c4d0c2b92f5665eeda31","date":"2016-04-12T19:27:04.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda31/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda31/","excerpt":"","text":"Nginx默认没有开启利用多核cpu，我们可以通过增加worker_cpu_affinity配置参数来充分利用多核cpu的性能。cpu是任务处理，计算最关键的资源，cpu核越多，性能就越好。规则设定（1）cpu有多少个核，就有几位数，1代表内核开启，0代表内核关闭（2）worker_processes最多开启8个，8个以上性能就不会再提升了，而且稳定性会变的更低，因此8个进程够用了示例：8核CPU，nginx配置信息： worker_processes 8; worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; CPU工作状况：（输入 top 后，按1 查看）","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"},{"name":"多核","slug":"多核","permalink":"https://wangxiuwen.github.io/tags/%E5%A4%9A%E6%A0%B8/"}],"author":"wangxiuwen"},{"title":"Invalid argument“ setting key ”net.core.somaxconn&quot;","slug":"history/tech/5953c4d0c2b92f5665eeda30","date":"2016-04-12T19:25:26.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda30/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda30/","excerpt":"","text":"I tried setting linux kernel, after editing /etc/sysctl.conf and execute the sysctl -pit show errorInvalid argument&quot; setting key “net.core.somaxconn”Linux distribution: Ubuntu 12.04.4 LTS, x86_64, 3.2.0-60-generic$ cat /etc/sysctl.confnet.ipv4.conf.eth0.arp_notify = 1vm.swappiness = 0net.ipv4.tcp_rmem = 4096 87380 4194304net.ipv4.tcp_wmem = 4096 16384 4194304net.core.wmem_default = 8388608net.core.rmem_default = 8388608net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.core.somaxconn = 262144net.core.netdev_max_backlog = 262144fs.file-max = 1048576net.ipv4.tcp_syncookies = 1net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_fin_timeout = 30net.ipv4.tcp_keepalive_time = 1200net.ipv4.tcp_max_syn_backlog = 409600net.ipv4.ip_local_port_range = 1024 65000net.ipv4.tcp_max_orphans = 262144Can increase the net.core.somaxconn to 262144 ?linux networking linux-kernel sysctlshareimprove this questionasked May 26 '14 at 3:46linbo8461823add a comment1 Answeractive oldest votesup vote16down voteSame issue i got into when i tried to fine tune my nginx. This is the problem with the patch that been made to ubuntu kernel. Thesk_max_ack_backlog field of the sock structure is defined as unsigned short.Therefore, the backlog argument in inet_listen() shouldn’t exceed USHRT_MAX. The backlog argument in the listen() syscall is truncated to the somaxconn value. So, the somaxconn value shouldn’t exceed 65535 (USHRT_MAX).So in short to make your “net.core.somaxconn” work you should not give value greater then 65535et.core.somaxconn = 65535This is sad but we have to live with it until unless you are ok to repatch your kernel. https://lists.ubuntu.com/archives/kernel-team/2013-October/033041.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"压力测试","slug":"压力测试","permalink":"https://wangxiuwen.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"}],"author":"wangxiuwen"},{"title":"linux系统中打开文件数","slug":"history/tech/5953c4d0c2b92f5665eeda2f","date":"2016-04-11T23:10:15.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda2f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda2f/","excerpt":"","text":"不重启修改方式1：ulimit -a ulimit -n 4096 # 也就是限制用户的最大文件打开数为4096个 参数：-a 显示目前资源限制的设定。 -c &lt;core文件上限&gt; 设定core文件的最大值，单位为区块。 -d &lt;数据节区大小&gt; 程序数据节区的最大值，单位为KB。 -f &lt;文件大小&gt; shell所能建立的最大文件，单位为区块。 -H 设定资源的硬性限制，也就是管理员所设下的限制。 -m &lt;内存大小&gt; 指定可使用内存的上限，单位为KB。 -n &lt;文件数目&gt; 指定同一时间最多可开启的文件数。 -p &lt;缓冲区大小&gt; 指定管道缓冲区的大小，单位512字节。 -s &lt;堆叠大小&gt; 指定堆叠的上限，单位为KB。 -S 设定资源的弹性限制。 -t &lt;CPU时间&gt; 指定CPU使用时间的上限，单位为秒。 -u &lt;程序数目&gt; 用户最多可开启的程序数目。 -v &lt;虚拟内存大小&gt; 指定可使用的虚拟内存上限，单位为KB。 方式2：cat /proc/sys/fs/file-nr cat /proc/sys/fs/file-max # 系统总限制，可以通过cat查看目前的值 echo 22158 &gt; /proc/sys/fs/file-max # echo 立刻修改 /proc/sys/fs/file-nr与 file-max 相关，它有三个值:已分配文件句柄的数目 已使用文件句柄的数目 文件句柄的最大数目 该文件是只读的，仅用于显示信息。 查看所有进程的文件打开数：lsof |wc -l 查看某个进程打开的文件数lsof -p pid |wc -l 硬限制是实际的限制，而软限制，是warnning限制，只会做出warning，其实ulimit命令本身就有分软硬设置，加-h就是硬，加-s就是软，默认显示的是软限制，如果修改的时候没有加上的话，就是两个一起改 重启生效第一步，修改用户进程可打开文件数限制，修改/etc/security/limits.conf文件，在文件中添加如下行： root soft nofile 10240 root hard nofile 10240 其中 root 指定了要修改哪个用户的打开文件数限制，可用’*'号表示修改所有用户的限制；soft或hard指定要修改软限制还是硬限制；10240则指定了想要修改的新的限制值，即最大打开文件数(请注意软限制值要小于或等于硬限制)。修改完后保存文件。第二步，修改/etc/pam.d/login文件，在文件中添加如下行： session required /lib/security/pam_limits.so 这是告诉Linux在用户完成系统登录后，应该调用pam_limits.so模块来设置系统对该用户可使用的各种资源数量的最大限制(包括用户可打开的最大文件数限制)，而pam_limits.so模块就会从/etc/security/limits.conf文件中读取配置来设置这些限制值。修改完后保存此文件。第三步，查看Linux系统级的最大打开文件数限制，使用如下命令： $ cat /proc/sys/fs/file-max 12158","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"}],"author":"wangxiuwen"},{"title":"Linux下高并发socket最大连接数所受的各种限制","slug":"history/tech/5953c4d0c2b92f5665eeda2e","date":"2016-04-11T23:07:57.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda2e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda2e/","excerpt":"","text":"1、修改用户进程可打开文件数限制在Linux平台上，无论编写客户端程序还是服务端程序，在进行高并发TCP连接处理时，最高的并发数量都要受到系统对用户单一进程同时可打开文件数量的限制(这是因为系统为每个TCP连接都要创建一个socket句柄，每个socket句柄同时也是一个文件句柄)。可使用ulimit命令查看系统允许当前用户进程打开的文件数限制：$ ulimit -n1024这表示当前用户的每个进程最多允许同时打开1024个文件，这1024个文件中还得除去每个进程必然打开的标准输入，标准输出，标准错误，服务器监听 socket，进程间通讯的unix域socket等文件，那么剩下的可用于客户端socket连接的文件数就只有大概1024-10=1014个左右。也就是说缺省情况下，基于Linux的通讯程序最多允许同时1014个TCP并发连接。对于想支持更高数量的TCP并发连接的通讯处理程序，就必须修改Linux对当前用户的进程同时打开的文件数量的软限制(soft limit)和硬限制(hardlimit)。其中软限制是指Linux在当前系统能够承受的范围内进一步限制用户同时打开的文件数；硬限制则是根据系统硬件资源状况(主要是系统内存)计算出来的系统最多可同时打开的文件数量。通常软限制小于或等于硬限制。修改上述限制的最简单的办法就是使用ulimit命令：$ ulimit -n上述命令中，在中指定要设置的单一进程允许打开的最大文件数。如果系统回显类似于“Operation notpermitted”之类的话，说明上述限制修改失败，实际上是因为在中指定的数值超过了Linux系统对该用户打开文件数的软限制或硬限制。因此，就需要修改Linux系统对用户的关于打开文件数的软限制和硬限制。第一步，修改/etc/security/limits.conf文件，在文件中添加如下行：speng soft nofile 10240speng hard nofile 10240其中speng指定了要修改哪个用户的打开文件数限制，可用’*'号表示修改所有用户的限制；soft或hard指定要修改软限制还是硬限制；10240则指定了想要修改的新的限制值，即最大打开文件数(请注意软限制值要小于或等于硬限制)。修改完后保存文件。第二步，修改/etc/pam.d/login文件，在文件中添加如下行：session required /lib/security/pam_limits.so这是告诉Linux在用户完成系统登录后，应该调用pam_limits.so模块来设置系统对该用户可使用的各种资源数量的最大限制(包括用户可打开的最大文件数限制)，而pam_limits.so模块就会从/etc/security/limits.conf文件中读取配置来设置这些限制值。修改完后保存此文件。第三步，查看Linux系统级的最大打开文件数限制，使用如下命令：$ cat /proc/sys/fs/file-max12158这表明这台Linux系统最多允许同时打开(即包含所有用户打开文件数总和)12158个文件，是Linux系统级硬限制，所有用户级的打开文件数限制都不应超过这个数值。通常这个系统级硬限制是Linux系统在启动时根据系统硬件资源状况计算出来的最佳的最大同时打开文件数限制，如果没有特殊需要，不应该修改此限制，除非想为用户级打开文件数限制设置超过此限制的值。修改此硬限制的方法是修改/etc/rc.local脚本，在脚本中添加如下行：echo 22158 &gt; /proc/sys/fs/file-max这是让Linux在启动完成后强行将系统级打开文件数硬限制设置为22158。修改完后保存此文件。完成上述步骤后重启系统，一般情况下就可以将Linux系统对指定用户的单一进程允许同时打开的最大文件数限制设为指定的数值。如果重启后用 ulimit-n命令查看用户可打开文件数限制仍然低于上述步骤中设置的最大值，这可能是因为在用户登录脚本/etc/profile中使用ulimit -n命令已经将用户可同时打开的文件数做了限制。由于通过ulimit-n修改系统对用户可同时打开文件的最大数限制时，新修改的值只能小于或等于上次 ulimit-n设置的值，因此想用此命令增大这个限制值是不可能的。所以，如果有上述问题存在，就只能去打开/etc/profile脚本文件，在文件中查找是否使用了ulimit-n限制了用户可同时打开的最大文件数量，如果找到，则删除这行命令，或者将其设置的值改为合适的值，然后保存文件，用户退出并重新登录系统即可。通过上述步骤，就为支持高并发TCP连接处理的通讯处理程序解除关于打开文件数量方面的系统限制。2、修改网络内核对TCP连接的有关限制（参考对比下篇文章“优化内核参数”）在Linux上编写支持高并发TCP连接的客户端通讯处理程序时，有时会发现尽管已经解除了系统对用户同时打开文件数的限制，但仍会出现并发TCP连接数增加到一定数量时，再也无法成功建立新的TCP连接的现象。出现这种现在的原因有多种。第一种原因可能是因为Linux网络内核对本地端口号范围有限制。此时，进一步分析为什么无法建立TCP连接，会发现问题出在connect()调用返回失败，查看系统错误提示消息是“Can’t assign requestedaddress”。同时，如果在此时用tcpdump工具监视网络，会发现根本没有TCP连接时客户端发SYN包的网络流量。这些情况说明问题在于本地Linux系统内核中有限制。其实，问题的根本原因在于Linux内核的TCP/IP协议实现模块对系统中所有的客户端TCP连接对应的本地端口号的范围进行了限制(例如，内核限制本地端口号的范围为1024~32768之间)。当系统中某一时刻同时存在太多的TCP客户端连接时，由于每个TCP客户端连接都要占用一个唯一的本地端口号(此端口号在系统的本地端口号范围限制中)，如果现有的TCP客户端连接已将所有的本地端口号占满，则此时就无法为新的TCP客户端连接分配一个本地端口号了，因此系统会在这种情况下在connect()调用中返回失败，并将错误提示消息设为“Can’t assignrequested address”。有关这些控制逻辑可以查看Linux内核源代码，以linux2.6内核为例，可以查看tcp_ipv4.c文件中如下函数：static int tcp_v4_hash_connect(struct sock *sk)请注意上述函数中对变量sysctl_local_port_range的访问控制。变量sysctl_local_port_range的初始化则是在tcp.c文件中的如下函数中设置：void __init tcp_init(void)内核编译时默认设置的本地端口号范围可能太小，因此需要修改此本地端口范围限制。第一步，修改/etc/sysctl.conf文件，在文件中添加如下行：net.ipv4.ip_local_port_range = 1024 65000这表明将系统对本地端口范围限制设置为1024~65000之间。请注意，本地端口范围的最小值必须大于或等于1024；而端口范围的最大值则应小于或等于65535。修改完后保存此文件。第二步，执行sysctl命令：$ sysctl -p如果系统没有错误提示，就表明新的本地端口范围设置成功。如果按上述端口范围进行设置，则理论上单独一个进程最多可以同时建立60000多个TCP客户端连接。第二种无法建立TCP连接的原因可能是因为Linux网络内核的IP_TABLE防火墙对最大跟踪的TCP连接数有限制。此时程序会表现为在 connect()调用中阻塞，如同死机，如果用tcpdump工具监视网络，也会发现根本没有TCP连接时客户端发SYN包的网络流量。由于 IP_TABLE防火墙在内核中会对每个TCP连接的状态进行跟踪，跟踪信息将会放在位于内核内存中的conntrackdatabase中，这个数据库的大小有限，当系统中存在过多的TCP连接时，数据库容量不足，IP_TABLE无法为新的TCP连接建立跟踪信息，于是表现为在connect()调用中阻塞。此时就必须修改内核对最大跟踪的TCP连接数的限制，方法同修改内核对本地端口号范围的限制是类似的：第一步，修改/etc/sysctl.conf文件，在文件中添加如下行：net.ipv4.ip_conntrack_max = 10240这表明将系统对最大跟踪的TCP连接数限制设置为10240。请注意，此限制值要尽量小，以节省对内核内存的占用。第二步，执行sysctl命令：$ sysctl -p如果系统没有错误提示，就表明系统对新的最大跟踪的TCP连接数限制修改成功。如果按上述参数进行设置，则理论上单独一个进程最多可以同时建立10000多个TCP客户端连接。3、使用支持高并发网络I/O的编程技术在Linux上编写高并发TCP连接应用程序时，必须使用合适的网络I/O技术和I/O事件分派机制。可用的I/O技术有同步I/O，非阻塞式同步I/O(也称反应式I/O)，以及异步I/O。在高TCP并发的情形下，如果使用同步I/O，这会严重阻塞程序的运转，除非为每个TCP连接的I/O创建一个线程。但是，过多的线程又会因系统对线程的调度造成巨大开销。因此，在高TCP并发的情形下使用同步 I/O是不可取的，这时可以考虑使用非阻塞式同步I/O或异步I/O。非阻塞式同步I/O的技术包括使用select()，poll()，epoll等机制。异步I/O的技术就是使用AIO。从I/O事件分派机制来看，使用select()是不合适的，因为它所支持的并发连接数有限(通常在1024个以内)。如果考虑性能，poll()也是不合适的，尽管它可以支持的较高的TCP并发数，但是由于其采用“轮询”机制，当并发数较高时，其运行效率相当低，并可能存在I/O事件分派不均，导致部分TCP连接上的I/O出现“饥饿”现象。而如果使用epoll或AIO，则没有上述问题(早期Linux内核的AIO技术实现是通过在内核中为每个 I/O请求创建一个线程来实现的，这种实现机制在高并发TCP连接的情形下使用其实也有严重的性能问题。但在最新的Linux内核中，AIO的实现已经得到改进)。综上所述，在开发支持高并发TCP连接的Linux应用程序时，应尽量使用epoll或AIO技术来实现并发的TCP连接上的I/O控制，这将为提升程序对高并发TCP连接的支持提供有效的I/O保证。内核参数sysctl.conf的优化/etc/sysctl.conf 是用来控制linux网络的配置文件，对于依赖网络的程序（如web服务器和cache服务器）非常重要，RHEL默认提供的最好调整。推荐配置（把原/etc/sysctl.conf内容清掉，把下面内容复制进去）：net.ipv4.ip_local_port_range = 1024 65536net.core.rmem_max=16777216net.core.wmem_max=16777216net.ipv4.tcp_rmem=4096 87380 16777216net.ipv4.tcp_wmem=4096 65536 16777216net.ipv4.tcp_fin_timeout = 10net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_timestamps = 0net.ipv4.tcp_window_scaling = 0net.ipv4.tcp_sack = 0net.core.netdev_max_backlog = 30000net.ipv4.tcp_no_metrics_save=1net.core.somaxconn = 262144net.ipv4.tcp_syncookies = 0net.ipv4.tcp_max_orphans = 262144net.ipv4.tcp_max_syn_backlog = 262144net.ipv4.tcp_synack_retries = 2net.ipv4.tcp_syn_retries = 2这个配置参考于cache服务器varnish的推荐配置和SunOne 服务器系统优化的推荐配置。varnish调优推荐配置的地址为：http://varnish.projects.linpro.no/wiki/Performance不过varnish推荐的配置是有问题的，实际运行表明“net.ipv4.tcp_fin_timeout = 3”的配置会导致页面经常打不开；并且当网友使用的是IE6浏览器时，访问网站一段时间后，所有网页都会打不开，重启浏览器后正常。可能是国外的网速快吧，我们国情决定需要调整“net.ipv4.tcp_fin_timeout = 10”，在10s的情况下，一切正常（实际运行结论）。修改完毕后，执行：/sbin/sysctl -p /etc/sysctl.conf/sbin/sysctl -w net.ipv4.route.flush=1命令生效。为了保险起见，也可以reboot系统。调整文件数：linux系统优化完网络必须调高系统允许打开的文件数才能支持大的并发，默认1024是远远不够的。执行命令：Shell代码echo ulimit -HSn 65536 &gt;&gt; /etc/rc.localecho ulimit -HSn 65536 &gt;&gt;/root/.bash_profileulimit -HSn 65536","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"压力测试","slug":"压力测试","permalink":"https://wangxiuwen.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"}],"author":"wangxiuwen"},{"title":"压力测试中连接数过大问题","slug":"history/tech/5953c4d0c2b92f5665eeda2d","date":"2016-04-11T23:07:22.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda2d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda2d/","excerpt":"","text":"解决问题：nginx 2016/04/1217:14:19 5714#0: accept4() failed (24: Too many open files)调试连接数：3603 2016/04/12 10:24:49 15757#0:1024 worker_connections are not enough&lt;o:p&gt;&lt;/o:p&gt;3604 2016/04/12 10:24:49 15757#0: 1024 worker_connections are not enough3605 2016/04/12 10:24:49 15757#0: 1024 worker_connections are not enough3606 2016/04/12 10:24:49 15757#0: 1024 worker_connections are not enough3607 2016/04/12 10:24:49 15757#0: 1024 worker_connections are not enough最大文件数修改等worker_rlimit_nofile 65535;events {worker_connections 65535;}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"压力测试","slug":"压力测试","permalink":"https://wangxiuwen.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"}],"author":"wangxiuwen"},{"title":"rsync 的断点续传","slug":"history/tech/5953c4d0c2b92f5665eeda2c","date":"2016-04-10T03:47:16.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda2c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda2c/","excerpt":"","text":"经常copy大文件，由于服务器、路由等网络的不确定性，老是出现remote server not responding.于是查了下资料，发现rsync这个工具支持断点续传功能，这里介绍一下。rsync也分服务器端和客户端，使用man查看帮助信息，我们发现rsync有六种不同的工作模式：Local: rsync SRC…Access via remote shell:Pull: rsync HOST:SRC...Push: rsync SRC... HOST:DESTAccess via rsync daemon:Pull: rsync HOST::SRC...rsync rsync://HOST/SRC...Push: rsync SRC... HOST::DESTrsync SRC... rsync://HOST/DESTList remote files: rsync ... rsync://HOST/SRC1. 拷贝本地文件；当SRC和DES路径信息都不包含有单个冒号\":\"分隔符时就启动这种工作模式。 2.使用一个远程shell程序（如rsh、ssh）来实现将本地机器的内容拷贝到远程机器。当DST 路径地址包含单个冒号\":\"分隔符时启动该模式。 3.使用一个远程shell程序（如rsh、ssh）来实现将远程机器的内容拷贝到本地机器。当SRC 地址路径包含单个冒号\":\"分隔符时启动该模式。 4. 从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含\"::\"分隔符时启动该模式。 5. 从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含\"::\"分隔符时启动该模式。 6. 列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。下面以实例来说明： # rsync -vazu -progress mailto:cnangel@10.1.6.160:~/works/ ~/works v：详细提示 a：以archive模式操作，复制目录、符号连接，等价于 -rlptgoD 。 z：压缩 u：只进行更新，防止本地新文件被重写，注意两者机器的时钟的同时 -progress：指显示 以上命令是保持客户机10.1.6.160上的$HOME/works目录和当前机器的$HOME/works目录同步。这经常是我们所说的镜像同步就是这么来的，如果断点续传呢？rsync完全可以做到这一点。man手册再次告诉我们：--partialBy default, rsync will delete any partially transferred file if the transfer isinterrupted. In some circumstances it is more desirable to keep partially transferredfiles. Using the --partial option tells rsync to keep the partial file which shouldmake a subsequent transfer of the rest of the file much faster.--partial-dir=DIRA better way to keep partial files than the --partial option is to specify a DIR thatwill be used to hold the partial data (instead of writing it out to the destinationfile). On the next transfer, rsync will use a file found in this dir as data tospeed up the resumption of the transfer and then delete it after it has served itspurpose.默认的情况下，当rsync传输中断后，新的rsync传输将删除所有的未完成的残余文件片段，然后开始新的传输。而使用--partial后，将会进行我们所说的断点续传。值得注意的是-P这个参数是综合了--partial --progress两个参数，所以rsync的断点续传可以用下面的例子来说明：# _rsync_ -avzP /tmp/bigfile mailto:cnangel@10.1.6.160:/tmp/bigfile另外，还有两个参数也经常用到： t：修改次数 r：递归方式","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"rsync","slug":"history/tech/5953c4d0c2b92f5665eeda2b","date":"2016-04-10T03:46:39.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda2b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda2b/","excerpt":"","text":"遇到的问题是几台游戏服务器，有一台新的服务器之前已经copy(http://www.cnblogs.com/meteoric_cry/archive/2011/03/29/1998581.html)过文件上去，但在测试的过程中发现还是图片无法正常不显示出来，然后用httpwatch去分析请求的资源，发现有一个图片请求的地址是404（文件不存在），然后ssh登录上去，找到指定目录，发现确实是没有这个文件。。。为了不至于再copy一次，就需要使用文件同步的管理软件了，同事推荐了linux下的rsync，小试了一下，还是很不错的。假设有服务器A 和 服务器B，现在登录了服务器B，需要将服务器A上的文件同步到服务器B中，将A中有的B中没有的，或是A中文件比B中的文件要新就全部copy过来。shell命令如下：rsync -zvrtopg -progress -e ‘ssh -p 端口号’ mailto:root@192.xx.xx.xx:/文件目录/ 本机的目录地址语法****rsync -参数 ‘源文件访问路径’****目标路径第一次用的时候，我在源服务器（即上面所指的服务器A）中的文件目录没有加/导致后来直接把那个目录copy过来了，而不是它目录下的所有文件关于rsync 这个命令的一些参数，英文好点就自己直接使用rsync --help去查看了，这里从其它人写的博客中转载过来的。参考了：http://hi.baidu.com/webv/blog/item/7c787a06581dab7e0208819a.htmlhttp://wandering.blog.51cto.com/467932/105113使用之前需要先安装rsync，这个直接自行搜索吧…关于参数的说明：-v, --verbose 详细模式输出-q, --quiet 精简输出模式-c, --checksum 打开校验开关，强制对文件传输进行校验-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD-r, --recursive 对子目录以递归模式处理-R, --relative 使用相对路径信息rsync foo/bar/foo.c remote:/tmp/则在/tmp目录下创建foo.c文件，而如果使用-R参数：rsync -R foo/bar/foo.c remote:/tmp/则会创建文件/tmp/foo/bar/foo.c，也就是会保持完全路径信息。-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用–suffix选项来指定不同的备份文件前缀。–backup-dir 将备份文件(如~filename)存放在在目录下。-suffix=SUFFIX 定义备份文件前缀-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)-l, --links 保留软链结-L, --copy-links 想对待常规文件一样处理软链结–copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结–safe-links 忽略指向SRC路径目录树以外的链结-H, --hard-links 保留硬链结-p, --perms 保持文件权限-o, --owner 保持文件属性信息-g, --group 保持文件属组信息-D, --devices 保持设备文件信息-t, --times 保持文件时间信息-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间-n, --dry-run现实哪些文件将被传输-W, --whole-file 拷贝文件，不进行增量检测-x, --one-file-system 不要跨越文件系统边界-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节-e, --rsh=COMMAND 指定替代rsh的shell程序–rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件–existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件–delete 删除那些DST中SRC没有的文件–delete-excluded 同样删除接收端那些被该选项指定排除的文件–delete-after 传输结束以后再删除–ignore-errors 及时出现IO错误也进行删除–max-delete=NUM 最多删除NUM个文件–partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输–force 强制删除目录，即使不为空–numeric-ids 不将数字的用户和组ID匹配为用户名和组名–timeout=TIME IP超时时间，单位为秒-I, --ignore-times 不跳过那些有同样的时间和长度的文件–size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间–modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0-T --temp-dir=DIR 在DIR中创建临时文件–compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份-P 等同于 --partial–progress 显示备份过程-z, --compress 对备份的文件在传输时进行压缩处理–exclude=PATTERN 指定排除不需要传输的文件模式–include=PATTERN 指定不排除而需要传输的文件模式–exclude-from=FILE 排除FILE中指定模式的文件–include-from=FILE 不排除FILE指定模式匹配的文件–version 打印版本信息–address 绑定到特定的地址–config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件–port=PORT 指定其他的rsync服务端口–blocking-io 对远程shell使用阻塞IO-stats 给出某些文件的传输状态–progress 在传输时现实传输过程–log-format=FORMAT 指定日志文件格式–password-file=FILE 从FILE中得到密码–bwlimit=KBPS 限制I/O带宽，KBytes per second-h, --help 显示帮助信息一般常用的：-v 详细模式输出-r 对子目录以递归模式处理-t 保持文件的时间信息-o 保持文件的属性信息-g 保持文件属组的信息（不清楚这样翻译是否有问题）-p 保持文件权限不变-e, --rsh=COMMAND 指定替代rsh的shell程序-z, --compress 对备份的文件在传输时进行压缩处理–progress 显示备份过程也就是：递归、保证文件一些基本属性不变(创建/修改时间 权限等)、传输文件时压缩以减少带宽消耗，当然还有一个就看需要了:是否删除源中没有，而目标中又有的文件","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"ffi.h","slug":"history/tech/5953c4d0c2b92f5665eeda2a","date":"2016-04-09T04:04:08.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda2a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda2a/","excerpt":"","text":"fatal error: ffi.h: No such file or directory通过下面的命令安装开发源文件解决：sudo apt-get install libffi-dev","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"elasticsearch 处理空值","slug":"history/tech/5953c4d0c2b92f5665eeda29","date":"2016-04-08T02:20:42.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda29/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda29/","excerpt":"","text":"考虑前面的例子，其中文档有一个称为 tags 的字段。这是一个多值字段。文档可以有一个、多个或者没有标签。如果字段没有值，那么它是怎么在倒排索引中存储的呢？这个问题真诡异，因为答案是，它并没有被存储。让我们看一下上一节提到的倒排索引：TokenDocIDsopen_source2search1,2如何存储一个在那个数据结构中不存在的字段呢？压根不行！倒排索引是一系列 token 和包含它的文档的列表。如果字段不存在，那也不会保存任何 token，所以在倒排索引中也不会有任何表示。最终，这意味着 null、[] 和 都是等价的。都不存在于倒排索引中！很显然，真实世界没有这么简单，数据的字段经常会丢失或者包含显式的 null 或者空数组。为了解决这些问题，elasticsearch 有一些工具来处理空值或者丢失的数据。exists Filterexists 过滤器是第一件武器。这个过滤器返回特定字段中拥有任何值的文档。让我们使用 tagging 的例子，索引几个样本文档：POST /my_index/posts/_bulk{ “index”: { “_id”: “1” }}{ “tags” : } …(1){ “index”: { “_id”: “2” }}{ “tags” : } …(2){ “index”: { “_id”: “3” }}{ “other_field” : “some data” } …(3){ “index”: { “_id”: “4” }}{ “tags” : null } …(4){ “index”: { “_id”: “5” }}{ “tags” : } …(5)(1) tags 字段有一个值(2) tags 字段有两个值(3) tags 字段丢失(4) tags 字段设置为 null(5) tag 字段有一个值和一个 null最终的倒排索引就是：TokenDocIDsopen_source2search1,2,5我们的目标是找到设置了 tag 的所有文档。不管是 tag 是什么，只要它出现在文档中。在 SQL 中，我们通常可以使用 IS NOT NULL 查询：SELECT tagsFROM postsWHERE tags IS NOT NULL在 elasticsearch 中，我们就使用 exists 过滤器：GET /my_index/posts/_search{ “query” : { “filtered” : { “filter” : { “exists” : { “field” : “tags” }}}}}最后返回三个文档：“hits” : [ { “_id” : “1”, “_score” : 1.0, “_source” : { “tags” : } }, { “_id” : “5”, “_score” : 1.0, “_source” : { “tags” : } …(1) }, { “_id” : “2”, “_score” : 1.0, “_source” : { “tags” : } }](1) 文档 5 即使包含 null 值也返回了。因为真实值的 tag 被索引了，所以这个字段存在。所以 null 对过滤器没有影响。结果很容易理解。任何在 tags 字段中有 term 的文档都作为命中结果返回了。被排除在外的两个文档就是 3 和 4。missing 过滤器missing 过滤器本质上是 exists 的逆：它返回对应一个特定的字段没有任何值的文档，就像 SQL：SELECT tagsFROM postsWHERE tags IS NULL让我们用 missing 来替换上面例子中 exists 过滤器：GET /my_index/posts/_search{ “query” : { “filtered” : { “filter”: { “missing” : { “field” : “tags” } } } }}正如你所期望的，我们拿到了在 tags 字段上没有真实值的文档——文档 3 和 4：“hits” : 在 null 表示 null 时有时候你需要能够区分字段没有值和字段被显式地设置为 null。根据我们前面看到的默认行为，这是不可能的；数据丢失了。幸运的是，还有一种方法我们可以用一个占位符来替换显式的 null。当指定一个 string、numeric、Boolean 或者日期字段时，你同样能设置 null_value 可以用在任何遇到显式的 null 值的地方。没有一个值的字段显然可以从倒排索引中排除。选择合适的 null_value，确保下面的事项：匹配了字段的类型（type）。你不能在一个类型为 date 的字段上用一个 string 的 null_value不同于字段可能包含的正常值，来避免出令人困惑的出现 null 的真实值exists/missing on Objectsexists/missing 过滤器同样可以用在内部对象上（inner objects），不仅仅核心类型（core types）。假如有下面的文档{ “name” : { “first” : “John”, “last” : “Smith” }}你可以检查 name.first 和 name.last 不仅仅是 name 的存在。然而，在https://www.elastic.co/guide/en/elasticsearch/guide/current/mapping.html中，我们提到对象在内部会进行平化展开成一个简单的字段值结构，像这样：{ “name.first” : “John”, “name.last” : “Smith”}所以，我们如何在 name 字段上使用 exists 和 missing 过滤器，这实际上并不存在于倒排索引中？其原因就是，这会按照如下的过滤器那样：{ “exists” : { “field” : “name” }}实际上是按照：{ “bool”: { “should”: }}执行的。这样也意味着如果 first 和 last 同时是空，name 命名空间就不会存在。文／Not_GOD（简书作者）原文链接：http://www.jianshu.com/p/7a5d706336f1著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"kafka 安装测试","slug":"history/tech/5953c4d0c2b92f5665eeda27","date":"2016-04-08T00:04:57.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda27/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda27/","excerpt":"","text":"kafka （官网地址：http://kafka.apache.org/）是一款分布式消息发布和订阅的系统，具有高性能和高吞吐率。http://blog.qianrushi.org/forum.php?mod=image&amp;aid=1&amp;size=300x300&amp;key=fa4c16801b769fad&amp;nocache=yes&amp;type=fixnonei. 消息的发布（publish）称作producer，消息的订阅（subscribe）称作consumer，中间的存储阵列称作broker。ii. 多个broker协同合作，producer、consumer和broker三者之间通过zookeeper来协调请求和转发。iii. producer产生和推送(push)数据到broker，consumer从broker拉取(pull)数据并进行处理。iv. broker端不维护数据的消费状态，提升了性能。v. 直接使用磁盘进行存储，线性读写，速度快：避免了数据在JVM内存和系统内存之间的复制，减少耗性能的创建对象和垃圾回收。vi. Kafka使用scala编写，可以运行在JVM上。安装：a. 首先安装JRE/JDKb. 下载kafka进入下载页面：http://kafka.apache.org/downloads.html选择Binary downloads下载 （Source download需要编译才能使用）也可以直接在linux终端下载 wget -q http://apache.fayea.com/apache-mirror/kafka/0.8.1/kafka_2.8.0-0.8.1.tgzc. 解压tar -xzvf kafka_2.8.0-0.8.1.tgzrm kafka_2.8.0-0.8.1.tgzcd kafka_2.8.0-0.8.1目录：[attach]2[/attach]/bin 启动和停止命令等。/config 配置文件/libs 类库d. 修改配置Kafka默认开启JVM压缩指针，但只是在64位的HotSpot VM受支持，如果安装了32位的HotSpot VM，需要修改**/bin/kafka-run-class.sh**文件vi bin/kafka-run-class.sh找到如下行：KAFKA_JVM_PERFORMANCE_OPTS=&quot;-server -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true&quot;去除-XX:+UseCompressedOops参数启动和停止启动Zookeeper server：bin/zookeeper-server-start.sh config/zookeeper.properties &amp;&amp;是为了能退出命令行启动Kafka server:bin/kafka-server-start.sh config/server.properties &amp;停止Kafka serverbin/kafka-server-stop.sh停止Zookeeper server:bin/zookeeper-server-stop.sh单机连通性测试运行producer：bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test早版本的Kafka，–broker-list localhost:9092需改为–zookeeper localhost:2181运行consumer：bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning在producer端输入字符串并回车，查看consumer端是否显示。分布式连通性测试Zookeeper Server, Kafka Server, Producer都放在服务器server1上，ip地址为192.168.1.10Consumer放在服务器server2上，ip地址为192.168.1.12。分别运行server1的producer和server2的consumer，bin/kafka-console-producer.sh --broker-list 192.168.1.10:9092 --topic testbin/kafka-console-consumer.sh --zookeeper 192.168.1.10:2181 --topic test --from-beginning在producer的console端输入字符串，consumer报Connection refused错误： [attach]3[/attach]broker, producer和consumer都注册到zookeeper上，producer和consumer的参数明确指定。问题出在broker的配置文件server.properties上：# Hostname the broker will bind to. If not set, the server will bind to all interfaces#host.name=localhost host名称没有指定，就是127.0.0.1，consumer去broker拿数据就有问题。设置为192.168.1.10，重启服务就好了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"kafka","slug":"kafka","permalink":"https://wangxiuwen.github.io/tags/kafka/"}],"author":"wangxiuwen"},{"title":"iptables 禁止端口访问","slug":"history/tech/5953c4d0c2b92f5665eeda25","date":"2016-04-07T23:55:26.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda25/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda25/","excerpt":"","text":"iptables -A INPUT -p tcp --dport 19999 -s 127.0.0.0/8 -j ACCEPTiptables -A INPUT -p tcp --dport 19999 -j REJECT --reject-with icmp-port-unreachable","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"iptables 禁止端口访问","slug":"history/tech/5953c4d0c2b92f5665eeda26","date":"2016-04-07T23:55:26.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda26/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda26/","excerpt":"","text":"iptables -A INPUT -p tcp --dport 19999 -s 127.0.0.0/8 -j ACCEPTiptables -A INPUT -p tcp --dport 19999 -j REJECT --reject-with icmp-port-unreachable","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"nginx elasticsearch 代理配置","slug":"history/tech/5953c4d0c2b92f5665eeda28","date":"2016-04-07T19:13:26.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda28/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda28/","excerpt":"","text":"proxy_cache_path /var/cache/nginx/cache keys_zone=elasticsearch:10m inactive=60m;upstream elasticsearch_servers {zone elasticsearch_servers 64K;server 192.168.187.132:9200;server 192.168.187.133:9200;}match statusok {status 200;header Content-Type ~ “application/json”;body ~ ‘“status” : 200’;}server {listen 9200;status_zone elasticsearch;location / {proxy_pass http://elasticsearch_servers;proxy_http_version 1.1;proxy_set_header Connection “”;proxy_cache elasticsearch;proxy_cache_valid 200 302 10m;proxy_cache_valid 404 1m;proxy_connect_timeout 5s;proxy_read_timeout 10s;health_check interval=5s fails=1 passes=1 uri=/ match=statusok;}# redirect server error pages to the static page /50x.htmlerror_page 500 502 503 504 /50x.html;location = /50x.html {root /usr/share/nginx/html;}access_log logs/es_access.log combined;}server {listen 8080;root /usr/share/nginx/html;location / {index status.html;}location =/status {status;}}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"Hadoop webHDFS设置和使用说明","slug":"history/tech/5953c4d0c2b92f5665eeda24","date":"2016-04-07T03:52:53.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda24/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda24/","excerpt":"","text":"1.配置namenode的hdfs-site.xml是必须将dfs.webhdfs.enabled属性设置为true，否则就不能使用webhdfs的LISTSTATUS、LISTFILESTATUS等需要列出文件、文件夹状态的命令，因为这些信息都是由namenode来保存的。在namenode和一台datanode中向/etc/hadoop/conf/hdfs-site.xml中添加属性：双击代码全选dfs.webhdfs.enabledtrue2.使用说明访问namenode的hdfs使用50070端口，访问datanode的webhdfs使用50075端口。访问文件、文件夹信息使用namenode的IP和50070端口，访问文件内容或者进行打开、上传、修改、下载等操作使用datanode的IP和50075端口。要想不区分端口，直接使用namenode的IP和端口进行所有的webhdfs操作，就需要在所有的datanode上都设置hefs-site.xml中的dfs.webhdfs.enabled为true。3.curl操作webhdfs创建并写一个文件curl -i -X PUT &quot;http://localhost:50070/webhdfs/v1/?op=CREATE“curl -i -X PUT -T &lt;LOCAL_FILE&gt; &quot;http://:/webhdfs/v1/?op=CREATE…“注意这个地方填入的是DataNode的信息在一个文件内追加内容curl -i -X POST &quot;http://:/webhdfs/v1/?op=APPEND”curl -i -X POST -T &lt;LOCAL_FILE&gt; &quot;http://:/webhdfs/v1/?op=APPEND…“注意该条命令获得的是DataNode的信息。打开并读取一个文件curl -i -L &quot;http://:/webhdfs/v1/?op=OPEN“创建一个目录curl -i -X PUT &quot;http://:/?op=MKDIRS“重名命文件、文件夹curl -i -X PUT “:/webhdfs/v1/?op=RENAME&amp;destination=”删除文件/文件夹curl -i -X DELETE &quot;http://:/webhdfs/v1/?op=DELETE “文件/ 文件夹的状态信息curl -i “http://:/webhdfs/v1/?op=GETFILESTATUS“目录列表curl -i &quot;http://:/webhdfs/v1/?op=LISTSTATUS”获取目录的上下文环境汇总信息curl -i “http://:/webhdfs/v1/?op=GETCONTENTSUMMARY”获取Check Sum Filecurl -i &quot;http://:/webhdfs/v1/?op=GETFILECHECKSUM”获取Home 目录curl -i &quot;http://:/webhdfs/v1/?op=GETHOMEDIRECTORY”设置权限curl -i -X PUT &quot;http://:/webhdfs/v1/?op=SETPERMISSION “设置所有者curl -i -X PUT &quot;http://:/webhdfs/v1/?op=SETOWNER &quot;设置备份curl -i -X PUT &quot;http://:/webhdfs/v1/?op=SETREPLICATION “","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"hdfs","slug":"hdfs","permalink":"https://wangxiuwen.github.io/tags/hdfs/"}],"author":"wangxiuwen"},{"title":"改 hadoop ssh 端口","slug":"history/tech/5953c4d0c2b92f5665eeda23","date":"2016-04-07T03:48:07.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda23/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda23/","excerpt":"","text":"hadoop-env.sh里改下。如：export HADOOP_SSH_OPTS=&quot;-p 1234&quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"hdfs","slug":"hdfs","permalink":"https://wangxiuwen.github.io/tags/hdfs/"}],"author":"wangxiuwen"},{"title":"修改Docker镜像的存储位置","slug":"history/tech/5953c4d0c2b92f5665eeda22","date":"2016-04-04T18:58:34.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda22/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda22/","excerpt":"","text":"Docker的镜像以及一些数据都是在/var/lib/docker目录下，它占用的是Linux的系统分区，也就是下面的/dev/vda1,当有多个镜像时，/dev/vda1的空间可能不足，我们可以把docker的数据挂载到数据盘，例如：/dev/vdb目录下。# df -lhTFilesystem Type Size Used Avail Use% Mounted on/dev/vda1 xfs 20G 3.8G 16G 20% /devtmpfs devtmpfs 916M 0 916M 0% /devtmpfs tmpfs 921M 0 921M 0% /dev/shmtmpfs tmpfs 921M 43M 878M 5% /runtmpfs tmpfs 921M 0 921M 0% /sys/fs/cgroup/dev/vdb xfs 100G 11G 90G 11% /data 其中主要的步骤如下：（1） 首先，备份fstab文件sudo cp /etc/fstab /etc/fstab.$(date +%Y-%m-%d)（2） 停止docker， 用rsync同步/var/lib/docker到新位置. 如果rsync没有安装，则使用yum -y intall rsync 进行安装，停止docker ,service docker stop,在数据分区中建立要挂载的目录，mkdir /data/docker 使用rsync工具同步，rsync -aXS /var/lib/docker/. /data/docker/，这可能需要花费的较长的时间，取决于/var/lib/docker的大小，（3） 修改fstab在该文件中把下面一行添加到fstab里，将新位置挂载到 /var/lib/docker/data/docker /var/lib/docker none bind 0 0文件的内如如下：# cat /etc/fstab ## /etc/fstab# Created by anaconda on Thu Jul 31 07:50:13 2014## Accessible filesystems, by reference, are maintained under ‘/dev/disk’# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#/dev/vda1 / xfs errors=remount-ro 0 1/swapfile none swap defaults 0 0/dev/vdb /data xfs defaults,noatime 0 0/data/docker /var/lib/docker none bind 0 0（4） 重新挂载mount –a（5） 使用下面的命令检查一下 df /var/lib/docker/Filesystem 1K-blocks Used Available Use% Mounted on/dev/vdb 104806400 47204 104759196 1% /var/lib/docker（6）进入Container查看我们的空间bash-4.1# df -lhTFilesystem Type Size Used Avail Use% Mounted onrootfs rootfs 9.8G 1.4G 7.9G 15% /tmpfs tmpfs 921M 0 921M 0% /devshm tmpfs 64M 0 64M 0% /dev/shm/dev/vdb xfs 100G 2.1G 98G 3% /etc/resolv.conf/dev/vdb xfs 100G 2.1G 98G 3% /etc/hostname/dev/vdb xfs 100G 2.1G 98G 3% /etc/hoststmpfs tmpfs 921M 0 921M 0% /run/secretstmpfs tmpfs 921M 0 921M 0% /proc/kcore没有更改/var/lib/docker路径之前的情况：bash-4.1# df -lhTFilesystem Type Size Used Avail Use% Mounted onrootfs rootfs 9.8G 1.4G 7.9G 15% /tmpfs tmpfs 921M 0 921M 0% /devshm tmpfs 64M 0 64M 0% /dev/shm/dev/vda1 xfs 20G 13G 6.9G 66% /etc/resolv.conf/dev/vda1 xfs 20G 13G 6.9G 66% /etc/hostname/dev/vda1 xfs 20G 13G 6.9G 66% /etc/hoststmpfs tmpfs 921M 0 921M 0% /run/secretstmpfs tmpfs 921M 0 921M 0% /proc/kcore宿主机中的分区大小信息：# df -lhTFilesystem Type Size Used Avail Use% Mounted on/dev/vda1 xfs 20G 13G 6.9G 65% /devtmpfs devtmpfs 916M 0 916M 0% /devtmpfs tmpfs 921M 0 921M 0% /dev/shmtmpfs tmpfs 921M 89M 832M 10% /runtmpfs tmpfs 921M 0 921M 0% /sys/fs/cgroup/dev/vdb xfs 100G 33M 100G 1% /data","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"docker","slug":"docker","permalink":"https://wangxiuwen.github.io/tags/docker/"}],"author":"wangxiuwen"},{"title":"check_os.sh问题(转)","slug":"history/tech/5953c4d0c2b92f5665eeda21","date":"2016-04-04T02:28:40.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda21/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda21/","excerpt":"","text":"1.安装snmpd后，按文档配置 到2.7步，输出正常。可是界面显示snmp却是失败。 查找原因，搞了半天，又咨询群里也没有类似的经历，无果。 2.无奈求教群主，他也没有头绪，只是给了提示，看看check_os.sh输出变量有没有问题。看来只能自己研究一下，自己修改check_os.sh脚本，看看哪一步输出有问题了。 3.其中调试总输出有以下内容： 30 (diskIOIndex)) check_os.sh: 77: check_os.sh: arithmetic expression: expecting primary: “-”我一看信息，大概是与计算有关的数学符号不对，在shell中计算往往令人头痛的问题。原来77，78行是这样进行计算的：77 #disk_io_reads=((((((disk_io_reads_2 - disk_io_reads_1)) 78 #disk_io_writes=(($disk_io_writes_2 - disk_io_writes_1)) 在子shell中进行计算是一个很好的办法，但在这里竟然无法计算，多台机器也是这个结果。 4.最后我修改以bc的方法来计算，结果正确。界面输出也成功，得出相应的结果也输出正常了。除了这两行计算之外，还有其它4行类似的，也一并修改，共有8行，前面是行号，可能不一定对应。 77 disk_io_reads=`echo \"disk_io_reads_2 - diskioreads1&quot;∣bc‘78diskiowrites=‘echo&quot;disk_io_reads_1&quot;|bc` 78 disk_io_writes=` echo &quot;disk​i​​o​r​​eads​1​​&quot;∣bc‘78disk​i​​o​w​​rites=‘echo&quot;disk_io_writes_2 - diskiowrites1&quot;∣bc‘83diskioreadstotal=‘echo&quot;disk_io_writes_1&quot;|bc` 83 disk_io_reads_total=`echo &quot;disk​i​​o​w​​rites​1​​&quot;∣bc‘83disk​i​​o​r​​eads​t​​otal=‘echo&quot;disk_io_reads_total+diskioreads&quot;∣bc‘84diskiowritestotal=‘echo&quot;disk_io_reads&quot;|bc` 84 disk_io_writes_total=`echo &quot;disk​i​​o​r​​eads&quot;∣bc‘84disk​i​​o​w​​rites​t​​otal=‘echo&quot;disk_io_writes_total+diskiowrites&quot;∣bc‘104inbytes=‘echo&quot;disk_io_writes&quot;|bc` 104 in_bytes=`echo &quot;disk​i​​o​w​​rites&quot;∣bc‘104in​b​​ytes=‘echo&quot;in_bytes_2-inbytes1&quot;∣bc‘105outbytes=‘echo&quot;in_bytes_1&quot;|bc` 105 out_bytes=`echo &quot;in​b​​ytes​1​​&quot;∣bc‘105out​b​​ytes=‘echo&quot;out_bytes_2-outbytes1&quot;∣bc‘109netinbytestotal=‘echo&quot;out_bytes_1&quot;|bc` 109 net_in_bytes_total=`echo &quot;out​b​​ytes​1​​&quot;∣bc‘109net​i​​n​b​​ytes​t​​otal=‘echo&quot;net_in_bytes_total+inbytes&quot;∣bc‘110netoutbytestotal=‘echo&quot;in_bytes&quot;|bc` 110 net_out_bytes_total=`echo &quot;in​b​​ytes&quot;∣bc‘110net​o​​ut​b​​ytes​t​​otal=‘echo&quot;net_out_bytes_total+$out_bytes&quot;|bc`","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"lepus","slug":"lepus","permalink":"https://wangxiuwen.github.io/tags/lepus/"}],"author":"wangxiuwen"},{"title":"snmp","slug":"history/tech/5953c4d0c2b92f5665eeda20","date":"2016-04-03T03:41:33.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda20/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda20/","excerpt":"","text":"背景：机房新增了几台ubuntu服务器，需要用已有的cacti来监测它们，所以要在新服务器上安装和配置SNMP协议。动机：我参考网上很多资料安装和配置SNMP，没搞定，于是自己研究了一下如何配置，最终顺利完成，所以分享一下。SNMP安装运行如下两个命令apt-get install snmp apt-get install snmpd 顺利运行完毕，使用如下命令测试一下lsof -i:161如果输出了正在运行snmp协议，便说明安装OK。SNMP配置（重点）我的SNMP配置文件/etc/snmp/snmpd.conf与网上早年的一些资料不同，主要是 压根没有出现com2sec，下面附上我的snmpd.conf的前半部分：-----------------------------------下面是snmpd.conf---------------------------------############################################################################### EXAMPLE.conf: An example configuration file for configuring the Net-SNMP agent (‘snmpd’) See the ‘snmpd.conf(5)’ man page for details Some entries are deliberately commented out, and will need to be explicitly activated############################################################################### AGENT BEHAVIOUR Listen for connections from the local system only#agentAddress udp:127.0.0.1:161 Listen for connections on all interfaces (both IPv4 and IPv6)agentAddress udp:161,udp6::161############################################################################### SNMPv3 AUTHENTICATION Note that these particular settings don’t actually belong here. They should be copied to the file /var/lib/snmp/snmpd.conf and the passwords changed, before being uncommented in that file only. Then restart the agent createUser authOnlyUser MD5 “remember to change this password” createUser authPrivUser SHA “remember to change this one too” DES createUser internalUser MD5 “this is only ever used internally, but still change the password” If you also change the usernames (which might be sensible), then remember to update the other occurances in this example config file to match.############################################################################### ACCESS CONTROL # system + hrSystem groups only view systemonly included .1.3.6.1.2.1.1view systemonly included .1.3.6.1.2.1.25.1view systemonly included .1 80# Full access from the local host#rocommunity public localhost# Default access to basic system inforocommunity public default -V systemonly # Full access from an example network # Adjust this network address to match your local # settings, change the community string, # and check the 'agentAddress' setting above #rocommunity secret 10.0.0.0/16 # Full read-only access for SNMPv3 rouser authOnlyUser# Full write access for encrypted requests# Remember to activate the ‘createUser’ lines above#rwuser authPrivUser priv It’s no longer typically necessary to use the full ‘com2sec/group/access’ configuration ruser and rcommunity, together with suitable views, should cover most requirements-----------------------------------上面是snmpd.conf---------------------------------我的目的是进行远程SNMP连接，所以需要做如下的修改：将下面这一行agentAddress udp:127.0.0.1:161注释掉，即#agentAddress udp:127.0.0.1:161然后将原来的这一行#agentAddress udp:161,udp6::161去掉注释，即agentAddress udp:161,udp6::161这样便可以实现snmp的远程监听了。但修改后cacti服务器还是无法监测到CPU、内存、流量的数据，所以需要再做如下修改：在snmpd.conf中找到下面的内容view systemonly included .1.3.6.1.2.1.1view systemonly included .1.3.6.1.2.1.25.1在下面加上一行view systemonly included .1 80这样就允许监听所有设备了。完成所有修改后，重启snmpservice snmpd restart本地测试SNMP是否监测各类指标的方法：运行如下命令snmpwalk -v 2c -c public localhost如果输出结果有好多页好多页，应该是设置成功了！","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"lepus 连接mongodb 3.0出错","slug":"history/tech/5953c4d0c2b92f5665eeda1f","date":"2016-04-03T02:38:17.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda1f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda1f/","excerpt":"","text":"此问题的情境：使用的mongodb的版本为3.0.x, 因为为生产环境，不可轻易做版本降级操作pymongo 2.7是无法连接的，有文章有提到直接修改API的使用即可。(主要内容是：Connection继承自MongoClient)本人没有测试直接修改lepus+pymongo 2.7版本的API是否可用，有兴趣的可以自行测试。需要安装pymongo 3.2 这里不要再使用lepus安装文档中提到的pymongo 2.7监控账号的授权：因为需要获取serverStatus, 需要给连接账号授予clusterAdmin的角色。MongoDB的文档中可以查看各内置角色对应的权限。修改lepus文件check_mongodb.py进入到lepus的安装目录/usr/local/lepus修改文件 check_mongodb.py因为Connection在新版本中已经去掉了，所以改用MongoClientconnect = pymongo.MongoClient(host,int(port))获取serverStatus的代码，若直接使用BSON的方式获取，始终报认证问题，当时修改太快了，不知道是不是权限问题，现在也不太想退回去再测试了。有兴趣的可以测试下，欢迎分享。serverStatus=db.command(‘serverStatus’)serverStatus_2=db.command(‘serverStatus’)注意调整connect = 1的位置，因为此处获取serverStatus的时候，没有获取replicate的信息，因此仍需要保证连接可用。indexCounter在3.0版本中已经去掉了，MongoDB官方文档有说明。因此相关的参数均无法获取了，直接赋值数字0.indexCounters_accesses = 0indexCounters_hits = 0indexCounters_misses = 0indexCounters_resets = 0indexCounters_missRatio = 0获取replStatus的状态：在第二段try代码中添加：replStatus=db.command(‘replSetGetStatus’)repl=replStatus到此，差不多修改完了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"lepus","slug":"lepus","permalink":"https://wangxiuwen.github.io/tags/lepus/"}],"author":"wangxiuwen"},{"title":"mysql 报错","slug":"history/tech/5953c4d0c2b92f5665eeda1e","date":"2016-04-02T20:54:43.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda1e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda1e/","excerpt":"","text":"sudo apt-get install libmysqlclient-devpip install mysql-python","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"linux下rm命令删除文件名中包含特殊字符的文件","slug":"history/tech/5953c4d0c2b92f5665eeda1d","date":"2016-04-02T03:34:01.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda1d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda1d/","excerpt":"","text":"删除带“-”的文件名的方法2. 删除包含其它特殊字符的文件3. 删除系统打不出的乱码文件名1. 删除带“-”的文件名的方法大部分是由于误操作的原因，产生了一些 特殊字符的文件 如 -foorm --help用法：rm … 目录…Remove (unlink) the FILE(s).-d, --directory unlink FILE, even if it is a non-empty directory(super-user only; this works only if your systemsupports unlink' for nonempty directories) -f, --force ignore nonexistent files, never prompt -i, --interactive prompt before any removal --no-preserve-root do not treat/’ specially (the default)–preserve-root fail to operate recursively on `/’-r, -R, --recursive remove the contents of directories recursively-v, --verbose explain what is being done–help 显示此帮助信息并离开–version 显示版本信息并离开要删除第一个字符为‘-’的文件 (例如‘-foo’)，请使用以下其中一种方法：rm – -foorm ./-foo请注意，如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。如果想保证该文件的内容无法还原，请考虑使用 shred。删除包含其它特殊字符的文件对于含有其它特殊字符的文件名，如&lt;&gt;!等，可用“”转义符或“”双引号引起控制如名为“&gt;”或“”rm &gt;rm “*”3. 删除系统打不出的乱码文件名系统中有一个文件名全是乱码的文件，根本无从下手进行删除（系统打不出乱码符号），我们可以尝试以下的歪招例如这个乱码的文件是luanma.txt，当然该例假设luanma便是各种奇形怪状的乱码，呵呵～～我们可以用rm *搞定#cd xxx进入乱码文件所在的目录#rm *这个命令表示删除该目录的所有文件，当然最终目的不是删除所有文件啦～～，输入命令回车后系统在删除每个文件都提示是否删除这个文件，其他不相关的文件全部都输入“n”回车跳过不删除，直到我们的目标出现rm: remove regular empty file `luanma.txt’?哈哈，这是我们果断地输入“y”，回车，将这个可恨的文件干掉！不过这个方法要视系统而定，要谨慎使用，上面例子使用的是redhat，有些linux的发行版本rm命令没有提示功能，输入rm *就直接把所有文件干掉了，所以用之前先新建一个目录测试一下以防万一。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"spark 启动slave报错","slug":"history/tech/5953c4d0c2b92f5665eeda1b","date":"2016-04-01T04:22:40.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda1b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda1b/","excerpt":"","text":"设置SPARK_LOCAL_IP变量WARN util.Utils: Service ‘sparkWorker’ could not bind on port 0. Attempting port 1.vim /usr/local/spark-1.6.0-bin-hadoop2.6SPARK_LOCAL_IP=192.168.200.111","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"spark","slug":"spark","permalink":"https://wangxiuwen.github.io/tags/spark/"}],"author":"wangxiuwen"},{"title":"Permanently added (RSA) to the list of known hosts","slug":"history/tech/5953c4d0c2b92f5665eeda1c","date":"2016-03-31T20:11:03.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda1c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda1c/","excerpt":"","text":"修改/etc/ssh/sshd-config文件，将其中的PermitRootLogin no修改为yes，PubkeyAuthentication yes修改为no，AuthorizedKeysFile .ssh/authorized_keys前面加上#屏蔽掉，PasswordAuthentication noAre you sure you want to continue connecting (yes/no)?1、这个是ssh安全认证是的一个RSA认证。此处必须选择yes才能连接。第一次yes后，他会询问你是否永久把这个RSA认证加入本地，选择yes后，以后不会再出现提醒。每次登陆只需要输入密码即可。2、也可以不用输入1中的yes，但是需要修改本机配置。1/etc/ssh/ssh_config 中的2 StrictHostKeyChecking ask 改成3StrictHostKeyChecking no vi /etc/ssh/ssh_config最后有两行是StrictHostKeyChecking noUserKnownHostsFile /dev/null","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"hdfs 基本命令","slug":"history/tech/5953c4d0c2b92f5665eeda1a","date":"2016-03-31T03:55:15.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda1a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda1a/","excerpt":"","text":"HDFS基本命令:hadoop fs -cmdcmd: 具体的操作，基本上与UNIX的命令行相同args:参数HDFS资源URI格式：scheme://authority/pathscheme：协议名，file或hdfsauthority：namenode主机名path：路径示例：hdfs://localhost:9000/user/chunk/test.txt假设已经在core-site.xml里配置了 fs.default.name=hdfs://localhost:9000，则仅使用/user/chunk/test.txt即可。hdfs默认工作目录为 /user/USER，USER是当前的登录用户名。HDFS命令示例：hadoop fs -mkdir /user/trunkhadoop fs -ls /userhadoop fs -lsr /user (递归的)hadoop fs -put test.txt /user/trunkhadoop fs -put test.txt . (复制到hdfs当前目录下，首先要创建当前目录)hadoop fs -get /user/trunk/test.txt . (复制到本地当前目录下)hadoop fs -cat /user/trunk/test.txthadoop fs -tail /user/trunk/test.txt (查看最后1000字节)hadoop fs -rm /user/trunk/test.txthadoop fs -help ls (查看ls命令的帮助文档)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"hdfs","slug":"hdfs","permalink":"https://wangxiuwen.github.io/tags/hdfs/"}],"author":"wangxiuwen"},{"title":"jps命令","slug":"history/tech/5953c4d0c2b92f5665eeda19","date":"2016-03-30T17:18:07.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda19/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda19/","excerpt":"","text":"jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。root@bogon:~# jps 1937 ResourceManager 2387 Jps 2212 Master","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://wangxiuwen.github.io/tags/java/"}],"author":"wangxiuwen"},{"title":"mail cannot send message process exited with a non-zero status","slug":"history/tech/5953c4d0c2b92f5665eeda17","date":"2016-03-30T02:33:42.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda17/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda17/","excerpt":"","text":"报错信息：12apt-get install mailutilsmail: cannot send message: process exited with a non-zero status未解决：1touch /etc/postfix/main.cf再搜，解决：1sudo dpkg-reconfigure postfix","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"登陆服务器提示：LC_CTYPE","slug":"history/tech/5953c4d0c2b92f5665eeda18","date":"2016-03-29T22:25:24.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda18/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda18/","excerpt":"","text":"warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory修改 /etc/ssh_config 文件，注释（#）其中的 SendEnv LANG LC_*然后保存重启终端错误提示就不会在显示了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"cacheSizeGB","slug":"history/tech/5953c4d0c2b92f5665eeda13","date":"2016-03-26T03:38:44.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda13/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda13/","excerpt":"","text":"cacheSizeGB 指的就是Cache size，包括数据和索引。Mongod本身使用内存如连接池堆栈以及sorting buffer等都是额外的，不会被统计到这个数字里面。如果索引在内存，查询冷数据取决于你的IO能力。如果IO latency很低，系统也没有是高负载，那响应时间应该是毫秒级的区别。但是如果查询很频繁，又涉及到很多范围、批量查询，IOPS又跟不上，那就有可能到几百几千毫秒都有可能。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"nginx日志切割脚本 并压缩","slug":"history/tech/5953c4d0c2b92f5665eeda12","date":"2016-03-26T03:30:05.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda12/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda12/","excerpt":"","text":"一、脚本思路第一步就是重命名日志文件，不用担心重命名后nginx找不到日志文件而丢失日志。在你未重新打开原名字的日志文件前，nginx还是会向你重命名的文件写日志，linux是靠文件描述符而不是文件名定位文件。第二步向nginx主进程发送USR1信号。nginx主进程接到信号后会从配置文件中读取日志文件名称，重新打开日志文件(以配置文件中的日志名称命名)，并以工作进程的用户作为日志文件的所有者。重新打开日志文件后，nginx主进程会关闭重名的日志文件并通知工作进程使用新打开的日志文件。工作进程立刻打开新的日志文件并关闭重名名的日志文件。然后你就可以处理旧的日志文件了。**二、脚本实现**nginx日志按日期自动切割脚本如下：#nginx日志切割脚本#!/bin/bash#设置日志文件存放目录logs_path=&quot;/usr/local/nginx/logs/&quot;#设置pid文件pid_path=&quot;/usr/local/nginx/logs/nginx.pid&quot;date_str=access_$(date -d “yesterday” +&quot;%Y%m%d&quot;)#重命名日志文件mv ${logs_path}access.log logspath{logs_path}logs​p​​ath{date_str}.log#向nginx主进程发信号重新打开日志kill -USR1 cat ${pid_path}#压缩日志tar -zcf logspath{logs_path}logs​p​​ath{date_str}.tar.gz logspath{logs_path}logs​p​​ath{date_str}.logrm -f logspath{logs_path}logs​p​​ath{date_str}.log保存以上脚本nginx_log.sh，并设置定时切割任务三、定时工作在crontab中设置作业0 0 * * * root /usr/local/nginx/nginx_log.sh这样就每天的0点0分把nginx日志重命名为日期格式，并重新生成今天的新日志文件。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"unix 系统打包使用绝对路径","slug":"history/tech/5953c4d0c2b92f5665eeda11","date":"2016-03-26T03:17:49.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda11/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda11/","excerpt":"","text":"首先应该明确：*nix系统中，使用tar对文件打包时，一般不建议使用绝对路径。通常是在两台环境相似的机器上进行同步复制的时候，才有需要使用绝对路径进行打包。使用绝对路径打包时如果不指定相应的参数，tar会产生一句警告信息：”tar: Removing leading `/’ from member names”，并且实际产生的压缩包会将绝对路径转化为相对路径。比如：1234567891011root@queen ~ # tar -czvf robin.tar.gz /home/robin tar: Removing leading `/&apos; from member names /home/robin/ /home/robin/file1 /home/robin/file2 /home/robin/file3 root@queen ~ # tar -tzvf robin.tar.gz drwxr-xr-x robin/root 0 2009-11-10 18:51:31 home/robin/ -rw-r--r-- robin/root 0 2009-11-10 18:51:28 home/robin/file1 -rw-r--r-- robin/root 0 2009-11-10 18:51:30 home/robin/file2 -rw-r--r-- robin/root 0 2009-11-10 18:51:31 home/robin/file3这样的一个压缩包，如果我们再去解开，就会当前目录（也即此例中的“~”）下再新建出“./home/robin/” 两级目录。对于这样的压缩包，解压方法是使用参数 “-C”指解压的目录为根目录（“/”）：tar -xzvf robin.tar.gz -C /更为可靠的方法是在打包和解开的时候都使用参数 -P：1234567891011121314151617root@queen ~ # tar -czvPf robin.tar.gz /home/robin/ /home/robin/ /home/robin/file1 /home/robin/file2 /home/robin/file3 root@queen ~ # tar tzvf robin.tar.gz drwxr-xr-x robin/root 0 2009-11-10 18:51:31 /home/robin/ -rw-r--r-- robin/root 0 2009-11-10 18:51:28 /home/robin/file1 -rw-r--r-- robin/root 0 2009-11-10 18:51:30 /home/robin/file2 -rw-r--r-- robin/root 0 2009-11-10 18:51:31 /home/robin/file3 root@queen ~ # tar -xzvPf robin.tar.gz /home/robin/ /home/robin/file1 /home/robin/file2 /home/robin/file3 root@queen ~ #","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"mongodb 安装","slug":"history/tech/5953c4d0c2b92f5665eeda10","date":"2016-03-26T02:48:03.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda10/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda10/","excerpt":"","text":"从MongoDB3.0版起，其安装包比以前更细化，有的朋友可能不太了解区别，简单说明一下:Linux 64-bit legacy 这个版本即mongodb-linux-x86_64-3.0.1.tgz 不推荐在正式环境使用，这个版本特点是没有连接ssl相关的库，并且可能缺少针对操作系统的一些性能优化，但是可以测试用，安装简单。推荐按相应操作系统版本选择对应的安装包如centos6 rhel6选择RHEL 6 Linux 64-bit，即mongodb-linux-x86_64-rhel62-3.0.1.tgz这个安装包。根据服务器的硬盘情况，其中/home为固态盘，/data为固态盘 /storage为机械盘 df -lhFilesystem Size Used Avail Use% Mounted on/dev/sda2 197G 1.6G 186G 1% /tmpfs 63G 0 63G 0% /dev/shm/dev/sda1 380M 70M 290M 20% /boot/dev/sdb1 733G 197M 696G 1% /data/dev/sda5 410G 235M 389G 1% /home/dev/sdc1 9.0T 40M 8.5T 1% /storage安装openssl#yum install -y openssl-devel openssl wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.0.1.tgz tar xzvf mongodb-linux-x86_64-rhel62-3.0.1.tgz mkdir -p /home/local/ mv mongodb-linux-x86_64-rhel62-3.0.1 /home/local/mongodb mkdir -p /data/mongodb mkdir -p /data/logs/mongodb touch /data/logs/mongodb/mongodb.log chmod -R 777 /data/logs/mongodb/mongodb.log设置ulimit -n和ulimit -u的值大于20000。如果ulimit的值设置过低的话，当MongoDB处于 频繁访问的状态下，将会产生错误，最终导致无法连接到MongoDB实例。 ulimit -n 25000 ulimit -u 25000 cd /home/local/mongodb/bin/ vi mongodb.confport=20000 #端口dbpath= /data/mongodb #数据文件存放目录logpath=/data/logs/mongodb/mongodb.log #日志文件存放目录logappend=true #使用追加的方式写日志fork=true #以守护程序的方式启用，即在后台运行maxConns=5000 #最大同时连接数 默认2000bind_ip=127.0.0.1,172.16.20.126 #只允许通过局域网IP：172.16.20.126及本机访问noauth=true #不启用验证nohttpinterface=truerest=false设置防火墙，以便局域网内的其它服务器可以访问vi /etc/sysconfig/iptables-A INPUT -m state --state NEW -m tcp -p tcp --dport 20000 -j ACCEPT/etc/init.d/iptables restart如果没有numactl命令，使用yum安装yum install -y numactl在proc中关闭NUMA echo 0 &gt; /proc/sys/vm/zone_reclaim_mode sysctl -w vm.zone_reclaim_mode=0启动命令： numactl --interleave=all /home/local/mongodb/bin/mongod --config /home/local/mongodb/bin/mongodb.conf或 numactl --interleave=all /home/local/mongodb/bin/mongod -f /home/local/mongodb/bin/mongodb.confabout to fork child process, waiting until server is ready for connections.forked process: 25071child process started successfully, parent exiting正常停止方法: ps aux | grep mongod kill -2 PID或 /home/local/mongodb/bin/mongo -port 20000use admindb.shutdownServer();2015-03-19T00:43:27.760+0800 I CONTROL ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is ‘always’.2015-03-19T00:43:27.760+0800 I CONTROL ** We suggest setting it to ‘never’不重启服务器的情况下解决办法,在Linux下执行：echo never &gt; /sys/kernel/mm/transparent_hugepage/enabledecho never &gt; /sys/kernel/mm/transparent_hugepage/defrag服务器重启后立即生效办法： vi /etc/rc.localif test -f /sys/kernel/mm/transparent_hugepage/enabled; thenecho never &gt; /sys/kernel/mm/transparent_hugepage/enabledfiif test -f /sys/kernel/mm/transparent_hugepage/defrag; thenecho never &gt; /sys/kernel/mm/transparent_hugepage/defragfi开机自动启动mongodb vi /etc/rc.d/rc.localrm -rf /data/mongodb/mongod.locknumactl --interleave=all /home/local/mongodb/bin/mongod -f /home/local/mongodb/bin/mongodb.conf说明：启动时必须加numactl --interleave=all二、MongoDB 3.0安装配置faqhttp://webprox.redstonesrv.fr/browse.php/qU6OBihY/_2BTWuWx/rLZNRESq/MIu7der5/ISEOTGe5/jncv4QuE/LSbDvehs/W0d3g_3D/b29/MongoDB 3.0版本安装介质MongoDB 3.0版本安装包比以前更细化，有的朋友可能不太了解区别，简单说明一下:Linux 64-bit legacy 这个版本即mongodb-linux-x86_64-3.0.0.tgz 不推荐在正式环境使用，这个版本特点是没有连接ssl相关的库，并且可能缺少针对操作系统的一些性能优化，但是可以测试用，安装简单。推荐按相应操作系统版本选择对应的安装包如centos6 rhel6选择RHEL 6 Linux 64-bit，即mongodb-linux-x86_64-rhel62-3.0.0.tgz这个安装包。有朋友反应安装不上，因为还需要安装相应的依赖库如OpenSSL 相关的库。如下所示，就是缺少OpenSSL 相关的库ldd mongodb-linux-x86_64-rhel62-3.0.0/bin/mongodmongodb-linux-x86_64-rhel62-3.0.0/bin/mongod: /usr/lib64/libssl.so.10: no version information available (required by mongodb-linux-x86_64-rhel62-3.0.0/bin/mongod)mongodb-linux-x86_64-rhel62-3.0.0/bin/mongod: /usr/lib64/libcrypto.so.10: no version information available (required by mongodb-linux-x86_64-rhel62-3.0.0/bin/mongod)mongodb-linux-x86_64-rhel62-3.0.0/bin/mongod: /usr/lib64/libcrypto.so.10: no version information available (required by mongodb-linux-x86_64-rhel62-3.0.0/bin/mongod)linux-vdso.so.1 =&gt; (0x00007ffffd961000)libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x0000003d5b600000)libssl.so.10 =&gt; /usr/lib64/libssl.so.10 (0x0000003d62e00000)libcrypto.so.10 =&gt; /usr/lib64/libcrypto.so.10 (0x0000003d60e00000)librt.so.1 =&gt; /lib64/librt.so.1 (0x0000003d5be00000)libdl.so.2 =&gt; /lib64/libdl.so.2 (0x0000003d5ae00000)libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00000039bc800000)libm.so.6 =&gt; /lib64/libm.so.6 (0x0000003d5ba00000)libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x0000003d5ce00000)libc.so.6 =&gt; /lib64/libc.so.6 (0x0000003d5b200000)/lib64/ld-linux-x86-64.so.2 (0x0000003d5aa00000)libgssapi_krb5.so.2 =&gt; /lib64/libgssapi_krb5.so.2 (0x0000003d61a00000)libkrb5.so.3 =&gt; /lib64/libkrb5.so.3 (0x0000003d60a00000)libcom_err.so.2 =&gt; /lib64/libcom_err.so.2 (0x0000003d5e200000)libk5crypto.so.3 =&gt; /lib64/libk5crypto.so.3 (0x0000003d60600000)libz.so.1 =&gt; /lib64/libz.so.1 (0x0000003d5c200000)libkrb5support.so.0 =&gt; /lib64/libkrb5support.so.0 (0x0000003d61e00000)libkeyutils.so.1 =&gt; /lib64/libkeyutils.so.1 (0x0000003d60200000)libresolv.so.2 =&gt; /lib64/libresolv.so.2 (0x0000003d5d600000)libselinux.so.1 =&gt; /lib64/libselinux.so.1 (0x0000003d5ca00000)安装好后[root(/user/ccj-sf) export]# ldd /export/mongodb/bin/mongodlinux-vdso.so.1 =&gt; (0x00007fff8f7ff000)libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f6e0d5a9000)libssl.so.10 =&gt; /usr/lib64/libssl.so.10 (0x00007f6e0d33d000)libcrypto.so.10 =&gt; /usr/lib64/libcrypto.so.10 (0x00007f6e0cf59000)librt.so.1 =&gt; /lib64/librt.so.1 (0x00007f6e0cd51000)libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f6e0cb4d000)libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00007f6e0c846000)libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f6e0c5c2000)libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f6e0c3ac000)libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f6e0c017000)/lib64/ld-linux-x86-64.so.2 (0x00007f6e0d7cf000)libgssapi_krb5.so.2 =&gt; /lib64/libgssapi_krb5.so.2 (0x00007f6e0bdd3000)libkrb5.so.3 =&gt; /lib64/libkrb5.so.3 (0x00007f6e0baed000)libcom_err.so.2 =&gt; /lib64/libcom_err.so.2 (0x00007f6e0b8e8000)libk5crypto.so.3 =&gt; /lib64/libk5crypto.so.3 (0x00007f6e0b6bc000)libz.so.1 =&gt; /lib64/libz.so.1 (0x00007f6e0b4a6000)libkrb5support.so.0 =&gt; /lib64/libkrb5support.so.0 (0x00007f6e0b29a000)libkeyutils.so.1 =&gt; /lib64/libkeyutils.so.1 (0x00007f6e0b097000)libresolv.so.2 =&gt; /lib64/libresolv.so.2 (0x00007f6e0ae7d000)libselinux.so.1 =&gt; /lib64/libselinux.so.1 (0x00007f6e0ac5d000)配置文件mmapv1引擎，配置文件与2.x版本完全相同。如： cat mongod.cnf dbpath=/export/data/mongodb30/mongodlogpath=/export/data/mongodb30/log/mongod.logpidfilepath=/export/data/mongodb30/pid/mongod.piddirectoryperdb=truereplSet=a3logappend=truekeyFile=/export/data/mongodb30/keyport=20000fork=truewireTiger引擎配置增加相关参数即可，以副本集为例，如： cat mongod.cnf dbpath=/export/data/mongodb30/mongodlogpath=/export/data/mongodb30/log/mongod.logpidfilepath=/export/data/mongodb30/pid/mongod.piddirectoryperdb=truereplSet=a3logappend=truekeyFile=/export/data/mongodb30/keyport=20000fork=truestorageEngine=wiredTigerwiredTigerCacheSizeGB=10wiredTigerStatisticsLogDelaySecs=0wiredTigerJournalCompressor=snappywiredTigerDirectoryForIndexes=truewiredTigerCollectionBlockCompressor=snappywiredTigerIndexPrefixCompression=1YAML 格式配置文件：2.6版本就引入,以上面副本集为例：$ cat mongodb.cnf systemLog: destination: file path: /export/data/mongodb30/log/mongod.log logAppend: truestorage: journal: enabled: true dbPath: /export/data/mongodb30/mongod directoryPerDB: true engine: wiredTiger wiredTiger: engineConfig: cacheSizeGB: 10 directoryForIndexes: true collectionConfig: blockCompressor: snappy indexConfig: prefixCompression: truenet: port: 20000replication: replSetName: a3 security: keyFile: /export/data/mongodb30/keyprocessManagement: pidFilePath: /export/data/mongodb30/pid/mongod.pid fork: true setParameter: enableLocalhostAuthBypass: false单机去掉replication及keyfile设置即可，分片增加一些参数，如：mongod增加sharding: clusterRole: shardsvrconfiger serversharding: clusterRole: configsvr参考：http://www.cnblogs.com/browse.php/qU6OBjJU/826tGhve/bJ9SC7wT/v7cG_2B8/xWQLvQPJ/u3IupC7k/TRcm7Xic/DtI2mMYX/oRXv4UQO/FTlYV5BH/E_3D/b29/分类: http://www.cnblogs.com/cy163/category/674910.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"bpython 安装报错","slug":"history/tech/5953c4d0c2b92f5665eeda0f","date":"2016-03-26T02:24:35.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda0f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda0f/","excerpt":"","text":"pip install bpython报错：Command /usr/bin/python -c “import setuptools, tokenize;file=’/tmp/pip_build_root/greenlet/setup.py’;exec(compile(getattr(tokenize, ‘open’, open)(file).read().replace(’\\r\\n’, ‘\\n’), file, ‘exec’))” install --record /tmp/pip-KtlxRN-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /tmp/pip_build_root/greenletStoring debug log for failure in /root/.pip/pip.log解决：sudo apt-get install python-devpython3 可能的解决方案(未尝试)：sudo zypper install python3-develfor opensuse, install “python3-devel” – kmonsoor Mar 29 '15 at 8:17sudo apt-get install python3-devsudo apt-get install python3.3-dev","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"检测nginx配置文件是否正确","slug":"history/tech/5953c4d0c2b92f5665eeda16","date":"2016-03-25T21:17:13.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda16/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda16/","excerpt":"","text":"/usr/local/nginx/sbin/nginx -t -c nginx.conf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"server_names_hash_bucket_size","slug":"history/tech/5953c4d0c2b92f5665eeda15","date":"2016-03-25T19:25:09.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda15/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda15/","excerpt":"","text":"nginx: could not build the server_names_hash, you should increase server_names_hash_bucket_size: 32nginx: configuration file /etc/nginx/nginx.conf test failed在配置文件的http{}段增加一行配置server_names_hash_bucket_size 64;如果64还不够，那么就按32的倍数往上加。下面是在中文wiki上摘抄的一段说明：保存服务器名字的hash表是由指令 server_names_hash_max_size 和 server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果 hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键值。因此，如果Nginx给出需要增大 hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"supervisor.sock no such file","slug":"history/tech/5953c4d0c2b92f5665eeda14","date":"2016-03-25T19:05:07.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda14/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda14/","excerpt":"","text":"supervisor作为一个进程管理的python软件非常的给力 但是一不小心就会遇到一些问题 就比如下面这个:unix:///var/run/supervisor.sock no such file这个问题一般来说 有几个原因:supervisord没有运行起来.明明已经运行起来了他就是说没有.而且根据我的尝试 如果使用ubuntu, 那么进行下面的操作 100000% 会挂掉而且报错:安装: sudo apt-get install supervisor使用: sudo service supervisor start sudo supervisorctl这里都是很正常的但是如果在第一次运行后 再尝试运行: sudo supervisorctl reload或者在supervisorctl里面运行 reload那么这个服务就永远跑不起来了.上网搜了好多 结果都没有很好的解决方法. 进行尝试了很久 终于发现可以解决的方法了:首先删除通过apt-get安装的supervisor: sudo apt-get remove supervisor然后 sudo ps -ef | grep supervisor找到对应的进程kill掉.再然后:sudo easy_install(pip install) supervisor==3.2.3注意 这里就是重点:通过apt-get安装的supervisor 版本号是3.0a8, 而当你第一次安装这个版本之后 再用easy_install的话 就也是这个版本 而不是最新版的3.2.3然后生成配置文件(root权限): echo_supervisord_conf &gt; /etc/supervisord.conf再然后: sudo supervisord再然后: sudo supervisorctl启动成功.最后说明:使用easy_install安装的supervisor的默认sock文件 会被定义在/tmp下面 而apt-get会在/var/run下面. 鉴于apt-get会出现各种问题 这里建议使用easy_install或是pip安装 supervisor.","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"elasticsearch Zen Discovery","slug":"history/tech/5953c4d0c2b92f5665eeda0d","date":"2016-03-15T18:20:06.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda0d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda0d/","excerpt":"","text":"elasticsearch集群发现机制有两种：Zen Discovery和 EC2 discovery。EC2：亚马逊弹性计算云。Zen Discovery作用就相当于solrcloud中的zookeeper。EC2 discovery主要在亚马云平台中使用。Zen****发现机制zen发现机制是elasticsearch默认的内建模块。它提供了多播和单播两种发现方式，能够很容易的扩展至云环境。zen发现机制是和其他模块集成的，例如所有节点间通讯必须用trasport模块来完成。它分成几个子模块，下面详细解释：Ping这是一个节点使用发现机制去寻找其他节点的进程。同时支持多播和单播方式的发现（也可以组合使用）多播多播ping发现的方式通过向其他节点发送一个或多个多播请求来实现，存在的节点将会接收并且响应。提供下面的一组配置，以discovery.zen.ping.multicast做前缀：配置 描述group 默认值为224.2.2.4port 默认值为54328ttl 多播消息的ttl。默认为3address 绑定的地址，默认为null，即绑定所有可用的network接口。将elasticsearch.yml 配置multicast.enabled设为false可以禁用多播方式。单播但多播禁用的情况下可以使用单播发现。需要提供一个主机列表作为路由列表。提供下面一组配置，以discovery.zen.ping.unicast作为前缀：配置 描述hosts 是一个数组的配置，或以逗号分隔的字符串。格式为host:port，或者host单播发现依赖transport模块实现。注意port默认应该是9300，不是9200，因为使用的是tranposrt。主节点选举作为初始ping过程的一部分，一个集群的主节点需要被选举或加入。这是自动完成的。discovery.zen.ping_timeout(默认3秒)的配置用于处理网络速度慢或网络拥塞的场景。注意这个配置从0.15.1往后发生了变化（之前叫discovery.zen.initial_ping_timeout）节点在成为主节点之后可以通过将node.master设为false来退出。注意，一旦一个节点被明确设为一个客户端节点（node.client设为true），则不能再成为主节点（node.master会自动设为false）。discovery.zen.minimum_master_nodes用于控制选举行为发生的最小集群节点数量。推荐设为大于1的数值，因为只有在2个以上节点的集群中，主节点才是有意义的。错误检测有两种错误检测的进程在运行。第一种是在主节点上，用于ping所有其他的集群节点，并验证它们是否存活。另一种是其他节点ping主节点，看主节点是否存活，或者是否需要初始化选举进程。下面的配置用于错误检测，以discovery.zen.fdprefix为前缀：配置 描述ping_interval 节点ping的频率。默认为1秒。ping_timeout 等待节点响应的超时时间，默认为30秒ping_retries ping失败/超时重试次数。默认为3.外部多播多播发现也支持用外部多播请求来发现节点。外部客户端可以发送多播IP/group和端口请求，格式为：{ “request” : { “cluster_name” : “test_cluster” }}返回的响应信息格式和节点信息的返回格式类似（仅仅是节点级别的信息，也就是包含transport/http地址，以及节点属性）：{ “response” : { “cluster_name” : “test_cluster”, “transport_address” : “…”, “http_address” : “…”, “attributes” : { “…” } }}注意，可以做到禁用内部多播发现，但是启用外部多播发现机制。方式为将discovery.zen.ping.multicast.enabled设为true（默认值），但是将discovery.zen.ping.multicast.ping.enabled设为false","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"Capped Collection","slug":"history/tech/5953c4d0c2b92f5665eeda0c","date":"2016-03-14T21:59:47.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda0c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda0c/","excerpt":"","text":"MongoDB 支持 Capped Collection，一种固定大小的集合，当集合的大小达到指定大小时， 新数据覆盖老数据，MongoDB Replica set 中的 oplog 就是 Capped Collection 类型。–1 查看 oplog 是否是 Capped Collection$ mongo 127.0.0.1:27018MongoDB shell version: 2.2.1connecting to: 127.0.0.1:27018/test rs0:PRIMARY&gt; use local;switched to db localrs0:PRIMARY&gt; show collections;meoplog.rsreplset.minvalidslavessystem.indexessystem.replsetrs0:PRIMARY&gt; db.oplog.rs.isCapped();true备注：通过 db.collection.isCapped() 命令可以查看一个集合是否是 Capped Collection 。Capped Collection 具有以下特性，在使用的时候需要注意：1 不可以对 Capped Collection 进行分片。2 在 2.2 版本以后，创建的Capped Collection 默认在 _id 字段上创建索引，而在 2.2 版本或以前没有。3 在 Capped Collection 插入文档后可以进行更新(update)操作，当更新不能导致原来文档占用 空间增长，否则更新失败。4 不可以对 capped collection 执行删除文档操作，但可以删除整个集合。接下来会测试其中的部分特性。–2 创建 Capped Collectionrs0:PRIMARY&gt; db.createCollection(“mycoll1”,{capped:true,size:1024}); { “ok” : 1 } 备注：通过 db.createCollection 命令创建 Capped Collection 集合，创建时必须指定 集合大小，用于预先分配空间。–3 查看一个集合是否是 Capped Collection可以通过以下两种方法查看一个集合是否是 Capped Collection 。rs0:PRIMARY&gt; db.mycoll1.isCapped();true rs0:PRIMARY&gt; db.mycoll1.stats();{“ns” : “test.mycoll1”,“count” : 0,“size” : 0,“storageSize” : 4096,“numExtents” : 1,“nindexes” : 1,“lastExtentSize” : 4096,“paddingFactor” : 1,“systemFlags” : 1,“userFlags” : 0,“totalIndexSize” : 8176,“indexSizes” : {“id” : 8176},“capped” : true,“max” : 2147483647,“ok” : 1}备注：“capped” 属性为 true 表示是 Capped Collection 。–4 测试：插入记录rs0:PRIMARY&gt; for (var i = 1; i &lt;= 10000; i++) db.mycoll1.save({id : i, name : ‘francs’}); rs0:PRIMARY&gt; db.mycoll1.find().count();56rs0:PRIMARY&gt; db.mycoll1.find();{ “_id” : ObjectId(“50b811cf68b1911e7096db7f”), “id” : 9945, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db80”), “id” : 9946, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db81”), “id” : 9947, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db82”), “id” : 9948, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db83”), “id” : 9949, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db84”), “id” : 9950, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db85”), “id” : 9951, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db86”), “id” : 9952, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db87”), “id” : 9953, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db88”), “id” : 9954, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db89”), “id” : 9955, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db8a”), “id” : 9956, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db8b”), “id” : 9957, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db8c”), “id” : 9958, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db8d”), “id” : 9959, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db8e”), “id” : 9960, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db8f”), “id” : 9961, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db90”), “id” : 9962, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db91”), “id” : 9963, “name” : “francs” }{ “_id” : ObjectId(“50b811cf68b1911e7096db92”), “id” : 9964, “name” : “francs” }Type “it” for more备注：由于限制了集合大小不小，目标插入 10000 条，结果只插入了 56 条数据，并且老数据被新数据 覆盖。另外不可以删除 Capped Collection 的文档，下面测试下。–5 测试： 删除 capped collection 中的文档rs0:PRIMARY&gt; db.mycoll1.remove({id:9956});canot remove from a capped collection备注：删除文档时抛出异常。–6 测试：更新 capped collection 中的文档rs0:PRIMARY&gt; db.mycoll1.find({id:9956});{ “_id” : ObjectId(“50b811cf68b1911e7096db8a”), “id” : 9956, “name” : “francs” } rs0:PRIMARY&gt; db.mycoll1.update({id:9956},{set:{name:'aaa_francs'}}); failing update: objects in a capped ns cannot grow rs0:PRIMARY> db.mycoll1.update({id:9956},{set:{name:‘bbb’}});rs0:PRIMARY&gt; db.mycoll1.find({id:9956});{ “_id” : ObjectId(“50b811cf68b1911e7096db8a”), “id” : 9956, “name” : “bbb” }备注：这里正好验证了特性3，更新后的值不能超过原有空间，否则更新失败。–7 参考http://docs.mongodb.org/manual/core/capped-collections/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"mongodb 性能优化","slug":"history/tech/5953c4d0c2b92f5665eeda0b","date":"2016-03-14T21:55:56.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda0b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda0b/","excerpt":"","text":"在MySQL中，慢查询日志是经常作为我们优化数据库的依据，那在MongoDB中是否有类似的功能呢?答案是肯定的，那就是Mongo Database Profiler.不仅有，而且还有一些比MySQL的Slow Query Log更详细的信息。它就是我们这篇文章的主题。 开启 Profiling 功能 有两种方式可以控制 Profiling 的开关和级别，第一种是直接在启动参数里直接进行设置。 启动MongoDB时加上–profile=级别 即可。 也可以在客户端调用db.setProfilingLevel(级别) 命令来实时配置。可以通过db.getProfilingLevel()命令来获取当前的Profile级别。db.setProfilingLevel(2);{“was” : 0 , “ok” : 1}&gt; db.getProfilingLevel()上面斜体的级别可以取0，1，2 三个值，他们表示的意义如下： 0 – 不开启 1 – 记录慢命令 (默认为&gt;100ms) 2 – 记录所有命令 Profile 记录在级别1时会记录慢命令，那么这个慢的定义是什么?上面我们说到其默认为100ms，当然有默认就有设置，其设置方法和级别一样有两种，一种是通过添加–slowms启动参数配置。第二种是调用db.setProfilingLevel时加上第二个参数：db.setProfilingLevel( level , slowms )db.setProfilingLevel( 1 , 10 );查询 Profiling 记录 与MySQL的慢查询日志不同，Mongo Profile 记录是直接存在系统db里的，记录位置 system.profile ，所以，我们只要查询这个Collection的记录就可以获取到我们的 Profile 记录了。db.system.profile.find(){“ts” : “Thu Jan 29 2009 15:19:32 GMT-0500 (EST)” , “info” : “query test.$cmd ntoreturn:1 reslen:66 nscanned:0query: { profile: 2 } nreturned:1 bytes:50” , “millis” : 0}db.system.profile.find( { info: /test.foo/ } ){“ts” : “Thu Jan 29 2009 15:19:40 GMT-0500 (EST)” , “info” : “insert test.foo” , “millis” : 0}{“ts” : “Thu Jan 29 2009 15:19:42 GMT-0500 (EST)” , “info” : “insert test.foo” , “millis” : 0}{“ts” : “Thu Jan 29 2009 15:19:45 GMT-0500 (EST)” , “info” : “query test.foo ntoreturn:0 reslen:102 nscanned:2query: {} nreturned:2 bytes:86” , “millis” : 0}{“ts” : “Thu Jan 29 2009 15:21:17 GMT-0500 (EST)” , “info” : “query test.foo ntoreturn:0 reslen:36 nscanned:2query: { $not: { x: 2 } } nreturned:0 bytes:20” , “millis” : 0}{“ts” : “Thu Jan 29 2009 15:21:27 GMT-0500 (EST)” , “info” : “query test.foo ntoreturn:0 exception bytes:53” , “millis” : 88}列出执行时间长于某一限度(5ms)的 Profile 记录：db.system.profile.find( { millis : { $gt : 5 } } ){“ts” : “Thu Jan 29 2009 15:21:27 GMT-0500 (EST)” , “info” : “query test.foo ntoreturn:0 exception bytes:53” , “millis” : 88}查看最新的 Profile 记录： db.system.profile.find().sort({$natural:-1}) Mongo Shell 还提供了一个比较简洁的命令show profile，可列出最近5条执行时间超过1ms的 Profile 记录。 Profile 信息内容详解： ts-该命令在何时执行. millis Time-该命令执行耗时，以毫秒记. info-本命令的详细信息. query-表明这是一个query查询操作. ntoreturn-本次查询客户端要求返回的记录数.比如, findOne()命令执行时 ntoreturn 为 1.有limit(n) 条件时ntoreturn为n. query-具体的查询条件(如x&gt;3). nscanned-本次查询扫描的记录数. reslen-返回结果集的大小. nreturned-本次查询实际返回的结果集. update-表明这是一个update更新操作. fastmod-Indicates a fast modify operation. See Updates. These operations are normally quite fast. fastmodinsert – indicates a fast modify operation that performed an upsert. upsert-表明update的upsert参数为true.此参数的功能是如果update的记录不存在，则用update的条件insert一条记录. moved-表明本次update是否移动了硬盘上的数据，如果新记录比原记录短，通常不会移动当前记录，如果新记录比原记录长，那么可能会移动记录到其它位置，这时候会导致相关索引的更新.磁盘操作更多，加上索引更新，会使得这样的操作比较慢. insert-这是一个insert插入操作. getmore-这是一个getmore 操作，getmore通常发生在结果集比较大的查询时，第一个query返回了部分结果，后续的结果是通过getmore来获取的。 MongoDB 查询优化 如果nscanned(扫描的记录数)远大于nreturned(返回结果的记录数)的话，那么我们就要考虑通过加索引来优化记录定位了。 reslen 如果过大，那么说明我们返回的结果集太大了，这时请查看find函数的第二个参数是否只写上了你需要的属性名。(类似 于MySQL中不要总是select *) 对于创建索引的建议是：如果很少读，那么尽量不要添加索引，因为索引越多，写操作会越慢。如果读量很大，那么创建索引还是比较划算的。(和RDBMS一样，貌似是废话 -_-!!) MongoDB 更新优化 如果写查询量或者update量过大的话，多加索引是会有好处的。以及～～～～(省略N字，和RDBMS差不多的道理) Use fast modify operations when possible (and usually with these, an index). See Updates. Profiler 的效率 Profiling 功能肯定是会影响效率的，但是不太严重，原因是他使用的是system.profile 来记录，而system.profile 是一个capped collection 这种collection 在操作上有一些限制和特点，但是效率更高。原文出处：http://lgone.com/html/y2010/774.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"mongodb中_id与$natural排序有什么区别？","slug":"history/tech/5953c4d0c2b92f5665eeda0a","date":"2016-03-14T21:29:07.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda0a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda0a/","excerpt":"","text":"先用下面的方式写入1000条数据：for(var i=0;i&lt;1000;i++)db.test.insert({_id:i,a:‘1’})然后你分别使用下面命令按_id和natural排序取出前一条结果： db.test.find().sort({_id:1}).limit(1) db.test.find().sort({natural:1}).limit(1)你得到的结果会是一样的。这时候你进行一次update操作，将第一条记录的长度变长：db.test.update({_id:1},{a:‘12’})再通过上面两种不同的排序方式取第一条，你会发现取到的结果还是一样的。然后你再将第一条记录变长：db.test.update({_id:1},{a:‘123’})再通过上面两种不同的排序方式取第一条，这时候你会看到，通过_id排序查到的还是原来那一条，而通过$natural查到的已经变成了第二条。这是什么原因？_id是按数据插入时间排序，而natural是按数据在磁盘上的组织顺序排序。 当你执行insert操作的时候，通过Object.bsonsize(db.test.findOne());命令我们可以知道每条记录的长度为31 当你把a的值update时，a的长度在逐步增加，分别为31、32、33.因为MongoDB在记录长度变化后，发现当前记录所在空间后面没有空余的空间可供其变长。那么这条记录就会被删除然后移动到数据集的最后，所以导致natural最后排序的结果和之前不一样。因为MongoDB每一条记录都会做4字节的内存对齐。所以在你刚插入的时候，记录长度虽然只有31字节，但是MongoDB会为它分配32字节（8*4）的空间。这时候在其末尾就有一字节的空闲，当你增长一字节的时候，这一字节的空闲正好可以用上。所以就不需要移动位置了。而第二次从32字节变成33字节，原有的空间已经不能装下了，所以会造成数据的移动。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"git 避免每次提交重复输入密码","slug":"history/tech/5953c4d0c2b92f5665eeda09","date":"2016-03-13T21:32:50.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda09/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda09/","excerpt":"","text":"git config --global credential.helper store执行完后查看%HOME%目录下的.gitconfig文件，会多了一项： helper = store重新开启git bash会发现git push时不用再输入用户名和密码","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"git revert","slug":"history/tech/5953c4d0c2b92f5665eeda08","date":"2016-03-13T02:20:18.000Z","updated":"2020-11-29T01:42:08.755Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda08/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda08/","excerpt":"","text":"git revert 撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交* git revert HEAD 撤销前一次 commit* git revert HEAD^ 撤销前前一次 commit* git revert commit （比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"chmod u+s","slug":"history/tech/5953c4d0c2b92f5665eeda07","date":"2016-03-12T03:22:08.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda07/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda07/","excerpt":"","text":"“为了方便普通用户执行一些特权命令，SUID/SGID程序允许普通用户以root身份暂时执行该程序，并在执行结束后再恢复身份。”chmod u+s 就是给某个程序的所有者以suid权限，可以像root用户一样操作。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"mac /etc/rc.local","slug":"history/tech/5953c4d0c2b92f5665eeda06","date":"2016-03-12T02:19:03.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda06/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda06/","excerpt":"","text":"I was using those commands for VirtualBox in rc.local, and I ran into the same problem. I don’t if this is the right way to do this, but it works for me.I created /Library/LaunchDaemons/local.localhost.startup.plist containing the code below. It runs the rc.local script once at start up. Labellocal.localhost.startupDisabledRunAtLoadKeepAliveLaunchOnlyOnceProgramArguments/etc/rc.locallaunchctl load -w /Library/LaunchDaemons/local.localhost.startup","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"系统操作","slug":"系统操作","permalink":"https://wangxiuwen.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"}],"author":"wangxiuwen"},{"title":"git branch 用法总结","slug":"history/tech/5953c4d0c2b92f5665eeda05","date":"2016-03-11T22:07:21.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda05/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda05/","excerpt":"","text":"git branchgit branch 不带参数：列出本地已经存在的分支，并且在当前分支的前面加“*”号标记，例如：#git branchmasternewbranchgit branch -r 列出远程分支，例如：#git branch -rm/master -&gt; origin_apps/m1_2.3.4origin_apps/hardware/testorigin_apps/m1origin_apps/m1_2.3.4origin_apps/mastergit branch -a 列出本地分支和远程分支，例如：#git branch -amasternewbranchremotes/m/master -&gt; origin_apps/m1_2.3.4remotes/origin_apps/hardware/testremotes/origin_apps/m1remotes/origin_apps/m1_2.3.4remotes/origin_apps/mastergit branch 创建一个新的本地分支，需要注意，此处只是创建分支，不进行分支切换，例如：#git branch newbranch2#git branchmasternewbranchnewbranch2当前的分支依然是master，不进行切换。git branch -m | -M oldbranch newbranch 重命名分支，如果newbranch名字分支已经存在，则需要使用-M强制重命名，否则，使用-m进行重命名。git branch -d | -D branchname 删除branchname分支git branch -d -r branchname 删除远程branchname分支例子：git help branch中的一个例子：$ git clone git://git.kernel.org/pub/scm/…/linux-2.6 my2.6$ cd my2.6$ git branch my2.6.14 v2.6.14$ git checkout my2.6.14第三行符合git branch的格式，即以v2.6.14为start-point，创建新的本地分支branchname。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"Supervisorctl not respecting my configuration","slug":"history/tech/5953c4d0c2b92f5665eeda03","date":"2016-03-11T03:39:07.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda03/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda03/","excerpt":"","text":"$ supervisorctlhttp://localhost:9001 refused connectionYou should run supervisorctl with -c as well. From the documentation (my emphasis):The Supervisor configuration file is conventionally named supervisord.conf. It is used by both supervisord and supervisorctl. If either application is started without the -c option (the option which is used to tell the application the configuration filename explicitly), the application will look for a file named supervisord.conf within the following locations, in the specified order. It will use the first file it finds.CWD/supervisord.confCWD/supervisord.confCWD/supervisord.confCWD/etc/supervisord.conf/etc/supervisord.conf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"redis编译安装","slug":"history/tech/5953c4d0c2b92f5665eeda04","date":"2016-03-10T17:53:48.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda04/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda04/","excerpt":"","text":"redis是一个强大的NoSQL数据库，相对于memcached，他提供了更丰富的数据类型，有string、hash、list、set、sorted set这几种类型；还支持数据持久化。光string类型，就比memcached功能更强大，提供了获取/设置子串、bit位等更灵活的操作，其他类型是memcached所没有的。redis的开发者相当给力，更新很频繁。redis的编译安装很简单，步骤如下：# wget http://redis.googlecode.com/files/redis-2.4.4.tar.gz# tar -xzf redis-2.4.4.tar.gz# cd redis-2.4.4# make# make PREFIX=/usr/local/redis-2.4.4 install# cp redis.conf /usr/local/redis-2.4.4至此，编译安装完毕。启动服务：# cd /usr/local/redis-2.4.4修改配置文件，将其中的&quot;daemonize no&quot;行改为&quot;daemonize yes&quot;，让其在后台运行。# vim redis.conf启动redis服务# ./bin/redis-server redis.conf关闭服务：# ./bin/redis-cli -p 6379 shutdown简单操作：# ./bin/redis-cliredis 127.0.0.1:6379&gt; set key hiOKredis 127.0.0.1:6379&gt; get key&quot;hi&quot;附：redis官方网站：http://redis.io/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"mongodb 集群搭建","slug":"history/tech/5953c4d0c2b92f5665eeda02","date":"2016-03-09T20:26:57.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda02/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda02/","excerpt":"","text":"命令如下1/usr/local/mongodb/bin/mongo --host 127.0.0.1 --port 10000初始化集群123456789101112rs.initiate( &#123; _id: &quot;driven&quot;, version: 1, members: [ &#123; _id: 0, host : &quot;10.0.177.242:10000&quot; &#125;, &#123; _id: 1, host : &quot;10.0.177.243:10000&quot; &#125; ] &#125;)rs.addArb(&quot;10.0.177.244:10000&quot;)创建用户1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980db.createUser( &#123; &quot;user&quot; : &quot;admin&quot;, &quot;pwd&quot;: &quot;xxx&quot;, &quot;roles&quot; : [ &#123; &quot;role&quot; : &quot;__queryableBackup&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;__system&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;backup&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;clusterAdmin&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;clusterManager&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;clusterMonitor&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;dbAdmin&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;dbAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;dbOwner&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;enableSharding&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;hostManager&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;read&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;readAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;readWrite&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;readWriteAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;restore&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;root&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;userAdmin&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;userAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; &#125; ]&#125; );设置优先级123config=rs.conf()config.members[0].priority = 100rs.reconfig(config)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"pip安装","slug":"history/tech/5953c4d0c2b92f5665eeda01","date":"2016-03-09T19:33:53.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda01/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda01/","excerpt":"","text":"sudo easy_install pip","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"系统操作","slug":"系统操作","permalink":"https://wangxiuwen.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"}],"author":"wangxiuwen"},{"title":"Git 的 .gitignore 配置","slug":"history/tech/5953c4d0c2b92f5665eeda00","date":"2016-02-05T00:59:49.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eeda00/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eeda00/","excerpt":"","text":".gitignore 配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配置 .gitignore 的一些心得。1、配置语法：以斜杠“/”开头表示目录；以星号“*”通配多个字符；以问号“?”通配单个字符以方括号“[]”包含单个字符的匹配列表；以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；2、示例：（1）规则：fd1/*说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；（2）规则：/fd1/*说明：忽略根目录下的 /fd1/ 目录的全部内容；（3）规则：/*!.gitignore!/fw/bin/!/fw/sf/说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"swift toInt","slug":"history/tech/5953c4d0c2b92f5665eed9ff","date":"2016-02-03T17:22:26.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ff/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ff/","excerpt":"","text":"**Swift2.0中String.toInt()已重名为Int(String)的可失败构造器，因为构造器语法更适合类型转换。**Swift2.0中String.toInt()已重名为Int(String)的可失败构造器，因为构造器语法更适合类型转换。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"objective-c","slug":"objective-c","permalink":"https://wangxiuwen.github.io/tags/objective-c/"}],"author":"wangxiuwen"},{"title":"最新版 CocoaPods 的安装流程","slug":"history/tech/5953c4d0c2b92f5665eed9fe","date":"2016-01-27T19:22:57.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9fe/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9fe/","excerpt":"","text":"iOS 最新版 CocoaPods 的安装流程1.移除现有Ruby默认源gem sources --remove https://rubygems.org/2.使用新的源gem sources -a https://ruby.taobao.org/3.验证新源是否替换成功$gem sources -l4.安装CocoaPods(1) sudo gem install cocoapods 备注：苹果系统升级 OS X EL Capitan 后改为sudo gem install -n /usr/local/bin cocoapods(2) pod setup5.更新gemsudo gem update --system6. 新建工程，并在终端用cd指令到文件夹内pod search 第三方7.新建文件 vim “Podfile”，vim Podfile写入以下内容并保存 小提示：（终端vim文件 按 i 可编辑 ，esc 退出编辑，：wq 可保存退出）platform:ios, ‘6.0’ pod ‘AFNetworking’, ‘~&gt; 2.3.1’ &lt;-------第三方8.导入第三方库$pod install9.退出终端以下是我用以前的安装流程安装时出现的一些错误终端 cocoapods 下载bug调试：错误1：Error fetching http://ruby.taobao.org/:bad response Not Found 404 (http://ruby.taobao.org/specs.4.8.gz)解决方案：把安装流程中 gem sources -a http://ruby.taobao.org/ ---改为---->gem sources -a https://ruby.taobao.org/错误2：ERROR: While executing gem … (Errno::EPERM)Operation not permitted - /usr/bin/pod解决方案：苹果系统升级OS X EL Capitan后会出现的插件错误，将安装流程 4.安装CocoaPods 的 (1)sudo gem install cocoapods ——&gt;改为sudo gem install -n /usr/local/bin cocoapods错误3： Unable to satisfy the following requirements: - AVOSCloud (~&gt; 3.1.6.3) required by PodfileSpecs satisfying the AVOSCloud (~&gt; 3.1.6.3) dependency were found, but they required a higher minimum deployment target.解决方案：安装流程：Podfile文件 中 platform:ios, ‘6.0’ 后边的 6.0 是平台版本号 ，一定要加上","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"Mac OSX 10.10 Yosemite 安装 sshfs 方便挂载远程目录","slug":"history/tech/5953c4d0c2b92f5665eed9fd","date":"2016-01-24T17:55:18.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9fd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9fd/","excerpt":"","text":"**下载：osxfuse-2.7.3.dmg http://osxfuse.github.io/**下载：sshfs-2.5.0.pkg https://github.com/osxfuse/sshfs/releases/都安装了就搞定了，安装后可能需要重启。使用 sshfs 挂载远程目录到本地：sshfs -C -o reconnect user@host:dir localdir更多 sshfs 的用法可以 sshfs -h 查看。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"系统操作","slug":"系统操作","permalink":"https://wangxiuwen.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"}],"author":"wangxiuwen"},{"title":"app.use","slug":"history/tech/5953c4d0c2b92f5665eed9fb","date":"2016-01-24T03:03:37.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9fb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9fb/","excerpt":"","text":"express restifyapp.use 要放到路由之前","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"express","slug":"express","permalink":"https://wangxiuwen.github.io/tags/express/"}],"author":"wangxiuwen"},{"title":"RESTFUL服务中POST/PUT/PATCH方法的区别","slug":"history/tech/5953c4d0c2b92f5665eed9fa","date":"2016-01-24T03:03:03.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9fa/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9fa/","excerpt":"","text":"经常会混淆HTTP的POST/PUT方法，因为这两个方法似乎都可以用来创建或更新一个资源。区别是细微但清楚的：POST方法用来创建一个子资源，如 /api/users，会在users下面创建一个user，如users/1POST方法不是幂等的，多次执行，将导致多条相同的用户被创建（users/1，users/2 …而这些用户除了自增长id外有着相同的数据，除非你的系统实现了额外的数据唯一性检查）而PUT方法用来创建一个URI已知的资源，或对已知资源进行完全替换，比如users/1，因此PUT方法一般会用来更新一个已知资源，除非在创建前，你完全知道自己要创建的对象的URI。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"命令行看cpu","slug":"history/tech/5953c4d0c2b92f5665eed9fc","date":"2016-01-24T01:25:59.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9fc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9fc/","excerpt":"","text":"sysctl -n machdep.cpu.brand_string","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"系统操作","slug":"系统操作","permalink":"https://wangxiuwen.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"}],"author":"wangxiuwen"},{"title":"前端获取浏览器userAgent","slug":"history/tech/5953c4d0c2b92f5665eed9f9","date":"2016-01-19T22:07:55.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f9/","excerpt":"","text":"navigator.userAgent","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"git 检出指定端口号","slug":"history/tech/5953c4d0c2b92f5665eed9f8","date":"2016-01-19T03:02:05.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f8/","excerpt":"","text":"git clone ssh://qianrushi@qianrushi.org:222/git/xxx.gitThe following syntaxes may be used with them:ssh://host.xz/path/to/repo.git/git://host.xz/path/to/repo.git/http://host.xz/path/to/repo.git/ftp://host.xz/path/to/repo.git/rsync://host.xz/path/to/repo.git/An alternative scp-like syntax may also be used with the ssh protocol:host.xz:path/to/repo.git/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"交叉编译器提示 文件未找到","slug":"history/tech/5953c4d0c2b92f5665eed9f7","date":"2016-01-17T02:25:55.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f7/","excerpt":"","text":"交叉编译器提示 文件未找到sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0apt-get install lib32stdc++6","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"交叉编译","slug":"交叉编译","permalink":"https://wangxiuwen.github.io/tags/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"}],"author":"wangxiuwen"},{"title":"Shell脚本获取本地网卡IP、mac地址、子网掩码、dns IP、外网IP","slug":"history/tech/5953c4d0c2b92f5665eed9f6","date":"2016-01-17T02:24:25.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f6/","excerpt":"","text":"#/usr/bin/env bash Name: get_network_info.sh Author: Purple_Grape This is a script to gather network information of your Linux system. Test under Ubuntu 10.04 only.#----------------------------NIC=eth0MAC=LANG=C ifconfig $NIC | awk '/HWaddr/{ print $5 }'IP=LANG=C ifconfig $NIC | awk '/inet addr:/{ print $2 }' | awk -F: '{print $2 }'MASK=LANG=C ifconfig $NIC | awk -F: '/Mask/{print $4}'ext_ip=curl ifconfig.meif ;thendns=awk '/^nameserver/{print $2}' /etc/resolv.conffi#----------------------------echo “Your network information is as below:”echo $MACecho $IPecho $dnsecho $ext_ip","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"Siege 压力测试","slug":"history/tech/5953c4d0c2b92f5665eed9f5","date":"2016-01-14T04:02:04.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f5/","excerpt":"","text":"http://download.joedog.org/解压并安装： tar -zxvf siege-latest.tar.gz cd siege-2.72/ ./configure –prefix=/usr/local/siege –mandir=/usr/local/man安装完成后，运行bin中的siege_config命令来创建.siege文件之后，你可以通过./siege -C命令来查看当前配置最简单的使用命令：./siege http://localhost/#用来测试本地主页示例：siege -c 100 -r 2 --header “Cookie: your-cookie-name=your-cookie-value” -f urls.txt参数说明：-c 20 并发20个用户-r 2 重复循环2次-f urls.txt 任务列表：URL列表参数详解：-C,或–config 在屏幕上打印显示出当前的配置,配置是包括在他的配置文件HOME/.siegerc中,可以编辑里面的参数,这样每次siege 都会按照它运行. -v 运行时能看到详细的运行信息 -c n,或–concurrent=n 模拟有n个用户在同时访问,n不要设得太大,因为越大,siege 消耗本地机器的资源越多 -i,–internet 随机访问urls.txt中的url列表项,以此模拟真实的访问情况(随机性),当urls.txt存在是有效 -d n,–delay=n hit每个url之间的延迟,在0-n之间 -r n,–reps=n 重复运行测试n次,不能与 -t同时存在 -t n,–time=n 持续运行siege ‘n’秒(如10S),分钟(10M),小时(10H) -l 运行结束,将统计数据保存到日志文件中siege .log,一般位于/usr/local/var/siege .log中,也可在.siegerc中自定义 -R SIEGERC,–rc=SIEGERC 指定用特定的siege 配置文件来运行,默认的为HOME/.siegerc-f FILE, –file=FILE 指定用特定的urls文件运行siege ,默认为urls.txt,位于siege 安装目录下的etc/urls.txt-u URL,–url=URL 测试指定的一个URL,对它进行”siege “,此选项会忽略有关urls文件的设定报错：WARNING: The number of users is capped at 255. To increase thislimit, search your .siegerc file for ‘limit’ and changeits value. Make sure you read the instructions there…结果说明:Lifting the server siege… done.Transactions: 3419263 hits //完成419263次处理Availability: 100.00 % //100.00 % 成功率Elapsed time: 5999.69 secs //总共用时Data transferred: 84273.91 MB //共数据传输84273.91 MBResponse time: 0.37 secs //相应用时1.65秒：显示网络连接的速度Transaction rate: 569.91 trans/sec //均每秒完成 569.91 次处理：表示服务器后Throughput: 14.05 MB/sec //平均每秒传送数据Concurrency: 213.42 //实际最高并发数Successful transactions: 2564081 //成功处理次数Failed transactions: 11 //失败处理次数Longest transaction: 29.04 //每次传输所花最长时间Shortest transaction: 0.00 //每次传输所花最短时间","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"压力测试","slug":"压力测试","permalink":"https://wangxiuwen.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"}],"author":"wangxiuwen"},{"title":"MongoDB的查询数组","slug":"history/tech/5953c4d0c2b92f5665eed9f3","date":"2016-01-13T03:39:34.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f3/","excerpt":"","text":"MongoDB查询数组学习笔记首先我们先插入几个文档db.food.insert({“_id”:1, “fruit”:})db.food.insert({“_id”:2, “fruit”:})db.food.insert({“_id”:3, “fruit”:})我们想要查询既包含”apple”并且又包含”banana”的文档，就需要使用”$all“来查询db.food.find({“fruit”:{“$all”:}}){ “_id” : 1, “fruit” : }{ “_id” : 3, “fruit” : }还记得之前的”in“吗，如果我们需要查询包含”apple”或者”banana”的文档，则使用”in”db.food.find({“fruit”:{“$in”:}}){ “_id” : 1, “fruit” : }{ “_id” : 2, “fruit” : }{ “_id” : 3, “fruit” : }使用”$size“可以查询指定长度的数组db.food.find({“fruit”:{$size:3}}){ “_id” : 1, “fruit” : }{ “_id” : 2, “fruit” : }{ “_id” : 3, “fruit” : }使用”$slice“返回数组中的一个子集合db.blog.findOne(){”_id” : ObjectId(“4e914ad2717ed94f8289ac08″),”comments” : ,”content” : “My first blog.”,”title” : “Hello World”}需要返回comments中的前两条数据，如下查询语句db.blog.findOne({},{“comments”:{$slice:2}}){”_id” : ObjectId(“4e914ad2717ed94f8289ac08″),”comments” : ,”content” : “My first blog.”,”title” : “Hello World”}查询comments中后两条数据的查询语句：db.blog.findOne({},{“comments”:{$slice:-2}})还可以返回跳过几个文档之后的几个文档db.blog.findOne({},{“comments”:{$slice:}}){”_id” : ObjectId(“4e914ad2717ed94f8289ac08″),”comments” : ,”content” : “My first blog.”,”title” : “Hello World”}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"$natural","slug":"history/tech/5953c4d0c2b92f5665eed9f4","date":"2016-01-12T21:08:40.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f4/","excerpt":"","text":"_id是按数据插入时间排序，而natural是按数据在磁盘上的组织顺序排序。 当你执行insert操作的时候，通过Object.bsonsize(db.test.findOne());命令我们可以知道每条记录的长度为31 当你把a的值update时，a的长度在逐步增加，分别为31、32、33.因为MongoDB在记录长度变化后，发现当前记录所在空间后面没有空余的空间可供其变长。那么这条记录就会被删除然后移动到数据集的最后，所以导致natural最后排序的结果和之前不一样。因为MongoDB每一条记录都会做4字节的内存对齐。所以在你刚插入的时候，记录长度虽然只有31字节，但是MongoDB会为它分配32字节（8*4）的空间。这时候在其末尾就有一字节的空闲，当你增长一字节的时候，这一字节的空闲正好可以用上。所以就不需要移动位置了。而第二次从32字节变成33字节，原有的空间已经不能装下了，所以会造成数据的移动。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"正则表达式全部符号解释","slug":"history/tech/5953c4d0c2b92f5665eed9f2","date":"2016-01-10T20:14:44.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f2/","excerpt":"","text":"http://www.cnblogs.com/yirlin/archive/2006/04/12/373222.html字符描述\\将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，‘n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\\’ 匹配 “” 而 “(” 则匹配 “(”。^匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。匹配前面的子表达式零次或多次。例如，zo 能匹配 “z” 以及 “zoo”。* 等价于{0,}。+匹配前面的子表达式一次或多次。例如，‘zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。?匹配前面的子表达式零次或一次。例如，“do(es)?” 可以匹配 “do” 或 “does” 中的&quot;do&quot; 。? 等价于 {0,1}。{n}n 是一个非负整数。匹配确定的 n 次。例如，‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。{n,}n 是一个非负整数。至少匹配n 次。例如，‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。‘o{1,}’ 等价于 ‘o+’。‘o{0,}’ 则等价于 ‘o*’。{n,m}m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}” 将匹配 “fooooood” 中的前三个 o。‘o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。?当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，‘o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。.匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用象 ‘’ 的模式。(pattern)匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(’ 或 ‘)’。(?:pattern)匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。(?=pattern)正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，‘Windows (?=95|98|NT|2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。(?!pattern)负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95|98|NT|2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始x|y匹配 x 或 y。例如，‘z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。字符集合。匹配所包含的任意一个字符。例如， ‘’ 可以匹配 “plain” 中的 ‘a’。负值字符集合。匹配未包含的任意字符。例如， ‘’ 可以匹配 “plain” 中的’p’。字符范围。匹配指定范围内的任意字符。例如，’’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。负值字符范围。匹配任何不在指定范围内的任意字符。例如，’’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。\\b匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配&quot;never&quot; 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。\\B匹配非单词边界。‘er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。\\cx匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。\\d匹配一个数字字符。等价于 。\\D匹配一个非数字字符。等价于 。\\f匹配一个换页符。等价于 \\x0c 和 \\cL。\\n匹配一个换行符。等价于 \\x0a 和 \\cJ。\\r匹配一个回车符。等价于 \\x0d 和 \\cM。\\s匹配任何空白字符，包括空格、制表符、换页符等等。等价于 。\\S匹配任何非空白字符。等价于 。\\t匹配一个制表符。等价于 \\x09 和 \\cI。\\v匹配一个垂直制表符。等价于 \\x0b 和 \\cK。\\w匹配包括下划线的任何单词字符。等价于’’。\\W匹配任何非单词字符。等价于 ‘’。\\xn匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\\x41’ 匹配 “A”。’\\x041’ 则等价于 ‘\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。.\\num匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1’ 匹配两个连续的相同字符。\\n标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。\\nm标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。\\nml如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。\\un匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"正则表达式","slug":"正则表达式","permalink":"https://wangxiuwen.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],"author":"wangxiuwen"},{"title":"转为字符串","slug":"history/tech/5953c4d0c2b92f5665eed9f1","date":"2016-01-10T20:04:36.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f1/","excerpt":"","text":"var value = value + ‘’;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"设置响应头信息","slug":"history/tech/5953c4d0c2b92f5665eed9f0","date":"2016-01-10T19:02:27.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9f0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9f0/","excerpt":"","text":"res.setHeader(‘Content-Type’, ‘text/html’);","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"克隆对象技巧","slug":"history/tech/5953c4d0c2b92f5665eed9ef","date":"2016-01-10T03:22:41.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ef/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ef/","excerpt":"","text":"JSON.parse(JSON.stringify(a))","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"mongodb的write concern","slug":"history/tech/5953c4d0c2b92f5665eed9ee","date":"2016-01-10T03:03:43.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ee/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ee/","excerpt":"","text":"w, {Number/String, &gt; -1 || ‘majority’ || tag name} the write concern for the operation where &lt; 1 is no acknowledgement of write and w &gt;= 1, w = ‘majority’ or tag acknowledges the write-1 = don’t even report network errors0 = default, don’t call getLastError by default1 = basic, call getLastError, but don’t wait for slaves2+= wait for slaveshttp://kyfxbl.iteye.com/blog/1952941","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"ubuntu iptables设置","slug":"history/tech/5953c4d0c2b92f5665eed9ed","date":"2016-01-10T01:26:00.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ed/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ed/","excerpt":"","text":"root@qustdjx-K42JZ:/home/qustdjx# iptables -L -nChain INPUT (policy ACCEPT)target prot opt source destinationChain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destination**ubuntu中启动及关闭iptables **在ubuntu中由于不存在 /etc/init.d/iptales文件，所以无法使用service等命令来启动iptables，需要用modprobe命令。 启动iptables modprobe ip_tables 关闭iptables（关闭命令要比启动复杂） iptalbes -F iptables -X iptables -Z iptables -P INPUT ACCEPT iptables -P OUTPUT ACCEPT iptables -P FORWARD ACCEPT modprobe -r ip_tables 依次执行以上命令即可关闭iptables，否则在执行modproble -r ip_tables时将会提示 FATAL: Module ip_tables is in use.使用 ubuntu 已经有两个星期了， 才忽然发现原来一直都没有安装防火墙， 赶紧去找些资料看看， 下面给出我自己的 iptables设置，供和我一样新来的兄弟们参考，水平有限，多多指教。（对于防火墙的设置，有两种策略：一种是全部通讯口都允许使用，只是阻止一些我们知道的不安全的或者容易被利用的口；另外一种，则是先屏蔽所有的通讯口，而只是允许我们需要使用的通讯端口。这里使用的是第二种原则，如果你需要开启其他端口，请先参考计算机通讯口说明，然后自己添加。）代码:＃删除原来 iptables 里面已经有的规则iptables -Fiptables -X＃抛弃所有不符合三种链规则的数据包iptables -P INPUT DROPiptables -P OUTPUT DROPiptables -P FORWARD DROP＃设置：本地进程 lo 的 INPUT 和 OUTPUT 链接 ； eth1的INPUT链iptables -A INPUT -i lo -j ACCEPTiptables -A INPUT -i eth1 -m state --state ESTABLISHED,RELATED -jACCEPTiptables -A INPUT -i eth1 -m state --state NEW,INVALID -j LOGiptables -A OUTPUT -o lo -j ACCEPT＃对其他主要允许的端口的 OUTPUT设置：＃ DNSiptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 53 -jACCEPTiptables -A OUTPUT -o eth1 -p UDP --sport 1024:65535 --dport 53 -jACCEPT＃HTTPiptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 80 -jACCEPT#HTTPSiptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 443 -jACCEPT#Email 接受 和发送iptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 110 -jACCEPTiptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 25 -jACCEPT＃ FTP 数据和控制iptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 20 -jACCEPTiptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 21 -jACCEPT＃DHCPiptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 68 -jACCEPTiptables -A OUTPUT -o eth1 -p UDP --sport 1024:65535 --dport 68 -jACCEPT#POP3S Email安全接收iptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 995 -jACCEPT＃时间同步服务器 NTPiptables -A OUTPUT -o eth1 -p TCP --sport 1024:65535 --dport 123 -jACCEPT#拒绝 eth1 其他剩下的iptables -A OUTPUT -o eth1 --match state --state NEW,INVALID -jLOG最后是有关于iptables存储的命令：代码:iptables-save &gt;/etc/iptables.up.rule ＃ 存在你想存的地方代码:iptables-restore &lt;/etc/iptables.up.rules ＃调用因为iptables 在每次机器重新启动以后，需要再次输入或者调用，为了方便操作，使用代码:sudo gedit /etc/network/interfaces在代码:auto ath0iface ath0 inet dhcp后面加上代码:pre-up iptables-restore &lt;/etc/iptables.up.rules ＃启动自动调用已存储的iptables代码:post-down iptables-save &gt;/etc/iptables.up.rule #关机时，把当前iptables 储存转自：http://blog.sina.com.cn/s/blog_71f389090100u9o2.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"阿里云 centos vpn搭建","slug":"history/tech/5953c4d0c2b92f5665eed9ec","date":"2016-01-10T01:25:14.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ec/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ec/","excerpt":"","text":"阿里云服务器配置详解（测试成功）我的操作环境：阿里云香港节点云服务器，操作系统：CentOS 6.3 64位名词解释：pptp是VPN服务器类型之一，PPP是一种数据链路层协议，iptables是过滤系统。【正文】1 服务器端安装软件1.1 首先安装ppp，命令：#yum install -y ppp iptables提示Complete! ，安装成功；1.2安装pptp，由于pptp没有存放在CentOS的源中，所以用yum命令安装返回的是找不到安装包的，需要从网上下载，安装命令如下：#rpm -ivh http://pptpd.fanqiangmao.com/pptpd-1.3.4-2.el6.x86_64.rpm2 配置pptp2.1编辑/etc/pptpd.conf，命令如下#vi /etc/pptpd.conf将#localip 192.168.0.1#remoteip 192.168.0.234-238,192.168.0.245修改成localip 192.168.0.1remoteip 192.168.0.234-238,192.168.0.245即将这两行第一个字符“#”去掉，保存退出（Vi 命令补充：如需查找abc则输入”:/abc”，修改文本输入i，退出修改按esc，保存并退出输入”:/wq”）2.2编辑/etc/ppp/options.pptpd，命令如下#vi /etc/ppp/options.pptpd将#ms-dns 10.0.0.1#ms-dns 10.0.0.2改成ms-dns 8.8.8.8ms-dns 8.8.4.4即将这两行第一个字符“#”去掉，而后修改DNS的IP。2.3设置使用pptp的用户名和密码命令：#vi /etc/ppp/chap-secrets打开后只有两行，而且一个账号都没有 Secrets for authentication using CHAP client server secret IP addresses根据您的需要添加账号，每行一个。按照：“用户名 pptpd 密码 ip地址”的格式输入，每一项之间用空格分开，例如：kuro pptpd 123456 * （*表示所有IP）保存并退出。3、修改内核设置，使其支持转发命令：#vi /etc/sysctl.conf将net.ipv4.ip_forward=0改成net.ipv4.ip_forward=1将net.ipv4.tcp_syncookies= 1改成 #net.ipv4.tcp_syncookies= 1保存并退出执行以下命令使修改后的内核生效#sysctl -p4、添加iptables转发规则iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth1 -jMASQUERADE（注意：由于阿里云是双网卡，内网eth0，外网eth1，所以这块特别容易误写为eth0，这也是为什么很多杂乱的教程无法配置成功的原因之一）添加好转发规则后保存一下并重启iptables#/etc/init.d/iptables save #/etc/init.d/iptables restart5、重启pptp服务#/etc/init.d/pptpd restart这里要注意一下，其实此时pptp还没运行起来。所以使用restart重启，会显示Shutting down pptp 。还会有一个警告，可以忽略。如不放心可以再用以上命令重启一下pptp就非常顺利的运行了。6、设置pptp和iptables随系统启动#chkconfig pptpd on #chkconfig iptables on至此，pptp服务端安装结束。在PC端的“网络和共享中心”，设置新的连接或网络，即可访问VPN。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"【翻译】用 kibana 4 调查你邻居可能投票给的人","slug":"history/tech/5953c4d0c2b92f5665eed9eb","date":"2016-01-07T19:19:14.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9eb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9eb/","excerpt":"","text":"http://it.taocms.org/02/7039.htm原文地址：http://www.elasticsearch.org/blog/kibana-4-for-investigating-pacs-super-pacs-and-your-neighbors/是时候当一个公众黑客了！我们看到地区和联邦政府每天都公开越来越多的数据以提高行政透明度，包括交通事故，药物不良反应，高校助学金申请，餐厅检查甚至厕所位置都有。现在，所有人都能访问这个数据，分析它，然后构建应用以促进公众利益。公众黑客太棒了！联邦选举委员会发布了竞选献金数据到它的网站(www.fec.gov)上，包括总统、参议院和众议院的。如同 fec.gov 上所说：“In 1975, Congress created the Federal Election Commission (FEC) to administer and enforce the Federal Election Campaign Act (FECA) – the statute that governs the financing of federal elections. The duties of the FEC, which is an independent regulatory agency, are to disclose campaign finance information, to enforce the provisions of the law such as the limits and prohibitions on contributions, and to oversee the public funding of Presidential elections.”向公众提供这些信息是对确保选举过程的完整性是至关重要的。所以，现在 FEC 提供给了我们原始数据，我们能做什么呢？如果你不认为自己是一个会用 R 分析数据的数据科学家，或者会做漂亮的 D3.js 可视化效果的纽约时报员工，你可能这下就卡住了。不要紧，ELK stack 可以不用多少编程，做到丰富的、可视的，交互式数据分析。数据导入的步骤我会稍后讲，现在，先让我们看看 Kibana 4 能做到些什么。discoverKibana 4 里，你应该从 Discover 标签页开始。这是你得到数据集高阶感观的地方。可以查看实时的数据分布，结构化了的字段列表，一起索引中一些文档的实际内容。在上面截图里，我们看到 2013-2014 选举周期里，一共有将近 210 万条个人捐献记录。我们能看到很清晰的捐献记录增加的趋势，以及一些看起来是随机的峰值点。左侧栏列出了数据集中所有的字段。这提供给我们可以提问的内容。比如，我们现在知道数据里有像姓名、城市、州、捐献数量和捐献日期这些字段，我们就可以构思下面这些问题了：哪个州的捐献数量最大？哪个州的捐献金额最大？爱荷华州的个人捐献金额实时变化情况如何？竞选献金数前 10 名的州里，排名前 3 的城市都是哪些？我喜欢的明星(比如：格温妮丝·帕特洛)给谁捐款了么？字段列表还能帮助你排除掉一些没法回答的问题。比如，这个记录个人捐献的文件并不包含有关委员会和相关候选人的信息(技术上说，个人捐献的去向是跟候选人相关的)。原始数据里只是记录了委员会和候选人的加密 ID。这样，要问“接收献金最多的 10 个委员会的名字是？”就比较难了。通过 Discover 界面发现这点，有助于引导我们加载额外的数据，丰富这个应用，让它更加有用。visualize当我们确定了可能要问的一些问题后，我们就可以开始基于数据集的这些属性构建可视化了。以前面说到的一个问题为例。这是个人献金总额最多的 10 个州的饼图：看起来没有太多的惊喜，如饼图所示，加利福尼亚，纽约，德克萨斯，佛罗里达，伊利诺斯(美国最大的五个州)贡献了最多的捐赠。华盛顿位列第三是一个有趣的值得调研的问题 - 华盛顿作为州的话应该是倒数第三小的，或许作为联邦政府所在地，更容易引导当地居民参与政治。饼图很好创建：选择用来确定饼图分片大小的聚合(Aggregation)种类：计数(Count)、总和(Sum)还是去重数(Unique Count)。如果你选择了总和或者去重数，Kibana 还需要知道用哪个字段的值来做这个运算。选择切片(Split Slices)来切割饼图成片。选择绘制分片的方式：a. Aggregation: 选择 “Terms” 因为我们是要基于字段的值来创建分片(“terms” 是 Elasticsearch 里的说法)。b. Field: 选择要做运算的字段。本例中，我们要按照州来计算献金分布，所以选择 “state”。c. Order/Size: 选择 “Top” 排序，选择长度为 “10” ，这样就能创建一个前 10 名的饼图。d. Order by: 本例中你应该是用我们第一步里选过的函数来做排序，不过有些高级场景里你也可以在这里选择其他选项。点击 Apply 然后你就有一个漂亮的饼图了。点击右上角的 Save 图标，然后取个名字，这你可以把它添加到 Dashboard 里。如果你在数据可视化方面有过一些经验，你可能会想“这家话真是个纯码农。饼图在这种数据分析里就是一个错误的可视化方式。”嗯，你是对的(好吧，希望不包括纯码农部分)。这里使用饼图确实给观众带来一些失真的感观，好像这里面已经包括全部 100% 的数据，就好像加利福尼亚的现金占到全国的四分之一一样。你可以修改 “size” 参数为 “51”，这样分片数就等于实际的总数。不过如下所示，饼图看起来就不怎么漂亮了：更好的办法是用另一种可视化方式，比如垂直柱状图(Vertical Bar Chart)。创建垂直柱状图的参数看起来很眼熟。因为这些跟前面创建饼图用过的一模一样，毕竟驱动可视化的背后，实际的请求就是一模一样的。我们只是用一种更不容易被误解的方式来展示而已。dashboard创建可视化是蛮有趣的，不过有时候，你更希望把这些合起来放进一个漂亮的仪表板上，在这上面，执行一些聚合分析，通过多维度的字段数据获取有用的结论，然后和别人分享你的发现。添加可视化到仪表板的时间过程非常直接。你创建好一系列可视化后，在 Dashboard 标签页的右上角点击 Add Visualizatioin 图表，然后开始添加即可！小贴士：在你去创建可视化和仪表板之前，最好先约定保存这些元素时采用什么命名规则。比如，统一加上你的 Elasticsearch 索引名或者类型名作为前缀。然后，你就会有一个像这样的仪表板了：探索让我们再看两个潜在的数据场景：一个关注特定的 Super PAC，另一个关注你加血的竞选献金。**这些 pac 后面都有谁?**政治行动委员会(Political Action Committees), 或者说 PAC，不是什么新东西了。第一个 PAC 在 1947 年《塔夫脱-哈特利法案》禁止工会和企业花钱影响联邦选举的时候就成立的。Super PACs 应该是由 2010 年的两个最高法院判决促生的。判决裁定没有捐钱给具体候选人，政党或其他 PAC 的 PAC 组织，可以接收来自个人，公会和企业(包括盈利和非盈利的)的无限额捐款以保证独立的支出。[http://en.wikipedia.org/wiki/Political_action_committee]Super PACs 是很多争议和辩论的来源，因为在此之前，竞选献金有很明确的额度限制。在上面截图里，我们看到了一个有关捐献的高层次的师徒。特别是，接收捐献的顶级委员会，委员会类型(比如：Super PAC， PAC，党派等)以及利益集团的类别(比如：公司，公会等)。我可以大概猜出来很多委员会的含义，不过还是有些不太明显 —— 比如 “ACTBLUE” 和 “NEXTGEN CLIMATE ACTION COMMITTEE”。超过 七千七百万美元的献金捐给一个命名模糊不清的委员会，真的是一个值得研究的问题。你可以在数据表格上点击元素，就能过滤这个数据集了：点击 “NEXTGEN CLIMATE ACTION COMMITTEE” 后，Kibana 会刷新所有其他图标，只显示捐献给这个委员会的相关数据。我们立刻就发现了一些有趣的现象：绝大多数捐献给 “NEXTGEN CLIMATE ACTION COMMITTEE” 的人是：自称职位是“创始人”雇主为 Fahr, LLC居住在旧金山你再点击 “FAHR, LLC” 继续钻取，很明显这些献金是来自同一个人：在通过雇主下钻之前，我们注意到只有 56 笔献金给 “NEXTGEN CLIMATE ACTION COMMITTEE”。几次点击后，我们发现这个 Super PAC 基本都是从 1 个人以及其他极少数人那获取的资金，我们猜测这群人可能是朋友，同事或者其他关系。而另一个大型 PAC, “ACTBLUE”，就完全不一样了。给这个 PAC 的捐献非常多(跟上个比是 154448 vs 56)，而且捐献来源广泛分布在各个地域：Elasticsearch 提供的一个更有趣的分析函数是关键词聚合(significant terms aggregation)。你可以在比如欺诈检测、异常检测、推荐等各方面使用关键词。Elasticsearch 官博上有一篇文章介绍这个：http://www.elasticsearch.org/blog/significant-terms-aggregation/.对于竞选献金数据集，使用关键词的一个例子就是识别一个特定的查询的统计特征。比如说，在很多 PAC 里，捐献者的职业是律师、退休、法官。所以，对任一 PAC 做职业排行统计，都发现不了什么有价值的信息。而使用关键词聚合，正如在表格中做的，可以看到对于 ActBlue，职位更普遍的应该是教授、自由职业和作家。我们可以过滤另一个 PAC，民主党全国委员会(Democratic National Committee)，会发现这个 PAC 的职位都很常见了：虽然我们开始的这次探索没有回答出关于这些 PAC 的所有问题，它触发了我希望跟踪的更多问题：谁是 Thomas Steyer ，他跟他的 Super PAC 的另外大概 40 到 50 个捐献者之间是什么关系？NextGen Climate 和 ActBlue 支持哪个候选人？这两个组织之间有什么关联？有没有什么有意无意的帮助特定 PAC 的营销手段，让特定行业的雇员更有兴趣？整个钻取过程的优点是：在帮助回答一些问题的时候，用 ELK stack 还能帮你制定出一些甚至你自己都没想到能问出来的问题!**我家乡的人把钱给谁了？*警告：根据你家乡的大小，你可能会发现一些让你邻居很尴尬的事情:)所有超过 $200 的献金都被要求依法公开，所以，虽然在这里看到你邻居的信息可能比较尴尬，不过竞选县级是公众信息，公众是有这个合法知情权的。你可以很快的钻取数据集到州、市，然后看到你家乡谁捐献了，捐给了谁。新泽西的霍博肯只有 449 条记录，逐一翻阅记录也花不了多少时间。但是，如果你要分析的是纽约市的 70850 条记录，通过 ELK stack 提供的交互式用户体现就体现出明显优势了：回到我的家乡，新泽西的霍博肯，通过几次点击，你就可以构建出为当地参议院和众议院竞选捐献的排行榜。我一直不太明白为什么人们要出钱给 Cory Booker(赢得 56% 选票)和 Albio Sires(赢得 77.3% 选票)参与的非竞争性的比赛。或者只是因为需要支持一下朋友？不过一个关心政治的人，可能就会留意这里面的每一个细节了。总结我们刚看过了用 ELKstack 探索 FEC 竞选献金数据能做到什么。希望这也能帮你扩展使用 ELKstack 的思路，应用这些数据发现的规则到其他类型的数据是，不管是结构化的比如事务数据，非结构化的比如纯文本数据，抑或二者的混合体。个人、非营利组织、政府机构和私人公司，从初创公司到大型企业，都在使用 ELK stack 处理实时数据集，大小从几 MB 到几 PB，随着 Kibana 4 的发布，处理会变得更容易和更强大。附录 a. 如何在笔记本电脑上运行 elk 分析本数据集如果你还没有最新版的 ELK stack 的话，可以从http://www.elasticsearch.org/overview/elkdownloads/ 页面上下载并依照该页说明进行安装。实际上你并不一定需要 Logstash 来完成这件事情，不过你如果想调试一把 Logstash 配置然后自己加载原始数据，安装 Logstash 还是完全值得的。恢复 elasticsearch 索引镜像下载安装完 ELK stack 后，你需要下载献金数据的索引镜像文件(注意：这是一个 1.4GB 大的文件，小心你的手机流量):http://download.elasticsearch.org/demos/usfec/snapshot_demo_usfec.tar.gz在你本地磁盘上创建一个叫 snapshots 的文件夹，然后解压下载的 .tar.gz 文件进去。比如：mkdir -p ~/elk/snapshotscp ~/Downloads/snapshot_demo_usfec.tar.gz ~/elk/snapshotscd ~/elk/snapshotstar xf snapshot_demo_usfec.tar.gz等你把 Elasticsearch 跑起来以后，恢复索引就只需要两步了：1) 为镜像注册一个文件系统仓库(修改下例中 “location” 的值到你实际的 usfec 镜像目录):curl -XPUT ‘http://localhost:9200/_snapshot/usfec’ -d ‘{“type”: “fs”,“settings”: {“location”: “/tmp/snapshots/usfec”,“compress”: true,“max_snapshot_bytes_per_sec”: “1000mb”,“max_restore_bytes_per_sec”: “1000mb”}}’2) 调用恢复接口(Restore API endpoint)开始恢复索引数据到你的 Elasticsearch 实例:curl -XPOST “localhost:9200/_snapshot/usfec/1/_restore”现在，去https://bluebottlecoffee.com/preparation-guides。等一会儿后，你可以调用 cat recovery API 来检查一下恢复操作是否完成：curl -XGET ‘localhost:9200/_cat/recovery?v’或者获取索引的文档数：curl -XGET localhost:9200/usfec/_count -d ‘{“query”: {“match_all”: {}}}’如果全部完成的话，这个数应该是 4250251。指向 kibana 4 到一个 elasticsearch 索引你通过 localhost:5601 第一次访问 Kibana 的时候，它会要求你定义一个 “index pattern”:因为 Elasticsearch 集群可能有多个索引，你需要告诉 Kibana 哪些索引里有你希望读取的数据。在本例中，献金镜像包括了四个索引，当你运行索引恢复操作后，应该在你的 Elasticsearch 实例里创建好了四个新索引：usfec_indiv_contrib: 由个人捐赠给委员会usfec_comm2cand_contrib: 由委员会捐赠给候选人usfec_comm2comm_contrib: 由委员会转给其他委员会usfec_oppexp: 委员会运营支出你可以输入一个索引名字到输入框，然后选择一个时间字段(我们索引里，应该是 @timestamp)，然后点击 Create：这篇博文的示例中，我们只用到了个人献金的数据，其他三个索引里其实还有很多价值。甚至你可以在 Kibana 里同时指向这四个索引，然后找出不同数据集之间的联系！打开 Discover 标签，选择一个合适的时间段(选择 “From” 时间为 2012-12-18)，开始探索吧！附录 b. 参考链接fec.gov 的原始数据和数据字典文件http://www.fec.gov/finance/disclosure/ftpdet.shtml#a2013_2014OpenSecrets.org 资源中心: 分析献金数据的各种资源。感谢这里提供了 FEC 数据更详细的字典。https://www.opensecrets.org/resources/create/存放文件的 Github 仓库: Logstash 配置, 索引模板, 解析数据创建 JSON 的 Python 脚本等https://github.com/elasticsearch/demo/tree/master/usfec","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"kibana","slug":"kibana","permalink":"https://wangxiuwen.github.io/tags/kibana/"}],"author":"wangxiuwen"},{"title":"nginx 配置 rewrite 跳转","slug":"history/tech/5953c4d0c2b92f5665eed9e8","date":"2016-01-07T04:05:17.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e8/","excerpt":"","text":"在访问 test.com 网站时，会自动跳转到 www.test.com ，这是因为该网站做了 URL rewrite 重定向，一般网页重定向跳转分为两种，301 和 302 ；301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于：301redirect: 301 代表永久性转移(Permanently Moved)。302 redirect: 302 代表暂时性转移(Temporarily Moved )。nginx 中配置 301 和 302 跳转的方法如下：server {listen 80;server_name www.test.com test.com;if (host != \"www.test.com\" ) { rewrite ^/(.*) http://www.test.com/$1 permanent; 若改 permanent 为 redirect ； 则发生的是 302 跳转}}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"Nginx应用-Location路由反向代理及重写策略","slug":"history/tech/5953c4d0c2b92f5665eed9e9","date":"2016-01-07T03:25:16.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e9/","excerpt":"","text":"一、Nginx的反向代理的路由策略Nginx是著名的高性能Web服务器，应用在很多Web服务领域，同时开发和部署过程中，为了更好的控制接口API（或是WebService），我们需要严格的或是谨慎的规划URL的使用，这样才能为以后的扩张、迭代打下良好的基础，否则杂乱无章的URL使用，将是以后大规模扩展的噩梦。Location的配置语法规则：location /uri/ {…}语法说明：= 开头表示精确匹配，不支持正则。^~ 开头表示uri以某个常规字符串开头，不支持正则，理解为匹配url路径即可。nginx不对url做编码，因此请求为/static/20%/aaa，可以被规则^~ /static/ /aaa匹配到（注意是空格）。和* 开头表示区分大小写的和不区分大小写的正则匹配。!和!* 开头表示区分大小写不匹配及不区分大小写不匹配的正则匹配。/ 通用匹配，任何请求都会匹配，通常放着配置的最后。匹配优先级：(1). 优先尝试 全匹配( 也就是前缀 =)(2). 尝试 路径匹配 （ 也就是前缀 ^~）(3). 尝试 正则匹配 （ 也就是前缀 ~* 或者 ~）(4). 字符串匹配 （也就是前缀为空）所以，前缀的优先级概括为：= &gt; ^~ &gt; ~, ~* &gt; 空全匹配 &gt; 路径匹配 &gt; 正则匹配 &gt; 字符串匹配示例： 字符串匹配location /static {alias /home/www/static;access_log off;} 路径匹配，此时proxy_pass的结束 / 决定是否带上匹配的路径location ^~ /333/ {proxy_pass http://106.185.48.229/;} 正则匹配，此时proxy_pass不能带结束 /location ~ ^/(xxx|yyy)/ {proxy_pass http://106.185.48.229;} 字符串匹配，此时proxy_pass的结束 / 决定是否带上匹配得路径location /zzz/ {proxy_pass http://106.185.48.229/;} 默认匹配location / {proxy_pass http://127.0.0.1:8080;}二、Nginx的Rewrite规则语法规则：rewrite 正则 替换 标志位rewrite指令的最后一项参数为flag标记，flag标记有：1.last last是终止当前location的rewrite检测,但会继续重试location匹配并处理区块中的rewrite规则。2.break break是终止当前location的rewrite检测,而且不再进行location匹配。3.redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址。4.permanent 返回301永久重定向，浏览器地址会显示跳转后的URL地址。示例： 正则匹配 location ~ ^/(a|bb|ccc)/ { rewrite ^/(+)/(.*)$ http://106.185.48.229/$2?$1; } # 注：用括号括起来的参数为后面的 $1 $2 变量 三、Nginx常用设置1.为了便于日志统计和分析，备注一个日志示例格式，供参考log_format main ‘timeiso8601∣time_iso8601|time​i​​so8601∣remote_addr|remoteuser∣remote_user|remote​u​​ser∣request_method|uri∣′′uri|&#x27; &#x27;uri∣​′′​​status|requesttime∣request_time|request​t​​ime∣request_length|bodybytessent∣body_bytes_sent|body​b​​ytes​s​​ent∣bytes_sent|’‘connection∣connection|connection∣http_x_forwarded_for|upstreamaddr∣upstream_addr|upstream​a​​ddr∣upstream_status|’‘upstreamresponsetime∣upstream_response_time|upstream​r​​esponse​t​​ime∣args|httpreferer∣http_referer|http​r​​eferer∣http_user_agent’;access_log logs/access.log main;2. 反向代理透传客户端IP设置proxy_set_header Host $http_host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;3.常用的Nginx全局变量$args #这个变量等于请求行中的参数。$content_length #请求头中的Content-length字段。$content_type #请求头中的Content-Type字段。$document_root #当前请求在root指令中指定的值。$host #请求主机头字段，否则为服务器名称。$http_user_agent #客户端agent信息$http_cookie #客户端cookie信息$limit_rate #这个变量可以限制连接速率。$request_body_file #客户端请求主体信息的临时文件名。$request_method #客户端请求的动作，通常为GET或POST。$remote_addr #客户端的IP地址。$remote_port #客户端的端口。$remote_user #已经经过Auth Basic Module验证的用户名。$request_filename #当前请求的文件路径，由root或alias指令与URI请求生成。query_string #与args相同。$scheme #HTTP方法（如http，https）。$server_protocol #请求使用的协议，通常是HTTP/1.0或HTTP/1.1。$server_addr #服务器地址，在完成一次系统调用后可以确定这个值。$server_name #服务器名称。$server_port #请求到达服务器的端口号。$request_uri #包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。uri #不带请求参数的当前URI，uri不包含主机名，如”/foo/bar.html”。document_uri #与uri相同。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"mime类型","slug":"history/tech/5953c4d0c2b92f5665eed9ea","date":"2016-01-06T18:27:45.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ea/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ea/","excerpt":"","text":"MIME是服务器通知客户机传送文件是什么类型的主要方法，客户机浏览器也通过MIME告诉服务器它的参数。 在网上，如果接收到的文件没有MIME头，就默认它为HTML格式。但这样也不好，因为当MIME的包头是text/plain时，浏览器将直接显示而不关心它的什么字体，颜色之类的参数需要了解的概念 Content-Type：用于定义用户的浏览器或相关设备如何显示将要加载的数据，或者如何处理将要加载的数据 MIME：MIME类型就是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。text/html的意思是将文件的content-type设置为text/html的形式，浏览器在获取到这种文件时会自动调用html的解析器对文件进行相应的处理。text/plain的意思是将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"save-dev","slug":"history/tech/5953c4d0c2b92f5665eed9e7","date":"2016-01-06T03:05:45.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e7/","excerpt":"","text":"当你为你的模块安装一个依赖模块时，正常情况下你得先安装他们（在模块根目录下npm install module-name），然后连同版本号手动将他们添加到模块配置文件package.json中的依赖里（dependencies）。-save和save-dev可以省掉你手动修改package.json文件的步骤。spm install module-name -save 自动把模块和版本号添加到dependencies部分spm install module-name -save-dev 自动把模块和版本号添加到devdependencies部分","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"linux 文本替换","slug":"history/tech/5953c4d0c2b92f5665eed9e6","date":"2016-01-06T03:02:20.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e6/","excerpt":"","text":"sed -i ‘s/原文/要替换的文本/g’ 文件","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"Lucene使用IKAnalyzer分词实例 及 IKAnalyzer扩展词库","slug":"history/tech/5953c4d0c2b92f5665eed9e4","date":"2016-01-05T02:10:13.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e4/","excerpt":"","text":"Lucene使用IKAnalyzer分词实例 及 IKAnalyzer扩展词库方案一: 基于配置的词典扩充项目结构图如下:Lucene使用IKAnalyzer分词实例 及 IKAnalyzer扩展词库 - 只有代码才能永恒 - 風ヘ舞者IK分词器还支持通过配置IKAnalyzer.cfg.xml文件来扩充您的专有词典。谷歌拼音词库下载: http://ishare.iask.sina.com.cn/f/14446921.html?from=like在web项目的src目录下创建IKAnalyzer.cfg.xml文件,内容如下 &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt; &lt;!-- 用户可以在这里配置自己的扩展字典 --&gt; &lt;entry key=&quot;ext_dict&quot;&gt;/dicdata/use.dic.dic;/dicdata/googlepy.dic&lt;/entry&gt; &lt;!-- 用户可以在这里配置自己的扩展停止词字典 --&gt; &lt;entry key=&quot;ext_stopwords&quot;&gt;/dicdata/ext_stopword.dic&lt;/entry&gt; 词典文件的编辑与部署 分词器的词典文件格式是无BOM 的UTF-8 编码的中文文本文件，文件扩展名不限。词典中，每个中文词汇独立占一行，使用\\r\\n 的DOS 方式换行。（注，如果您不了解什么是无BOM 的UTF-8 格式， 请保证您的词典使用UTF-8 存储，并在文件的头部添加一空行）。您可以参考分词器源码org.wltea.analyzer.dic 包下的.dic 文件。词典文件应部署在Java 的资源路径下，即ClassLoader 能够加载的路径中。（推荐同IKAnalyzer.cfg.xml 放在一起）.方案二:基于API的词典扩充在IKAnalyzer的与词条相关的操作1.org.wltea.analyzer.cfg2.org.wltea.analyzer.dicorg.wltea.analyzer.cfg下Configuration接口中的定义getExtDictionarys() 获取扩展字典配置路径getExtStopWordDictionarys() 获取扩展停止词典配置路径getMainDictionary() 获取主词典路径getQuantifierDicionary() 获取量词词典路径org.wltea.analyzer.cfg.DefualtConfig类是对Configuration接口的实现org.wltea.analyzer.dic下的Directory类中相关的方法public void addWords(java.util.Collection&lt;java.lang.String&gt; words) 批量加载新词条 参数：words - Collection词条列表public void disableWords(java.util.Collection&lt;java.lang.String&gt; words) 批量移除（屏蔽）词条Lucene中使用IKAnalyzer分词器实例演示业务实体package com.icrate.service.study.demo;/****@version ： 1.0@author ： 苏若年 发送邮件@since ： 1.0 创建时间: 2013-4-7 下午01:52:49@function： TODO*/public class Medicine {private Integer id; private String name; private String function; public Medicine() { } public Medicine(Integer id, String name, String function) { super(); this.id = id; this.name = name; this.function = function; } //getter and setter() public String toString(){ return this.id + &quot;,&quot; +this.name + &quot;,&quot; + this.function; } }构建模拟数据package com.icrate.service.study.demo;import java.util.ArrayList;import java.util.List;/****@version ： 1.0@author ： 苏若年 发送邮件@since ： 1.0 创建时间: 2013-4-7 下午01:54:34@function： TODO*/public class DataFactory {private static DataFactory dataFactory = new DataFactory(); private DataFactory(){ } public List&lt;Medicine&gt; getData(){ List&lt;Medicine&gt; list = new ArrayList&lt;Medicine&gt;(); list.add(new Medicine(1,&quot;银花 感冒颗粒&quot;,&quot;功能主治：银花感冒颗粒 ，头痛,清热，解表，利咽。&quot;)); list.add(new Medicine(2,&quot;感冒 止咳糖浆&quot;,&quot;功能主治：感冒止咳糖浆,解表清热，止咳化痰。&quot;)); list.add(new Medicine(3,&quot;感冒灵颗粒&quot;,&quot;功能主治：解热镇痛。头痛 ,清热。&quot;)); list.add(new Medicine(4,&quot;感冒灵胶囊&quot;,&quot;功能主治：银花感冒颗粒 ，头痛,清热，解表，利咽。&quot;)); list.add(new Medicine(5,&quot;仁和 感冒颗粒&quot;,&quot;功能主治：疏风清热，宣肺止咳,解表清热，止咳化痰。&quot;)); return list; } public static DataFactory getInstance(){ return dataFactory; } }使用Lucene对模拟数据进行检索package com.icrate.service.study.demo;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import org.apache.lucene.analysis.Analyzer;import org.apache.lucene.document.Document;import org.apache.lucene.document.Field;import org.apache.lucene.index.IndexReader;import org.apache.lucene.index.IndexWriter;import org.apache.lucene.index.IndexWriterConfig;import org.apache.lucene.index.Term;import org.apache.lucene.queryParser.MultiFieldQueryParser;import org.apache.lucene.search.IndexSearcher;import org.apache.lucene.search.Query;import org.apache.lucene.search.ScoreDoc;import org.apache.lucene.search.TopDocs;import org.apache.lucene.search.highlight.Formatter;import org.apache.lucene.search.highlight.Fragmenter;import org.apache.lucene.search.highlight.Highlighter;import org.apache.lucene.search.highlight.QueryScorer;import org.apache.lucene.search.highlight.Scorer;import org.apache.lucene.search.highlight.SimpleFragmenter;import org.apache.lucene.search.highlight.SimpleHTMLFormatter;import org.apache.lucene.store.Directory;import org.apache.lucene.store.FSDirectory;import org.apache.lucene.util.Version;import org.wltea.analyzer.lucene.IKAnalyzer;/***LuenceProcess.java@version ： 1.1@author ： 苏若年 发送邮件@since ： 1.0 创建时间: Apr 3, 2013 11:48:11 AMTODO : Luence中使用IK分词器*/public class LuceneIKUtil {private Directory directory ; private Analyzer analyzer ; /** * 带参数构造,参数用来指定索引文件目录 * @param indexFilePath */ public LuceneIKUtil(String indexFilePath){ try { directory = FSDirectory.open(new File(indexFilePath)); analyzer = new IKAnalyzer(); } catch (IOException e) { e.printStackTrace(); } } /** * 默认构造,使用系统默认的路径作为索引 */ public LuceneIKUtil(){ this(&quot;/luence/index&quot;); } /** * 创建索引 * Description： * @author dennisit@163.com Apr 3, 2013 * @throws Exception */ public void createIndex()throws Exception{ IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_35,analyzer); IndexWriter indexWriter = new IndexWriter(directory,indexWriterConfig); indexWriter.deleteAll(); List&lt;Medicine&gt; list = DataFactory.getInstance().getData(); for(int i=0; i&lt;list.size(); i++){ Medicine medicine = list.get(i); Document document = addDocument(medicine.getId(), medicine.getName(), medicine.getFunction()); indexWriter.addDocument(document); } indexWriter.close(); } /** * * Description： * @author dennisit@163.com Apr 3, 2013 * @param id * @param title * @param content * @return */ public Document addDocument(Integer id, String name, String function){ Document doc = new Document(); //Field.Index.NO 表示不索引 //Field.Index.ANALYZED 表示分词且索引 //Field.Index.NOT_ANALYZED 表示不分词且索引 doc.add(new Field(&quot;id&quot;,String.valueOf(id),Field.Store.YES,Field.Index.NOT_ANALYZED)); doc.add(new Field(&quot;name&quot;,name,Field.Store.YES,Field.Index.ANALYZED)); doc.add(new Field(&quot;function&quot;,function,Field.Store.YES,Field.Index.ANALYZED)); return doc; } /** * * Description： 更新索引 * @author dennisit@163.com Apr 3, 2013 * @param id * @param title * @param content */ public void update(Integer id,String title, String content){ try { IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_35,analyzer); IndexWriter indexWriter = new IndexWriter(directory,indexWriterConfig); Document document = addDocument(id, title, content); Term term = new Term(&quot;id&quot;,String.valueOf(id)); indexWriter.updateDocument(term, document); indexWriter.close(); } catch (Exception e) { e.printStackTrace(); } } /** * * Description：按照ID进行索引 * @author dennisit@163.com Apr 3, 2013 * @param id */ public void delete(Integer id){ try { IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_35,analyzer); IndexWriter indexWriter = new IndexWriter(directory,indexWriterConfig); Term term = new Term(&quot;id&quot;,String.valueOf(id)); indexWriter.deleteDocuments(term); indexWriter.close(); } catch (Exception e) { e.printStackTrace(); } } /** * * Description：查询 * @author dennisit@163.com Apr 3, 2013 * @param where 查询条件 * @param scoreDoc 分页时用 */ public List&lt;Medicine&gt; search(String[] fields,String keyword){ IndexSearcher indexSearcher = null; List&lt;Medicine&gt; result = new ArrayList&lt;Medicine&gt;(); try { //创建索引搜索器,且只读 IndexReader indexReader = IndexReader.open(directory,true); indexSearcher = new IndexSearcher(indexReader); MultiFieldQueryParser queryParser =new MultiFieldQueryParser(Version.LUCENE_35, fields,analyzer); Query query = queryParser.parse(keyword); //返回前number条记录 TopDocs topDocs = indexSearcher.search(query, 10); //信息展示 int totalCount = topDocs.totalHits; System.out.println(&quot;共检索出 &quot;+totalCount+&quot; 条记录&quot;); //高亮显示 /* 创建高亮器,使搜索的结果高亮显示 SimpleHTMLFormatter：用来控制你要加亮的关键字的高亮方式 此类有2个构造方法 1：SimpleHTMLFormatter()默认的构造方法.加亮方式：&lt;B&gt;关键字&lt;/B&gt; 2：SimpleHTMLFormatter(String preTag, String postTag).加亮方式：preTag关键字postTag */ Formatter formatter = new SimpleHTMLFormatter(&quot;&lt;font color='red'&gt;&quot;,&quot;&lt;/font&gt;&quot;); /* QueryScorer QueryScorer 是内置的计分器。计分器的工作首先是将片段排序。QueryScorer使用的项是从用户输入的查询中得到的； 它会从原始输入的单词、词组和布尔查询中提取项，并且基于相应的加权因子（boost factor）给它们加权。 为了便于QueryScoere使用，还必须对查询的原始形式进行重写。 比如，带通配符查询、模糊查询、前缀查询以及范围查询 等，都被重写为BoolenaQuery中所使用的项。 在将Query实例传递到QueryScorer之前，可以调用Query.rewrite (IndexReader)方法来重写Query对象 */ Scorer fragmentScorer = new QueryScorer(query); Highlighter highlighter = new Highlighter(formatter,fragmentScorer); Fragmenter fragmenter = new SimpleFragmenter(100); /* Highlighter利用Fragmenter将原始文本分割成多个片段。 内置的SimpleFragmenter将原始文本分割成相同大小的片段，片段默认的大小为100个字符。这个大小是可控制的。 */ highlighter.setTextFragmenter(fragmenter); ScoreDoc[] scoreDocs = topDocs.scoreDocs; for(ScoreDoc scDoc : scoreDocs){ Document document = indexSearcher.doc(scDoc.doc); Integer id = Integer.parseInt(document.get(&quot;id&quot;)); String name = document.get(&quot;name&quot;); String function = document.get(&quot;function&quot;); //float score = scDoc.score; //相似度 String lighterName = highlighter.getBestFragment(analyzer, &quot;name&quot;, name); if(null==lighterName){ lighterName = name; } String lighterFunciton = highlighter.getBestFragment(analyzer, &quot;function&quot;, function); if(null==lighterFunciton){ lighterFunciton = function; } Medicine medicine = new Medicine(); medicine.setId(id); medicine.setName(lighterName); medicine.setFunction(lighterFunciton); result.add(medicine); } } catch (Exception e) { e.printStackTrace(); }finally{ try { indexSearcher.close(); } catch (IOException e) { e.printStackTrace(); } } return result; } public static void main(String[] args) { LuceneIKUtil luceneProcess = new LuenceIKUtil(&quot;F:/index&quot;); try { luceneProcess.createIndex(); } catch (Exception e) { e.printStackTrace(); } //修改测试 luceneProcess.update(2, &quot;测试内容&quot;, &quot;修改测试。。。&quot;); //查询测试 String [] fields = {&quot;name&quot;,&quot;function&quot;}; List&lt;Medicine&gt; list = luenceProcess.search(fields,&quot;感冒&quot;); for(int i=0; i&lt;list.size(); i++){ Medicine medicine = list.get(i); System.out.println(&quot;(&quot;+medicine.getId()+&quot;)&quot;+medicine.getName() + &quot;\\t&quot; + medicine.getFunction()); } //删除测试 //luenceProcess.delete(1); } }程序运行结果加载扩展词典：/dicdata/use.dic.dic加载扩展词典：/dicdata/googlepy.dic加载扩展停止词典：/dicdata/ext_stopword.dic共检索出 4 条记录(1)银花 感冒颗粒 功能主治：银花感冒颗粒 ，头痛,清热，解表，利咽。(4)感冒灵胶囊 功能主治：银花感冒颗粒 ，头痛,清热，解表，利咽。(3)感冒灵颗粒 功能主治：解热镇痛。头痛 ,清热。(5)仁和 感冒颗粒 功能主治：疏风清热，宣肺止咳,解表清热，止咳化痰。如何判断索引是否存在/*** 判断是否已经存在索引文件* @param indexPath* @return*/private boolean isExistIndexFile(String indexPath) throws Exception{File file = new File(indexPath);if (!file.exists()) {file.mkdirs();}String indexSufix=&quot;/segments.gen&quot;;//根据索引文件segments.gen是否存在判断是否是第一次创建索引File indexFile=new File(indexPath+indexSufix);return indexFile.exists();}附录: IK分词处理过程IK的整个分词处理过程首先，介绍一下IK的整个分词处理过程：Lucene的分词基类是Analyzer，所以IK提供了Analyzer的一个实现类IKAnalyzer。首先，我们要实例化一个IKAnalyzer，它有一个构造方法接收一个参数isMaxWordLength，这个参数是标识IK是否采用最大词长分词，还是采用最细粒度切分两种分词算法。实际两种算法的实现，最大词长切分是对最细粒度切分的一种后续处理，是对最细粒度切分结果的过滤，选择出最长的分词结果。IKAnalyzer类重写了Analyzer的tokenStream方法，这个方法接收两个参数，field name和输入流reader，其中filed name是Lucene的属性列，是对文本内容进行过分词处理和创建索引之后，索引对应的一个名称，类似数据库的列名。因为IK仅仅涉及分词处理，所以对field name没有进行任何处理，所以此处不做任何讨论。tokenStream方法在Lucene对文本输入流reader进行分词处理时被调用，在IKAnalyzer的tokenStream方法里面仅仅实例化了一个IKTokenizer类，该类继承了Lucene的Tokenizer类。并重写了incrementToken方法，该方法的作用是处理文本输入流生成token，也就是Lucene的最小词元term，在IK里面叫做Lexeme。在IKtokenizer的构造方法里面实例化了IK里面最终要的分词类IKSegmentation，也称为主分词器。它的构造方法接收两个参数，reader和isMaxWordLength。IKsegmentation的构造方法里面，主要做了三个工作，创建上下文对象Context，加载词典，创建子分词器。Contex主要是存储分词结果集和记录分词处理的游标位置。词典是作为一个单例被创建的，主要有量词词典、主词典和停词词典。词典是被存储在字典片段类DictSegment 这个字典核心类里面的。DictSegment有一个静态的存储结构charMap，是公共词典表，用来存储所有汉字，key和value都是一个中文汉字，目前IK里面的charMap大概有7100多的键值对。另外，DictSegment还有两个最重要的数据结构，是用来存储字典树的，一个是DictSegment的数组childrenArray，另一个是key为单个汉字（每个词条的第一个汉字），value是DictSegment的HashMap childrenMap。这两个数据结构二者取其一，用来存储字典树。子分词器才是真正的分词类，IK里面有三个子分词器，量词分词器，CJK分词器（处理中文），停词分词器。主分词器IKSegmentation遍历这三个分词器对文本输入流进行分词处理。IKTokenizer的incrementToken方法调用了IKSegmentation的next方法，next的作用是获得下一个分词结果。next在第一次被调用的时候，需要加载文本输入流，并将其读入buffer，此时便遍历子分词器，对buffer种的文本内容进行分词处理，然后把分词结果添加到context的lexemeSet中。转转请注明出处:","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"linux  文件监控","slug":"history/tech/5953c4d0c2b92f5665eed9e5","date":"2016-01-04T23:18:15.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e5/","excerpt":"","text":"yum install inotify-toolsinotifywait -rme modify,attrib,move,close_write,create,delete,delete_self /home","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"pm2 开机自启动","slug":"history/tech/5953c4d0c2b92f5665eed9e1","date":"2016-01-04T04:34:57.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e1/","excerpt":"","text":"先pm2 start运行你要开机启动的程序， 再pm2 save, 这时可以查看more ~/.pm2/dump.pm2这个文件是否已经有保存到数据, 最后才是pm2 startup","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"添加root权限脚本","slug":"history/tech/5953c4d0c2b92f5665eed9e3","date":"2016-01-04T03:03:19.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e3/","excerpt":"","text":"12345678910111213#!/bin/bashchmod 700 /etc/sudoersdeclare NAMEvisudo=/usr/sbin/visudoread -p &quot;Please input you want add user in sudo:&quot; OPT NAME=(`echo $OPT | awk &apos;BEGIN &#123;ORS=&quot; &quot;&#125; &#123;for (i=1;i&lt;=NF;i++) &#123;print $i&#125;&#125;&apos;`)#echo $&#123;NAME&#125;COUNT=$(($&#123;#NAME&#125;-1))for i in `seq 0 $COUNT`; do#cat /etc/sudoerssed -i /^root[]*ALL*/a\\ &quot;$&#123;NAME&#125; ALL=(ALL) ALL&quot; /etc/sudoersdonechmod 440 /etc/sudoers","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"js过滤HTML标签以及&amp;nbsp;","slug":"history/tech/5953c4d0c2b92f5665eed9e2","date":"2016-01-04T02:22:38.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e2/","excerpt":"","text":"http://www.cnblogs.com/liszt/archive/2011/08/16/2140007.html今天要做一个应用–判断编辑器中文字的个数。如果少如20个字就不能让其提交。没多想，正好周末的时候看了一下js中正则表达式的内容。很容易就想到了要用正则表达式来解决这个问题。虽说看了正则表达式的内容是看了，但是毕竟还是刚接接触，连基本的概念都很模糊，于是只好在网上找到如下的代码：function setContent(str) {str = str.replace(/&lt;/?&gt;/g,’’); //去除HTML tagstr.value = str.replace(/\\n/g,’\\n’); //去除行尾空白//str = str.replace(/\\n*\\r/g,’\\n’); //去除多余空行return str;}测试的时候发现这段代码不能过滤掉网页中空格字符(即： )。于是自己又改造了一下：function removeHTMLTag(str) {str = str.replace(/&lt;/?&gt;/g,’’); //去除HTML tagstr = str.replace(/\\n/g,’\\n’); //去除行尾空白//str = str.replace(/\\n*\\r/g,’\\n’); //去除多余空行str=str.replace(/ /ig,’’);//去掉return str;}恩，我的要求达到了。现在来稍稍解释一下所用到的三个正则表达吧(需要说明的是，因为自己也是刚刚接触，也许我的解释并不是正确的，仅供参考)：第一个:/&lt;/?*&gt;/g在js中正则表达式是以“/”开头的，后面的/g，含义是表示全局模式，意思是在将匹配的模式应用于整个字符串，而不是在第一次匹配上之后就停止匹配了。&lt;/?*&gt; 这个分开来解释，其中第二个字符“\\”是一个转移字符，用来转移后面的”/”字符的。?匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。所以&lt;/?就是匹配html标签中的”&lt;/”格式或者“&lt;”格式的。再来说*&gt;。[]是含义是：QQ截图20110815230803的含义是：匹配一行的开始。例如正则表达式When in能够匹配字符串&quot;When in the course of human events&quot;的开始，但是不能匹配&quot;What and When in the&quot;。意思就是匹配以“When in”开头的文字。*的含义是：匹配0或多个正好在它之前的那个字符。例如正则表达式。*意味着能够匹配任意数量的任何字符因此*意思是匹配&gt;之外的字符。所以可以匹配出的模式可以像下面这样的：div我需要的文字&lt;/divp我需要的文字&lt;/p*和前面的结合在一起就可以匹配下面这些字符了：div&gt;我需要的文字&lt;/divp&gt;我需要的文字&lt;/pbr /再加上后面的&gt;就可以匹配下面的字符了：div&gt;我需要的文字p&gt;我需要的文字br /&gt;这样就完成了一对HTML标签的匹配了。(多句话，总觉得这个匹配有点啰嗦，但是不知道到底在哪个地方啰嗦)第二个：/*\\n/g：我也没有看懂第三个：/ /ig：就是直接查找 字符，后面的/ig的含义是在全局模式下进行不区分大小写的查找。g代表全局，i表示不区分大小写。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"js函数前面的加号，叹号","slug":"history/tech/5953c4d0c2b92f5665eed9e0","date":"2016-01-02T23:24:56.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9e0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9e0/","excerpt":"","text":"+function(){}();这里的加号，也可以替换成!,~等其他一元操作符，其效果相当于：view plaincopy在CODE上查看代码片派生到我的代码片(function() { console.log(“Foo!”); })();// or(function() { console.log(“Foo!”); }());如果没有这个加号的话，解析器会认为function是一个函数声明的开始，而后面（）将会导致语法错误。在function前面加上+号时，就变成了一个函数表达式，而函数表达式后面又添加了一个()就变成了一个立即执行的函数了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"Git检出","slug":"history/tech/5953c4d0c2b92f5665eed9df","date":"2016-01-02T03:41:15.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9df/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9df/","excerpt":"","text":"检出命令此命令会重写工作区该命令的实质就是修改HEAD本身的指向，不会影响分支游标。当执行此命令时，HEAD头指针被更改了，由指向一个引用（分支）变成了指向一个提交ID，分支（master）的指向没有改变，仍旧指向原有的提交ID“分离头指针”状态：指的是HEAD头指针指向了一个具体的提交ID用法一：git checkout… 为避免路径和引用（或提交ID）同名而发生冲突，可以在前用–作为分隔此用法不会改变HEAD头指针，主要用于指定版本的文件覆盖工作区中对应的文件。若省略，则会用暂存区的文件覆盖工作区的文件，否则用指定提交中的文件覆盖暂存区和工作区中对应的文件。用法二：git checkout此用法会改变HEAD头指针，之所以后面的参数写作，是因为只有HEAD切换到一个分支才可以对提交进行跟踪，否则仍然会进入“分离头指针”的状态，此状态下提交不能被引用关联到，从而可能丢失。所以此用法最主要的作用就是切换到分支，若省略则相当于对工作区进行状态检查。用法三：git checkout [ &lt;new_branch&gt;]此用法主要是创建和切换到新的分支，新的分支从&lt;start_point&gt;指定的提交开始创建。新分支与master分支没什么实质的不同，都是在refs/heads命名空间下的引用。$ git checkout branch检出branch分支，更新HEAD以指向branch分支，以及用branch指向的树更新暂存区和工作区。$ git checkout 、 $ git checkout HEAD汇总显示工作区、暂存区与HEAD的差异$ git checkout – filename用暂存区中filename文件覆盖工作区中的filename文件，相当于取消自上次执行git add filename以来（如果执行过）的本地修改（会悄无声息覆盖）$ git checkout branch – filename维持HEAD的指向不变，用branch所指向的提交中的filename替换暂存区和工作区中相应的文件，会将暂存区和工作区中的filename文件直接覆盖$ git checkout – 或 $ git checkout .取消所有本地的修改（相对于暂存区），相当于用暂存区的所有文件直接覆盖本地文件，不给用户任何确认机会。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"git 检出单个文件的方法","slug":"history/tech/5953c4d0c2b92f5665eed9de","date":"2016-01-02T03:40:43.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9de/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9de/","excerpt":"","text":"摘自stackoverflowhttp://stackoverflow.com/questions/600079/is-there-any-way-to-clone-a-git-repositorys-sub-directory-only/13738951#13738951What you are trying to do is called a sparse checkout, and that feature was added in git 1.7.0 (Feb. 2012). The steps to do a sparse clone are as follows:mkdircdgit initgit remote add -f originThis creates an empty repository with your remote, and fetches all objects but doesn’t check them out. Then do:git config core.sparseCheckout trueNow you need to define which files/folders you want to actually check out. This is done by listing them in .git/info/sparse-checkout, eg:echo “some/dir/” &gt;&gt; .git/info/sparse-checkoutecho “another/sub/tree” &gt;&gt; .git/info/sparse-checkoutLast but not least, update your empty repo with the state from the remote:git pull origin masterYou might want to have a look at the extended tutorial and you should probably read the officialdocumentation for sparse checkout.","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"mongodb   配置文件","slug":"history/tech/5953c4d0c2b92f5665eed9dc","date":"2016-01-02T01:59:21.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9dc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9dc/","excerpt":"","text":"systemLog:destination : filepath : /var/log/mongodb/mongod.loglogAppend : truestorage:journal:enabled: trueengine: wiredTigerdbPath: /data/mongodb/data/db/directoryPerDB: truewiredTiger:engineConfig:directoryForIndexes: truecollectionConfig:blockCompressor: zlibindexConfig:prefixCompression: trueprocessManagement:fork: truenet:bindIp: 192.168.1.111port: 11111security:authorization: enabled","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"mongodb 简单部署方案及实例","slug":"history/tech/5953c4d0c2b92f5665eed9dd","date":"2016-01-02T00:01:04.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9dd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9dd/","excerpt":"","text":"第一节 准备工作一 安装mongodb我这里选用rehl 5.6作为其运行载体。下载mongodb的linux版本(注意32位和64位的区别)，下载地址：http://www.mongodb.org/downloads wget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.0.4.tgz将下载的mongodb安装文件 mongodb-linux-x86_64-2.0.4.tgz 放到/usr/local/下解压 tar -zxvf mongodb-linux-x86_64-2.0.4.tgz重命名 mv mongodb-linux-x86_64-2.0.4 /usr/local/mongodb创建数据库文件目录， # mkdir -p /data/mongodb,我把数据库文件目录放在当前文件夹下，# mkdir -p data/db,创建日志目录 #mkdir -p log二 启动首先用命令进入到bin目录下：cd /usr/local/mongodb/bin方式一：直接运行命令启动./mongod –port 10000 –fork –logpath= logpath=/data/mongodb/log/mongodb.log – logappend – dbpath=/data/mongodb/data/db方式二：通过配置文件方式启动（推荐）。1.在服务器上新建mongodb.conf配置文件(建议用命令生成，放在mongodb同一个目录下)内容为：port=10000 #端口号fork=true #以守护进程的方式运行，创建服务器进程#master=true #单主从配置时设为主服务器#salve=true ##单主从配置时设为从服务器logpath=/data/mongodb/log/mongodb.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/data/db #数据库路径replSet=blort #设置富本集的名字shardsvr=true #设置是否分片2.运行./mongod –config ~/.mongodb.conf 命令(–config可以直接写成-f)。输出:all output going to: /data/mongodb/log/mongodb.logforked process: 5315mongodb 启动参数–quiet # 安静输出–port arg # 指定服务端口号，默认端口27017–bind_ip arg # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP–logpath arg # 指定MongoDB日志文件，注意是指定文件不是目录–logappend # 使用追加的方式写日志–pidfilepath arg # PID File 的完整路径，如果没有设置，则没有PID文件–keyFile arg # 集群的私钥的完整路径，只对于Replica Set 架构有效–unixSocketPrefix arg # UNIX域套接字替代目录,(默认为 /tmp)–fork # 以守护进程的方式运行MongoDB，创建服务器进程–auth # 启用验证–cpu # 定期显示CPU的CPU利用率和iowait–dbpath arg # 指定数据库路径–diaglog arg # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads–directoryperdb # 设置每个数据库将被保存在一个单独的目录–journal # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里–journalOptions arg # 启用日志诊断选项–ipv6 # 启用IPv6选项–jsonp # 允许JSONP形式通过HTTP访问（有安全影响）–maxConns arg # 最大同时连接数 默认2000–noauth # 不启用验证–nohttpinterface # 关闭http接口，默认关闭27018端口访问–noprealloc # 禁用数据文件预分配(往往影响性能)–noscripting # 禁用脚本引擎–notablescan # 不允许表扫描–nounixsocket # 禁用Unix套接字监听–nssize arg (=16) # 设置信数据库.ns文件大小(MB)–objcheck # 在收到客户数据,检查的有效性，–profile arg # 档案参数 0=off 1=slow, 2=all–quota # 限制每个数据库的文件数，设置默认为8–quotaFiles arg # number of files allower per db, requires --quota–rest # 开启简单的rest API–repair # 修复所有数据库run repair on all dbs–repairpath arg # 修复库生成的文件的目录,默认为目录名称dbpath–slowms arg (=100) # value of slow for profile and console log–smallfiles # 使用较小的默认文件–syncdelay arg (=60) # 数据写入磁盘的时间秒数(0=never,不推荐)–sysinfo # 打印一些诊断系统信息–upgrade # 如果需要升级数据库* Replicaton 参数 --fastsync # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步 --autoresync # 如果从库与主库同步数据差得多，自动重新同步， --oplogSize arg # 设置oplog的大小(MB) * 主/从参数 --master # 主库模式 --slave # 从库模式 --source arg # 从库 端口号 --only arg # 指定单一的数据库复制 --slavedelay arg # 设置从库同步主库的延迟时间 * Replica set(副本集)选项： --replSet arg # 设置副本集名称 * Sharding(分片)选项 --configsvr # 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb --shardsvr # 声明这是一个集群的分片,默认端口27018 --noMoveParanoia # 关闭偏执为moveChunk数据保存? 三 查询进程和关闭数据库运行 ps -ef|grep mongo 命令查询服务器进程运行 kill -2 5315命令kill掉5315的进程四 进入数据库并简单操作数据库1.运行./mongo –port 1000进入刚刚启动的端口号为10000的数据库2.使用use test可以切换集合（相当于数据库表）,这里切换到了test集合3.使用db.test.insert(“a”,“b”);向集合插入数据4.使用db.test.find();查询集合里的数据5.更多shell命令请查阅相关文档五 注意事项防火墙设置（测试时可直接关闭linux关闭防火墙：立即但不永久生效：service iptables stop重启永久生效：chkconfig iptables off）第二节 副本集简单的说，副本集就是有自动故障恢复功能的主从集群，副本集没有固定的&quot;主节点&quot;，集群会通过投票选举一个&quot;主节点&quot;。当主节点岩机时，会变更到其他节点。副本集布在不同机器上时，至少要启动三个（单数）数据库服务器进程，否则启动时投票不成功会一直初始化不了。一 以配置文件方式启动三台机器上的数据库服务器三台服务器的配置文件：port=10000 #端口号fork=true #以守护进程的方式运行，创建服务器进程logpath=/data/mongodb/log/mongodb.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/data/db #数据库路径replSet=blort #设置富本集的名字为blort,replSet是让服务器知道在这个&quot;blort&quot;副本集中还有别的机器 replSet=blort /10.10.112.181:10000, 10.10.112.191:10000#设置富本集的名字,这种方式也可以，意思就是&quot;blort&quot;副本集其他机器，位置在10.10.112.181:10000和10.10.112.191:10000，但不推荐通命令启动三台数据库服务器/usr/local/mongodb/bin/mongod -f /data/mongodb/blort/config.conf/usr/local/mongodb/bin/mongod -f /data/mongodb/blort2/config.conf/usr/local/mongodb/bin/mongod -f /data/mongodb/blort3/config.conf二 初始化副本集（只能初始化一次）/usr/local/mongodb/bin/mongo --port 30001use admin方法一：db.runCommand({“replSetInitiate”:{&quot;_id&quot;:“blort”,“members”:}})方法二：config={_id:‘blort’,members:};rs.initiate(config);三 增加和设置副本集有几种不同类型的节点可以存在于副本集：Standard ：存在于副本，参与投票，有可能成为活跃节点（即主节点）Passive :存储了完整的数据副本，参与投票，不能成为活跃节点Arbiter:仲裁者，只参与投票，不能成为活跃节点Priority：优先级，（投票会投优先级高的，如果相同，则投数据最新的）以上类型可以通过以下命令对副本集合进行修改或者增加服务器db.runCommand({“replSetReconfig”:{&quot;_id&quot;:“test3”,“version”:2,“members”:}})增加副本服务器在增加一个从服务器节点a．以相同副本集名字启动一台服务器b.通过rs.add命令往system.replset添加新的从服务器成员rs.add(“10.10.113.122:30005”); 或者rs.add({&quot;_id&quot;:4,“host”:“10.10.113.122:30005”})添加仲裁rs.addArb(“10.10.113.122:30004”);四 读扩展待研究五 用户校验未成功use test;db.addUser(“test”,“123456”);db.auth(“test”,“123456”);db.system.users.find();db.system.users.remove(“test”,“123456”);第二节 replica sets + shard (双机方案，单机模拟)一 准备mkdir -p /data/mongodb/shard1-1/db/mkdir -p /data/mongodb/shard1-1/log//data/mongodb/shard1-1/config.confport=30001 #端口号fork=true #以守护进程的方式运行，创建服务器进程#nohttpinterface=true # 关闭http接口，默认关闭27018端口访问 port + 1000rest = true #http接口 启动rest 使能访问 。与nohttpinterface 对应 只开一个shardsvr=true #启动分片#oplogSize=100 #复制日志大小 MBlogpath=/data/mongodb/shard1-1/log/shard1-1.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/shard1-1/db #数据库路径directoryperdb=true # 设置每个数据库将被保存在一个单独的目录replSet=shard1 #设置富本集的名字为shard1,replSet是让服务器知道在这个&quot;shard1&quot;副本集中还有别的机器#auth=true # 启用验证mkdir -p /data/mongodb/shard1-1a/db/mkdir -p /data/mongodb/shard1-1a/log//data/mongodb/shard1-1a/config.confport=30002 #端口号fork=true #以守护进程的方式运行，创建服务器进程#nohttpinterface=true # 关闭http接口，默认关闭27018端口访问 port + 1000rest = true #http接口 启动rest 使能访问 。与nohttpinterface 对应 只开一个shardsvr=true #启动分片#oplogSize=100 #复制日志大小 MBlogpath=/data/mongodb/shard1-1a/log/shard1-1a.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/shard1-1a/db #数据库路径directoryperdb=true # 设置每个数据库将被保存在一个单独的目录replSet=shard1 #设置富本集的名字为shard1,replSet是让服务器知道在这个&quot;shard1&quot;副本集中还有别的机器#auth=true # 启用验证mkdir -p /data/mongodb/shard1-2/db/mkdir -p /data/mongodb/shard1-2/log//data/mongodb/shard1-2/config.confport=30003 #端口号fork=true #以守护进程的方式运行，创建服务器进程#nohttpinterface=true # 关闭http接口，默认关闭27018端口访问 port + 1000rest = true #http接口 启动rest 使能访问 。与nohttpinterface 对应 只开一个shardsvr=true #启动分片#oplogSize=100 #复制日志大小 MBlogpath=/data/mongodb/shard1-2/log/shard1-2.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/shard1-2/db #数据库路径directoryperdb=true # 设置每个数据库将被保存在一个单独的目录replSet=shard1 #设置富本集的名字为shard1,replSet是让服务器知道在这个&quot;shard1&quot;副本集中还有别的机器#auth=true # 启用验证mkdir -p /data/mongodb/shard2-1/db/mkdir -p /data/mongodb/shard2-1/log//data/mongodb/shard2-1/config.confport=32001 #端口号fork=true #以守护进程的方式运行，创建服务器进程#nohttpinterface=true # 关闭http接口，默认关闭27018端口访问 port + 1000rest = true #http接口 启动rest 使能访问 。与nohttpinterface 对应 只开一个shardsvr=true #启动分片#oplogSize=100 #复制日志大小 MBlogpath=/data/mongodb/shard2-1/log/shard2-1.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/shard2-1/db #数据库路径directoryperdb=true # 设置每个数据库将被保存在一个单独的目录replSet=shard2 #设置富本集的名字为shard2,replSet是让服务器知道在这个&quot;shard2&quot;副本集中还有别的机器#auth=true # 启用验证mkdir -p /data/mongodb/shard2-1a/db/mkdir -p /data/mongodb/shard2-1a/log//data/mongodb/shard2-1a/config.confport=32002 #端口号fork=true #以守护进程的方式运行，创建服务器进程#nohttpinterface=true # 关闭http接口，默认关闭27018端口访问 port + 1000rest = true #http接口 启动rest 使能访问 。与nohttpinterface 对应 只开一个shardsvr=true #启动分片#oplogSize=100 #复制日志大小 MBlogpath=/data/mongodb/shard2-1a/log/shard2-1a.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/shard2-1a/db #数据库路径directoryperdb=true # 设置每个数据库将被保存在一个单独的目录replSet=shard2 #设置富本集的名字为shard2,replSet是让服务器知道在这个&quot;shard2&quot;副本集中还有别的机器#auth=true # 启用验证mkdir -p /data/mongodb/shard2-2/db/mkdir -p /data/mongodb/shard2-2/log//data/mongodb/shard2-2/config.confport=32003 #端口号fork=true #以守护进程的方式运行，创建服务器进程#nohttpinterface=true # 关闭http接口，默认关闭27018端口访问 port + 1000rest = true #http接口 启动rest 使能访问 。与nohttpinterface 对应 只开一个shardsvr=true #启动分片#oplogSize=100 #复制日志大小 MBlogpath=/data/mongodb/shard2-2/log/shard2-2.log #日志输出文件路径logappend=true #日志输出方式dbpath=/data/mongodb/shard2-2/db #数据库路径directoryperdb=true # 设置每个数据库将被保存在一个单独的目录replSet=shard2 #设置富本集的名字为shard2,replSet是让服务器知道在这个&quot;shard2&quot;副本集中还有别的机器#auth=true # 启用验证mkdir -p /data/mongodb/config1/db/mkdir -p /data/mongodb/config1/log//data/mongodb/config1/config.confdbpath = /data/mongodb/config1/dbconfigsvr = trueport = 40001logpath =/data/mongodb/config1/log/config1.loglogappend = truefork = true#auth=true # 启用验证mkdir -p /data/mongodb/config2/db/mkdir -p /data/mongodb/config2/log//data/mongodb/config2/config.confdbpath = /data/mongodb/config2/dbconfigsvr = trueport = 40002logpath =/data/mongodb/config2/log/config2.loglogappend = truefork = true#auth=true # 启用验证mkdir -p /data/mongodb/config3/db/mkdir -p /data/mongodb/config3/log//data/mongodb/config3/config.confdbpath = /data/mongodb/config3/dbconfigsvr = trueport = 40003logpath =/data/mongodb/config3/log/config3.loglogappend = truefork = true#auth=true # 启用验证mkdir -p /data/mongodb/mongos1/log//data/mongodb/mongos1/config.confconfigdb =10.10.113.122:40001,10.10.113.122:40002,10.10.113.122:40003port = 50001chunkSize = 1logpath =/data/mongodb/mongos1/log/mongos1.loglogappend = truefork = true#auth=true # 启用验证mkdir -p /data/mongodb/mongos2/log//data/mongodb/mongos2/config.confconfigdb =10.10.113.122:40001,10.10.113.122:40002,10.10.113.122:40003port = 50002chunkSize = 1logpath =/data/mongodb/mongos2/log/mongos2.loglogappend = truefork = true#auth=true # 启用验证二 启动shard1 副本 启动/usr/local/mongodb/bin/mongod -f /data/mongodb/shard1-1/config.conf/usr/local/mongodb/bin/mongod -f /data/mongodb/shard1-1a/config.conf/usr/local/mongodb/bin/mongod -f /data/mongodb/shard1-2/config.conf/usr/local/mongodb/bin/mongo --port 30001use admindb.runCommand({“replSetInitiate”:{&quot;_id&quot;:“shard1”,“members”:}})shard2 副本 启动/usr/local/mongodb/bin/mongod -f /data/mongodb/shard2-1/config.conf/usr/local/mongodb/bin/mongod -f /data/mongodb/shard2-1a/config.conf/usr/local/mongodb/bin/mongod -f /data/mongodb/shard2-2/config.conf/usr/local/mongodb/bin/mongo --port 31001use admindb.runCommand({“replSetInitiate”:{&quot;_id&quot;:“shard2”,“members”:}})config1 启动/usr/local/mongodb/bin/mongod -f /data/mongodb/config1/config.confconfig2 启动/usr/local/mongodb/bin/mongod -f /data/mongodb/config2/config.confconfig3 启动/usr/local/mongodb/bin/mongod -f /data/mongodb/config3/config.confmongos1 启动/usr/local/mongodb/bin/mongos -f /data/mongodb/mongos1/config.confmongos2 启动/usr/local/mongodb/bin/mongos -f /data/mongodb/mongos2/config.conf/usr/local/mongodb/bin/mongo --port 50001use admindb.runCommand({addshard:“shard1/10.10.113.122:30001,10.10.113.122:30003”,name:“shard1”, maxsize:100})db.runCommand({addshard:“shard2/10.10.113.122:32001,10.10.113.122:32003”,name:“shard2”, maxsize:100})db.runCommand({listshards:1})use testdb.test.insert({“aaa”:“bbb”});第三节 replica sets + shard （3机高可用 ， 一主双备份）一 方案每个分片3服务器，前期采用三台，日后服务器的增加考虑灾备，服务增加的基数最少为三台（或才有双机方案）。Server1 10.10.113.122 Server1 10.10.113.132 Server3 10.10.113.133类型 服务器 用途 系统 说明存储/数据 Server1 Shard1/Shard2/Shard3 Linux 64位 Shard1:10001;Shard2:10002,Shard3:10003;Server2 Shard1/Shard2/Shard3 Linux 64位 Shard1:10001;Shard2:10002,Shard3:10003;Server3 Shard1/Shard2/Shard3 Linux 64位 Shard1:10001;Shard2:10002,Shard3:10003;配置 Server1 Config1 Linux 64位 Config1:20000;Server2 Config2 Linux 64位 Config2:20000;Server3 Config3 Linux 64位 Config3:20000;路由 Server1 Mongos1 Linux 64位 Mongos:30000;Server2 Mongos2 Linux 64位 Mongos:30000;Server3 Mongos3 Linux 64位 Mongos:30000;二 准备安装mongodb 参照第一节linux 传文件 scp mongodb-linux-x86_64-2.0.4.tgz root@10.10.113.132:/root ssh 10.10.113.132删除目录 rm -r -f /data/mongodb创建配置、日志、分片、key文件存储目录及验证文件mkdir /data/mongodb/configsvr/ -pmkdir /data/mongodb/log/ -pmkdir /data/mongodb/shard1/ -pmkdir /data/mongodb/shard2/ -pmkdir /data/mongodb/shard3/ -pmkdir /data/mongodb/key/ -pmkdir /data/mongodb/conf/security/ -pmkdir /data/mongodb/conf/nosecurity/ -p创建配置文件1、 创建验证文件security于/data/mongodb/key/目录，关赋予可读权限，命令如下：cd /data/mongodb/key/echo ‘hycloudmongodbkey’ &gt; securitychmod 600 security2、 创建shard1.conf、shard2.conf、shard3.conf、configsvr.conf、mongos.conf于/data/mongodb/conf/security/ 和 /data/mongodb/conf/nosecurity/的目录，内容分别如下：shard1.confdbpath = /data/mongodb/shard1directoryperdb = trueshardsvr = truereplSet = shard1#bind_ip = 10.10.113.122,localhostport = 10001oplogSize = 100logpath =/data/mongodb/log/shard1.loglogappend = trueprofile = 1slowms = 5rest = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除shard2.confdbpath = /data/mongodb/shard2directoryperdb = trueshardsvr = truereplSet = shard2#bind_ip = 10.10.113.122,localhostport = 10002oplogSize = 100logpath = /data/mongodb/log/shard2.loglogappend = trueprofile = 1slowms = 5rest = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除shard3.confdbpath = /data/mongodb/shard3directoryperdb = trueshardsvr = truereplSet = shard3#bind_ip = 10.10.113.122,localhostport = 10003oplogSize = 100logpath = /data/mongodb/log/shard3.loglogappend = trueprofile = 1slowms = 5rest = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除configsvr.confdbpath = /data/mongodb/configsvrdirectoryperdb = trueconfigsvr = trueport = 20000logpath =/data/mongodb/log/configsvr.loglogappend = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除mongos.confconfigdb =10.10.113.122:20000, 10.10.113.132:20000, 10.10.113.133:20000port = 30000chunkSize = 1 #单位 mb 生成环境请使用 200 或删除logpath =/data/mongodb/log/mongos.loglogappend = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除分片配置说明：分片要在无验证环境中配置，否则会出现无权限等异常。采用以下命令启动Server1\\Server2\\Server3上的shard1\\shard2\\shard3： /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/shard1.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/shard2.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/shard3.conf以下命令查看是否正常启动： netstat -lnpt # 或 ps -ef | grep mongo启动后连接到shard1\\shard2\\shard3分别进行配置，在任意一台服务器即可，以下是具体配置过程： /usr/local/mongodb/bin/mongo --port 10001use adminconfig = {_id:“shard1”, members: }; rs.initiate(config)exit /usr/local/mongodb/bin/mongo --port 10002use adminconfig = {_id:“shard2”, members: }; rs.initiate(config)exit /usr/local/mongodb/bin/mongo --port 10003use adminconfig = {_id:“shard3”, members: }; rs.initiate(config)至此，已完成分片配置路由设置路由是能过config来连接分片服务器，在启动路由进程时，先启动配置进程，路由配置过程如下： /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/configsvr.conf /usr/local/mongodb/bin/mongos -f /data/mongodb/conf/nosecurity/mongos.conf启动后，连接路由进行分片添加，只需配置一台路由。注：分片操作需在admin库下进行，另外必需在无验证要求下进行，即采用前面创建于nosecurity文件夹下的配置。 /usr/local/mongodb/bin/mongo --port 30000mongos&gt; use adminmongos&gt; db.runCommand({addshard:“shard1/10.10.113.122:10001,10.10.113.132:10001,10.10.113.133:10001”,name:“shard1”, maxsize:20480} )mongos&gt; db.runCommand({addshard:“shard2/10.10.113.122:10002,10.10.113.132:10002,10.10.113.133:10002”,name:“shard2”, maxsize:20480} )mongos&gt; db.runCommand({addshard:“shard3/10.10.113.122:10003,10.10.113.132:10003,10.10.113.133:10003”,name:“shard3”, maxsize:20480} )命令检查分片添加情况，如出现以下结果则表示配置成功：mongos&gt; db.runCommand( {listshards : 1 } )权限控制MongoDB默认为验证模式。如需对数据库进行权限控制，需先采用无验证模式登录，进入admin库创建管理员用户后，再采用验证模式登录。通过前面创建的管理员帐号进行数据库与用户的创建。MongoDB集群的权限与单台的权限控制的不同之处在于，单台是通过-auth属性，集群是通过keyFile来进行服务器间的验证。以下介绍配置全过程。前面的所有步骤，都是在nosecurity模式下进行。如果没有采用非验证模式的需要将所有进程（分片、配置、mongos）停止，将切换到无验证模式。步骤一：先进行登录，并切换进admin库创建管理员帐号 /usr/local/mongodb/bin/mongo --port 30000mongos&gt;use adminmongos&gt;db.addUser(‘admin’,‘123456’){ &quot;singleShard&quot; :&quot;192.168.2.88:20000,192.168.2.89:20000,192.168.2.90:20000&quot;, &quot;n&quot; : 0, &quot;connectionId&quot; : 211, &quot;err&quot; : null, &quot;ok&quot; : 1 }{ &quot;_id&quot; :ObjectId(&quot;4f6c78ddad912a3ac6833ece&quot;), &quot;user&quot; : &quot;admin&quot;, &quot;readOnly&quot; : false, &quot;pwd&quot; :&quot;95ec4261124ba5951720b199908d892b&quot; }验证用户名与密码mongos&gt; db.auth(‘admin’,‘123456’)1mongos&gt;exit步骤二：退出后，将Server1\\Server2\\Server3服务器上MongoDB的所有进程（分片、配置、mongos）停止，将切换到验证模式。具体命令如下：#killall mongod mongos#netstat -lnpt /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/shard1.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/shard2.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/shard3.conf netstat -lnpt /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/configsvr.conf /usr/local/mongodb/bin/mongos -f /data/mongodb/conf/security/mongos.conf启动后，如对库进行查看，则会报以下异常： /usr/local/mongodb/bin/mongo 10.10.113.122:30000/adminMongoDB shell version: 2.0.4connecting to:10.10.113.122:30000/adminshow dbsFri Mar 23 22:28:28 uncaughtexception: listDatabases failed:{ “ok” : 0, “errmsg” :“unauthorized” }以下是正常登录后显示的信息： /usr/local/mongodb/bin/mongo 10.10.113.122:30000/adminMongoDB shell version: 2.0.4connecting to:10.10.113.122:30000/admindb.auth(‘admin’,‘123456’)1mongos&gt;步骤三：以下是数据库及数据库用户创建的过程：mongos&gt; use helloswitched to db hellomongos&gt;db.addUser(‘sa’,‘sa’){ &quot;singleShard&quot; :&quot;shard2/10.10.113.122:10002,10.10.113.132:10002,10.10.113.133:10002&quot;, &quot;n&quot; : 0, &quot;lastOp&quot; :NumberLong(&quot;5723101431532093441&quot;), &quot;connectionId&quot; : 38, &quot;err&quot; : null, &quot;ok&quot; : 1 }{ &quot;user&quot; : &quot;sa&quot;, &quot;readOnly&quot; : false, &quot;pwd&quot; :&quot;75692b1d11c072c6c79332e248c4f699&quot;, &quot;_id&quot; :ObjectId(&quot;4f6c8a6e9f67b049a20a00de&quot;) }mongos&gt; exitbye /usr/local/mongodb/bin/mongo 10.10.113.122:30000/hello -u sa -pMongoDB shell version: 2.0.4Enter password:connecting to:10.10.113.122:30000/helloshow collectionssystem.indexessystem.usersdb.system.users.find(){ “_id” :ObjectId(“4f6c8a6e9f67b049a20a00de”), “user” :“sa”, “readOnly” : false, “pwd” :“75692b1d11c072c6c79332e248c4f699” }分片 /usr/local/mongodb/bin/mongo -port 30000use test导入数据use admindb.runCommand({“enablesharding”:“test”})db.runCommand({“shardcollection”:“test.doc”,“key”:{&quot;_id&quot;:1}})第四节 replica sets + shard （3机高可用 ， 一主一备份一仲裁）一 方案每个分片3服务器，前期采用三台，日后服务器的增加考虑灾备，服务增加的基数最少为三台（或用有双机方案）。Server1 10.10.113.122 Server1 10.10.113.132 Server3 10.10.113.133类型 服务器 用途 系统 说明存储/数据 Server1 Shard1/Shard2/Shard3 Linux 64位 Shard1:10001;Shard2:10002,Shard3:10003;Server2 Shard1/Shard2/Shard3 Linux 64位 Shard1:10001;Shard2:10002,Shard3:10003;Server3 Shard1/Shard2/Shard3 Linux 64位 Shard1:10001;Shard2:10002,Shard3:10003;配置 Server1 Config1 Linux 64位 Config1:20000;Server2 Config2 Linux 64位 Config2:20000;Server3 Config3 Linux 64位 Config3:20000;路由 Server1 Mongos1 Linux 64位 Mongos:30000;Server2 Mongos2 Linux 64位 Mongos:30000;Server3 Mongos3 Linux 64位 Mongos:30000;二 准备安装mongodb 参照第一节linux 传文件 scp mongodb-linux-x86_64-2.0.4.tgz root@10.10.113.132:/root ssh 10.10.113.132创建配置、日志、分片、key文件存储目录及验证文件mkdir /data/mongodb/configsvr/ -pmkdir /data/mongodb/log/ -pmkdir /data/mongodb/shard1/ -pmkdir /data/mongodb/shard2/ -pmkdir /data/mongodb/shard3/ -pmkdir /data/mongodb/key/ -pmkdir /data/mongodb/conf/security/ -pmkdir /data/mongodb/conf/nosecurity/ -p创建配置文件1、 创建验证文件security于/data/mongodb/key/目录，关赋予可读权限，命令如下：cd /data/mongodb/key/echo ‘hycloudmongodbkey’ &gt; securitychmod 600 /data/mongodb/key/security2、 创建shard1.conf、shard2.conf、shard3.conf、configsvr.conf、mongos.conf于/data/mongodb/conf/security/ 和 /data/mongodb/conf/nosecurity/的目录，内容分别如下：shard1.confdbpath = /data/mongodb/shard1directoryperdb = trueshardsvr = truereplSet = shard1#bind_ip = 10.10.113.122,localhostport = 10001oplogSize = 100logpath =/data/mongodb/log/shard1.loglogappend = trueprofile = 1slowms = 5rest = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除shard2.confdbpath = /data/mongodb/shard2directoryperdb = trueshardsvr = truereplSet = shard2#bind_ip = 10.10.113.122,localhostport = 10002oplogSize = 100logpath = /data/mongodb/log/shard2.loglogappend = trueprofile = 1slowms = 5rest = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除shard3.confdbpath = /data/mongodb/shard3directoryperdb = trueshardsvr = truereplSet = shard3#bind_ip = 10.10.113.122,localhostport = 10003oplogSize = 100logpath = /data/mongodb/log/shard3.loglogappend = trueprofile = 1slowms = 5rest = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除configsvr.confdbpath = /data/mongodb/configsvrdirectoryperdb = trueconfigsvr = trueport = 20000logpath =/data/mongodb/log/configsvr.loglogappend = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除mongos.confconfigdb =10.10.113.122:20000, 10.10.113.132:20000, 10.10.113.133:20000port = 30000chunkSize = 1 #单位 mb 生成环境请使用 200 或删除logpath =/data/mongodb/log/mongos.loglogappend = truefork = truekeyFile = /data/mongodb/key/security #nosecurity目录将该行删除分片配置说明：分片要在无验证环境中配置，否则会出现无权限等异常。采用以下命令启动Server1\\Server2\\Server3上的shard1\\shard2\\shard3： /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/shard1.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/shard2.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/shard3.conf以下命令查看是否正常启动： netstat -lnpt # 或 ps -ef | grep mongo启动后连接到shard1\\shard2\\shard3分别进行配置，在任意一台服务器即可，以下是具体配置过程：（注意不能在仲裁机器初始化） /usr/local/mongodb/bin/mongo --port 10001use adminconfig = {_id:“shard1”, members: }; rs.initiate(config)exit /usr/local/mongodb/bin/mongo --port 10002use adminconfig = {_id:“shard2”, members: }; rs.initiate(config)exit /usr/local/mongodb/bin/mongo --port 10003use adminconfig = {_id:“shard3”, members: }; rs.initiate(config)至此，已完成分片配置路由设置路由是能过config来连接分片服务器，在启动路由进程时，先启动配置进程，路由配置过程如下： /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/nosecurity/configsvr.conf /usr/local/mongodb/bin/mongos -f /data/mongodb/conf/nosecurity/mongos.conf启动后，连接路由进行分片添加，只需配置一台路由。注：分片操作需在admin库下进行，另外必需在无验证要求下进行，即采用前面创建于nosecurity文件夹下的配置。 /usr/local/mongodb/bin/mongo --port 30000mongos&gt; use admin maxsize:20480 #单位 mb 分片限制大小 根据实际服务器来定mongos&gt; db.runCommand({addshard:“shard1/10.10.113.122:10001,10.10.113.132:10001,10.10.113.133:10001”,name:“shard1”, maxsize:20480} )mongos&gt; db.runCommand({addshard:“shard2/10.10.113.132:10002,10.10.113.133:10002,10.10.113.122:10002”,name:“shard2”, maxsize:20480} )mongos&gt; db.runCommand({addshard:“shard3/10.10.113.133:10003,10.10.113.122:10003,10.10.113.132:10003”,name:“shard3”, maxsize:20480} )命令检查分片添加情况，如出现以下结果则表示配置成功：mongos&gt; db.runCommand( {listshards : 1 } )权限控制MongoDB默认为验证模式。如需对数据库进行权限控制，需先采用无验证模式登录，进入admin库创建管理员用户后，再采用验证模式登录。通过前面创建的管理员帐号进行数据库与用户的创建。MongoDB集群的权限与单台的权限控制的不同之处在于，单台是通过-auth属性，集群是通过keyFile来进行服务器间的验证。以下介绍配置全过程。前面的所有步骤，都是在nosecurity模式下进行。如果没有采用非验证模式的需要将所有进程（分片、配置、mongos）停止，将切换到无验证模式。步骤一：先进行登录，并切换进admin库创建管理员帐号 /usr/local/mongodb/bin/mongo --port 30000mongos&gt;use adminmongos&gt;db.addUser(‘admin’,‘123456’){ &quot;singleShard&quot; :&quot;192.168.2.88:20000,192.168.2.89:20000,192.168.2.90:20000&quot;, &quot;n&quot; : 0, &quot;connectionId&quot; : 211, &quot;err&quot; : null, &quot;ok&quot; : 1 }{ &quot;_id&quot; :ObjectId(&quot;4f6c78ddad912a3ac6833ece&quot;), &quot;user&quot; : &quot;admin&quot;, &quot;readOnly&quot; : false, &quot;pwd&quot; :&quot;95ec4261124ba5951720b199908d892b&quot; }验证用户名与密码mongos&gt; db.auth(‘admin’,‘123456’)1mongos&gt;exit步骤二：退出后，将Server1\\Server2\\Server3服务器上MongoDB的所有进程（分片、配置、mongos）停止，将切换到验证模式。具体命令如下： killall mongod mongos netstat -lnpt /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/shard1.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/shard2.conf /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/shard3.conf netstat -lnpt # ps -ef | grep mongo /usr/local/mongodb/bin/mongod -f /data/mongodb/conf/security/configsvr.conf /usr/local/mongodb/bin/mongos -f /data/mongodb/conf/security/mongos.conf启动后，如对库进行查看，则会报以下异常： /usr/local/mongodb/bin/mongo 10.10.113.122:30000/adminMongoDB shell version: 2.0.4connecting to:10.10.113.122:30000/adminshow dbsFri Mar 23 22:28:28 uncaughtexception: listDatabases failed:{ “ok” : 0, “errmsg” :“unauthorized” }以下是正常登录后显示的信息： /usr/local/mongodb/bin/mongo 10.10.113.122:30000/adminMongoDB shell version: 2.0.4connecting to:10.10.113.122:30000/admindb.auth(‘admin’,‘123456’)1mongos&gt;步骤三：以下是数据库及数据库用户创建的过程：mongos&gt; use helloswitched to db hellomongos&gt;db.addUser(‘sa’,‘sa’){ &quot;singleShard&quot; :&quot;shard2/10.10.113.122:10002,10.10.113.132:10002,10.10.113.133:10002&quot;, &quot;n&quot; : 0, &quot;lastOp&quot; :NumberLong(&quot;5723101431532093441&quot;), &quot;connectionId&quot; : 38, &quot;err&quot; : null, &quot;ok&quot; : 1 }{ &quot;user&quot; : &quot;sa&quot;, &quot;readOnly&quot; : false, &quot;pwd&quot; :&quot;75692b1d11c072c6c79332e248c4f699&quot;, &quot;_id&quot; :ObjectId(&quot;4f6c8a6e9f67b049a20a00de&quot;) }mongos&gt; exitbye /usr/local/mongodb/bin/mongo 10.10.113.122:30000/hello -u sa -pMongoDB shell version: 2.0.4Enter password:connecting to:10.10.113.122:30000/helloshow collectionssystem.indexessystem.usersdb.system.users.find(){ “_id” :ObjectId(“4f6c8a6e9f67b049a20a00de”), “user” :“sa”, “readOnly” : false, “pwd” :“75692b1d11c072c6c79332e248c4f699” }分片 /usr/local/mongodb/bin/mongo -port 30000use admindb.runCommand({“enablesharding”:“test”})db.runCommand({“shardcollection”:“test.doc”,“key”:{&quot;_id&quot;:1}})db.runCommand({“shardcollection”:“test.txt”,“key”:{&quot;_id&quot;:1}})索引use testdb.fs.chunks.ensureIndex({files_id: 1});use admindb.runCommand({ shardcollection : “test.fs.chunks”, key : { files_id : 1 }})索引use testdb.doc.ensureIndex({“letter”:1})导入数据查询数据分片管理use configshow collectionsdb.shards.find()db.databases.find()db.chunks.find()db.printShardingStatus()","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"mongod 验证配置指南(十二)","slug":"history/tech/5953c4d0c2b92f5665eed9d6","date":"2016-01-01T04:41:54.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d6/","excerpt":"","text":"一. 前言最近公司加强安全，http://www.ttlsa.com/mongodb数据要启用验证，顺道总结下了。默认情况下，mongodb不启用验证的。数据库级别的权限，要么可读写要么只读权限。mongod的验证配置比较操蛋。分两种情形：一种是单服务器，只需启动时添加--auth参数即可。 另一种是复制集、分片集群服务器，必须指定keyfile参数，其他节点之间的通讯基于该keyfile。在这种情况下，–auth参数是隐含启用的，所有的mongodb访问都必须验证的。二. 单服务器模式添加管理员用户，admin库下的用户是全局用户，对所有的数据库可读写。1234 ./mongouse admindb.addUser(“root”,“www.ttlsa.com”)db.auth(“root”,“www.ttlsa.com”)创建普通的用户，是数据库级别的。123use database_namedb.addUser(‘guest’,‘www.ttlsa.com’) 可读写db.addUser(‘guest’,‘www.ttlsa.com’,true) 只可读查看用户1db.system.users.find()删除用户123db.removeUser(username)或db.system.users.remove( { user: username } )配置文件加上下面的参数后重新启动mongod实例1auth = ture三. 复制集与分片集群模式下3.1 keyfile规则集群服务器之间通讯通过keyfile进行身份验证。每个实例的keyfile文件内容要一致。keyfile文件权限仅当前用户可读。集群成员都需要指定–keyFile参数。每个客户端连接到数据库之前必须验证。key长度必须在6到1024个字符之间，否则会报错，mongod起不起来。任何空格被忽略。key不能包含非法字符=，否则会报错，mongod起不起来。3.2 创建一个keyfile1 openssl rand -base64 513 &gt; keyfile最好是3的倍数，否则会含有非法字符=。3.3 修改keyfile权限12 chown mongod.mongod keyfile chmod 600 keyfile3.4 创建一个管理账号在启用–keyFIle后，连接数据库都必须要验证的。123use admindb.addUser(“root”,“www.ttlsa.com”)db.auth(“root”,“www.ttlsa.com”)3.5 启用–keyFile修改mongod.conf文件，添加下面这项1keyFile = /path/to/keyfile3.6 重新启动mongod1 ./mongod --config mongod.conf创建普通用户与单机模式下验证一样的。如需转载请注明出处：http://www.ttlsa.com/html/2707.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"鼠标过慢问题","slug":"history/tech/5953c4d0c2b92f5665eed9db","date":"2016-01-01T03:58:32.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9db/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9db/","excerpt":"","text":"defaults write .GlobalPreferences com.apple.mouse.scaling -1defaults read -g com.apple.mouse.scalingdefaults write -g com.apple.mouse.scaling 7.5","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"系统操作","slug":"系统操作","permalink":"https://wangxiuwen.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"}],"author":"wangxiuwen"},{"title":"怎样在LINQ实现 LEFT JOIN 或者RIGHT JOIN","slug":"history/tech/5953c4d0c2b92f5665eed9d5","date":"2016-01-01T02:26:09.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d5/","excerpt":"","text":"In this post let us see how we can handle Left Join and Right Join when using LINQ. There are no keywords defined in C#, we have to use DefaultIfEmpty() function to get the desired result.Let us see how we can achieve it.To make you understand better I use a Employee -&gt; Department realation to explain.First we shall create two classes namely Employee and Departmentclass Employee {public string Name { get; set; }public int ID { get; set; }public int DeptID { get; set; }}class Department {public int ID { get; set; }public string Name { get; set; }}Lets create some objects of both the classes and fill some dummy data in it.Employee emp1 = new Employee() { ID = 1, Name = “A”, DeptID = 1};Employee emp2 = new Employee() { ID = 2, Name = “B”, DeptID = 1};Employee emp3 = new Employee() { ID = 3, Name = “C”, DeptID = 1 };Employee emp4 = new Employee() { ID = 4, Name = “D”, DeptID = 2 };Employee emp5 = new Employee() { ID = 5, Name = “E”, DeptID = 2 };Employee emp6 = new Employee() { ID = 6, Name = “F”, DeptID = 2 };Employee emp7 = new Employee() { ID = 7, Name = “G”, DeptID = 6 };Employee emp8 = new Employee() { ID = 8, Name = “H”, DeptID = 3 };Employee emp9 = new Employee() { ID = 9, Name = “I”, DeptID = 3 };Employee emp10 = new Employee() { ID = 10, Name = “J”, DeptID = 7};Employee emp11 = new Employee() { ID = 11, Name = “K”, DeptID = 7};Employee emp12 = new Employee() { ID = 12, Name = “L”, DeptID = 5};Department Dept1 = new Department() { ID = 1, Name = “Development”};Department Dept2 = new Department() { ID = 2, Name = “Testing”};Department Dept3 = new Department() { ID = 3, Name = “Marketing”};Department Dept4 = new Department() { ID = 4, Name = “Support”};ListListOfEmployees = new List();ListOfEmployees.AddRange((new Employee[] { emp1, emp2, emp3, emp4, emp5, emp6, emp7,emp8, emp9, emp10, emp11, emp12 }));ListListOfDepartment = new List();ListOfDepartment.AddRange( new Department[]{ Dept1,Dept2,Dept3,Dept4});So we finish loading the objects into ListOfEmployees and ListOfDepartments, using this lists we shall see how we can join them to get the results.First let us see what would be the query in SQL if we had the same structure in our tables.For Left join and right join we would have used the query–Left Join in SQLselect Emp.Name, Dept.Name from Employee Emp left join Department Dept onEmp.DeptID = Dept.ID–Right Join In SQLselect Emp.Name, Dept.Name from Employee Emp right join Department Dept onEmp.DeptID = Dept.IDUsing LINQ, Left Join can be acheived as followsvar LeftJoin = from emp in ListOfEmployeesjoin dept in ListOfDepartmenton emp.DeptID equals dept.ID into JoinedEmpDept from dept in JoinedEmpDept.DefaultIfEmpty()select new {EmployeeName = emp.Name,DepartmentName = dept != null ? dept.Name : null };And for Right Join there is no pretty difference, we just need to reverse the joining in first 2 lines. Here it followsvar RightJoin = from dept in ListOfDepartmentjoin employee in ListOfEmployeeson dept.ID equals employee.DeptID into joinDeptEmpfrom employee in joinDeptEmp.DefaultIfEmpty()select new {EmployeeName = employee != null ? employee.Name : null,DepartmentName = dept.Name};","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"mongodb的join操作简析","slug":"history/tech/5953c4d0c2b92f5665eed9d4","date":"2016-01-01T02:25:34.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d4/","excerpt":"","text":"众所周知，mongodb是不支持join操作的，因此我们只能自己来实现这个功能。前段时间，我遇到这个一个业务场景：collection A 的数据格式：{ “_id” : { “username” : “jifeng.zjd”, “version” : 2 }, “value” : 1 }collection B 的数据格式： www.2cto.com{ “user_id” : 12630, “username” : “jifeng.zjd” } A表的数据量为2w，B表的数据量为25w。为了说明简单，我简化下需求，就是计算A._id.username = B.username 的B表中的用户数据，也就是求A和B的交集。没有join，怎么办呢？ 相信大家都应该有自己的解答了，由于A表的数据量相对于B表来讲是少的，所以可以先取出A表的所有数据，然后去B表查询，看那些数据同时存在于A和B表中。当然在mongodb中对A和B建立适当的索引是非常必要的。我采用的方法是对B表的username字段进行索引。 如对mongodb索引不了解，可以参见视频教程《mongoDB的索引使用及索引机制》（http://blog.nosqlfan.com/http://www.2cto.com/kf/qianduan/css//758.html）一文。这里我使用的语言是nodejs，node_module采用的mongoskin，我刚开始写了一个简单的实现：db.A.find({}, {}, function(err, adata){if (err) return callback(err);//得到A表中的所有数据adata.toArray(function(err, aArray){if (err) return callback(err);var len = aArray.length;var result = [];for (var i = 0; i &lt; len; i++) {var item = aArray;var username = item._id.username;var op = {username: username};//查看B表中这条数据db.B.findOne(op, {}, function(err, data){allcount++; www.2cto.comif (data) {result.push(data.username);}if (allcount === len) {callback(null, result);}})}})})这段代码是能满足业务需求，但大家有没有发现它存在一个致命的问题？对，运行速度慢！ 原因很简单，我是从A表中批量取到所有数据，然后又用findOne方法一条条去B表中查询，A表中有2w数据，也就是要查B表2w次，虽然B表中已经建立索引，但这样的查询逻辑明显是不可接受。 知道问题所在，解决方案也就清楚了：对B表进行批量查询：db.A.find({}, {}, function(err, adata){if (err) return callback(err);//得到A表中的所有数据adata.toArray(function(err, aArray){if (err) return callback(err);var len = aArray.length;var result = [];var usernames = [];for (var i = 0; i &lt; len; i++) {var item = aArray;var username = item._id.username;usernames.push(username);}var op = {username: {$in: usernames}};//查看B表中这条数据 www.2cto.comdb.B.find(op, {}, function(err, bdata){ddata.toArray(function(err, barray){callback(barray);})})})})经过这样的优化，程序性能会有明显的提升。希望对大家有所帮助。作者 朱佳墩","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"MongoDB的连接字符串的介绍","slug":"history/tech/5953c4d0c2b92f5665eed9d3","date":"2016-01-01T02:25:07.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d3/","excerpt":"","text":"MongoDB连接字符串常用格式mongodb://host1[,host2,…[,hostN[/[?options］备注：字符串连接不区分大小写，并非所有MongoDB驱动都支持完整的连接字符串，不支持此格式连接字串的驱动会有替代连接方案，具体请参照驱动自身的说明文档，看看如何定义uri标准连接的。1、参数说明 mongodb:// 这是固定的格式，必须要指定。  username:password@ 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库 host1 必须的指定至少一个hosthost1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。  :portX 可选的指定端口，如果不填，默认为27017 /database 如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开admin数据库。 ?options 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&amp;或;（分号）隔开2、options 是连接参数connect=direct|replicaSetdirect: 连接方式为单个服务器。如果提供了多个主机地址，建立连接之后，按顺序访问。如果仅仅指定了一个主机，direct是默认值。replicaSet: 就和描述的那样，连接到replica set . 这个主机地址列表，是为了发现replica set。 如果连接多个主机replicaSet是默认值。replicaSet=name验证replica set的名称。 Impliesconnect=replicaSet.slaveOk=true|falsetrue:在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。false: 在 connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。safe=true|falsetrue: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。w=n驱动添加 { w : n } 到getLastError命令. 应用于safe=true。wtimeoutMS=ms驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe=true.fsync=true|falsetrue: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe=true.false: 驱动不会添加到getLastError命令中。.maxPoolSize=nminPoolSize=n一些驱动会把没用的连接关闭。 然而,如果连接数低于minPoolSize值之下， 它们不会关闭空闲的连接。注意的是连接会按照需要进行创建，因此当连接池被许多连接预填充的时候，minPoolSize不会生效。waitQueueTimeoutMS=ms在超时之前，线程等待连接生效的总时间。如果连接池到达最大并且所有的连接都在使用，这个参数就生效了。waitQueueMultiple=n驱动强行限制线程同时等待连接的个数。 这个限制了连接池的倍数。connectTimeoutMS=ms可以打开连接的时间。socketTimeoutMS=ms发送和接受sockets的时间参考资料： MongoDB的连接字符串 http://www.studyofnet.com/news/337.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"mongoDB 从单节点迁移到分布式集群 遇到的问题","slug":"history/tech/5953c4d0c2b92f5665eed9da","date":"2015-12-31T20:16:32.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9da/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9da/","excerpt":"","text":"1.linux 环境下limit 的设置问题：错误： $ ps -ef|grep mongod -bash: fork: retry: 资源暂时不可用 -bash: fork: retry: 资源暂时不可用 ^C-bash: fork: retry: 资源暂时不可用 -bash: fork: retry: 资源暂时不可用 -bash: fork: 资源暂时不可用 原因： linux 默认用户打开文件数为1024，进程数也是1024； 所以当客户端连接超过了，就出错了。 解决方法：重新设置ulimit ，以解决mongod 自动关闭。 修改文件： /etc/security/limits.conf 比如添加以下内容： mongo soft nproc 30000 mongo hard nproc 65536 mongo soft nofile 30000 mongo hard nofile 65536 2.mongodump不能先锁表。db.fsyncLock() #锁住表 mongodump db.fsyncUnLock() #解锁 以上方法 mongodump 无法运行，也无法备份数据（停住了） 这个是我突然想当然的，试试是否在备份时也可以先锁住表，不让客户端写操作。就出这问题了。 3.数据备份请请确认索引是否有与分片索引相同，有相同的，先删除索引后，再备份：在导入数据时，看到有一个表原先有两个字段的复合索引，在选择片键时，也是这两个字段做的片键，数据导入时，提示索引无法更新，出错。解决方法：删除原索引，或是修改片键值。 4.Hash索引时对key进行hash计算然后创建索引，目前只支持等号运行，不支持区间使用了HASH 片键后，查询/更新，不能使用 in, $gte $lte 之类的条件。所以如果你客户端有太多的代码是使用了 in, $gte $lte 之类的查询条件，那要 权衡一下了。你的片键选择是否得当，或是修改代码。 5.当更新单个文档如果不指定片键，会出以下错误：does not contain shard key for pattern { user_id: 1.0, cookie: 1.0 }’MongoDB更新操作无法确定更新到具体的某个分片上，所以出错， 指定片键后，更新操作只会路由到某一个分片上。 但如果你是更新多条记录，路由会更新到所有分片上。 6.最大连接数问题mongodb 默认最大连接数为928，如果你没有指定，到了这个数时，mongos，或是mongodb进程 会自动关闭，如果查看日志也无法确认是什么原因mongod 服务器突然自动关闭了，那可以查查 当前连接数是多少， mongos&gt; db.serverStatus().connections; { &quot;current&quot; : 1240, &quot;available&quot; : 22760, &quot;totalCreated&quot; : NumberLong(189438) }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"linux 开机以普通用户身份启动","slug":"history/tech/5953c4d0c2b92f5665eed9d9","date":"2015-12-31T19:59:20.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d9/","excerpt":"","text":"linux 开机以普通用户身份启动","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"mongo  eval","slug":"history/tech/5953c4d0c2b92f5665eed9d8","date":"2015-12-31T19:19:57.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d8/","excerpt":"","text":"sudo mongo admin --eval “db.shutdownServer()”","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"Authentication in mongoose using SCRAM-SHA-1","slug":"history/tech/5953c4d0c2b92f5665eed9d7","date":"2015-12-31T18:44:53.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d7/","excerpt":"","text":"不好使:mongoose.connect(‘mongodb://user:password@host:port/dbname?authSource=dbWithUserCredentials’)好使：config.mgOptions = {user: 'root', pass: 'root', auth: 'SCRAM-SHA-1', server: {poolSize: 50}, connectTimeoutMS: 20000 };config.connString = ‘mongodb://ip:port/database’;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"ssh 非root免密码登录","slug":"history/tech/5953c4d0c2b92f5665eed9d2","date":"2015-12-30T02:06:20.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d2/","excerpt":"","text":"http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=3554821","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"如何在ubuntu中设置visudo的默认编辑器","slug":"history/tech/5953c4d0c2b92f5665eed9d1","date":"2015-12-30T01:53:20.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d1/","excerpt":"","text":"在sudoers里加上 Set default EDITOR to vim, but allow visudo to use EDITOR/VISUAL.Defaults editor=/usr/bin/vim, env_editor","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"restify","slug":"history/tech/5953c4d0c2b92f5665eed9d0","date":"2015-12-29T20:37:40.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9d0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9d0/","excerpt":"","text":"Restify 是一个 Node.JS 模块，可以让你创建正确的 REST web services。它借鉴了很多 express 的设计，因为它是 node.js web 应用事实上的标准 API。示例代码：服务器端：var restify = require(‘restify’);var server = restify.createServer({name: ‘myapp’,version: ‘1.0.0’});server.use(restify.acceptParser(server.acceptable));server.use(restify.queryParser());server.use(restify.bodyParser());server.get(’/echo/:name’, function (req, res, next) {res.send(req.params);return next();});server.listen(8080, function () {console.log(’%s listening at %s’, server.name, server.url);});客户端：var assert = require(‘assert’);var restify = require(‘restify’);var client = restify.createJsonClient({url: ‘http://localhost:8080’,version: ‘~1.0’});client.get(’/echo/mark’, function (err, req, res, obj) {assert.ifError(err);console.log(‘Server returned: %j’, obj);});","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"sed","slug":"history/tech/5953c4d0c2b92f5665eed9cf","date":"2015-12-29T19:57:53.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9cf/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9cf/","excerpt":"","text":"1、sed简介sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。2、定址可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如7，9表示7,8,9行，$符号表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。3、Sed命令详解调用sed命令有两种形式：sed ‘command’ file(s)sed -f scriptfile file(s)a\\ //在当前行后面加入一行文本。b lable //分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。c\\ //用新的文本改变本行的文本。d //从模板块（Pattern space）位置删除行。D //删除模板块的第一行。i\\ //在当前行上面插入文本。h /拷贝模板块的内容到内存中的缓冲区。H //追加模板块的内容到内存中的缓冲区g //得内存缓冲区的内容，并替代当前模板块中的文本。G //获得内存缓冲区的内容，并追加到当前模板块文本的后面。l //列表不能打印字符的清单。n //读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。N //追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。p //打印模板块的行。P（大写） //打印模板块的第一行。q //退出Sed。r file //从file中读行。t label //if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。T label //错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。w file //写并追加模板块到file末尾。W file //写并追加模板块的第一行到file末尾。! //表示后面的命令对所有没有被选定的行发生作用。s/re/string //用string替换正则表达式re。= //打印当前行号码。 //把注释扩展到下一个换行符以前。以下的是替换标记g表示行内全面替换。p表示打印行。w表示把行写入一个文件。x表示互换模板块中的文本和缓冲区中的文本。y表示把一个字符翻译为另外的字符（但是不用于正则表达式）Options:-e command, --expression=command //允许多台编辑。-h, --help //打印帮助，并显示bug列表的地址。-n, --quiet, --silent //取消默认输出。-f, --filer=script-file //引导sed脚本文件名。-V, --version //打印版本和版权信息。4、元字符集 匹配符^ 锚定行的开始 如：/^sed/匹配所有以sed开头的行。$ 锚定行的结束 如：/sed$/匹配所有以sed结尾的行。. 匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。[] 匹配一个指定范围内的字符，如/ed/匹配sed和Sed。匹配一个不在指定范围内的字符，如：/ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。(…) 保存匹配的字符，如s/(love)able/\\1rs，loveable被替换成lovers。&amp; 保存搜索字符用来替换其他字符，如s/love/&amp;/，love这成love。&lt; 锚定单词的开始，如:/&lt;love 匹配包含以love开头的单词的行。&gt; 锚定单词的结束，如/love&gt;/匹配包含以love结尾的单词的行。x{m} 重复字符x，m次，如：/0{5}/匹配包含5个o的行。x{m,} 重复字符x,至少m次，如：/o{5,}/匹配至少有5个o的行。x{m,n} 重复字符x，至少m次，不多于n次，如：/o{5,10}/匹配5–10个o的行。关于过滤字符串问题比如在一个文本中搜索abcd这四个字符，使用grep 结果出来abcdef 、zabcd 、abcd 、 hiabcd… 等等，其实只想搜索abcdA: 使用精确匹配 $grep “” filenamesed中查找模式匹配：. 单字符通配符匹配0,1,2,3…8,9匹配a,b,c…z匹配不含0,1,2…9的所有其他字符“.*” 匹配&quot;&quot;内任何字符串^ 行开始标志$ 行结束标志5、我们来看几个例子：删除：d命令#sed ‘2d’ example-----删除example文件的第二行。#sed ‘2,d' example-----删除example文件的第二行到末尾所有行。 #sed 'd’ example-----删除example文件的最后一行。#sed '/test/'d example-----删除example文件所有包含test的行。#sed d filename-----sed删除文件filename中的所有行#sed 2,5d filename-----sed删除文件filename中的2至5行#sed /abc/d filename-----sed删除文件filename中包含字符串abc的所有行替换：s命令#sed ‘s/test/mytest/g’ example-----在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。#sed -n ‘s/^test/mytest/p’ example-----(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。#sed ‘s/^192.168.0.1/&amp;localhost/’ example-----&amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加localhost，变成192.168.0.1localhost。#sed -n ‘s/(love)able/\\1rs/p’ example-----love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。#sed ‘s#10#100#g’ example-----不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。选定行的范围：逗号#sed -n ‘/test/,/check/p’ example-----所有在模板test和check所确定的范围内的行都被打印。#sed -n ‘5,/^test/p’ example-----打印从第五行开始到第一个包含以test开始的行之间的所有行。#sed ‘/test/,/check/s/$/sed test/’ example-----对于模板test和west之间的行，每行的末尾用字符串sed test替换。多点编辑：e命令 sed -e ‘1,5d’ -e ‘s/test/check/’ example-----(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。#sed -e ‘/and/s/aaa/bbb/’ filename-----sed中用bbb替换同一行中包括字符串and的字符串aaa，而不是每一行中的字符串aaa#sed --expression=‘s/test/check/’ --expression=’/love/d’ example-----一个比-e更好的命令是–expression。它能给sed表达式赋值。从文件读入：r命令#sed ‘/test/r file’ example-----file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。写入文件：w命令#sed -n ‘/test/w file’ example-----在example中所有包含test的行都被写入file里。追加命令：a命令#sed ‘/^test/a\\—&gt;this is a example’ example&lt;-----'this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。插入：i命令#sed '/test/i\\new line………………’ example-----如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。下一个：n命令 sed ‘/test/{ n; s/aa/bb/; }’ example-----如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。变形：y命令#sed ‘1,10y/abcde/ABCDE/’ example-----把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。退出：q命令#sed ‘10q’ example-----打印完第10行后，退出sed。保持和获取：h命令和G命令#sed -e ‘/test/h’ -e '$G example-----在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。保持和互换：h命令和x命令#sed -e ‘/test/h’ -e ‘/check/x’ example -----互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。综合实例：将下文中以blog.fity.cn开头的字段后面4位改成9999，最终变为blog.fity.cn9999#cat filenameblog.fity.cnxxxxblog.fity.cnABCSfity.cn2012blog.fity.cn2013hello,2013!#sed -i “s/blog.fity.cn/blog.fity.cn9999/g” filename替换#cat /test.txtweb accesslogaccesslogaccesslogccesslogaccesslogssaccesslogest.conf cs#sed -i ‘s/accesslog.log/accesslog/g’ test.txt#cat /test.txtweb accesslogest.conf cs#sed -i 's/accesslog./accesslog/g’ test.txt#cat /test.txtweb accesslog6、脚本Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux sed批量替换多个文件中的字符串","slug":"history/tech/5953c4d0c2b92f5665eed9ce","date":"2015-12-29T19:39:26.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ce/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ce/","excerpt":"","text":"sed -i “s/oldstring/newstring/g” grep oldstring -rl yourdir例如：替换/home下所有文件中的为admin99.netsed -i “s/www.admin99.net/admin99.net/g” grep -rl /home","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"sed处理变量替换","slug":"history/tech/5953c4d0c2b92f5665eed9cd","date":"2015-12-29T19:38:10.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9cd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9cd/","excerpt":"","text":"a=“test1” b=“2test” echo $a | sed &quot;s 1 $b &quot;test2test即–&gt; 格式为sed &quot;s $变量1 变量2 \"，注意一定是双引号，这里以空格为分隔符，正常可以使用sed \"s/变量1/$变量2/ &quot;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"sed 中使用变量","slug":"history/tech/5953c4d0c2b92f5665eed9cc","date":"2015-12-29T19:37:29.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9cc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9cc/","excerpt":"","text":"一般在sed 中替换都用单引号，如下边sed -in-place ‘s/8080/8001/g’ /home/work/server.xml但是如果需要把8001改成变量，如sed -in-place ’s/8080/port/g‘ /home/work/server.xml 这样就不成功。 此时需要把单引号改成双引号,如下边例子 port=8001sed -in-place “s/8080/$port/g” /home/work/server.xml","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"按照日期重定向","slug":"history/tech/5953c4d0c2b92f5665eed9cb","date":"2015-12-29T18:29:38.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9cb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9cb/","excerpt":"","text":"top | while read line; do now=date &quot;+%Y-%m-%d-%H:%M:%S&quot;; echo $line &gt;&gt; $now.log; done;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"Linux中各种操作符 重定向操作符、管道符","slug":"history/tech/5953c4d0c2b92f5665eed9ca","date":"2015-12-29T17:49:19.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ca/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ca/","excerpt":"","text":"Linux中各种操作符 重定向操作符、管道符 (2012-09-15 23:19:28)转载▼标签： 杂谈 分类： LinuxLinux重定向操作符 功能描述&gt; 将命令输出写入文件或设备，而不是命令提示符或句柄，清空原有文件然后写入&lt; 从文件而不是从键盘或句柄读入命令输入&gt;&gt; 将命令输出添加到文件末尾而不删除文件中已有的信息 与&gt;比较使用&gt;&amp; 将一个句柄的输出写入到另一个句柄的输入中&lt;&amp; 从一个句柄读取输入并将其写入到另一个句柄输出中| 从一个命令中读取输出并将其写入另一个命令的输入中；也称为管道操作符mysh &gt; mylog.txt 2&gt;&amp;1就可明白：&gt; mylog.txt意思是将标准输出重定向到mylog.txt，等价于mysh 1&gt; mylog.txt；2 &gt;&amp; 1 意思是将错误输出重定向到句柄1标准输出；综合起来就是mysh命令执行过程中产生的标准输出和错误输出都会被重定向到mylog.txt中；","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"shell 提示 ambiguous redirect","slug":"history/tech/5953c4d0c2b92f5665eed9c9","date":"2015-12-29T17:48:50.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c9/","excerpt":"","text":"head -50000 dir/dir/dir/file &gt;access_$creatimedate +%m%d-%k%M，由于使用了date的 %k 格式，而且没有使用双引号，凌晨开始，在重定向到以日期为文件名的文件时，出现了错误“ambiguous redirect”因为%K的格式生成的日志格式名类似于 access_0526- 146改成使用%H参数，或者将文件名用双引号括起来即可。说明：The redirect error normally occurs when a wildcard is used or spaces exist in the filename and it hasn’t been surrounded by quotes.转载自零度科技：http://www.ldisp.com/a/primary/2014/2642.shtml","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux-shell中输入输出重定向的用法（转）","slug":"history/tech/5953c4d0c2b92f5665eed9c8","date":"2015-12-29T17:34:04.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c8/","excerpt":"","text":"http://blog.sina.com.cn/s/blog_54eb9d9e0102vqxb.htmlmycommand &gt;mylog.txt 2&gt;&amp;1 应该是最经典的用法了。命令的结果可以通过“%&gt;”的形式来定向输出，%表示文件描述符：1为标准输出stdout、2为标准错误stderr。系统默认%值是1，也就是“1&gt;”，而1&gt;可以简写为&gt;，也就是默认为&gt;。stdout的默认目标是终端，stderr的默认目标为也是终端。我们在批处理中执行： echo text &gt;result.txt ，我们就可以在屏幕上会看到 echo text 1&gt;result.txt ，即是这个道理。其中&amp;需要直接与重定向符号结合使用。参考：1、http://www.google.cn/search?q=“2&gt;&amp;1”2、http://www.microsoft.com/technet/prodtechnol/windowsserver2003/zh-chs/library/ServerHelp/04969a04-a424-4776-bdc7-dc5066ce79b2.mspx?mfr=true应用实例：1、将结果输出到result.txtnet stop myservices &gt;&gt;result 2&gt;&amp;12、隐藏程序输出结果net stop myservices &gt;nul 2&gt;nul微软关于重定向的文章：使用命令重定向操作符更新日期： 01/21/2005使用命令重定向操作符可以使用重定向操作符将命令输入和输出数据流从默认位置重定向到其他位置。输入或输出数据流的位置称为句柄。下表将列出可用的句柄。句柄 句柄的数字代号 描述STDIN0键盘输入STDOUT1输出到命令提示符窗口STDERR2错误输出到命令提示符窗口UNDEFINED3-9句柄由应用程序单独定义，它们是各个工具特有的数字 0 到 9 代表前 10 个句柄。可以使用命令 Cmd.exe 运行程序，并对该程序前 10 个句柄中的任何一个句柄进行重定向。要指定要用的句柄，请在重定向操作符之前键入该句柄的数字。如果未定义句柄，则默认的 &lt; 重定向输入操作符是 0，而默认的 &gt; 重定向输出操作符是 1。键入 &lt; 或 &gt; 操作符之后，必须指定数据的读写位置。可以指定文件名或其他现有的句柄。要指定重定向到现有句柄，请使用与 (&amp;) 字符，后面接要重定向的句柄号（即 &amp;句柄号）。例如，下面的命令可以将句柄 2（即 STDERR）重定向到句柄 1（即 STDOUT）：2&gt;&amp;1下表列出了可用于重定向输入和输出数据流的操作符。重定向操作符 描述将命令输出写入到文件或设备（如打印机），而不是命令提示符窗口或句柄。&lt;从文件而不是从键盘或句柄读入命令输入。将命令输出添加到文件末尾而不删除文件中已有的信息。&amp;将一个句柄的输出写入到另一个句柄的输入中。&lt;&amp;从一个句柄读取输入并将其写入到另一个句柄输出中。|从一个命令中读取输出并将其写入另一个命令的输入中。也称作管道。默认情况下，可以从键盘将命令输入（即 STDIN 句柄）发送到 Cmd.exe，然后由 Cmd.exe 将命令输出（即 STDOUT 句柄）发送到命令提示符窗口。重定向输入 (&lt;)要通过键盘将输入重定向到文件或设备，请使用 &lt; 操作符。例如，要从 File.txt 获取 sort 命令的输入，请键入：sortFile.txt 的内容将以字母顺序列表的方式显示在命令提示符窗口中。&lt; 操作符可以打开具有只读访问权限的指定文件名。因此，不能在使用该操作符时向文件中写入信息。例如，如果以 &lt;&amp;2 启动程序，则所有试图读取句柄 0 的操作都将失败，因为句柄 2 最初是以只写访问方式打开的。注意•0 是 &lt; 重定向输入操作符的默认句柄。重定向输出 (&gt;)几乎所有的命令都将输出发送到命令提示符窗口。即使将输出发送到驱动器或打印机的命令也会在命令提示符窗口显示消息和提示。要将输出从命令提示符窗口重定向到文件或设备，请使用 &gt; 操作符。可以在许多命令中使用该操作符。例如，要将 dir 输出重定向到 Dirlist.txt，请键入：dir&gt;dirlist.txt如果 Dirlist.txt 不存在，Cmd.exe 将创建该文件。如果 Dirlist.txt 存在，Cmd.exe 将使用 dir 命令的输出替换文件中的信息。要运行 netsh routing dump 命令，然后将输出发送到 Route.cfg，请键入：netsh routing dump&gt;c:\\route.cfg操作符可以打开具有只写访问权限的指定文件。因此，不能使用该操作符读取文件。例如，如果使用重定向操作符 &gt;&amp;0 启动程序，则写入句柄 1 的所有尝试操作都将失败，因为句柄 0 最初是以只读访问方式打开的。注意•1 是 &gt; 重定向输出操作符的默认句柄。复制句柄重定向操作符 &amp; 可以将输出或输入从一个指定句柄复制到另一个指定的句柄。例如，要将 dir 输出发送到 File.txt 并将错误输出发送到 File.txt，请键入：dir&gt;c:\\file.txt 2&gt;&amp;1复制句柄时，可以复制该句柄原状态的所有特性。例如，如果一个句柄具有只读访问的属性，则该句柄的所有副本都具有只读访问属性。不能将一个具有只读访问属性的句柄复制到另一个具有只写访问属性的句柄。使用 &amp; 操作符重定向输入和副本要将重定向输入操作符 (&lt;) 与复制操作符 (&amp;) 结合使用，指定的文件必须已经存在。如果输入文件存在，Cmd.exe 将以只读方式打开该文件，然后将文件包含的字符作为输入发送到此命令（如同从键盘输入一样）。如果指定了句柄，Cmd.exe 将指定的句柄复制到系统现有的句柄中。例如，要以句柄 0 输入读取（即 STDIN）的方式打开 File.txt，请键入：&lt;file.txt要打开 File.txt，并在内容排序后将输出发送到命令提示符窗口（即 STDOUT），请键入：sort&lt;file.txt要查找 File.txt，然后将句柄 1（即 STDOUT）和句柄 2（即 STDERR）重定向到 Search.txt，请键入：findfile file.txt&gt;search.txt 2&lt;&amp;1要以句柄 0 输入读取（即 STDIN）的方式复制用户定义的句柄 3，请键入：&lt;&amp;3使用 &amp; 操作符重定向输出和复制如果将输出重定向到文件且指定了现有的文件名，Cmd.exe 将以只写方式打开文件并覆盖该文件内容。如果指定了句柄，Cmd.exe 将文件复制到现有句柄中。要将用户定义的句柄 3 复制到句柄 1，请键入：&amp;3要将包括句柄 2（即 STDERR）的所有输出从 ipconfig 命令重定向到句柄 1（即 STDOUT），然后将输出重定向到 Output.log，请键入：ipconfig.exe&gt;&gt;output.log 2&gt;&amp;1使用 &gt;&gt; 重定向操作符附加输出要从命令中将输出添加到文件末尾而不丢失文件中已存在的任何信息，请使用两个连续的大于号（即 &gt;&gt;）。例如，使用下列命令可以将 dir 命令生成的目录列表附加到 Dirlist.txt 文件：dir&gt;&gt;dirlist.txt要将 netstat 命令的输出附加到 Tcpinfo.txt 的末尾，请键入：netstat&gt;&gt;tcpinfo.txt使用管道操作符 (|)管道操作符 (|) 可以提取一个命令的输出（默认情况下是 STDOUT），然后将其定向到另一个命令的输入（默认情况下是 STDIN）中。例如，使用下面的命令可以对目录进行分类：dir | sort在本例中，将同时启动两个命令，但随后 sort 命令会暂停，直到它接收到 dir 命令的输出为止。sort 命令使用 dir 命令的输出作为输入，然后将输出发送到句柄 1（即 STDOUT）。合并带重定向操作符的命令通过合并带有其他命令和文件名的筛选器命令，可以创建自定义命令。例如，可以使用以下命令存储包含“LOG”字符串的文件名:dir /b | find “log” loglist.txtdir 命令的输出是通过 find 筛选器命令进行发送的。包含字符串“LOG”的文件名作为文件名列表（例如，NetshConfig.log、Logdat.svd 和 Mylog.bat）存储在文件 Loglist.txt 中。要在相同命令中使用多个筛选器，请使用管道 (|) 分隔筛选器。例如，下面的命令将搜索 C 盘上的每个目录以查找包含“LOG”字符串的文件名，并且在命令提示符窗口中每次显示一屏：dir c:\\ /s /b | find “log” | more利用管道 (|) 可以对 Cmd.exe 进行定向，使其通过 find 筛选器命令发送 dir 命令输出。find 命令只选择包含字符串“LOG”的文件名。more 命令可以显示 find 命令选择的文件名（在命令提示符窗口中每次显示一屏）。有关筛选器命令的详细信息，请参阅使用筛选器。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"Linux使用tee双向重定向","slug":"history/tech/5953c4d0c2b92f5665eed9c7","date":"2015-12-29T17:32:56.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c7/","excerpt":"","text":"这篇文章介绍个重定向的小技巧–双向重定向！平时我们喜欢将很长的Linux的标准输出重定向到一个文本文件中，然后再去分析这个“大文件”，那有没有在不影响标准输出的同时能再次将标准输出重定向到文件中的方法呢？答案是有的，那就是tee命令！http://ourunix.b0.upaiyun.com/2014/03/tee.jpgtee命令使用很简单：比如使用ls命令显示所有的内容，除了在屏幕上照常输出外，还保留了一份文本记录：12345678$ lstest2 test3 test4$ ll | tee tee.outtotal 12-rw-rw-r-- 1 mars mars 0 Mar 17 22:00 tee.outdrwxrwxr-x 2 mars mars 4096 Mar 17 14:00 test2drwxrwxr-x 2 mars mars 4096 Mar 17 14:00 test3drwxrwxr-x 2 mars mars 4096 Mar 17 14:16 test4有人说这个命令可能有点华而不实，但是lorinnn告诉你比如这样一个应用场景，你的服务器的剩余空间不够了，你打算去清理空间，可是/home目录下有太多的文件需要统计，计算，甚至必须进入子目录查看才能知道文件是否能够删除，这时你用du -sk并用http://www.ourunix.org/post/295.html进行了从大到小的排序，然后你进入这些大目录里面查看是否能够删除，走着走着，然后这个排序结果是不是被淹没了，找不到了有没有？如果你能将当时的结果记录下来，然后再去一个一个清理，那岂不是美哉！1234567891011$ du -sk * | sort -n -k 1 -r | head | tee big.out17565256 SyncIAD1SamplePriority15748612 runMarsTool8274728 MARS26623984 TableTransfer6384448 FlashDB6341424 MonitorPAFI4914916 googleCountParser3954296 PAFIPatternServer2751844 MapReduceJobs2709280 UpdateReportSummary查看刚才的big.out文件：1234567891011$ cat big.out17565256 SyncIAD1SamplePriority15748612 runMarsTool8274728 MARS26623984 TableTransfer6384448 FlashDB6341424 MonitorPAFI4914916 googleCountParser3954296 PAFIPatternServer2751844 MapReduceJobs2709280 UpdateReportSummary本文标签：http://www.ourunix.org/post/tag/tee, http://www.ourunix.org/post/tag/文本处理**©声明：**本站原创文章采用http://creativecommons.org/licenses/by-nc-sa/3.0/cn/创作共用协议，转载时请以链接形式标明本文地址；非原创（转载）文章版权归原作者所有。【http://www.ourunix.org/copyright】©转载请注明来源： http://www.ourunix.org/post/303.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"Object.defineProperty","slug":"history/tech/5953c4d0c2b92f5665eed9c6","date":"2015-12-29T03:16:08.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c6/","excerpt":"","text":"使用 Object.definePropertyfishenal fishenal 2014年06月17日 发布推荐 1 推荐收藏 5 收藏，1.3k 浏览Object.defineProperty，顾名思义，为对象定义属性，但是疑问是，我们有太多的办法去定义一个对象的属性了,比如foo = 100,比如foo.bar = 100，为什么还要用它？会不会是自找麻烦呢？使用Object.defineProperty的原因很简单，因为只有通过它才能定义一些值得特殊属性，比如是否可写，是否可枚举，接下来我们用例子来看一下。定义或修改属性var demo = {foo:1,bar:2};Object.defineProperty(demo, ‘foo’,{value:100});Object.defineProperty(demo, ‘foobar’,{value:“hello”});这个例子中，第一个修改了demo的属性foo，第二个创建了foobar属性，属性的值是第三个参数中value。第一个参数是要修改的对象，第二个参数是属性名，第三个参数是“描述”，一个可以对属性进行一些设定的键值对。所以，如果你想让一个属性变得不可枚举，要这么写Object.defineProperty(demo, ‘foobar’,{value:“hello”,enumerable:false});可枚举的属性上一个例子其实是没有意义的，因为enumerable的默认值就是false,用上述方法创建的属性默认就是不可枚举，那么什么是不可枚举呢？很简单，for…in 或 Object.keys找不到它,用MDN上的栗子var o = {};Object.defineProperty(o, “a”, { value : 1, enumerable:true });Object.defineProperty(o, “b”, { value : 2, enumerable:false });Object.defineProperty(o, “c”, { value : 3 }); // enumerable defaults to falseo.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为truefor (var i in o) {console.log(i);}// 打印 ‘a’ 和 ‘d’ (in undefined order)Object.keys(o); //o.propertyIsEnumerable(‘a’); // trueo.propertyIsEnumerable(‘b’); // falseo.propertyIsEnumerable(‘c’); // false所以，同样你可以定义的属性包括Writable 是否可写Configurable 是否能删除所以,Object.defineProperty相当于 .和[]的一个加强版，但是另外一个因素也让他变得更强大。属性的getter和setter通过Object.defineProperty可以自定义属性的getter和setter，看栗子var demo = {foobar: ‘hello’}var v;Object.defineProperty(demo,‘foobar’,{get:function(){console.log(‘i am been getting’)return v + ‘?’},set:function(e){v = e + ‘!’;console.log(‘i am changing!’)}})demo.foobar = “bye”console.dir(demo.foobar)//‘i am changing!’//‘i am been getting’//‘bye!?’这只是一个恶作剧，让属性在修改和获取的时候都进行了修改，不过这确实是一个很强大的功能，我们可以通过这个方法实现页面展现与数据的绑定，让你的关注点集中在数据而不是数据的展现过程，这就是所谓的&quot;双向绑定&quot;比如这样：var demo = {}var v;Object.defineProperty(demo,‘foobar’,{get:function(){return v;},set:function(e){v = e;sow();}});function sow(){$(‘body’).html(demo.foobar)}demo.foobar = “hello”setTimeout(function(){demo.foobar = “bye”setTimeout(function(){demo.foobar = ‘i am back’},1000)},1000)这个例子中，数据的展现交给了sow()去做，数据这边每次更新demo.foobar的值，展现就会更新，这一切都得益于Object.defineProperty最后的话Object.defineProperty是ECS5属性，所以IE8以下无效。更多请见https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/definePropertyjavascript","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"dirname","slug":"history/tech/5953c4d0c2b92f5665eed9c5","date":"2015-12-29T02:59:44.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c5/","excerpt":"","text":"参考地址:http://www.cnblogs.com/xd502djj/archive/2012/06/21/2557447.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"},{"name":"shell","slug":"shell","permalink":"https://wangxiuwen.github.io/tags/shell/"}],"author":"wangxiuwen"},{"title":"使用脚本自动化远程备份MySQL数据库","slug":"history/tech/5953c4d0c2b92f5665eed9c4","date":"2015-12-28T03:48:53.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c4/","excerpt":"","text":"通常情况下、mysql都需要备份，备份的方法有很多种。下面是我用脚本配合计划任务完成的自动备份远程的数据库。一、 确认备份方案：备份机：ip192.168.8.51数据库服务器：ip192.168.8.46备份的内容：对mysql的studydb、coursedb库进行远程备份、每天2:30执行，每个库备份为独立的sql文件。然后压缩为tar.gz格式，文件中嵌入备份的日期和时刻。创建数据库： service mysqld statusmysqld (pid 3554) 正在运行… mysqladmin -uroot -p password 123123 ##更改密码Enter password: ##输入原密码 mysql -uroot -p123123Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 8Server version: 5.0.77-log Source distributionType ‘help;’ or ‘\\h’ for help. Type ‘\\c’ to clear the buffer.mysql&gt;mysql&gt; create database studydb; ##创建数据库Query OK, 1 row affected (0.05 sec)mysql&gt; create database couredb;Query OK, 1 row affected (0.00 sec)给数据库赋权：mysql&gt; grant select,lock tables on studydb.* to ‘operator’@‘192.168.8.51’ identified by ‘pwd123’; ##使用逻辑工具备份工具mysqldump是需要对库有select和lock tables的权限Query OK, 0 rows affected (0.00 sec)mysql&gt; grant select,lock tables on coursedb.* to ‘operator’@‘192.168.8.51’ identified by ‘pwd123’;Query OK, 0 rows affected (0.00 sec)在192.168.8.51测试备份： cd /tmp mysqldump -u operator -ppwd123 -h 192.168.8.46 --databases studydb &gt;test.sql lsbin games test.sql二、 在192.168.8.51编写Mysql备份脚本： mkdir /root/bin cd /root/bin vi dbbak.sh#!/bin/bash#这是一个简单的mysql数据库逻辑备份脚本#1.定义数据库连接、目标库信息MY_USER=“operator”MY_PASS=“pwd123”MY_HOST=“192.168.8.46”MY_CONN=&quot;-u MYUSER−pMY_USER -pMY​U​​SER−pMY_PASS -h $MY_HOST&quot;MY_DB1=“studydb”MY_DB2=“coursedb”#2.定义备份目录、工具、时间、文件名主体BF_DIR=&quot;/opt/dbbak/&quot;BF_CMD=&quot;/usr/local/bin/mysqldump&quot;BF_TIME=date +%Y%m%d-%H%MNAME_1=“MYDB1−MY_DB1-MY​D​​B1−BF_TIME”NAME_2=“MYDB2−MY_DB2-MY​D​​B2−BF_TIME”#3.先导出为.sql脚本，然后再进行压缩（打包后删除原文件）cd $BF_DIR//bin/tar zcf $NAME_1.tar.gz $NAME_1.sql --remove &amp;&gt;/dev/null/bin/tar zcf $NAME_2.tar.gz $NAME_2.sql --remove &amp;&gt;/dev/null mkdir /opt/dbbak ###创建备份目录 chmod a+x dbbak.sh ###给脚本执行权限 dbbak.sh ##运行脚本 ls /opt/dbbak/ ###验证效果coursedb-20130505-0311.tar.gz studydb-20130505-0311.tar.gz三、 在192.168.8.51上设置计划任务： crontab -e30 2 * * * /root/bin/dbbak.sh chkconfig crond on service crond statuscrond (pid 3263) 正在运行…好了数据库备份这件事就搞定了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"redis的持久化","slug":"history/tech/5953c4d0c2b92f5665eed9c3","date":"2015-12-28T03:48:00.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c3/","excerpt":"","text":"redis的持久化有rdb和aof两种。rdb是记录一段时间内的操作，一盘的配置是一段时间内操作超过多少次就持久化。aof可以实现每次操作都持久化。这里我们使用aof。配置方式，打开redis的配置文件。找到appendonly。默认是appendonly no。改成appendonly yes。再找到appendfsync默认是： appendfsync always #每次收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用appendfsync everysec #每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，推荐 appendfsync no #完全依赖os，性能最好,持久化没保证默认每秒持久化满足我的需求。其实改下appendonly 就ok了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"没看懂的命令","slug":"history/tech/5953c4d0c2b92f5665eed9c2","date":"2015-12-28T03:35:44.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c2/","excerpt":"","text":"firewall-cmd --list-all","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"iptbles","slug":"history/tech/5953c4d0c2b92f5665eed9c1","date":"2015-12-28T03:34:43.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9c1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9c1/","excerpt":"","text":"iptables -L -n","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"音程的转位","slug":"history/music/5953c4d0c2b92f5665eed9c0","date":"2015-12-28T03:29:54.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5953c4d0c2b92f5665eed9c0/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5953c4d0c2b92f5665eed9c0/","excerpt":"","text":"3 转位 6大 转位 小小 转位 大2 转位 7","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"基本乐理","slug":"基本乐理","permalink":"https://wangxiuwen.github.io/tags/%E5%9F%BA%E6%9C%AC%E4%B9%90%E7%90%86/"}],"author":"wangxiuwen"},{"title":"协和 不协和 不完全协和","slug":"history/music/5953c4d0c2b92f5665eed9bf","date":"2015-12-28T03:28:12.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5953c4d0c2b92f5665eed9bf/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5953c4d0c2b92f5665eed9bf/","excerpt":"","text":"完全协和： 1 8 4 5(纯)不完全协和：： 大小 三度， 大小 6度不协和： 大小2度，大小7度 增4度， 减5度","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"基本乐理","slug":"基本乐理","permalink":"https://wangxiuwen.github.io/tags/%E5%9F%BA%E6%9C%AC%E4%B9%90%E7%90%86/"}],"author":"wangxiuwen"},{"title":"钢琴基本功","slug":"history/music/5953c4d0c2b92f5665eed9be","date":"2015-12-28T03:21:05.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5953c4d0c2b92f5665eed9be/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5953c4d0c2b92f5665eed9be/","excerpt":"","text":"拜厄(beyer)车尔尼(Czerny) op595哈农（Hanon）","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"基本乐理","slug":"基本乐理","permalink":"https://wangxiuwen.github.io/tags/%E5%9F%BA%E6%9C%AC%E4%B9%90%E7%90%86/"}],"author":"wangxiuwen"},{"title":"虚拟内存的使用","slug":"history/tech/5953c4d0c2b92f5665eed9bd","date":"2015-12-28T03:18:59.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9bd/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9bd/","excerpt":"","text":"redis的虚拟内存与操作系统的虚拟内存不是一回事，但是思路和目的都是相同的。就是把暂时不经常访问的数据从内存交换到磁盘中，从而腾出宝贵的内存空间用于其他需要访问的数据，尤其是对于redis这样的内存数据，内存总是不够用的。除了可以将数据分割到多个redis server外，另外能够提高数据库容量的办法就是使用虚拟内存把那些不经常访问的数据交换到磁盘上。下面是vm 相关配置：vm-enable yes #开启vm功能 vm-swap-file /tmp/redis.swap #交换出来的value保存文件的路径 vm-max-memory 1000000 #redis使用的最大内存上限 vm-page-size 21 #每个页面大小32字节 vm-pages 134217728 #最多使用多少页面 vm-max-threads 4 #用于执行value对象的工作线程的数量","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"发布订阅消息","slug":"history/tech/5953c4d0c2b92f5665eed9bc","date":"2015-12-28T03:04:56.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9bc/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9bc/","excerpt":"","text":"发布订阅(pub/sub)是一种消息通信模式，主要的目地是解除消息发布着和消息订阅者之间的耦合，redis作为一个pub/sub的server，在订阅者和发布者之间起到了消息路由的功能。订阅者可以荣国subcribe和psubscribe命令向redis server 订阅自己感兴趣的消息类型，redis将信息类型称为通道(channel)。当发布者通过publish命令向redis server发送特定类型的信息时，订阅该信息类型的全部client都会收到此消息。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"redis客户端连接","slug":"history/tech/5953c4d0c2b92f5665eed9bb","date":"2015-12-28T03:01:10.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9bb/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9bb/","excerpt":"","text":"/usr/local/redis/bin/redis-cli -a password","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"redis启动方式","slug":"history/tech/5953c4d0c2b92f5665eed9ba","date":"2015-12-28T03:00:31.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ba/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ba/","excerpt":"","text":"/usr/local/redis/bin/redis-server /usr/local/reids/etc/redis.conf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"redis停止方式","slug":"history/tech/5953c4d0c2b92f5665eed9b9","date":"2015-12-28T02:59:51.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b9/","excerpt":"","text":"暴力方式：pkill redis-server","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"持久化机制","slug":"history/tech/5953c4d0c2b92f5665eed9b8","date":"2015-12-28T02:24:07.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b8/","excerpt":"","text":"redis是一个支持持久化的内存数据库，也就是说redis需要经常将内存中的数据同步到硬盘来保证持久化。redis吃吃两种持久化方式：1.snapshotting(快照)也是默认方式。2.Append-only file(缩写aof)的方式。snapshotting：快照是默认的持久化方式。这种方式是将内存中数据以快照的方式写入到二进制文件中，默认的文件名为dump.rdb。可以通过配置设置自动快照持久化的方式。我们可以配置redis在n秒内如果超过m个key修改就自动做快照。save 900 1#900秒内如果超过1个key被修改，则发起快照保存save 300 1#300秒内如果超过10个key被修改，则发起快照保存save 60 10000aof 方式：由于快照是按照一定时间间隔做一次的，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改。aof比快照方式有更好的持久化性，是由于在使用aof时，redis会将每一个收到的写命令都通过write函数追加到文件中，当redis重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。当然由于os会在内核中缓存write做的修改，所以可能不是立即写到磁盘上，这样aof方式的持久化也还是有可能会丢失部分修改。可以通过配置文件告诉redis我们想要fsync函数强制os写入磁盘的时机。appendonly yes //启动aof持久化方式#appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全持久化。appendfsync everysec//每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中。#appendfsync no//完全依赖os，性能最好，持久化没保证。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"主从复制","slug":"history/tech/5953c4d0c2b92f5665eed9b7","date":"2015-12-28T02:17:08.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b7/","excerpt":"","text":"配置主从服务器：配置slave服务器很简单，只需要在slave的配置文件中加入此配置：slaveof 192.168.1.1 6379 #执行master的ip和端口masterauth password #这是主机的密码","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"set 类型及其操作","slug":"history/tech/5953c4d0c2b92f5665eed9b6","date":"2015-12-28T02:11:28.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b6/","excerpt":"","text":"set是集合，他是string类型的无序集合。set是通过hash table 实现的，添加，删除和查找的复杂度都是O(1)。对集合我们可以取并集，交集，差集。通过这些操作我们可以实现sns中的好友推荐和blog和tag功能。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"setrange","slug":"history/tech/5953c4d0c2b92f5665eed9b5","date":"2015-12-28T02:09:17.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b5/","excerpt":"","text":"设置指定的key的value值的字符串，例如：我们希望将zhangsan的126邮箱替换为gmail邮箱。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"python 下载url","slug":"history/tech/5953c4d0c2b92f5665eed9b4","date":"2015-12-27T21:01:06.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b4/","excerpt":"","text":"#--coding:utf-8--import osimport uuidimport urllib2import cookielib‘’‘获取文件后缀名’’’def get_file_extension(file):return os.path.splitext(file)‘’‘創建文件目录，并返回该目录’’’def mkdir(path):# 去除左右两边的空格path=path.strip()# 去除尾部 \\符号path=path.rstrip(&quot;\\&quot;)if not os.path.exists(path): os.makedirs(path) return path ‘’‘自动生成一个唯一的字符串，固定长度为36’’’def unique_str():return str(uuid.uuid1())‘’’抓取网页文件内容，保存到内存@url 欲抓取文件 ，path+filename‘’’def get_file(url):try:cj=cookielib.LWPCookieJar()opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))urllib2.install_opener(opener) req=urllib2.Request(url) operate=opener.open(req) data=operate.read() return data except BaseException, e: print e return None ‘’’保存文件到本地@path 本地路径@file_name 文件名@data 文件内容‘’’def save_file(path, file_name, data):if data == None:returnmkdir(path) if(not path.endswith(&quot;/&quot;)): path=path+&quot;/&quot; file=open(path+file_name, &quot;wb&quot;) file.write(data) file.flush() file.close() #获取文件后缀名print get_file_extension(“123.jpg”);#創建文件目录，并返回该目录#print mkdir(“d:/ljq”)#自动生成一个唯一的字符串，固定长度为36print unique_str()url=“http://qlogo1.store.qq.com/qzone/416501600/416501600/100?0”;save_file(“d:/ljq/”, “123.jpg”, get_file(url))","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"关于Python中的for循环控制语句","slug":"history/tech/5953c4d0c2b92f5665eed9b3","date":"2015-12-27T20:59:13.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b3/","excerpt":"","text":"http://www.cnblogs.com/way_testlife/archive/2010/06/14/1758276.html＃第一个：求 50 - 100 之间的质数import mathfor i in range(50, 100 + 1):for j in range(2, int(math.sqrt(i)) + 1):if i % j == 0:breakelse:print i＃第二个：把else的位置与if处于同一缩进。import mathfor i in range(50, 100 + 1):for j in range(2, int(math.sqrt(i)) + 1):if i % j == 0:breakelse:print i＃第三个：在else后加一个break语句。import mathfor i in range(50, 100 + 1):for j in range(2, int(math.sqrt(i)) + 1):if i % j == 0:breakelse:print ibreak###idea###for语句是python中的循环控制语句。可用来遍历某一对象，还具有一个附带的可选的else块，主要用于处理for语句中包含的break语句。如果for循环未被break终止，则执行else块中的语句。break 在需要时终止for循环continue 跳过位于其后的语句，开始下一轮循环。for语句的格式如下：for &lt;&gt; in &lt;对象集合&gt;：… if &lt;条件&gt;:… break… if &lt;条件&gt;:… continue… &lt;其他语句&gt;…else:… &lt;&gt;…＃关于第一个程序在这里，我解释一下为何导入math模块：导入math模块就是为了开方。如果导入了math模块，然后对 i 进行开方，可以减少运算次数。求一个数是否质数。只需对它进行这样的运算：将这个数n，循环与 2 到 这个n的开平方 进行相除如果这个区间内的所有整数不能整除n，则n为质数。这样，就节省了运算 ‘大于n的开平方 小于n’ 之间这段运算的时间。第二，我解释一下那‘＋1’：int(math.sqrt(i)) 输出的是比 i的开平方 小 的最大整数。比如说：math.sqrt(51) 结果比7大一点，而 int(math.sqrt(51)) 输出的是7而且在range(m, n)这里，range()函数产生的是一个从 m至n-1的整数列表，因而需要‘＋1’，使运算完整。顺便提一下range()函数。range( stop ) # start 可选参数，起始数 ＃stop 终止数，如果 range 只有一个参数x，则产生一个包含 0 至 x-1 的整数列表 ＃step 可选参数，步长 ＃第二个程序else那行不对，如果else放在那个地方的话，一旦有某个数遇到不能整除自己的数，就会输出i，直道找到一个整除自己等于0的数。那样就会连续输出这个数。例如：i = 77，他不是质数，但是也会连续输出5次77，懂不？只不过，只是自己不明白当else与if位于同一缩进的话，它是怎样运行的。你解释得很详细，用‘茅塞顿开’来形容一点都不过分。而且，我必觉得画图是理解循环一个非常好的办法。原帖地址（LZ是本人）：http://tieba.baidu.com/f?kz=798217685","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"python nohup print 不输出","slug":"history/tech/5953c4d0c2b92f5665eed9b2","date":"2015-12-27T20:58:16.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b2/","excerpt":"","text":"nohup python test.py &gt; nohup.out 2&gt;&amp;1 &amp;发现nohup.out中显示不出来python程序中print的东西。这是因为python的输出有缓冲，导致nohup.out并不能够马上看到输出。python 有个-u参数，使得python不启用缓冲。nohup python -u test.py &gt; nohup.out 2&gt;&amp;1 &amp;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"Python的自增运算符","slug":"history/tech/5953c4d0c2b92f5665eed9b1","date":"2015-12-27T20:51:16.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b1/","excerpt":"","text":"今天在写一个合并两个有血list的时候，使用了while循环，不自觉的使用了i++，自测的时候发现有语法错误，还检查了好几遍，觉得应该没啥错误啊，后来google了一把，恍然大悟，原来Python早就放弃了自增运算符！Python哲学的一句话：只用一种方式解决问题，所以你要的自增操作完全可以用i+=1完成，就不需要i++了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"python","slug":"python","permalink":"https://wangxiuwen.github.io/tags/python/"}],"author":"wangxiuwen"},{"title":"ElasticSearch拼音插件elasticsearch-analysis-pinyin使用介绍","slug":"history/tech/5953c4d0c2b92f5665eed9b0","date":"2015-12-27T18:28:46.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9b0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9b0/","excerpt":"","text":"******http://my.oschina.net/xiaohui249/blog/214505**ElasticSearch拼音插件elasticsearch-analysis-pinyin使用介绍摘要 elasticsearch-analysis-pinyin是ElasticSearch的一个分词插件，能够实现拼音分词索引。本文主要介绍该插件的安装和具体使用方法。http://www.oschina.net/search?scope=blog&amp;q=ElasticSearch http://www.oschina.net/search?scope=blog&amp;q=pinyin4j http://www.oschina.net/search?scope=blog&amp;q=插件关于elasticsearch-analysis-pinyin的介绍，就此省略，看完此文后你就会知道它有多神奇。一、安装 安装该插件的前提是你已经安装了ES(ElasticSearch)，如果没有参照http://www.elasticsearch.cn/guide/reference/setup/installation.html。 安装该插件需要2个jar包，一个当然是elasticsearch-analysis-pinyin.jar，另一个是pinyin4j.jar。很多网站都有下载，但是建议亲自编译elasticsearch-analysis-pinyin生成，因为这样不会有版本问题。好，下面介绍编译源码获取上述两个jar包的方法。 1、下载源码（需要安装了git） git clone https://github.com/medcl/elasticsearch-analysis-pinyin.git 2、编译（需要安装了maven） 进入download下来的源码目录：cd elasticsearch-analysis-pinyin，然后执行编译命令：mvn clean install -Dmaven.test.skip。编译成功之后，你将在elasticsearch-analysis-pinyin/target目录中看到elasticsearch-analysis-pinyin的jar包，我编译完成之后，生成的jar包名称为：http://pan.baidu.com/s/1sjFEjYd，然后elasticsearch-analysis-pinyin/lib目录中看到pinyin4j的jar包，我的jar包名称为：http://pan.baidu.com/s/1ntK6cmX。 3、具体安装 在ES_HOME目录下创建一个plugins目录（如果没有的话），然后在plugins目录下创建pinyin目录，将前两个步骤中得到的jar包拷贝到ES_HOME/plugins/pinyin目录下面。ok，插件安装基本完成，easy吧！ 二、如何使用 首先建议重新启动ES服务。1、分词测试(1) 创建一个测试索引： curl -XPUT http://localhost:9200/medcl/ -d’{ “index” : { “analysis” : { “analyzer” : { “pinyin_analyzer” : { “tokenizer” : “my_pinyin”, “filter” : } }, “tokenizer” : { “my_pinyin” : { “type” : “pinyin”, “first_letter” : “none”, “padding_char” : &quot; &quot; } } } }}’(2) 通过浏览器请求分词效果 在浏览器输入http://your_es_host:9200/medcl/_analyze?text=%e5%88%98%e5%be%b7%e5%8d%8e&amp;analyzer=pinyin_analyzer返回结果如下，分词成功，该插件能够轻易的得到中文对应的拼音分词，然后搜索可以对输入的拼音提示对应的中文，提高搜索体验。{“tokens”:}http://static.oschina.net/uploads/space/2014/0331/000104_IkNb_1010775.png2、使用该插件创建索引，实现上图的拼音提示功能 (1) 创建空索引，设置分词器 curl -XPOST http://localhost:9200/medcl/_close (if you had create index ‘medcl’, do this) curl -XPUT http://localhost:9200/medcl/_settings -d’{ “index” : { “analysis” : { “analyzer” : { “pinyin_analyzer” : { “tokenizer” : , “filter” : } }, “tokenizer” : { “my_pinyin” : { “type” : “pinyin”, “first_letter” : “prefix”, “padding_char” : “” } } } }}‘curl -XPOST http://localhost:9200/medcl/_open (if you had create index ‘medcl’, do this)(2) 创建http://www.cnblogs.com/MrHiFiy/archive/2012/12/06/2806226.html，即索引结构以及字段配置curl -XPOST http://localhost:9200/medcl/folks/_mapping -d’{ “folks”: { “properties”: { “name”: { “type”: “multi_field”, “fields”: { “name”: { “type”: “string”, “store”: “no”, “term_vector”: “with_positions_offsets”, “analyzer”: “pinyin_analyzer”, “boost”: 10 }, “primitive”: { “type”: “string”, “store”: “yes”, “analyzer”: “keyword” } } } } }}’(3) 开始索引数据curl -XPOST http://localhost:9200/medcl/folks/andy -d’{“name”:“刘德华”}’(4) 检索数据在浏览器一次输入下面的连接，你将会搜索得到上面索引的那个记录：刘德华。http://localhost:9200/medcl/folks/_search?q=name:刘http://localhost:9200/medcl/folks/_search?q=name:刘德http://localhost:9200/medcl/folks/_search?q=name:liuhttp://localhost:9200/medcl/folks/_search?q=name:ldhhttp://localhost:9200/medcl/folks/_search?q=name:dehuahttp://static.oschina.net/uploads/space/2014/0331/002234_1U9v_1010775.png","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"redmine github地址","slug":"history/tech/5953c4d0c2b92f5665eed9af","date":"2015-12-27T18:26:27.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9af/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9af/","excerpt":"","text":"https://github.com/redmine/redmine","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redmine","slug":"redmine","permalink":"https://wangxiuwen.github.io/tags/redmine/"}],"author":"wangxiuwen"},{"title":"elasticsearch安装配置及中文分词","slug":"history/tech/5953c4d0c2b92f5665eed9ae","date":"2015-12-27T18:17:55.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ae/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ae/","excerpt":"","text":"原文地址http://www.nosqldb.cn/1368777502778.htmlElasticSearch是一个基于Lucene构建的开源，分布式，RESTful搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。支持通过HTTP使用JSON进行数据索引。我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的。安装以windows操作系统和ES0.19.7版本为例：①下载elasticsearch-0.19.7.zip②直接解压至某目录，设置该目录为ES_HOME环境变量③安装JDK，并设置JAVA_HOME环境变量④在windows下，运行 %ES_HOME%\\bin\\elasticsearch.bat即可运行分布式搜索elasticsearch单机与服务器环境搭建 先到http://www.elasticsearch.org/download/下载最新版的elasticsearch运行包，本文写时最新的是0.19.1，作者是个很勤快的人，es的更新很频繁，bug修复得很快。下载完解开有三个包:bin是运行的脚本，config是设置文件，lib是放依赖的包。如果你要装插件的话就要多新建一个plugins的文件夹，把插件放到这个文件夹中。 1.单机环境：单机版的elasticsearch运行很简单，linux下直接 bin/elasticsearch就运行了，windows运行bin/elasticsearch.bat。如果是在局域网中运行elasticsearch集群也是很简单的，只要cluster.name设置一致，并且机器在同一网段下，启动的es会自动发现对方，组成集群。2.服务器环境：如果是在服务器上就可以使用elasticsearch-servicewrapper这个es插件，它支持通过参数，指定是在后台或前台运行es，并且支持启动，停止，重启es服务（默认es脚本只能通过ctrl+c关闭es）。使用方法是到https://github.com/elasticsearch/elasticsearch-servicewrapper下载service文件夹，放到es的bin目录下。下面是命令集合：bin/service/elasticsearch +console 在前台运行esstart 在后台运行esstop 停止esinstall 使es作为服务在服务器启动时自动启动remove 取消启动时自动启动在service目录下有个elasticsearch.conf配置文件，主要是设置一些java运行环境参数，其中比较重要的是下面的参数：#es的home路径，不用用默认值就可以set.default.ES_HOME=#分配给es的最小内存set.default.ES_MIN_MEM=256#分配给es的最大内存set.default.ES_MAX_MEM=1024 启动等待超时时间（以秒为单位）wrapper.startup.timeout=300 关闭等待超时时间（以秒为单位）wrapper.shutdown.timeout=300 ping超时时间(以秒为单位)wrapper.ping.timeout=300安装插件以head插件为例：联网时，直接运行%ES_HOME%\\bin\\plugin -install mobz/elasticsearch-head不联网时，下载elasticsearch-head的zipball的master包，把内容解压到%ES_HOME%\\plugin\\head_site目录下，安装完成，重启服务，在浏览器打开 http://localhost:9200/_plugin/head/ 即可ES概念cluster代表一个集群，集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看es集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。shards代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。replicas代表索引副本，es可以设置多个索引的副本，副本的作用一是提高系统的容错性，当个某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高es的查询效率，es会自动对搜索请求进行负载均衡。recovery代表数据恢复或叫数据重新分布，es在有节点加入或退出时会根据机器的负载对索引分片进行重新分配，挂掉的节点重新启动时也会进行数据恢复。river代表es的一个数据源，也是其它存储方式（如：数据库）同步数据到es的一个方法。它是以插件方式存在的一个es服务，通过读取river中的数据并把它索引到es中，官方的river有couchDB的，RabbitMQ的，Twitter的，Wikipedia的。gateway代表es索引的持久化存储方式，es默认是先把索引存放到内存中，当内存满了时再持久化到硬盘。当这个es集群关闭再重新启动时就会从gateway中读取索引数据。es支持多种类型的gateway，有本地文件系统（默认），分布式文件系统，Hadoop的HDFS和amazon的s3云存储服务。discovery.zen代表es的自动发现节点机制，es是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点的交互。Transport代表es内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、thrift、servlet、memcached、zeroMQ等的传输协议（通过插件方式集成）。分布式搜索elasticsearch中文分词集成elasticsearch官方只提供smartcn这个中文分词插件，效果不是很好，好在国内有medcl大神（国内最早研究es的人之一）写的两个中文分词插件，一个是ik的，一个是mmseg的，下面分别介绍下两者的用法，其实都差不多的，先安装插件，命令行：安装ik插件：plugin -install medcl/elasticsearch-analysis-ik/1.1.0下载ik相关配置词典文件到config目录cd configwget http://github.com/downloads/medcl/elasticsearch-analysis-ik/ik.zip --no-check-certificateunzip ik.ziprm ik.zip安装mmseg插件：bin/plugin -install medcl/elasticsearch-analysis-mmseg/1.1.0下载相关配置词典文件到config目录cd configwget http://github.com/downloads/medcl/elasticsearch-analysis-mmseg/mmseg.zip --no-check-certificateunzip mmseg.ziprm mmseg.zip分词配置ik分词配置，在elasticsearch.yml文件中加上index:analysis:analyzer:ik:alias:type: org.elasticsearch.index.analysis.IkAnalyzerProvider或index.analysis.analyzer.ik.type : “ik”这两句的意义相同mmseg分词配置，也是在在elasticsearch.yml文件中index:analysis:analyzer:mmseg:alias:type: org.elasticsearch.index.analysis.MMsegAnalyzerProvider或index.analysis.analyzer.default.type : “mmseg”mmseg分词还有些更加个性化的参数设置如下index:analysis:tokenizer:mmseg_maxword:type: mmsegseg_type: “max_word”mmseg_complex:type: mmsegseg_type: “complex”mmseg_simple:type: mmsegseg_type: “simple”这样配置完后插件安装完成，启动es就会加载插件。定义mapping在添加索引的mapping时就可以这样定义分词器{“page”:{“properties”:{“title”:{“type”:“string”,“indexAnalyzer”:“ik”,“searchAnalyzer”:“ik”},“content”:{“type”:“string”,“indexAnalyzer”:“ik”,“searchAnalyzer”:“ik”}}}}indexAnalyzer为索引时使用的分词器，searchAnalyzer为搜索时使用的分词器。java mapping代码如下：XContentBuilder content = XContentFactory.jsonBuilder().startObject().startObject(“page”).startObject(“properties”).startObject(“title”).field(“type”, “string”).field(“indexAnalyzer”, “ik”).field(“searchAnalyzer”, “ik”).endObject().startObject(“code”).field(“type”, “string”).field(“indexAnalyzer”, “ik”).field(“searchAnalyzer”, “ik”).endObject().endObject().endObject().endObject()定义完后操作索引就会以指定的分词器来进行分词。附：ik分词插件项目地址：https://github.com/medcl/elasticsearch-analysis-ikmmseg分词插件项目地址：https://github.com/medcl/elasticsearch-analysis-mmseg如果觉得配置麻烦，也可以下载个配置好的es版本，地址如下：https://github.com/medcl/elasticsearch-rtfelasticsearch的基本用法最大的特点：数据库的 database, 就是 index数据库的 table, 就是 tag不要使用browser， 使用curl来进行客户端操作. 否则会出现 java heap ooxx…curl: -X 后面跟 RESTful ： GET, POST …-d 后面跟数据。 (d = data to send)create:指定 ID 来建立新记录。 （貌似PUT， POST都可以）$ curl -XPOST localhost:9200/films/md/2 -d ’{ “name”:“hei yi ren”, “tag”: “good”}’使用自动生成的 ID 建立新纪录：$ curl -XPOST localhost:9200/films/md -d ’{ “name”:“ma da jia si jia3”, “tag”: “good”}’查询：2.1 查询所有的 index, type:$ curl localhost:9200/_search?pretty=true2.2 查询某个index下所有的type:$ curl localhost:9200/films/_search2.3 查询某个index 下， 某个 type下所有的记录：$ curl localhost:9200/films/md/_search?pretty=true2.4 带有参数的查询：$ curl localhost:9200/films/md/_search?q=tag:good{“took”:7,“timed_out”:false,&quot;_shards&quot;:{“total”:5,“successful”:5,“failed”:0},“hits”:{“total”:2,“max_score”:1.0,“hits”:}}2.5 使用JSON参数的查询： （注意 query 和 term 关键字）$ curl localhost:9200/film/_search -d ’{“query” : { “term”: { “tag”:“bad”}}}’update$ curl -XPUT localhost:9200/films/md/1 -d { …(data)… }删除。 删除所有的：$ curl -XDELETE localhost:9200/films看了这篇文章的人还看了：Elasticsearch集成中文分词elasticsearch的中文分词插件ansj分布式搜索elasticsearch中文分词集成elasticsearch安装配置及中文分词ElasticSearch carrot2插件、ik分词插件更新ElasticSearch开发环境搭建相关搜索： elasticsearch安装 elasticsearch配置 elasticsearch中文分词","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"nodejs, http.request超时控制","slug":"history/tech/5953c4d0c2b92f5665eed9ad","date":"2015-12-27T02:28:43.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ad/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ad/","excerpt":"","text":"场景: 使用nodejs请求外部网页,要求规定时间内返回依赖库: http/https方案:由于nodejs自身没有对http连接的可配置的超时控制机制,需要自行增加/**if timeout, emit “timeout” event, abort request, and emit “abort” event for response@param options@param timeout@param callback*/function httpGetWithTimeoutSupport(options, timeout, callback) {var timeoutEvent;var req = http.get(options, function(res) {res.on(“end”, function() {clearTimeout(timeoutEvent);console.log(“end”);})res.on(“close”, function(e) {clearTimeout(timeoutEvent);console.log(“close”);}) res.on(&quot;abort&quot;, function() { console.log(&quot;abort&quot;); }); callback(res); });req.on(“timeout”, function() {console.log(“timeout received”);if (req.res) {req.res.emit(“abort”);} req.abort(); });timeoutEvent = setTimeout(function() {req.emit(“timeout”);}, timeout);return req;}httpGetWithTimeoutSupport(url.parse(“http://www.google.com”), 1000, function(res){var data = “”;res.on(“data”, function(d) {data += d;});res.on(“end”, function() {console.log(data);})});nodejs自带一个默认的2分钟的强制超时, 见http.js;这个超时会导致close事件发生,错误代码为&quot;timeout&quot;. 同时超时是针对连接而非单个的请求的(一个连接上有许多请求).","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"elasticsearches同步数据river jdbc插件es操作数据库es操作mysql","slug":"history/tech/5953c4d0c2b92f5665eed9ac","date":"2015-12-26T03:43:13.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ac/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ac/","excerpt":"","text":"摘录：我用elasticsearch-river-jdbc添加了一个mysql的数据源。代码如下：curl -XPUT ‘localhost:9200/_river/bankinfo/_meta’ -d ‘{“strategy” : “simple”,“interval” : 0,“flush_interval” : “5s”,“type” : “jdbc”,“jdbc”: {“driver”: “com.mysql.jdbc.Driver”,“url”: “jdbc:mysql://192.168.1.91:3306/game”,“user”: “root”,“password”: “111”,“sql”: “select * from bank_info”,“interval”:“1800”,（秒）“index” : “bank_info_db”,“type” : “bank_info_table”}}’select id as “_id” from bank_info 这样的话 es中的_id就不会在每次同步的时候增加了，那么数据也就不会累加","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"动态映射(Dynamic Mapping)","slug":"history/tech/5953c4d0c2b92f5665eed9a8","date":"2015-12-25T04:54:20.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a8/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a8/","excerpt":"","text":"动态映射(Dynamic Mapping)当ES在文档中碰到一个以前没见过的字段时，它会利用动态映射来决定该字段的类型，并自动地对该字段添加映射。有时这正是需要的行为，但有时不是。你或许不知道在以后你的文档中会添加哪些字段，但是你想要它们能够被自动地索引。或许你只是想要忽略它们。或者 - 尤其当你将ES当做主要的数据存储使用时 - 大概你会希望这些未知的字段会抛出异常来提醒你注意这一问题。幸运的是，你可以通过dynamic设置来控制这一行为，它能够接受以下的选项：true：默认值。动态添加字段false：忽略新字段strict：如果碰到陌生字段，抛出异常dynamic设置可以适用在根对象上或者object类型的任意字段上。你应该默认地将dynamic设置为strict，但是为某个特定的内部对象启用它：PUT /my_index{** “mappings”: {**** “my_type”: {**** “dynamic”: “strict”, **** “properties”: {**** “title”: { “type”: “string”},**** “stash”: {**** “type”: “object”,**** “dynamic”: true **** }**** }**** }**** }**}在my_type对象上如果碰到了未知字段则会抛出一个异常。 在stash对象上会动态添加新字段。通过以上的映射，你可以向stash添加新的可搜索的字段：PUT /my_index/my_type/1{** “title”: “This doc adds a new field”,**** “stash”: {**** “new_field”: “Success!”**** }**}但是，如果在顶层对象上试图添加新字段则会失败：PUT /my_index/my_type/1{** “title”: “This throws a StrictDynamicMappingException”,**** “new_field”: “Fail!”**}NOTE将dynamic设置为false并不会改变_source字段的内容 - _source字段仍然会保存你索引的整个JSON文档。只不过是陌生的字段将不会被添加到映射中，以至于它不能被搜索到。自定义动态映射如果你知道你需要动态的添加的新字段，那么你也许会启用动态映射。然而有时动态映射的规则又有些不够灵活。幸运的是，你可以调整某些设置来让动态映射的规则更加适合你的数据。date_detection当ES碰到一个新的字符串字段时，它会检查该字串是否含有一个可被识别的日期，比如2014-01-01。如果存在，那么它会被识别为一个date类型的字段。否则会将它作为string进行添加。有时这种行为会导致一些问题。如果你想要索引一份这样的文档：{ “note”: “2014-01-01” }假设这是note字段第一次被发现，那么根据规则它会被作为date字段添加。但是如果下一份文档是这样的：{ “note”: “Logged out” }这时该字段显然不是日期，但是已经太迟了。该字段的类型已经是日期类型的字段了，因此这会导致一个异常被抛出。可以通过在根对象上将date_detection设置为false来关闭日期检测：PUT /my_index{** “mappings”: {**** “my_type”: {**** “date_detection”: false**** }**** }**}有了以上的映射，一个字符串总是会被当做string类型。如果你需要一个date字段，你需要手动地添加它。NOTEES中识别日期的方法可以通过dynamic_date_formats设置改变。dynamic_templates通过dynamic_templates，你可以拥有对新字段的动态映射规则拥有完全的控制。你设置可以根据字段名称或者类型来使用一个不同的映射规则。每个模板都有一个名字，可以用来描述这个模板做了什么。同时它有一个mapping用来指定具体的映射信息，和至少一个参数(比如match)用来规定对于什么字段需要使用该模板。模板的匹配是有顺序的 - 第一个匹配的模板会被使用。比如我们可以为string字段指定两个模板：es：以_es结尾的字段应该使用spanish解析器en：其它所有字段使用english解析器我们需要将es模板放在第一个，因为它相比能够匹配所有字符串字段的en模板更加具体：PUT /my_index{** “mappings”: {**** “my_type”: {**** “dynamic_templates”: **}}}match_mapping_type允许你只对特定类型的字段使用模板，正如标准动态映射规则那样，比如string，long等。match参数只会匹配字段名，path_match参数用于匹配对象中字段的完整路径，比如address.*.name可以匹配如下字段：{** “address”😗*** “city”😗*** “name”: “New York”**** }**** }**}unmatch和path_unmatch模式能够用来排除某些字段，没有被排除的字段则会被匹配。更多的配置选项可以在根对象的参考文档中找到。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticSearch _all","slug":"history/tech/5953c4d0c2b92f5665eed9a7","date":"2015-12-25T04:47:30.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a7/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a7/","excerpt":"","text":"ElasticSearch默认为每个被索引的文档都定义了一个特殊的域 - ‘_all’，它自动包含被索引文档中一个或者多个域中的内容， 在进行搜索时，如果不指明要搜索的文档的域，ElasticSearch则会去搜索_all域。_all带来搜索方便，其代价是增加了系统在索引阶段对CPU和存储空间资源的开销。默认情况，ElasticSarch自动使用_all所有的文档的域都会被加到_all中进行索引。可以使用&quot;_all&quot; : {“enabled”:false} 开关禁用它。如果某个域不希望被加到_all中，可以使用 “include_in_all”:false。例如：view plaincopy在CODE上查看代码片派生到我的代码片{“person”: {“_all”: { “enabled”: true }“properties”: {“name”: {“type”: “object”,“dynamic”: false,“properties”: {“first”: {“type”: “string”,“store”: true,“include_in_all”: false},“last”: {“type”: “string”,“index”: “not_analyzed”}}},“address”: {“type”: “object”,“include_in_all”: false,“properties”: {“first”: {“properties”: {“location”: {“type”: “string”,“store”: true,“index_name”: “firstLocation”}}},“last”: {“properties”: {“location”: {“type”: “string”}}}}},“simple1”: {“type”: “long”,“include_in_all”: true},“simple2”: {“type”: “long”,“include_in_all”: false}}}}查询时，_all和其它域一样使用：view plaincopy在CODE上查看代码片派生到我的代码片GET /profiles/_search{“query”: {“match”: {“_all”: “food”}}}或者在不提供搜索域的情况下，默认会搜索_all，例如：view plaincopy在CODE上查看代码片派生到我的代码片GET /profiles/_search{“query”: {“query_string”: {“query”: “food”}}}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"Elasticsearch的mapping","slug":"history/tech/5953c4d0c2b92f5665eed9a6","date":"2015-12-25T03:59:14.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a6/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a6/","excerpt":"","text":"Elasticsearch的mapping一旦创建，只能增加字段，而不能修改已经mapping的字段。但现实往往并非如此啊，有时增加一个字段，就好像打了一个补丁，一个可以，但是越补越多，最后自己都觉得惨不忍睹了。怎么办？？这里有一个方法修改mapping，那就是重新建立一个index，然后创建一个新的mapping。你可能会问，这要是在生产环境，可行吗？答案是，如果你一开始就采取了合适的设计，这个完全是可以做到平滑过渡的。采取什么合理设计呢？就是我们的程序访问索引库时，始终使用同义词来访问，而不要使用真正的indexName。在reindex完数据之后，修改之前的同义词即可。明白了吗？参考上面的思路，我们来一步一步做。step1、创建一个索引，这个索引的名称最好带上版本号，比如my_index_v1,my_index_v2等。step2、创建一个指向本索引的同义词。curl -XPOST localhost:9200/_aliases -d ’{“actions”:}’此时，你可以通过同义词my_index访问。包括创建索引，删除索引等。step3，需求来了，需要更改mapping了，此时，你需要创建一个新的索引，比如名称叫my_index_v2（版本升级）.，在这个索引里面创建你新的mapping结构。然后，将新的数据刷入新的index里面。在刷数据的过程中，你可能想到直接从老的index中取出数据，然后更改一下格式即可。如何遍历所有的老的index数据，请参考 这里 。step4，修改同义词。将指向v1的同义词，修改为指向v2。http接口如下：curl -XPOST localhost:9200/_aliases -d ’{“actions”:}’step5，删除老的索引。curl -XDELETE localhost:9200/my_index_v1除此之外，还有几个其他的方法也可以更改mapping。1、修改程序，添加字段。就是说，你可以在mapping中增加一个新的字段，然后你对新的字段进行访问统计搜索。这个就要修改两个地方，一个是修改mapping增加字段，还有就是修改你的程序，把字段改成新的字段。2、更改字段类型为multi_field。multi_field允许为一个字段设置多个数据类型。应用multi_field的一个最典型的场景是：一个类型定义为analyed，这个字段可以被搜索到，一个类型定义为不分词，这个字段用于排序。任何字段都可以被更新为multi_field（类型为object和nested的类型除外）。假设现在有一个字段，名字叫created，类型现在为string。{ “created”: { “type”: “string”} }我们可以将它增加一种类型，使他既能被当做字符串又能当做日期型。curl -XPUT localhost:9200/my_index/my_type/_mapping -d ’{“my_type”: {“properties”: {“created”: {“type”: “multi_field”,“fields”: {“created”: { “type”: “string” },“date”: { “type”: “date” }}}}}}’采用标准的重建索引方式的时候，我们推荐大家为每一个type都建立一个索引同义词，即便在同一个索引库中的多个type，也推荐使用建立一个同义词来访问。即一个index里面包含一个type，因为在elasticsearch中，跨index查询数据是很方便的。这样，我们就可以在reindex一个type后，立即将type生效，而不是将index下面所有的type都重建完后，同义词才能生效。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"Ubuntu 怎么在右键添加打开终端","slug":"history/tech/5953c4d0c2b92f5665eed9a5","date":"2015-12-25T02:48:37.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a5/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a5/","excerpt":"","text":"以前用过Linux的Red Hat版本，可以在任何目录下右键打开终端，很是方便。现在改用Ubuntu，突然没了这个功能，觉得很不方便，于是在网上搜索了解决方法，有两种方法可以达到目的。方法一：搜索nautilus-open-terminal安装命令行：sudo apt-get install nautilus-open-terminal重新加载文件管理器nautilus -q或注销再登录即要使用方法二：进入主目录的.gnome2/nautilus-scripts目录。新建一个文件，文件名任意（这个文件名会显示在右键菜单里，最好是通俗易懂的，比如“打开终端”或“open-terminal”），文件内容如下。#!/bin/bash This script opens a gnome-terminal in the directory you select. Distributed under the terms of GNU GPL version 2 or later Install in ~/.gnome2/nautilus-scripts or ~/Nautilus/scripts You need to be running Nautilus 1.0.3+ to use scripts. When a directory is selected, go there. Otherwise go to current directory. If more than one directory is selected, show error.if ; thenset $NAUTILUS_SCRIPT_SELECTED_FILE_PATHSif ; thendestination=&quot;$1&quot; Go to file’s directory if it’s a fileif ; thendestination=&quot;dirname &quot;$destination&quot;&quot;fielsezenity --error --title=“Error - Open terminal here”–text=“You can only select one directory.”exit 1fielsedestination=&quot;echo &quot;$NAUTILUS_SCRIPT_CURRENT_URI&quot; | sed 's/^file:////'&quot;fi It’s only possible to go to local directoriesif [ -n “echo &quot;$destination&quot; | grep '^+:'” ]; thenzenity --error --title=“Error - Open terminal here”–text=“Only local directories can be used.”exit 1ficd “$destination”exec x-terminal-emulator添加完后，把此文件加上可执行的权限。chmod +x 文件以上只是总结的别人的方法，方便自己使用。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"elasticsearch multi field type","slug":"history/tech/5953c4d0c2b92f5665eed9ab","date":"2015-12-24T20:44:21.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9ab/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9ab/","excerpt":"","text":"multi_field类型允许映射为几个有相同值的core_types。这样就很方便，例如，当想要映射一个字符串类型，它分析的时候既可以不分析字符串，又可以分析字符串。实现了一对多的关系。例如，字符串”abc def”,不分析的时候为”abc def”，分析的时候就为”abc”,”def”.{“tweet” : {“properties” : {“name” : {“type” : “multi_field”,“fields” : {“name” : {“type” : “string”, “index” : “analyzed”},“untouched” : {“type” : “string”, “index” : “not_analyzed”}}}}}}上面的例子显示name 字段如何实现multi_field。它是一个简单的字符串类型，它被映射了2次。一次被analyzed 为name，一次被not_analyzed 为untouched.accessing fields 访问字段当multi_field映射，具有相同的名称属性的字段被视为它没有被映射为multi field。那是一个默认字段，它可以定期访问，例如使用名称或使用类型的导航tweet.name。path属性可以控制非默认字段如何可以被访问。如果路径属性设置为full，这是默认设置，所有非默认的前缀字段是属性的名称，可以通过它们的完整路径使用导航符号访问：name.untouched，或使用导航类型的符号tweet.name.untouched。如果path的属性设置为just_name,实际上该字段的前缀没有被使用。just_name设置，其中包括多字段的索引内容允许用相同的名字。下面的例子中，first_name 和 last_name 字段的内容可以被any_name或 tweet.any_name访问。{“tweet” : {“properties”: {“first_name”: {“type”: “multi_field”,“path”: “just_name”,“fields”: {“first_name”: {“type”: “string”, “index”: “analyzed”},“any_name”: {“type”: “string”,“index”: “analyzed”}}},“last_name”: {“type”: “multi_field”,“path”: “just_name”,“fields”: {“last_name”: {“type”: “string”, “index”: “analyzed”},“any_name”: {“type”: “string”,“index”: “analyzed”}}}}}}include in allThe include_in_all setting on the “default” field allows to control if the value of the field should be included in the _all field. Note, the value of the field is copied to _all, not the tokens. So, it only makes sense to copy the field value once. Because of this, the include_in_all setting on all non-default fields is automatically set to false and can’t be changed.如果字段的值包含_all字段，include_in_all设置在默认字段时，允许控制。注意，字段的值被拷贝到_all,没有分词。所以，它才是有意义的拷贝字段值。因此，include_in_all 设置在所有non-default 字段是自动设置为false，而且不能改变。mergingWhen updating mapping definition using the put_mapping API, a core type mapping can be “upgraded” to a multi_field mapping. This means that if the old mapping has a plain core type mapping, the updated mapping for the same property can be a multi_field type, with the default field being the one being replaced.当使用put_mapping API更新映射时，一个core 类型映射可以被”更新”在一个multi_field 映射上。这意味着，如果老的映射有一个普通的核心类型(core type)映射，更新为multi_field类型时，core type作为multi_field默认字段 。参考文章：http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-multi-field-type.html本文固定链接: http://www.chepoo.com/elasticsearch-multi-field-type.html | IT技术精华网","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"hosts 文件位置","slug":"history/tech/5953c4d0c2b92f5665eed9aa","date":"2015-12-24T19:40:24.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9aa/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9aa/","excerpt":"","text":"依次双击打开“windows”→“System32”→“drivers”→“etc”","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"elasticsearch三个重要的优化","slug":"history/tech/5953c4d0c2b92f5665eed9a9","date":"2015-12-24T18:22:45.000Z","updated":"2020-11-29T01:42:08.751Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a9/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a9/","excerpt":"","text":"1、内存优化在bin/elasticsearch.in.sh中进行配置修改配置项为尽量大的内存：ES_MIN_MEM=8gES_MAX_MEM=8g两者最好改成一样的，否则容易引发长时间GC（stop-the-world）elasticsearch默认使用的GC是CMS GC如果你的内存大小超过6G，CMS是不给力的，容易出现stop-the-world建议使用G1 GC注释掉：[code]JAVA_OPTS=”JAVA_OPTS -XX:+UseParNewGC” JAVA_OPTS=”JAVA_OPTS -XX:+UseConcMarkSweepGC”JAVA_OPTS=”JAVA_OPTS -XX:CMSInitiatingOccupancyFraction=75″ JAVA_OPTS=”JAVA_OPTS -XX:+UseCMSInitiatingOccupancyOnly”[/code]修改为：[code]JAVA_OPTS=”JAVA_OPTS -XX:+UseG1GC” JAVA_OPTS=”JAVA_OPTS -XX:MaxGCPauseMillis=200″[/code]如果G1 GC优点是减少stop-the-world在几率，但是CPU占有率高。需要更优化的性能，你可以参考http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html2、合理配置主节点和数据节点配置文件：conf/elasticsearch.yamlnode.master: truenode.data: true1) 当master为false，而data为true时，会对该节点产生严重负荷；2) 当master为true，而data为false时，该节点作为一个协调者；3) 当master为false，data也为false时，该节点就变成了一个负载均衡器。3、设置合理的刷新时间建立的索引，不会立马查到，这是为什么elasticsearch为near-real-time的原因需要配置index.refresh_interval参数，默认是1s。你可以像http://zhaoyanblog.com/archives/299.html文件中一样，调用接口配置也可以直接写到conf/elasticsearch.yaml文件中index.refresh_interval：1s这样所有新建的索引都使用这个刷新频率。除非注明，http://zhaoyanblog.com/文章均为原创，转载请以链接形式标明本文地址本文地址：http://zhaoyanblog.com/archives/319.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"马哥linux 基础","slug":"history/tech/5953c4d0c2b92f5665eed9a1","date":"2015-12-24T02:14:52.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a1/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a1/","excerpt":"","text":"计算机体系结构：运算器控制器存储器，内存，编址输出设备输入设备POST：BIOS自举程序：指令+数据RAM：ROM：硬件架构：ARMx86x64安腾alphaUltraSparcPowerM68000, M68KPowerPCOS:WindowsLinuxUnixHP-UXSolarisAIXSCO UNIXUnixwareOS/2内核功能：进程管理内存管理文件系统网络功能硬件驱动安全机制批处理系统jobs1$$$$$$jobs2jobs2jobs2$$$$$$$GE, Bell, MITMainFrame汇编语言：MulticsKen,Space TravelDEC:PDP-11, PDP-7VAX --&gt; vmsUnics --&gt; UnixB–&gt;CPDP-Bill Joy: BSRGBSD: Berkeley System DistributionSystem V81, Microsoft，XenixCP/M–&gt;DOSjobsXerox: 复印机PARKFreeBSDOpenBSDNetBSDSun MicroSystemSun OS --&gt; SolarisCSHWindows NT ServerAndrew: MinixLinus: Linux80, Stallman, FreedomGNU: GNU is Not UnixGPL: General Public LicenseLGPL: LesserGPLv2GPLv3BSDApache开源：开放源代码自由：自由获取，自由修改，自由学习Emacs: 文本编辑器gcc: GNU C Complierbash:Linux：glibc, gcc,GNU/Linux源代码： C --&gt; 编译成二进制 (交叉编译)ABI：Application Binary InterfaceRedHatSLSDebianSUSE --&gt; Novell (Netware), OpenSUSE发行商： releasekernel: 2wDebian, dptRedHat, rpmUbuntu: MintCentOS: Community ENTerprise OSFedora:Mandrivalinux ip=172.16.X.1 netmask=255.255.0.0 gateway=172.16.0.1 dns=172.16.0.1 ks=http://172.16.0.1/class.cfgLinux: 0.1, 1.0, 2.0, 2.2, 2.4, 2.6, 3.0, 3.7RHEL 3.0, 4.0, 5.0, 6.0Linux的基本原则：1、由目的单一的小程序组成；组合小程序完成复杂任务；2、一切皆文件；3、尽量避免捕获用户接口；4、配置文件保存为纯文本格式；GUI接口：CLI接口：命令提示符，prompt, bash(shell)#: root$: 普通用户命令：命令格式：命令 选项 参数选项：短选项： -多个选项可以组合：-a -b = -ab长选项： –参数：命令的作用对象使用凭证：root, redhat虚拟终端(terminal)：Ctrl+Alt+F1-F6GUI:Gnome: CKDE: C++XFaceCLI:shbashcshzshkshtcshroot, student, vistorsu: switch user su 用户名 passwd密码复杂性规则：10^636^662^6100^6Linuxedu@126.com1、使用4种类别字符中至少3种；2、足够长，大于7位；3、使用随机字符串；4、定期更换；5、循环周期足够大；123456123456RHCE+RHCA+shell编程+MySQL+Web集群+NoSQL+Hadoop+Hbase+Openstack172.16.100.177192.168.0.1GNU: GNU is Not Unix.GPL: General Public License，通用公共许可证，版权Copyright, Copyleft开源协定LGPL：lesserGPLv2GPLv3Shell:GUI: Graphic User InterfaceWindowsX-WindowGnomeKDEXfaceCLI: Command Line InterfaceshbashcshkshzshtcshGoogle:linux filetype:pdflinux site:ibm.comgoogle hackIDE:login:用户名：用户ID认证机制：Authentication授权：Authorization审计：Audition (日志)prompt,命令提示符:命令：magic number: 魔数shebang#!/bin/bash command options… arguments…选项：短选项长选项参数：list: ls列出，列表目录：文件，路径映射路径：从指定起始点到目的地所经过位置文件系统：file system列出指定路径下的文件目录：working directory, current directorypwd: Printing Working directoryls-l：长格式文件类型：-：普通文件 (f)d: 目录文件b: 块设备文件 (block)c: 字符设备文件 (character)l: 符号链接文件(symbolic link file)p: 命令管道文件(pipe)s: 套接字文件(socket)文件权限：9位，每3位一组，每一组：rwx(读，写，执行), r–文件硬链接的次数文件的属主(owner)文件的属组(group)文件大小(size)，单位是字节时间戳(timestamp)：最近一次被修改的时间访问:access修改:modify，文件内容发生了改变改变:change，metadata，元数据-h：做单位转换-a: 显示以.开头的隐藏文件. 表示当前目录… 表示父目录-A-d: 显示目录自身属性-i: index node, inode-r: 逆序显示-R: 递归(recursive)显示cd: change directory家目录，主目录, home directorycd ~USERNAME: 进入指定用户的家目录cd -:在当前目录和前一次所在的目录之间来回切换命令类型：内置命令(shell内置)，内部，内建外部命令：在文件系统的某个路径下有一个与命令名称相应的可执行文件环境变量：命名的内存空间变量赋值NAME=JerryPATH: 使用冒号分隔的路径 O(1) type: 显示指定属于哪种类型date：时间管理Linux: rtc硬件时钟 系统时钟 获得命令的使用帮助：内部命令：help COMMAND外部命令：COMMAND --help命令手册：manualman COMMANDwhatis COMMAND分章节：1：用户命令(/bin, /usr/bin, /usr/local/bin)2：系统调用3：库用户4：特殊文件(设备文件)5：文件格式(配置文件的语法)6：游戏7：杂项(Miscellaneous)8: 管理命令(/sbin, /usr/sbin, /usr/local/sbin)&lt;&gt;：必选[]：可选…：可以出现多次|：多选一{}：分组MAN：NAME：命令名称及功能简要说明SYNOPSIS：用法说明，包括可用的选项DESCRIPTION：命令功能的详尽说明，可能包括每一个选项的意义OPTIONS：说明每一个选项的意义FILES：此命令相关的配置文件BUGS：EXAMPLES：使用示例SEE ALSO：另外参照翻屏：向后翻一屏：SPACE向前翻一屏：b向后翻一行：ENTER向前翻一行：k查找：/KEYWORD: 向后n: 下一个N：前一个?KEYWORD：向前n: 下一个N：前一个q: 退出在线文档：info COMMAND文档：/usr/share/docgoogleapache, hadoop练习：使用date单独获取系统当前的年份、月份、日、小时、分钟、秒hwclock-w:-s:cal: calendar练习：1、echo是内部命令还是外部命令？2、其作用？3、如何显示“The year is 2013. Today is 26.”为两行？转义，逃逸练习：1、printf是内部命令还是外部命令？2、其作用？3、如何显示“The year is 2013. Today is 26.”为两行？file命令及其用法。Windows: PELinux: ELF文件系统：rootfs: 根文件系统FHS：Linux/boot: 系统启动相关的文件，如内核、initrd，以及grub(bootloader)/dev: 设备文件设备文件：块设备：随机访问，数据块字符设备：线性访问，按字符为单位设备号：主设备号（major）和次设备号（minor）/etc：配置文件/home：用户的家目录，每一个用户的家目录通常默认为/home/USERNAME/root：管理员的家目录；/lib：库文件静态库, .a动态库， .dll, .so (shared object)/lib/modules：内核模块文件/media：挂载点目录，移动设备/mnt：挂载点目录，额外的临时文件系统/opt：可选目录，第三方程序的安装目录/proc：伪文件系统，内核映射文件/sys：伪文件系统，跟硬件设备相关的属性映射文件/tmp：临时文件, /var/tmp/var：可变化的文件/bin: 可执行文件, 用户命令/sbin：管理命令/usr：shared, read-only/usr/bin/usr/sbin/usr/lib/usr/local：/usr/local/bin/usr/local/sbin/usr/local/lib命名规则：1、长度不能超过255个字符；2、不能使用/当文件名3、严格区分大小写相对路径：绝对路径：文件管理目录管理lscdpwdmkdir：创建空目录-p:-v: verbose/root/x/y/z/mnt/test/x/m,ymkdir -pv /mnt/test/x/m /mnt/test/ymkdir -pv /mnt/test/{x/m,y}~USERNAME命令行展开：/mnt/test2/a_b, a_c, d_b, d_c(a+d)(b+c)=ab+ac+db+dc{a,d}_{b,c} tree：查看目录树删除目录：rmdir (remove directory)删除空目录-p文件创建和删除 touch-a -m -t -c stat创建文件，可以使用文件编辑器ASCII:128不同的字符：二进制：2^6=0,632^7=0,127000 0000 - 111 1111ASCII:0000 1001: t2^16: 65536标准：GB18030, GBK, GB2312，Unicode0000 1001 0000 1110：上， 卫nano删除文件：rm-i-f-rrm -rf /练习：1、创建目录(1)在/mnt下创建boot和sysroot；(2)在/mnt/boot下创建grub；(3)在/mnt/sysroot下创建proc, sys, bin, sbin, lib, usr, var, etc, dev, home, root, tmpa)在/mnt/sysroot/usr下创建bin, sbin, libb)在/mnt/sysroot/lib下创建modulesc)在/mnt/sysroot/var下创建run, log, lockd)在/mnt/sysroot/etc下创建init.d复制和移动文件cp： copycp SRC DEST-r-i-f-p-a：归档复制，常用于备份cp file1 file2 file3一个文件到一个文件多个文件到一个目录cp /etc/{passwd,inittab,rc.d/rc.sysinit} /tmp/mv: move移动文件mv SRC DESTmv -t DEST SRCinstall-d DIRECOTRY … ：创建目录SRC DESTinstall -t DIRECTORY SRC…作业1：1、创建目录/backup mkdir -v /backup2、复制目录/etc至/backup目录中，并重命名为“etc-当前日期”，如etc-2013-02-26；要求保留文件原来的属性，保持链接文件；cp-r-p-d cp -a /etc /backup/etc-2013-02-28命令替换3、复制文件/etc/inittab为/tmp/inittab.new，并删除inittab.new文件的后两行； cp /etc/inittab /tmp/inittab.new nano /tmp/inittab.new作业2：1、思考：ls命令是否可以显示某目录的整体大小，即包括其内部的所有文件的整体大小？2、通过帮助手册，学习使用du命令； du-s -h 3、通过帮助，学习read命令；变量：内存空间，有名称变量赋值：变量替换作业3：描述GPL, BSD, Apache三个开源协定的大体联系及区别。自由软件开源协定，版权描述作业4：1、如何获取Linux当前最新的内核版本号？www.kernel.org2、列出你所了解的Linux发行版，并说明其跟Linux内核的关系。Linux, GNU: GNU/Linux, 源代码发行版：Fedora, RedHat(CentOS), SUSE, Debian(Ubuntu, Mint), Gentoo, LFS(Linux From Scratch) C, Tom, AMD, Jerry,RedHat: 通用格式奔腾：运行程序设备管理软件管理进程管理网络管理目录管理：ls、cd、pwd、mkdir、rmdir、tree文件管理：touch、stat、file、rm、cp、mv、nano日期时间：date、clock、hwclock、cal查看文本：cat、tac、more、less、head、tailcat：连接并显示-n-ECtrl+c分屏显示：more、lessmore: 向后翻less:head:查看前n行tail:查看后n行-ntail -f: 查看文件尾部，不退出，等待显示后续追加至此文件的新内容；文本处理：cut、join、sed、awkdatabase:数据库关系型数据库：表：二维表文本文件：Tom:23:male:2013/05/06cut:-d: 指定字段分隔符，默认是空格-f: 指定要显示的字段-f 1,3-f 1-3文本排序：sort-n：数值排序-r: 降序-t: 字段分隔符-k: 以哪个字段为关键字进行排序-u: 排序后相同的行只显示一次-f: 排序时忽略字符大小写uniq:-c: 显示文件中行重复的次数-d: 只显示重复的行文本统计：wc (word count)-l-w-c-L字符处理命令：tr —— 转换或删除字符tr … SET1-d: 删除出现在字符集中的所有字符tr ab ABbash及其特性：shell: 外壳GUI：Gnome, KDE, XfceCLI: sh, csh, ksh, bash, tcsh, zshroot, student程序：进程进程：在每个进程看来，当前主机上只存在内核和当前进程进程是程序的副本，进程是程序执行实例用户工作环境：bash:#$tom, jerry shell，子shellbash–bashbash:1、命令历史、命令补全2、管道、重定向3、命令别名4、命令行编辑5、命令行展开6、文件名通配7、变量8、编程命令行编辑：光标跳转：Ctrl+a：跳到命令行首Ctrl+e：跳到命令行尾Ctrl+u: 删除光标至命令行首的内容Ctrl+k: 删除光标至命令行尾的内容Ctrl+l: 清屏命令历史：查看命令历史：history-c：清空命令历史-d OFFSET : 删除指定位置的命令-w：保存命令历史至历史文件中环境变量PATH：命令搜索路径HISTSIZE: 命令历史缓冲区大小命令历史的使用技巧：!n：执行命令历史中的第n条命令；!-n:执行命令历史中的倒数第n条命令；!!: 执行上一条命令；!string：执行命令历史中最近一个以指定字符串开头的命令!$:引用前一个命令的最后一个参数;Esc, .Alt+.命令补全：PATH:路径补全：文本相关的命令查看：cat, tac, more, less, head, tail统计：wc处理：tr, cut, join排序：sortuniqbash特性：命令行编辑：命令历史：history-c-w-dHISTSIZE~/.bash_history!n, !-n, !!, !string, !$命令补全，路径补全命令补全：搜索PATH环境变量所指定的每个路径下以我们给出的字符串开头的可执行文件，如果多于一个，两次tab，可以给出列表；否则将直接补全；路径补全：搜索我们给出的起始路径下的每个文件名，并试图补全；命令别名alias CMDALIAS='COMMAND ’在shell中定义的别名仅在当前shell生命周期中有效；别名的有效范围仅为当前shell进程；ualias CMDALIAS\\CMD命令替换: $(COMMAND), 反引号：COMMAND把命令中某个子命令替换为其执行结果的过程file-2013-02-28-14-53-31.txtbash支持的引号：``: 命令替换“”: 弱引用，可以实现变量替换‘’: 强引用，不完成变量替换文件名通配, globbing*: 任意长度的任意字符?：任意单个字符[]：匹配指定范围内的任意单个字符, , , , , ,：空白字符：标点符号：小写字母: 大写字母: 大小写字母: 数字: 数字和大小写字母 man 7 glob: 匹配指定范围之外的任意单个字符[][][^]练习：1、创建a123, cd6, c78m, c1 my, m.z, k 67, 8yu, 789等文件；注意，以上文件是以逗号隔开的，其它符号都是文件名的组成部分；2、显示所有以a或m开头的文件；ls *3、显示所有文件名中包含了数字的文件；ls **ls []4、显示所有以数字结尾且文件名中不包含空白的文件；ls [^] ???5、显示文件名中包含了非字母或数字的特殊符号的文件；ls [^]用户、组、权限安全上下文(secure context)：权限：r, w, x文件：r：可读，可以使用类似cat等命令查看文件内容；w：可写，可以编辑或删除此文件；x: 可执行，eXacutable，可以命令提示符下当作命令提交给内核运行；目录：r: 可以对此目录执行ls以列出内部的所有文件；w: 可以在此目录创建文件；x: 可以使用cd切换进此目录，也可以使用ls -l查看内部文件的详细信息；rwx:r–:只读r-x:读和执行—：无权限0 000 —：无权限1 001 --x: 执行2 010 -w-: 写3 011 -wx: 写和执行4 100 r–: 只读5 101 r-x: 读和执行6 110 rw-: 读写7 111 rwx: 读写执行755：rwxr-xr-xrw-r-----: 640660:rw-rw----rwxrwxr-x:775用户：UID, /etc/passwd组：GID, /etc/group影子口令：用户：/etc/shadow组：/etc/gshadow用户类别：管理员：0普通用户： 1-65535系统用户：1-499一般用户：500-60000用户组类别：管理员组：普通组：系统组：一般组：用户组类别：私有组：创建用户时，如果没有为其指定所属的组，系统会自动为其创建一个与用户名同名的组基本组：用户的默认组附加组，额外组：默认组以外的其它组进程：tom tom对象：rwxrw-r-- jerry tom a.txttom: lsrwxr-xr-x root root /bin/lsls/etc/passwdaccount: 登录名password: 密码UID：GID：基本组IDcomment: 注释HOME DIR：家目录SHELL：用户的默认shell/etc/shadowaccount: 登录名encrypted password: 加密的密码加密方法：对称加密：加密和解密使用同一个密码公钥加密：每个密码都成对儿出现，一个为私钥(secret key)，一个为公钥(public key)单向加密，散列加密：提取数据特征码，常用于数据完整性校验1、雪崩效应2、定长输出MD5：Message Digest, 128位定长输出SHA1：Secure Hash Algorithm, 160位定长输出useradd USERNAMEgroupadd GRPNAME用户管理：useradd, userdel, usermod, passwd, chsh, chfn, finger, id, chage组管理：groupadd, groupdel, groupmod, gpasswd权限管理：chown, chgrp, chmod, umask/etc/passwd:用户名：密码：UID:GID：注释：家目录：默认SHELL/etc/group:组名：密码：GID:以此组为其附加组的用户列表/etc/shadow：用户名：密码：最近一次修改密码的时间：最短使用期限：最长使用期限：警告时间：非活动时间：过期时间：用户管理：useradd, userdel, usermod, passwd, chsh, chfn, finger, id, chageuseradd USERNAME-u UID-g GID（基本组）-G GID,… （附加组）-c “COMMENT”-d /path/to/directory-s SHELL-m -k-M-r: 添加系统用户/etc/login.defs环境变量：PATHHISTSIZESHELL/etc/shells：指定了当前系统可用的安全shelluserdel:userdel USERNAME-r: 同时删除用户的家目录id：查看用户的帐号属性信息-u-g-G-nfinger: 查看用户帐号信息finger USERNAME修改用户帐号属性：usermod-u UID-g GID-a -G GID：不使用-a选项，会覆盖此前的附加组；-c-d -m：-s-l-L：锁定帐号-U：解锁帐号chsh: 修改用户的默认shellchfn：修改注释信息密码管理：passwd–stdin-l-u-d: 删除用户密码pwck：检查用户帐号完整性组管理：创建组:groupaddgroupadd-g GID-r：添加为系统组groupmod-g GID-n GRPNAMEgroupdelgpasswd：为组设定密码newgrp GRPNAME &lt;–&gt; exit练习：1、创建一个用户mandriva，其ID号为2002，基本组为distro（组ID为3003），附加组为linux； groupadd -g 3003 distro groupadd linux useradd -u 2002 -g distro -G linux mandriva2、创建一个用户fedora，其全名为Fedora Community，默认shell为tcsh； useradd -c “Fedora Community” -s /bin/tcsh fedora3、修改mandriva的ID号为4004，基本组为linux，附加组为distro和fedora； usermod -u 4004 -g linux -G distro,fedora mandriva4、给fedora加密码，并设定其密码最短使用期限为2天，最长为50天； passwd -n 2 -x 50 fedora5、将mandriva的默认shell改为/bin/bash;usermod -s /bin/bash mandirva6、添加系统用户hbase，且不允许其登录系统； useradd -r -s /sbin/nologin hbase7、chage-d: 最近一次的修改时间-E: 过期时间-I：非活动时间-m: 最短使用期限-M: 最长使用期限-W: 警告时间权限管理：r:w：x：三类用户：u: 属主g: 属组o: 其它用户chown: 改变文件属主(只有管理员可以使用此命令) chown USERNAME file,…-R: 修改目录及其内部文件的属主 --reference=/path/to/somefile file,... chown USERNAME:GRPNAME file,…chown USERNAME.GRPNAME file,… chgrp GRPNAME file,…-R --reference=/path/to/somefile file,... chmod: 修改文件的权限修改三类用户的权限：chmod MODE file,…-R–reference=/path/to/somefile file,…rwxr-x—修改某类用户或某些类用户权限：u,g,o,achmod 用户类别=MODE file,…修改某类用户的某位或某些位权限：u,g,o,achmod 用户类别+|-MODE file,…练习：1、新建一个没有家目录的用户openstack； useradd -M openstack2、复制/etc/skel为/home/openstack； cp -r /etc/skel /home/openstack3、改变/home/openstack及其内部文件的属主属组均为openstack； chown -R openstack:openstack /home/openstack4、/home/openstack及其内部的文件，属组和其它用户没有任何访问权限 chmod -R go= /home/openstacksu - openstack手动添加用户hive, 基本组为hive (5000)，附加组为mygroupumask：遮罩码666-umask777-umask umask umask 022文件默认不能具有执行权限，如果算得的结果中有执行权限，则将其权限加1；umask: 023文件：666-023=643 X目录：777-023=754站在用户登录的角度来说，SHELL的类型：登录式shell:正常通常某终端登录su - USERNAMEsu -l USERNAME非登录式shell:su USERNAME图形终端下打开命令窗口自动执行的shell脚本bash的配置文件：全局配置/etc/profile, /etc/profile.d/*.sh, /etc/bashrc个人配置~/.bash_profile, ~/.bashrcprofile类的文件：设定环境变量运行命令或脚本bashrc类的文件：设定本地变量定义命令别名登录式shell如何读取配置文件？/etc/profile --&gt; /etc/profile.d/*.sh --&gt; ~/.bash_profile --&gt; ~/.bashrc --&gt; /etc/bashrc非登录式shell如何配置文件?~/.bashrc --&gt; /etc/basrc --&gt; /etc/profile.d/*.shbash: 脚本解释器姓名，来自地区，性格、爱好和特长，个人寄语登录式shell，配置文件及次序：/etc/profile --&gt; /etc/profile.d/*.sh --&gt; ~/.bash_profile --&gt; ~/.bashrc --&gt; /etc/bashrc非登录式shell：~/.bashrc --&gt; /etc/bashrc --&gt; /etc/profile.d/*.shprofile: 定义环境变量、运行程序或脚本bashrc：定义本地变量、命令别名chown, chgrp, chmod-R–reference=chmod:perm: 777， 666u,g,o,a =u,g,o,a +/-umask管道和重定向：&gt; &lt; &gt;&gt; &lt;&lt;运算器、控制器： CPU存储器：RAM输入设备/输出设备程序：指令和数据控制器：指令运算器：存储器：地址总线：内存寻址数据总线：传输数据控制总结：控制指令寄存器：CPU暂时存储器I/O: 硬盘，程序INPUT设备：OUTPUT设备系统设定默认输出设备：标准输出，STDOUT, 1默认输入设备：标准输入, STDIN, 0标准错误输出：STDERR, 2标准输入：键盘标准输出和错误输出：显示器I/O重定向：Linux:: 覆盖输出：追加输出set -C: 禁止对已经存在文件使用覆盖重定向；强制覆盖输出，则使用 &gt;|set +C: 关闭上述功能2&gt;: 重定向错误输出2&gt;&gt;: 追加方式&amp;&gt;: 重定向标准输出或错误输出至同一个文件&lt;：输入重定向&lt;&lt;：Here Document管道：前一个命令的输出，作为后一个命令的输入命令1 | 命令2 | 命令3 | …练习：1、统计/usr/bin/目录下的文件个数； ls /usr/bin | wc -l2、取出当前系统上所有用户的shell，要求，每种shell只显示一次，并且按顺序进行显示； cut -d: -f7 /etc/passwd | sort -u3、思考：如何显示/var/log目录下每个文件的内容类型？4、取出/etc/inittab文件的第6行； head -6 /etc/inittab | tail -15、取出/etc/passwd文件中倒数第9个用户的用户名和shell，显示到屏幕上并将其保存至/tmp/users文件中； tail -9 /etc/passwd | head -1 | cut -d: -f1,7 | tee /tmp/users6、显示/etc目录下所有以pa开头的文件，并统计其个数； ls -d /etc/pa* | wc -l7、不使用文本编辑器，将alias cls=clear一行内容添加至当前用户的.bashrc文件中； echo “alias cls=clear” &gt;&gt; ~/.bashrcgrep, egrep, fgrepgrep: 根据模式搜索文本，并将符合模式的文本行显示出来。Pattern: 文本字符和正则表达式的元字符组合而成匹配条件grep PATTERN-i–color-v: 显示没有被模式匹配到的行-o：只显示被模式匹配到的字符串*: 任意长度的任意字符?: 任意单个字符[]::正则表达式：REGular EXPression, REGEXP元字符：.: 匹配任意单个字符[]: 匹配指定范围内的任意单个字符：匹配指定范围外的任意单个字符字符集合：, , , , , ,匹配次数（贪婪模式）：: 匹配其前面的字符任意次a, b, ab, aab, acb, adb, amnbab， a?ba.*b.*: 任意长度的任意字符 ?: 匹配其前面的字符1次或0次{m,n}:匹配其前面的字符至少m次，至多n次{1,}{0,3}位置锚定：^: 锚定行首，此字符后面的任意内容必须出现在行首: 锚定行尾，此字符前面的任意内容必须出现在行尾 ^: 空白行&lt;或\\b: 锚定词首，其后面的任意字符必须作为单词首部出现&gt;或\\b: 锚定词尾，其前面的任意字符必须作为单词的尾部出现分组：()(ab)*后向引用\\1: 引用第一个左括号以及与之对应的右括号所包括的所有内容\\2:\\3:He love his lover.She like her liker.He like his lover.l…e练习：1、显示/proc/meminfo文件中以不区分大小的s开头的行；grep -i ‘^s’ /proc/meminfogrep ‘^’ /proc/meminfo2、显示/etc/passwd中以nologin结尾的行;grep ‘nologin$’ /etc/passwd取出默认shell为/sbin/nologin的用户列表grep &quot;nologin$’ /etc/passwd | cut -d: -f1取出默认shell为bash，且其用户ID号最小的用户的用户名grep ‘bash$’ /etc/passwd | sort -n -t: -k3 | head -1 | cut -d: -f13、显示/etc/inittab中以#开头，且后面跟一个或多个空白字符，而后又跟了任意非空白字符的行；grep “#[]{1,}[]” /etc/inittab4、显示/etc/inittab中包含了:一个数字:(即两个冒号中间一个数字)的行；grep ‘::’ /etc/inittab5、显示/boot/grub/grub.conf文件中以一个或多个空白字符开头的行；grep ‘[1]{1,}’ /boot/grub/grub.conf6、显示/etc/inittab文件中以一个数字开头并以一个与开头数字相同的数字结尾的行；grep ‘^().*\\1$’ /etc/inittab练习：1、找出某文件中的，1位数，或2位数；grep ‘{1,2}’ /proc/cpuinfogrep --color ‘&lt;{1,2}&gt;’ /proc/cpuinfo2、找出ifconfig命令结果中的1-255之间的整数；3、查找当前系统上名字为student(必须出现在行首)的用户的帐号的相关信息, 文件为/etc/passwdgrep ‘^student&gt;’ /etc/passwd | cut -d: -f3id -u studentstudent1student2练习：分析/etc/inittab文件中如下文本中前两行的特征(每一行中出现在数字必须相同)，请写出可以精确找到类似两行的模式：l1:1:wait:/etc/rc.d/rc 1l3:3:wait:/etc/rc.d/rc 3grep ‘^l():\\1.*\\1$’ /etc/inittabREGEXP：REGular EXPressionPattern:正则表达式：Basic REGEXP：基本Extended REGEXP：扩展基本正则表达式：.:[]::次数匹配：*:?: 0或1次{m,n}：至少m次，至多n次；.*:锚定：^:$:&lt;, \\b:&gt;, \\b:()\\1, \\2, \\3, …grep：使用基本正则表达式定义的模式来过滤文本的命令；-i-v-o–color-E: 使用扩展正则表达式-A #:-B #:-C #:扩展正则表达式：字符匹配：.[]次数匹配：*:?:+: 匹配其前面的字符至少1次{m,n}位置锚定：^$&lt;&gt;分组：()：分组\\1, \\2, \\3, …或者|: orC|cat: Cat或cat, C或catgrep -E = egrep4、显示所有以数字结尾且文件名中不包含空白的文件；ls [^] ???找出/boot/grub/grub.conf文件中1-255之间的数字；&lt;(||1|2|25)&gt;.ifconfig | egrep ‘&lt;(||1|2|25)&gt;.&lt;(||1|2|25)&gt;.&lt;(||1|2|25)&gt;.&lt;(||1|2|25)&gt;’ifconfig | egrep --color ‘(&lt;(||1|2|25)&gt;.){3}&lt;(||1|2|25)&gt;’IPv4:5类：A B C D EA：1-127B：128-191C：192-223&lt;(||1{2}|2|22)&gt;(.&lt;(||1|2|25)&gt;){2}.&lt;(||1|2|25)&gt;http://mageedu.blog.51cto.com/grep, egrepfgrep: 不支持正则表达式shell编程：编译器，解释器编程语言：机器语言、汇编语言、高级语言静态语言：编译型语言强类型(变量)事先转换成可执行格式C、C++、JAVA、C#动态语言：解释型语言， on the fly弱类型边解释边执行PHP、SHELL、python、perl面向过程：Shell, C面向对象: JAVA, Python, perl, C++变量：内存空间，命名内存：编址的存储单元进程：1+100：1+10000001变量类型：事先确定数据的存储格式和长度字符数值整型浮点型: 11.23， 1.12310^1, 0.112310^22013/10/10, 64bit99999: 24bit,真、假逻辑：1+1&gt;2逻辑运算：与、或、非、异或1: 真0: 假1 &amp; 0 = 00 &amp; 1 = 00 &amp; 0 = 01 &amp; 1 = 1或：非：! 真 = 假! 假 = 真shell: 弱类型编程语言强：变量在使用前，必须事先声明，甚至还需要初始化；弱：变量用时声明，甚至不区分类型；变量赋值：VAR_NAME=VALUEbash变量类型：环境变量本地变量(局部变量)位置变量特殊变量本地变量：set VARNAME=VALUE: 作用域为整个bash进程；局部变量：local VARNAME=VALUE：作用域为当前代码段；环境变量：作用域为当前shell进程及其子进程；export VARNAME=VALUEVARNAME=VALUEexport VARNAME“导出”位置变量：$1, $2, …特殊变量：$?: 上一个命令的执行状态返回值；程序执行，可能有两类返回值：程序执行结果程序状态返回代码（0-255）0: 正确执行1-255：错误执行，1，2，127系统预留；输出重定向：2&gt;2&gt;&gt;&amp;&gt;撤消变量：unset VARNAME查看当shell中变量：set查看当前shell中的环境变量：printenvenvexport脚本：命令的堆砌，按实际需要，结合命令流程控制机制实现的源程序shebang: 魔数#!/bin/bash 注释行，不执行/dev/null: 软件设备， bit bucket，数据黑洞脚本在执行时会启动一个子shell进程；命令行中启动的脚本会继承当前shell环境变量；系统自动执行的脚本(非命令行启动)就需要自我定义需要各环境变量；练习：写一个脚本，完成以下任务1、添加5个用户, user1,…, user52、每个用户的密码同用户名，而且要求，添加密码完成后不显示passwd命令的执行结果信息；3、每个用户添加完成后，都要显示用户某某已经成功添加；useradd user1echo “user1” | passwd --stdin user1 &amp;&gt; /dev/nullecho “Add user1 successfully.”条件判断：如果用户不存在添加用户，给密码并显示添加成功；否则显示如果已经没在，没有添加；bash中如何实现条件判断？条件测试类型：整数测试字符测试文件测试条件测试的表达式：[] test expression 整数比较:-eq: 测试两个整数是否相等；比如 $A -eq $B-ne: 测试两个整数是否不等；不等，为真；相等，为假；-gt: 测试一个数是否大于另一个数；大于，为真；否则，为假；-lt: 测试一个数是否小于另一个数；小于，为真；否则，为假；-ge: 大于或等于-le：小于或等于命令的间逻辑关系：逻辑与： &amp;&amp;第一个条件为假时，第二条件不用再判断，最终结果已经有；第一个条件为真时，第二条件必须得判断；逻辑或： ||如果用户user6不存在，就添加用户user6! id user6 &amp;&amp; useradd user6id user6 || useradd user6如果/etc/inittab文件的行数大于100，就显示好大的文件；&amp;&amp; echo “Large file.”变量名称：1、只能包含字母、数字和下划线，并且不能数字开头；2、不应该跟系统中已有的环境变量重名；3、最好做到见名知义；如果用户存在，就显示用户已存在；否则，就添加此用户；id user1 &amp;&amp; echo “user1 exists.” || useradd user1如果用户不存在，就添加；否则，显示其已经存在；! id user1 &amp;&amp; useradd user1 || echo “user1 exists.”如果用户不存在，添加并且给密码；否则，显示其已经存在；! id user1 &amp;&amp; useradd user1 &amp;&amp; echo “user1” | passwd --stdin user1 || echo “user1 exists.”练习，写一个脚本，完成以下要求：1、添加3个用户user1, user2, user3；但要先判断用户是否存在，不存在而后再添加；2、添加完成后，显示一共添加了几个用户；当然，不能包括因为事先存在而没有添加的；3、最后显示当前系统上共有多少个用户；练习，写一个脚本，完成以下要求：给定一个用户：1、如果其UID为0，就显示此为管理员；2、否则，就显示其为普通用户；如果 UID为0；那么显示为管理员否则显示为普通用户NAME=user16USERID=id -u $NAMEif ; thenecho “Admin”elseecho “common user.”fiNAME=user16if ; thenecho “Admin”elseecho “common user.”fiif id $NAME; then练习：写一个脚本判断当前系统上是否有用户的默认shell为bash；如果有，就显示有多少个这类用户；否则，就显示没有这类用户；grep &quot;bash\" /etc/passwd &> /dev/null RETVAL=?if ; thenif grep “bash$” /etc/passwd &amp;&gt; /dev/null; then提示：“引用”一个命令的执行结果，要使用命令引用；比如: RESAULTS=wc -l /etc/passwd | cut -d: -f1；使用一个命令的执行状态结果，要直接执行此命令，一定不能引用；比如: if id user1一句中的id命令就一定不能加引号；如果想把一个命令的执行结果赋值给某变量，要使用命令引用，比如USERID=id -u user1;如果想把一个命令的执行状态结果保存下来，并作为命令执行成功与否的判断条件，则需要先执行此命令，而后引用其状态结果，如id -u user1RETVAL=$?此句绝对不可以写为RETVAL=id -u user1；练习：写一个脚本判断当前系统上是否有用户的默认shell为bash；如果有，就显示其中一个的用户名；否则，就显示没有这类用户；练习：写一个脚本给定一个文件，比如/etc/inittab判断这个文件中是否有空白行；如果有，则显示其空白行数；否则，显示没有空白行。#!/bin/bashA=grep '^$' /etc/inittab | wc -lif ; thenecho “$A”elseecho “meiyoukongbaihang”fi—— by 张帅#!/bin/bashFILE=/etc/inittabif ; thenecho “No $FILE.”exit 8fiif grep “^$” FILE &> /dev/null; then echo \"Total blank lines: `grep \"^&quot; $FILE | wc -l`.&quot;elseecho “No blank line.”fi练习：写一个脚本给定一个用户，判断其UID与GID是否一样如果一样，就显示此用户为“good guy”；否则，就显示此用户为“bad guy”。#!/bin/bashUSERNAME=user1USERID=id -u $USERNAMEGROUPID=id -g $USERNAMEif ; thenecho “Good guy.”elseecho “Bad guy.”fi进一步要求：不使用id命令获得其id号；#!/bin/bashUSERNAME=user1if ! grep “^$USERNAME&gt;” /etc/passwd &amp;&gt; /dev/null; thenecho “No such user: $USERNAME.”exit 1fiUSERID=grep &quot;^$USERNAME\\&gt;&quot; /etc/passwd | cut -d: -f3GROUPID=grep &quot;^$USERNAME\\&gt;&quot; /etc/passwd | cut -d: -f4if ; thenecho “Good guy.”elseecho “Bad guy.”fi练习：写一个脚本给定一个用户，获取其密码警告期限；而后判断用户密码使用期限是否已经小于警告期限；提示：计算方法，最长使用期限减去已经使用的天数即为剩余使用期限；如果小于，则显示“Warning”；否则，就显示“OK”。圆整：丢弃小数点后的所有内容#!/bin/bashW=grep &quot;student&quot; /etc/shadow | cut -d: -f6S=date +%sT=expr $S/86400L=grep &quot;^student&quot; /etc/shadow | cut -d: -f5N=grep &quot;^student&quot; /etc/shadow | cut -d: -f3SY=[[[L-$]if ; thenecho ‘Warning’elseecho ‘OK’fi —— by 董利东 练习：写一个脚本判定命令历史中历史命令的总条目是否大于1000；如果大于，则显示“Some command will gone.”；否则显示“OK”。shell中如何进行算术运算：A=3B=61、let 算术运算表达式let C=A+A+A+B2、C=C=C=3、((算术运算表达式)) C=((A+A+A+B))4、expr 算术运算表达式，表达式中各操作数及运算符之间要有空格，而且要使用命令引用C=expr $A + $B条件判断，控制结构：单分支if语句if 判断条件; thenstatement1statement2…fi双分支的if语句：if 判断条件; thenstatement1statement2…elsestatement3statement4…fi多分支的if语句：if 判断条件1; thenstatement1…elif 判断条件2; thenstatement2…elif 判断条件3; thenstatement3…elsestatement4…fi测试方法：[]test expressionbash中常用的条件测试有三种：整数测试：-gt-le-ne-eq-ge-ltINT1=63INT2=77[]test $INT1 -eq $INT2文件测试：-e FILE：测试文件是否存在-f FILE: 测试文件是否为普通文件-d FILE: 测试指定路径是否为目录-r FILE: 测试当前用户对指定文件是否有读取权限；-w-x练习：写一个脚本给定一个文件：如果是一个普通文件，就显示之；如果是一个目录，亦显示之；否则，此为无法识别之文件；定义脚本退出状态码exit: 退出脚本exit #如果脚本没有明确定义退出状态码，那么，最后执行的一条命令的退出码即为脚本的退出状态码；测试脚本是否有语法错误：bash -n 脚本bash -x 脚本：单步执行bash变量的类型：本地变量(局部变量)环境变量位置变量:$1, $2, …shift特殊变量：$?$#：参数的个数$*: 参数列表$@：参数列表./filetest.sh /etc/fstab /etc/inittab$1: /etc/fstab$2: /etc/inittab练习：写一脚本能接受一个参数(文件路径)判定：此参数如果是一个存在的文件，就显示“OK.”；否则就显示&quot;No such file.&quot;练习：写一个脚本给脚本传递两个参数(整数)；显示此两者之和，之乘积；#!/bin/bashif ; thenecho “Usage: cacl.sh ARG1 ARG2”exit 8fiecho “The sum is: $.”echo “The prod is: $.”练习：写一个脚本，完成以下任务1、使用一个变量保存一个用户名；2、删除此变量中的用户，且一并删除其家目录；3、显示“用户删除完成”类的信息；bash: 引用变量：${VARNAME}, 括号有时可省略。整型，8bit: 2560-255， 溢出变量：1，1000010：16bit10: 1010, 8bit编程能力：脚本编程grep, sed(流编辑器), awksed基本用法：sed: Stream EDitor行编辑器 (全屏编辑器: vi)sed: 模式空间默认不编辑原文件，仅对模式空间中的数据做处理；而后，处理结束后，将模式空间打印至屏幕；sed ‘AddressCommand’ file …-n: 静默模式，不再默认显示模式空间中的内容-i: 直接修改原文件-e SCRIPT -e SCRIPT:可以同时执行多个脚本-f /PATH/TO/SED_SCRIPTsed -f /path/to/scripts file-r: 表示使用扩展正则表达式Address：1、StartLine,EndLine比如1,100$：最后一行2、/RegExp//^root/3、/pattern1/,/pattern2/第一次被pattern1匹配到的行开始，至第一次被pattern2匹配到的行结束，这中间的所有行4、LineNumber指定的行5、StartLine, +N从startLine开始，向后的N行；Command：d: 删除符合条件的行；p: 显示符合条件的行；a \\string: 在指定的行后面追加新行，内容为string\\n：可以用于换行i \\string: 在指定的行前面添加新行，内容为stringr FILE: 将指定的文件的内容添加至符合条件的行处w FILE: 将地址指定的范围内的行另存至指定的文件中;s/pattern/string/修饰符: 查找并替换，默认只替换每行中第一次被模式匹配到的字符串加修饰符g: 全局替换i: 忽略字符大小写s///: s###, s@@@(), \\1, \\2l..e: like--&gt;liker love--&gt;lover like--&gt;Like love--&gt;Love &amp;: 引用模式匹配整个串 sed练习：1、删除/etc/grub.conf文件中行首的空白符；sed -r ‘s@[2]+@@g’ /etc/grub.conf2、替换/etc/inittab文件中&quot;id:3:initdefault:&quot;一行中的数字为5；sed ‘s@(id:)(:initdefault:)@\\15\\2@g’ /etc/inittab3、删除/etc/inittab文件中的空白行；sed ‘/^$/d’ /etc/inittab4、删除/etc/inittab文件中开头的#号;sed ‘s@^#@@g’ /etc/inittab5、删除某文件中开头的#号及后面的空白字符，但要求#号后面必须有空白字符;sed -r ‘s@^#[]+@@g’ /etc/inittab6、删除某文件中以空白字符后面跟#类的行中的开头的空白字符及#sed -r ‘s@[3]+#@@g’ /etc/inittab7、取出一个文件路径的目录名称;echo “/etc/rc.d/” | sed -r ‘s@^(/./)+/?@\\1@g’基名：echo “/etc/rc.d/” | sed -r 's@^/./(+)/?@\\1@g’#abc hello world hi world练习：传递一个用户名参数给脚本，判断此用户的用户名跟其基本组的组名是否一致，并将结果显示出来。字符测试：==：测试是否相等，相等为真，不等为假!=: 测试是否不等，不等为真，等为假&lt;-n string: 测试指定字符串是否为空，空则真，不空则假-z string: 测试指定字符串是否不空，不空为真，空则为假练习：写一个脚本传递一个参数(单字符就行)给脚本，如参数为q，就退出脚本；否则，就显示用户的参数；练习：写一个脚本传递一个参数(单字符就行)给脚本，如参数为q、Q、quit或Quit，就退出脚本；否则，就显示用户的参数；#!/bin/bashif ;thenecho “Quiting…”exit 1elif ;thenecho “Quiting…”exit 2elif ;thenecho “Quiting…”exit 3elif ;thenecho “Quiting…”exit 4elseecho $1fi练习：传递三个参数给脚本，第一个为整数，第二个为算术运算符，第三个为整数，将计算结果显示出来，要求保留两位精度。形如：./calc.sh 5 / 2练习：传递3个参数给脚本，参数均为用户名。将此些用户的帐号信息提取出来后放置于/tmp/testusers.txt文件中，并要求每一行行首有行号。写一个脚本：判断当前主机的CPU生产商，其信息在/proc/cpuinfo文件中vendor id一行中。如果其生产商为AuthenticAMD，就显示其为AMD公司；如果其生产商为GenuineIntel，就显示其为Intel公司；否则，就说其为非主流公司；写一个脚本：给脚本传递三个整数，判断其中的最大数和最小数，并显示出来。MAX=0MAX -eq $1MAX=$1MAX -lt $2MAX=$2循环：进入条件，退出条件forwhileuntilfor 变量 in 列表; do循环体donefor I in 1 2 3 4 5 6 7 8 9 10; do加法运算done遍历完成之后，退出；如何生成列表：{1…100}seq [起始数 ] 结束数1,…,100declare -i SUM=0integer-x写一个脚本：1、设定变量FILE的值为/etc/passwd2、依次向/etc/passwd中的每个用户问好，并显示对方的shell，形如：Hello, root, your shell: /bin/bash3、统计一共有多少个用户for I in seq 1 $LINES; do echo &quot;Hello, head -n $I /etc/passwd | tail -1 | cut -d: -f1&quot;; done只向默认shell为bash的用户问声好写一个脚本：1、添加10个用户user1到user10，密码同用户名；但要求只有用户不存在的情况下才能添加；扩展：接受一个参数：add: 添加用户user1…user10del: 删除用户user1…user10其它：退出adminusers user1,user2,user3,hello,hi写一个脚本：计算100以内所有能被3整除的正整数的和；取模，取余:%3%2=1100%55=45写一个脚本：计算100以内所有奇数的和以及所有偶数的和；分别显示之；let I=SUM=SUM=SUM=let SUM+=$Ilet I+=1 相当于 let I++-=let I-=1 相当于 let I–++I, --I *=/=%=写一个脚本，分别显示当前系统上所有默认shell为bash的用户和默认shell为/sbin/nologin的用户，并统计各类shell下的用户总数。显示结果形如：BASH，3users，they are:root,redhat,gentooNOLOGIN, 2users, they are:bin,ftp#!/bin/bashNUMBASH=grep &quot;bash$&quot; /etc/passwd | wc -lBASHUSERS=grep &quot;bash$&quot; /etc/passwd | cut -d: -f1BASHUSERS=echo $BASHUSERS | sed 's@[]@,@g'echo &quot;BASH, NUMBASHusers,theyare:&quot;echo&quot;NUMBASH users, they are:&quot; echo &quot;NUMBASHusers,theyare:&quot;echo&quot;BASHUSERS在剩下的三月里，你愿意与学习结为伴侣，无论贫穷还是富贵，无论电脑还是手机，无论多困或者多累，无论想吃还是想睡，都要把学习放在第一位，以不落后为目标，同甘共苦同舟共济永不言弃，爱惜她尊重她理解她保护她，你愿意这样做么？Yes,I do!测试：整数测试-le-lt-ge-gt-eq-ne字符测试==!=&gt;&lt;-n-z文件测试-e-f-d-r-w-xif ; then组合测试条件-a: 与关系-o: 或关系!： 非关系ifif &amp;&amp;q, Q, quit, Quitvim编辑器文本编辑器，字处理器ASCIInano, sedvi: Visual Interfacevim: VI iMproved全屏编辑器，模式化编辑器vim模式：编辑模式(命令模式)输入模式末行模式模式转换：编辑–&gt;输入：i: 在当前光标所在字符的前面，转为输入模式；a: 在当前光标所在字符的后面，转为输入模式；o: 在当前光标所在行的下方，新建一行，并转为输入模式；I：在当前光标所在行的行首，转换为输入模式 A：在当前光标所在行的行尾，转换为输入模式 O：在当前光标所在行的上方，新建一行，并转为输入模式； 输入–&gt;编辑：ESC编辑–&gt;末行：：末行–&gt;编辑：ESC, ESC一、打开文件 vim /path/to/somefilevim +# :打开文件，并定位于第#行 vim +：打开文件，定位至最后一行 vim +/PATTERN : 打开文件，定位至第一次被PATTERN匹配到的行的行首 默认处于编辑模式 二、关闭文件1、末行模式关闭文件:q 退出:wq 保存并退出:q! 不保存并退出:w 保存:w! 强行保存:wq --&gt; :x2、编辑模式下退出ZZ: 保存并退出三、移动光标(编辑模式)1、逐字符移动：h: 左l: 右j: 下k: 上#h: 移动#个字符；2、以单词为单位移动w: 移至下一个单词的词首e: 跳至当前或下一个单词的词尾b: 跳至当前或前一个单词的词首#w: 3、行内跳转：0: 绝对行首^: 行首的第一个非空白字符$: 绝对行尾4、行间跳转#G：跳转至第#行；G：最后一行末行模式下，直接给出行号即可 四、翻屏Ctrl+f: 向下翻一屏Ctrl+b: 向上翻一屏Ctrl+d: 向下翻半屏Ctrl+u: 向上翻半屏五、删除单个字符x: 删除光标所在处的单个字符#x: 删除光标所在处及向后的共#个字符六、删除命令: dd命令跟跳转命令组合使用；#dw, #de, #dbdd: 删除当前光标所在行#dd: 删除包括当前光标所在行在内的#行；末行模式下：StartADD,EndADDd.: 表示当前行$: 最后一行+#: 向下的#行七、粘贴命令 pp: 如果删除或复制为整行内容，则粘贴至光标所在行的下方，如果复制或删除的内容为非整行，则粘贴至光标所在字符的后面；P: 如果删除或复制为整行内容，则粘贴至光标所在行的上方，如果复制或删除的内容为非整行，则粘贴至光标所在字符的前面；八、复制命令 y用法同d命令九、修改：先删除内容，再转换为输入模式c: 用法同d命令十、替换：rR: 替换模式十一、撤消编辑操作 uu：撤消前一次的编辑操作连续u命令可撤消此前的n次编辑操作#u: 直接撤消最近#次编辑操作撤消最近一次撤消操作：Ctrl+r十二、重复前一次编辑操作.十三、可视化模式v: 按字符选取V：按矩形选取十四、查找/PATTERN?PATTERNnN十五、查找并替换在末行模式下使用s命令ADDR1,ADDR2s@PATTERN@string@gi1,$%：表示全文练习：将/etc/yum.repos.d/server.repo文件中的ftp://instructor.example.com/pub替换为http://172.16.0.1/yum%s/ftp://instructor.example.com/pub/http://172.16.0.1/yum/g%s@ftp://instructor.example.com/pub@http://172.16.0.1/yum@g文件内容如下： repos on instructor for classroom use Main rhel5 servername=Instructor Server Repositorybaseurl=ftp://172.16.0.1/pub/Servergpgcheck=0 This one is needed for xen packagesname=Instructor VT Repositorybaseurl=ftp://172.16.0.1/pub/VTgpgcheck=0 This one is needed for clustering packagesname=Instructor Cluster Repositorybaseurl=ftp://172.16.0.1/pub/Clustergpgcheck=0 This one is needed for cluster storage (GFS, iSCSI target, etc…) packagesname=Instructor ClusterStorage Repositorybaseurl=ftp://172.16.0.1/pub/ClusterStoragegpgcheck=0十六、使用vim编辑多个文件vim FILE1 FILE2 FILE3:next 切换至下一个文件:prev 切换至前一个文件:last 切换至最后一个文件:first 切换至第一个文件退出:qa 全部退出十七、分屏显示一个文件Ctrl+w, s: 水平拆分窗口Ctrl+w, v: 垂直拆分窗口在窗口间切换光标：Ctrl+w, ARROW:qa 关闭所有窗口十八、分窗口编辑多个文件vim -o : 水平分割显示vim -O : 垂直分割显示十九、将当前文件中部分内容另存为另外一个文件末行模式下使用w命令:w:ADDR1,ADDR2w /path/to/somewhere二十、将另外一个文件的内容填充在当前文件中:r /path/to/somefile二十一、跟shell交互:! COMMAND二十二、高级话题1、显示或取消显示行号:set number:set nu:set nonu2、显示忽略或区分字符大小写:set ignorecase:set ic:set noic3、设定自动缩进:set autoindent:set ai:set noai4、查找到的文本高亮显示或取消:set hlsearch:set nohlsearch5、语法高亮:syntax on:syntax off二十三、配置文件/etc/vimrc~/.vimrcvim:grep, egrep, fgrep: 文本查找文件查找：locate:非实时，模糊匹配，查找是根据全系统文件数据库进行的； updatedb, 手动生成文件数据库速度快find：实时精确支持众多查找标准遍历指定目录中的所有文件完成查找，速度慢；find 查找路径 查找标准 查找到以后的处理运作查找路径：默认为当前目录查找标准：默认为指定路径下的所有文件处理运作：默认为显示匹配标准：-name ‘FILENAME’：对文件名作精确匹配文件名通配：*：任意长度的任意字符?[]-iname ‘FILENAME’: 文件名匹配时不区分大小写-regex PATTERN：基于正则表达式进行文件名匹配-user USERNAME: 根据属主查找 -group GROUPNAME: 根据属组查找 -uid UID: 根据UID查找 -gid GID: 根据GID查找 -nouser：查找没有属主的文件 -nogroup: 查找没有属组的文件 -type f: 普通文件 d c b l p s -size #k #M #G 组合条件：-a-o-not/tmp目录，不是目录，并且还不能套接字类型的文件/tmp/test目录下，属主不是user1，也不是user2的文件；-mtime -ctime -atime # -mmin -cmin -amin # -perm MODE：精确匹配 /MODE: 任意一位匹配即满足条件 -MODE: 文件权限能完全包含此MODE时才符合条件 -644 644: rw-r--r-- 755: rwxr-xr-x 750: rwxr-x--- find ./ -perl -001 运作：-print: 显示-ls：类似ls -l的形式显示每一个文件的详细-ok COMMAND {} ; 每一次操作都需要用户确认-exec COMMAND {} ;1、查找/var目录下属主为root并且属组为mail的所有文件；find /var -user root -group mail2、查找/usr目录下不属于root,bin,或student的文件；find /usr -not -user root -a -not -user bin -a -not -user studentfind /usr -not ( -user root -o -user bin -o -user student )3、查找/etc目录下最近一周内内容修改过且不属于root及student用户的文件；find /etc -mtime -7 -not \\ ( -user root -o -user student )find /etc -mtime -7 -not -user root -a -not -user student4、查找当前系统上没有属主或属组且最近1天内曾被访问过的文件，并将其属主属组均修改为root；find / ( -nouser -o -nogroup ) -a -atime -1 -exec chown root:root {} ;5、查找/etc目录下大于1M的文件，并将其文件名写入/tmp/etc.largefiles文件中；find /etc -size +1M &gt;&gt; /tmp/etc.largefiles6、查找/etc目录下所有用户都没有写权限的文件，显示出其详细信息；find /etc -not -perm /222 -ls特殊权限passwd:sSUID: 运行某程序时，相应进程的属主是程序文件自身的属主，而不是启动者；chmod u+s FILEchmod u-s FILE如果FILE本身原来就有执行权限，则SUID显示为s；否则显示S；SGID: 运行某程序时，相应进程的属组是程序文件自身的属组，而不是启动者所属的基本组；chmod g+s FILEchmod g-s FILEdevelop team, hadoop, hbase, hive/tmp/project/developSticky: 在一个公共目录，每个都可以创建文件，删除自己的文件，但不能删除别人的文件；chmod o+t DIRchmod o-t DIR000:001:…110：111：chmod 5755 /backup/testumask 0022umaskfind:find DIRICTORY Cretiria ACTION匹配条件：-typef, d, c, b, l, s, p-atime-amin -size 11M 10M&lt; -user -uid -nouser -nogroup -name -iname -regex 组合条件： -a -o -not \\( \\) ACTION -print -ls -ok -exec 文件特殊权限SUID: sSGID: sSticky: tchmod u+s g+s o+t 练习：写一个脚本写一个脚本，显示当前系统上shell为-s指定类型的用户，并统计其用户总数。-s选项后面跟的参数必须是/etc/shells文件中存在的shell类型，否则不执行此脚本。另外，此脚本还可以接受–help选项，以显示帮助信息。脚本执行形如：./showshells.sh -s bash显示结果形如：BASH，3users，they are:root,redhat,gentoo#!/bin/bashif ; then! grep “2{2}2” /etc/shells &amp;&gt; /dev/null &amp;&amp; echo “Invalid shell.” &amp;&amp; exit 7elif ;thenecho “Usage: showshells.sh -s SHELL | --help”exit 0elseecho “Unknown Options.”exit 8fiNUMOFUSER=grep &quot;${2}$&quot; /etc/passwd | wc -lSHELLUSERS=grep &quot;${2}$&quot; /etc/passwd | cut -d: -f1SHELLUSERS=echo $SHELLUSERS | sed 's@[]@,@g'echo -e “$2, NUMOFUSER users, they are: \\nSHELLUSERS”${变量名}文件系统访问列表：tom:tom, tom基本组jerry: other:r–chownFACL：Filesystem Access Control List利用文件扩展保存额外的访问控制权限jerry: rw-setfacl-m: 设定u:UID:permg:GID:perm-x：取消u:UIDg:GIDgetfacl几个命令：wwho每隔5秒钟，就来查看hadoop是否已经登录，如登录，显示其已经登录，并退出；sleepwhoamilast，显示/var/log/wtmp文件，显示用户登录历史及系统重启历史-n #: 显示最近#次的相关信息lastb，/var/log/btmp文件，显示用户错误的登录尝试-n #:lastlog: 显示每一个用户最近一次的成功登录信息；-u USERNAME: 显示特定用户最近的登录信息basename$0: 执行脚本时的脚本路径及名称mailhostname: 显示主机名如果当前主机的主机名不是www.magedu.com，就将其改为www.magedu.com如果当前主机的主机名是localhost，就将其改为www.magedu.com如果当前主机的主机名为空，或者为(none)，或者为localhost，就将其改为www.magedu.com|| &amp;&amp; hostname www.magedu.com生成随机数RANDOM: 0-32768随机数生成器：熵池/dev/random:/dev/urandom:写一个脚本，利用RANDOM生成10个随机数，并找出其中的最大值，和最小值；#!/bin/bashdeclare -i MAX=0declare -i MIN=0for I in {1…10}; doMYRAND=RANDOM && MIN=MYRANDif ; thenecho -n “MYRAND,&quot;elseecho&quot;MYRAND,&quot; else echo &quot;MYRAND,&quot;elseecho&quot;MYRAND”fi&amp;&amp; MAX=MYRAND && MIN=MYRANDdoneecho $MAX, $MIN面向过程控制结构顺序结构选择结构循环结构选择结构：if: 单分支、双分支、多分支if CONDITION; thenstatement…fiif CONDITION; thenstatement…elsestatement…fiif CONDITION1; thenstatement…elif CONDITION2; thenstatement…eslestatement…ficase语句：选择结构case SWITCH invalue1)statement…;;value2)statement…;;*)statement…;;esaca-zA-Z0-9只接受参数start,stop,restart,status其中之一#!/bin/bashDEBUG=0ADD=0DEL=0for I in seq 0 $#; doif ; thencase $1 in-v|–verbose)DEBUG=1shift ;;-h|–help)echo “Usage: basename $0 --add USER_LIST --del USER_LIST -v|–verbose -h|–help”exit 0;;–add)ADD=1ADDUSERS=$2shift 2;;–del)DEL=1DELUSERS=$2shift 2;;*)echo “Usage: basename $0 --add USER_LIST --del USER_LIST -v|–verbose -h|–help”exit 7;;esacfidoneif ; thenfor USER in echo $ADDUSERS | sed 's@,@ @g'; doif id USER &> /dev/null; then && echo \"USER exists.&quot;elseuseradd $USER&amp;&amp; echo “Add user $USER finished.”fidonefiif ; thenfor USER in echo $DELUSERS | sed 's@,@ @g'; doif id $USER &amp;&gt; /dev/null; thenuserdel -r $USER&amp;&amp; echo “Delete USER finished.\" else && echo \"USER not exist.”fidonefi练习：写一个脚本showlogged.sh，其用法格式为：showlogged.sh -v -c -h|–help其中，-h选项只能单独使用，用于显示帮助信息；-c选项时，显示当前系统上登录的所有用户数；如果同时使用了-v选项，则既显示同时登录的用户数，又显示登录的用户的相关信息；如Logged users: 4.They are:root tty2 Feb 18 02:41root pts/1 Mar 8 08:36 (172.16.100.177)root pts/5 Mar 8 07:56 (172.16.100.177)hadoop pts/6 Mar 8 09:16 (172.16.100.177)#!/bin/bashdeclare -i SHOWNUM=0declare -i SHOWUSERS=0for I in seq 1 $#; doif ; thencase $1 in-h|–help)echo “Usage: basename $0 -h|–help -c|–count -v|–verbose”exit 0 ;;-v|–verbose)let SHOWUSERS=1shift ;;-c|–count)let SHOWNUM=1shift ;;*)echo “Usage: basename $0 -h|–help -c|–count -v|–verbose”exit 8 ;;esacfidoneif ; thenecho “Logged users: who | wc -l.”if ; thenecho “They are:”whofifi终端类型：console: 控制台pty: 物理终端 (VGA)tty#: 虚拟终端 (VGA)ttyS#: 串行终端pts/#: 伪终端shell:ln SRC DEST硬链接：1、只能对文件创建，不能应用于目录；2、不能跨文件系统；3、创建硬链接会增加文件被链接的次数；符号链接：1、可应用于目录；2、可以跨文件系统；3、不会增加被链接文件的链接次数；4、其大小为指定的路径所包含的字符个数；du-s-hdf:链接设备文件：b: 按块为单位，随机访问的设备；c：按字符为单位，线性设备；b: 硬盘 c: 键盘 /dev主设备号 （major number）标识设备类型次设备号 （minor number）标识同一种类型中不同设备mknodmknod … NAME TYPE-m MODE硬盘设备的设备文件名：IDE, ATA：hdSATA：sdSCSI: sdUSB: sda,b,c,…来区别同一种类型下的不同设备IDE:第一个IDE口：主、从/dev/hda, /dev/hdb第二个IDE口：主、从/dev/hdc, /dev/hddsda, sdb, sdc, …hda:hda1: 第一个主分区hda2:hda3:hda4:hda5: 第一个逻辑分区查看当前系统识别了几块硬盘：fdisk -l管理磁盘分区：fdisk /dev/sdap: 显示当前硬件的分区，包括没保存的改动n: 创建新分区e: 扩展分区p: 主分区d: 删除一个分区w: 保存退出q: 不保存退出t: 修改分区类型L:l: 显示所支持的所有类型partprobe练习：写一个脚本通过命令行传递一个文件路径参数给脚本：如果参数多了或少了，报错；如果参数指定的路径对应的是目录而不是文件，报错；而后，检查路径指定的文件是否为空或不存在，如果是，则新建此文件，并在文件中生成如下内容#!/bin/bash而后，使用vim编辑器打开此文件，并让光标处于这个文件的最后一↩︎↩︎↩︎","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"elasticsearch 拼音分词","slug":"history/tech/5953c4d0c2b92f5665eed9a4","date":"2015-12-23T22:36:08.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a4/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a4/","excerpt":"","text":"curl -XPUT http://@127.0.0.1:8888/qianrushi/_settings -d’{“index” : {“analysis” : {“analyzer” : {“pinyin_analyzer” : {“tokenizer” : “my_pinyin”,“filter” :}},“tokenizer” : {“my_pinyin” : {“type” : “pinyin”,“first_letter” : “append”,“padding_char” : &quot; &quot;}}}}}’","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"mysql jdbc river 增量查询","slug":"history/tech/5953c4d0c2b92f5665eed9a3","date":"2015-12-23T22:33:32.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a3/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a3/","excerpt":"","text":"select id as _id,title from ms_ecms_news where lastdotime &gt; UNIX_TIMESTAMP(now())-100","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticsearch的store属性跟_source字段","slug":"history/tech/5953c4d0c2b92f5665eed9a2","date":"2015-12-23T19:22:02.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a2/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a2/","excerpt":"","text":"众所周知_source字段存储的是索引的原始内容，那store属性的设置是为何呢？es为什么要把store的默认取值设置为no？设置为yes是否是重复的存储呢？我们将一个field的值写入es中，要么是想在这个field上执行search操作（不知道具体的id），要么执行retrieve操作（根据id来检索）。但是，如果不显式的将该field的store属性设置为yes，同时_source字段enabled的情况下，你仍然可以获取到这个field的值。这就意味着在一些情况下让一个field不被index或者store仍然是有意义的。当你将一个field的store属性设置为true，这个会在lucene层面处理。lucene是倒排索引，可以执行快速的全文检索，返回符合检索条件的文档id列表。在全文索引之外，lucene也提供了存储字段的值的特性，以支持提供id的查询（根据id得到原始信息）。通常我们在lucene层面存储的field的值是跟随search请求一起返回的（id+field的值）。es并不需要存储你想返回的每一个field的值，因为默认情况下每一个文档的的完整信息都已经存储了，因此可以跟随查询结构返回你想要的所有field值。有一些情况下，显式的存储某些field的值是必须的：当_source被disabled的时候，或者你并不想从source中parser来得到field的值（即使这个过程是自动的）。请记住：从每一个stored field中获取值都需要一次磁盘io，如果想获取多个field的值，就需要多次磁盘io，但是，如果从_source中获取多个field的值，则只需要一次磁盘io，因为_source只是一个字段而已。所以在大多数情况下，从_source中获取是快速而高效的。es中默认的设置_source是enable的，存储整个文档的值。这意味着在执行search操作的时候可以返回整个文档的信息。如果不想返回这个文档的完整信息，也可以指定要求返回的field，es会自动从_source中抽取出指定field的值返回（比如说highlighting的需求）。你可以指定一些字段store为true，这意味着这个field的数据将会被单独存储。这时候，如果你要求返回field1（store：yes），es会分辨出field1已经被存储了，因此不会从_source中加载，而是从field1的存储块中加载。哪些情形下需要显式的指定store属性呢？大多数情况并不是必须的。从_source中获取值是快速而且高效的。如果你的文档长度很长，存储_source或者从_source中获取field的代价很大，你可以显式的将某些field的store属性设置为yes。缺点如上边所说：假设你存储了10个field，而如果想获取这10个field的值，则需要多次的io，如果从_source中获取则只需要一次，而且_source是被压缩过的。还有一种情形：reindex from some field，对某些字段重建索引的时候。从source中读取数据然后reindex，和从某些field中读取数据相比，显然后者代价更低一些。这些字段store设置为yes比较合适。总结：如果对某个field做了索引，则可以查询。如果store：yes，则可以展示该field的值。但是如果你存储了这个doc的数据（_source enable），即使store为no，仍然可以得到field的值（client去解析）。所以一个store设置为no 的field，如果_source被disable，则只能检索不能展示。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticsearch","slug":"history/tech/5953c4d0c2b92f5665eed9a0","date":"2015-12-23T03:32:34.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed9a0/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed9a0/","excerpt":"","text":"继PHP、Ruby、Python和Perl之后，Elasticsearch最近发布了Elasticsearch.js，Elasticsearch的JavaScript客户端库。可以在Node.js和浏览器中使用。安装node.js模块在Node.js项目中使用，只需用npm安装：浏览器Elasticsearch.js为现代浏览器准备了构建，可从此处取得。下载后解压缩，然后选择适合你的文件：elasticsearch.jquery.js —— 如果你使用jQueryelasticsearch.angual.js —— 如果你使用Angularelasticsearch.js —— 其他情况设置创建一个elasticsearch.Client的新实例：var elasticsearch = require(‘elasticsearch’);// 使用默认配置连接到 localhost:9200var client = new elasticsearch.Client();// 连接两个节点，负载均衡使用round-robin算法var client = elasticsearch.Client({hosts:});在浏览器中设置Client构造器接受的参数是一样的，但是不同的构建访问构造器的方式有所不同：// elasticsearch.js 将 elasticsearch 命名空间加入窗口var client = elasticsearch.Client({ … });// elasticsearch.jquery.js 将 es 命名空间加入 jQuery 对象var client = jQuery.es.Client({ … });// elasticsearch.angular.js 创建 elasticsearch 模块// 提供 esFactoryvar app = angular.module(‘app’, );app.service(‘es’, function (esFactory) {return esFactory({ … });});使用client实例调用API创建了实例后调用API就很简单了。// 获取状态，参数可选，可以只传递一个回调client.cluster.health(function (err, resp) {if (err) {console.error(err.message);} else {console.dir(resp);}});// 建立索引client.index({index: ‘blog’,type: ‘post’,id: 1,body: {title: ‘JavaScript Everywhere!’,content: ‘It all started when…’,date: ‘2013-12-17’}}, function (err, resp) {// …});// 搜索文档client.search({index: ‘users’,size: 50,body: {query: {match: {profile: ‘elasticsearch’}}}}).then(function (resp) {var hits = resp.body.hits;});Elasticsearch.js以Apache 2.0许可证发布，源代码在Github上。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"elasticsearch mapping","slug":"history/tech/5953c4d0c2b92f5665eed99f","date":"2015-12-23T03:24:51.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed99f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed99f/","excerpt":"","text":"最近项目准备用到elasticsearch， 首先需要搞清楚elasticsearch的一些概念，在网上发现这篇文章不错，以通俗易懂的语言讲明白了mapping的概念。默认mappingelasticsearch(以下简称ES)是没有模式(schema)的，当我们执行以下命令：curl -XPUT http://localhost:9200/test/item/1 -d ‘{“name”:“zach”, “description”: “A Pretty cool guy.”}’ES能非常聪明的识别出&quot;name&quot;和&quot;description&quot;字段的类型是string， ES默认会创建以下的mapping。mappings: {item: {properties: {description: {type: string}name: {type: string}}}}什么是mappingES的mapping非常类似于静态语言中的数据类型：声明一个变量为int类型的变量， 以后这个变量都只能存储int类型的数据。同样的， 一个number类型的mapping字段只能存储number类型的数据。同语言的数据类型相比，mapping还有一些其他的含义，mapping不仅告诉ES一个field中是什么类型的值， 它还告诉ES如何索引数据以及数据是否能被搜索到。当你的查询没有返回相应的数据， 你的mapping很有可能有问题。当你拿不准的时候， 直接检查你的mapping。剖析mapping一个mapping由一个或多个analyzer组成， 一个analyzer又由一个或多个filter组成的。当ES索引文档的时候，它把字段中的内容传递给相应的analyzer，analyzer再传递给各自的filters。filter的功能很容易理解：一个filter就是一个转换数据的方法， 输入一个字符串，这个方法返回另一个字符串，比如一个将字符串转为小写的方法就是一个filter很好的例子。一个analyzer由一组顺序排列的filter组成，执行分析的过程就是按顺序一个filter一个filter依次调用， ES存储和索引最后得到的结果。总结来说， mapping的作用就是执行一系列的指令将输入的数据转成可搜索的索引项。默认analyzer回到我们的例子， ES猜测description字段是string类型，于是默认创建一个string类型的mapping，它使用默认的全局analyzer， 默认的analyzer是标准analyzer, 这个标准analyzer有三个filter：token filter, lowercase filter和stop token filter。我们可以在做查询的时候键入_analyze关键字查看分析的过程。使用以下指令查看description字段的转换过程：curl -X GET “http://localhost:9200/test/_analyze?analyzer=standard&amp;pretty=true” -d “A Pretty cool guy.”{“tokens” :可以看到， 我们的description字段的值转换成了, , ， 在转换过程中大写的A， 标点符号都被filter过滤掉了， Pretty也转成了全小写的pretty， 这里比较重要的是， 即使ES存储数据的时候仍然存储的是完整的数据， 但是可以搜索到这条数据的关键字只剩下这三个单词了， 其他的都是抛弃掉了。看看以单词a来搜索的结果：$ curl -X GET “http://localhost:9200/test/_search?pretty=true” -d ‘{“query” : {“text” : { “description”: “a” }}}’{“took” : 29,“timed_out” : false,“_shards” : {“total” : 5,“successful” : 5,“failed” : 0},“hits” : {“total” : 0,“max_score” : null,“hits” :}}text类型的搜索在查询过程中使用了和之前插入数据相同的分析/过滤系统， 所以我们输入&quot;a&quot;，mapping不会有任何返回， 因为单词“a”不会被ES存储和索引。反过来，如果我们使用单词&quot;cool&quot;进行搜索：curl -X GET “http://localhost:9200/test/_search?pretty=true” -d ‘{“query” : {“text” : { “description”: “cool” }}}’{“took” : 29,“timed_out” : false,“_shards” : {“total” : 5,“successful” : 5,“failed” : 0},“hits” : {“total” : 1,“max_score” : 0.15342641,“hits” :}}现在就能得到正确的结果，这是一个公认的简单例子， 但是它描述了ES是如何工作的， 不要把mapping想成是数据类型， 把它想象成是搜索数据的指令集合。如果你不想字符&quot;a&quot;被删除， 你需要修改你的analyzer。原文: http://euphonious-intuition.com/2012/07/an-introduction-to-mapping-in-elasticsearch/","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticsearch 基本命令","slug":"history/tech/5953c4d0c2b92f5665eed99e","date":"2015-12-23T03:22:35.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed99e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed99e/","excerpt":"","text":"开始学习使用 elasticsearch, 把步骤记录在这里：最大的特点：数据库的 database, 就是 index数据库的 table, 就是 tag不要使用browser， 使用curl来进行客户端操作. 否则会出现 java heap ooxx…curl: -X 后面跟 RESTful ： GET, POST …-d 后面跟数据。 (d = data to send)create:指定 ID 来建立新记录。 （貌似PUT， POST都可以）$ curl -XPOST localhost:9200/films/md/2 -d ’{ “name”:“hei yi ren”, “tag”: “good”}’使用自动生成的 ID 建立新纪录：$ curl -XPOST localhost:9200/films/md -d ’{ “name”:“ma da jia si jia3”, “tag”: “good”}’查询：2.1 查询所有的 index, type:$ curl localhost:9200/_search?pretty=true2.2 查询某个index下所有的type:$ curl localhost:9200/films/_search2.3 查询某个index 下， 某个 type下所有的记录：$ curl localhost:9200/films/md/_search?pretty=true2.4 带有参数的查询：$ curl localhost:9200/films/md/_search?q=tag:good{“took”:7,“timed_out”:false,&quot;_shards&quot;:{“total”:5,“successful”:5,“failed”:0},“hits”:{“total”:2,“max_score”:1.0,“hits”:}}2.5 使用JSON参数的查询： （注意 query 和 term 关键字）$ curl localhost:9200/film/_search -d ’{“query” : { “term”: { “tag”:“bad”}}}’update$ curl -XPUT localhost:9200/films/md/1 -d { …(data)… }删除。 删除所有的：$ curl -XDELETE localhost:9200/films","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"最完整的Elasticsearch 基础教程","slug":"history/tech/5953c4d0c2b92f5665eed99d","date":"2015-12-23T03:18:07.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed99d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed99d/","excerpt":"","text":"翻译：潘飞（tinylambda@gmail.com）基础概念Elasticsearch有几个核心概念。从一开始理解这些概念会对整个学习过程有莫大的帮助。 接近实时（NRT） Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒）。 集群（cluster） 一个集群就是由一个或多个节点组织在一起，它们共同持有你整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是 “elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。在产品环境中显式地设定这个名字是一个好 习惯，但是使用默认值来进行测试/开发也是不错的。 节点（node） 一个节点是你集群中的一个服务器，作为集群的一部分，它存储你的数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况 下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网 络中的哪些服务器对应于Elasticsearch集群中的哪些节点。 一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意 味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。 在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。 索引（index） 一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名 字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。 在一个集群中，如果你想，可以定义任意多的索引。 类型（type） 在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个 类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类 型，当然，也可以为评论数据定义另一个类型。 文档（document） 一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以 JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。 在一个index/type里面，只要你想，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。 分片和复制（shards &amp; replicas） 一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。 为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。 分片之所以重要，主要有两方面的原因： - 允许你水平分割/扩展你的内容容量 - 允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量 至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。 在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非 常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。 复制之所以重要，有两个主要原因： - 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。 - 扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行 总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和 复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变 分片的数量。 默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。 这些问题搞清楚之后，我们就要进入好玩的部分了... 安装Elasticsearch依赖Java 7。在本文写作的时候，推荐使用Oracle JDK 1.7.0_55版本。Java的安装，在各个平台上都有差异，所以我们不想在这里深入太多细节。我只想说，在你安装Elasticsearch之前，你 可以通过以下命令来检查你的Java版本（如果有需要，安装或者升级）： java -version echo $JAVA_HOME 一旦我们将Java安装完成，我们就可以下载并安装Elasticsearch了。其二进制文件可以从 www.elasticsearch.org/download这里下载，你也可以从这里下载以前发布的版本。对于每个版本，你可以在zip、tar、 DEB、RPM类型的包中选择下载。简单起见，我们使用tar包。 我们像下面一样下载Elasticsearch 1.1.1 tar包（Windows用户应该下载zip包）： curl -L -O https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.1.1.tar.gz 然后，如下将其解压（Windows下需要unzip响应的zip包）： tar -xzvf elasticsearch-1.1.1.tar.gz 这将在你的当前目录下创建很多文件和目录。然后，我们进入到bin目录下： cd elasticsearch-1.1.1/bin 至此，我们已经准备好开启我们的节点和单节点集群（Windows用户应该运行elasticsearch.bat文件）： ./elasticsearch 如果一切顺利，你将看到大量的如下信息： ./elasticsearch version, pid, build initializing ... loaded [], sites [] initialized starting ... bound_address {inet}, publish_address {inet} new_master [inet], reason: zen-disco-join (elected_as_master) elasticsearch/rWMtGj3dQouz2r6ZFL9v4g bound_address {inet}, publish_address {inet} recovered indices into cluster_state started 不去涉及太多细节，我们可以看到，一叫做“New Goblin”（你会见到一个不同的漫威漫画角色）的节点启动并且将自己选做单结点集群的master。现在不用关心master是什么东西。这里重要的就是，我们在一个集群中开启了一个节点。 正如先前提到的，我们可以覆盖集群或者节点的名字。我们可以在启动Elasticsearch的时候通过命令行来指定，如下： ./elasticsearch --cluster.name my_cluster_name --node.name my_node_name 也要注意一下有http标记的那一行，它提供了有关HTTP地址（192.168.8.112）和端口（9200）的信息，通过这个地址和端口我们就可以 访问我们的节点了。默认情况下，Elasticsearch使用9200来提供对其REST API的访问。如果有必要，这个端口是可以配置的。 探索你的集群rest接口 现在我们已经有一个正常运行的节点（和集群）了，下一步就是要去理解怎样与其通信了。幸运的是，Elasticsearch提供了非常全面和强大的 REST API，利用这个REST API你可以同你的集群交互。下面是利用这个API，可以做的几件事情： - 检查你的集群、节点和索引的健康状态、和各种统计信息 - 管理你的集群、节点、索引数据和元数据 - 对你的索引进行CRUD（创建、读取、更新和删除）和搜索操作 - 执行高级的查询操作，像是分页、排序、过滤、脚本编写（scripting）、小平面刻画（faceting）、聚合（aggregations）和许多其它操作 集群健康 让我们以基本的健康检查作为开始，我们可以利用它来查看我们集群的状态。此过程中，我们使用curl，当然，你也可以使用任何可以创建HTTP/REST 调用的工具。我们假设我们还在我们启动Elasticsearch的节点上并打开另外一个shell窗口。 要检查集群健康，我们将使用_cat API。需要事先记住的是，我们的节点HTTP的端口是9200： curl 'localhost:9200/_cat/health?v' 相应的响应是： epoch timestamp cluster status node.total node.data shards pri relo init unassign 1394735289 14:28:09 elasticsearch green 1 1 0 0 0 0 0 可以看到，我们集群的名字是“elasticsearch”，正常运行，并且状态是绿色。 当我们询问集群状态的时候，我们要么得到绿色、黄色或红色。绿色代表一切正常（集群功能齐全），黄色意味着所有的数据都是可用的，但是某些复制没有被分配 （集群功能齐全），红色则代表因为某些原因，某些数据不可用。注意，即使是集群状态是红色的，集群仍然是部分可用的（它仍然会利用可用的分片来响应搜索请 求），但是可能你需要尽快修复它，因为你有丢失的数据。 也是从上面的响应中，我们可以看到，一共有一个节点，由于里面没有数据，我们有0个分片。注意，由于我们使用默认的集群名字 （elasticsearch），并且由于Elasticsearch默认使用网络多播（multicast）发现其它节点，如果你在你的网络中启动了多 个节点，你就已经把她们加入到一个集群中了。在这种情形下，你可能在上面的响应中看到多个节点。 我们也可以获得节集群中的节点列表： curl 'localhost:9200/_cat/nodes?v' 对应的响应是: curl 'localhost:9200/_cat/nodes?v' host ip heap.percent ram.percent load node.role master name mwubuntu1 127.0.1.1 8 4 0.00 d * New Goblin 这儿，我们可以看到我们叫做“New Goblin”的节点，这个节点是我们集群中的唯一节点。 列出所有的索引 让我们看一下我们的索引： curl 'localhost:9200/_cat/indices?v' 响应是： curl 'localhost:9200/_cat/indices?v' health index pri rep docs.count docs.deleted store.size pri.store.size 这个结果意味着，在我们的集群中，我们没有任何索引。 创建一个索引 现在让我们创建一个叫做“customer”的索引，然后再列出所有的索引： curl -XPUT 'localhost:9200/customer?pretty' curl 'localhost:9200/_cat/indices?v' 第一个命令使用PUT创建了一个叫做“customer”的索引。我们简单地将pretty附加到调用的尾部，使其以美观的形式打印出JSON响应（如果有的话）。 响应如下： curl -XPUT 'localhost:9200/customer?pretty' { &quot;acknowledged&quot; : true } curl 'localhost:9200/_cat/indices?v' health index pri rep docs.count docs.deleted store.size pri.store.size yellow customer 5 1 0 0 495b 495b 第二个命令的结果告知我们，我们现在有一个叫做customer的索引，并且它有5个主分片和1份复制（都是默认值），其中包含0个文档。 你可能也注意到了这个customer索引有一个黄色健康标签。回顾我们之前的讨论，黄色意味着某些复制没有（或者还未）被分配。这个索引之所以这样，是 因为Elasticsearch默认为这个索引创建一份复制。由于现在我们只有一个节点在运行，那一份复制就分配不了了（为了高可用），直到当另外一个节 点加入到这个集群后，才能分配。一旦那份复制在第二个节点上被复制，这个节点的健康状态就会变成绿色。 索引并查询一个文档 现在让我们放一些东西到customer索引中。首先要知道的是，为了索引一个文档，我们必须告诉Elasticsearch这个文档要到这个索引的哪个类型（type）下。 让我们将一个简单的客户文档索引到customer索引、“external”类型中，这个文档的ID是1，操作如下： curl -XPUT ‘localhost:9200/customer/external/1?pretty’ -d ’ { “name”: “John Doe” }’ 响应如下： curl -XPUT ‘localhost:9200/customer/external/1?pretty’ -d ’ { “name”: “John Doe” }’ { “_index” : “customer”, “_type” : “external”, “_id” : “1”, “_version” : 1, “created” : true } 从上面的响应中，我们可以看到，一个新的客户文档在customer索引和external类型中被成功创建。文档也有一个内部id 1， 这个id是我们在索引的时候指定的。 有一个关键点需要注意，Elasticsearch在你想将文档索引到某个索引的时候，并不强制要求这个索引被显式地创建。在前面这个例子中，如果customer索引不存在，Elasticsearch将会自动地创建这个索引。 现在，让我们把刚刚索引的文档取出来： curl -XGET ‘localhost:9200/customer/external/1?pretty’ 响应如下： curl -XGET ‘localhost:9200/customer/external/1?pretty’ { “_index” : “customer”, “_type” : “external”, “_id” : “1”, “_version” : 1, “found” : true, “_source” : { “name”: “John Doe” } } 除了一个叫做found的字段来指明我们找到了一个ID为1的文档，和另外一个字段——_source——返回我们前一步中索引的完整JSON文档之外，其它的都没有什么特别之处。 删除一个文档 现在让我们删除我们刚刚创建的索引，并再次列出所有的索引： curl -XDELETE ‘localhost:9200/customer?pretty’ curl ‘localhost:9200/_cat/indices?v’ 响应如下： curl -XDELETE ‘localhost:9200/customer?pretty’ { “acknowledged” : true } curl ‘localhost:9200/_cat/indices?v’ health index pri rep docs.count docs.deleted store.size pri.store.size 这表明我们成功地删除了这个索引，现在我们回到了集群中空无所有的状态。 在更进一步之前，我们再细看一下一些我们学过的API命令： curl -XPUT ‘localhost:9200/customer’ curl -XPUT ‘localhost:9200/customer/external/1’ -d ’ { “name”: “John Doe” }’ curl ‘localhost:9200/customer/external/1’ curl -XDELETE ‘localhost:9200/customer’ 如果我们仔细研究以上的命令，我们可以发现访问Elasticsearch中数据的一个模式。这个模式可以被总结为： curl - 😕/ 这个REST访问模式普遍适用于所有的API命令，如果你能记住它，你就会为掌握Elasticsearch开一个好头。修改你的数据Elasticsearch提供了近乎实时的数据操作和搜索功能。默认情况下，从你索引/更新/删除你的数据动作开始到它出现在你的搜索结果中，大概会有1秒钟的延迟。这和其它类似SQL的平台不同，数据在一个事务完成之后就会立即可用。 索引/替换文档 我们先前看到，怎样索引一个文档。现在我们再次调用那个命令： curl -XPUT 'localhost:9200/customer/external/1?pretty' -d ' { &quot;name&quot;: &quot;John Doe&quot; }' 再次，以上的命令将会把这个文档索引到customer索引、external类型中，其ID是1。如果我们对一个不同（或相同）的文档应用以上的命令，Elasticsearch将会用一个新的文档来替换（重新索引）当前ID为1的那个文档。 curl -XPUT 'localhost:9200/customer/external/1?pretty' -d ' { &quot;name&quot;: &quot;Jane Doe&quot; }' 以上的命令将ID为1的文档的name字段的值从“John Doe”改成了“Jane Doe”。如果我们使用一个不同的ID，一个新的文档将会被索引，当前已经在索引中的文档不会受到影响。 curl -XPUT 'localhost:9200/customer/external/2?pretty' -d ' { &quot;name&quot;: &quot;Jane Doe&quot; }' 以上的命令，将会索引一个ID为2的新文档。 在索引的时候，ID部分是可选的。如果不指定，Elasticsearch将产生一个随机的ID来索引这个文档。Elasticsearch生成的ID会作为索引API调用的一部分被返回。 以下的例子展示了怎样在没有指定ID的情况下来索引一个文档： curl -XPOST 'localhost:9200/customer/external?pretty' -d ' { &quot;name&quot;: &quot;Jane Doe&quot; }' 注意，在上面的情形中，由于我们没有指定一个ID，我们使用的是POST而不是PUT。 更新文档 除了可以索引、替换文档之外，我们也可以更新一个文档。但要注意，Elasticsearch底层并不支持原地更新。在我们想要做一次更新的时候，Elasticsearch先删除旧文档，然后在索引一个更新过的新文档。 下面的例子展示了怎样将我们ID为1的文档的name字段改成“Jane Doe”： curl -XPOST ‘localhost:9200/customer/external/1/_update?pretty’ -d ’ { “doc”: { “name”: “Jane Doe” } }’ 下面的例子展示了怎样将我们ID为1的文档的name字段改成“Jane Doe”的同时，给它加上age字段： curl -XPOST ‘localhost:9200/customer/external/1/_update?pretty’ -d ’ { “doc”: { “name”: “Jane Doe”, “age”: 20 } }’ 更新也可以通过使用简单的脚本来进行。这个例子使用一个脚本将age加5： curl -XPOST ‘localhost:9200/customer/external/1/_update?pretty’ -d ’ { “script” : “ctx._source.age += 5” }’ 在上面的例子中，ctx._source指向当前要被更新的文档。 注意，在写作本文时，更新操作只能一次应用在一个文档上。将来，Elasticsearch将提供同时更新符合指定查询条件的多个文档的功能（类似于SQL的UPDATE-WHERE语句）。删除文档 删除文档是相当直观的。以下的例子展示了我们怎样删除ID为2的文档： curl -XDELETE ‘localhost:9200/customer/external/2?pretty’ 我们也能够一次删除符合某个查询条件的多个文档。以下的例子展示了如何删除名字中包含“John”的所有的客户： curl -XDELETE ‘localhost:9200/customer/external/_query?pretty’ -d ’ { “query”: { “match”: { “name”: “John” } } }’ 注意，以上的URI变成了/_query，以此来表明这是一个“查询删除”API，其中删除查询标准放在请求体中，但是我们仍然使用DELETE。现在先不要担心查询语法，我们将会在本教程后面的部分中涉及。批处理： 除了能够对单个的文档进行索引、更新和删除之外，Elasticsearch也提供了以上操作的批量处理功能，这是通过使用_bulk API实现的。这个功能之所以重要，在于它提供了非常高效的机制来尽可能快的完成多个操作，与此同时使用尽可能少的网络往返。 作为一个快速的例子，以下调用在一次bulk操作中索引了两个文档（ID 1 - John Doe and ID 2 - Jane Doe）: curl -XPOST ‘localhost:9200/customer/external/_bulk?pretty’ -d ’ {“index”:{&quot;_id&quot;:“1”}} {“name”: “John Doe” } {“index”:{&quot;_id&quot;:“2”}} {“name”: “Jane Doe” } ’ 以下例子在一个bulk操作中，首先更新第一个文档（ID为1），然后删除第二个文档（ID为2）： curl -XPOST ‘localhost:9200/customer/external/_bulk?pretty’ -d ’ {“update”:{&quot;_id&quot;:“1”}} {“doc”: { “name”: “John Doe becomes Jane Doe” } } {“delete”:{&quot;_id&quot;:“2”}} ’ 注意上面的delete动作，由于删除动作只需要被删除文档的ID，所以并没有对应的源文档。 bulk API按顺序执行这些动作。如果其中一个动作因为某些原因失败了，将会继续处理它后面的动作。当bulk API返回时，它将提供每个动作的状态（按照同样的顺序），所以你能够看到某个动作成功与否。探索你的数据样本数据集 现在我们对于基本的东西已经有了一些感觉，现在让我们尝试使用一些更加贴近现实的数据集。我已经准备了一些假想的客户的银行账户信息的JSON文档的样本。文档具有以下的模式（schema）： { &quot;account_number&quot;: 0, &quot;balance&quot;: 16623, &quot;firstname&quot;: &quot;Bradshaw&quot;, &quot;lastname&quot;: &quot;Mckenzie&quot;, &quot;age&quot;: 29, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;244 Columbus Place&quot;, &quot;employer&quot;: &quot;Euron&quot;, &quot;email&quot;: &quot;bradshawmckenzie@euron.com&quot;, &quot;city&quot;: &quot;Hobucken&quot;, &quot;state&quot;: &quot;CO&quot; } 我是在http://www.json-generator.com/上生成这些数据的。 载入样本数据 你可以从https://github.com/bly2k/files/blob/master/accounts.zip?raw=true下载这个样本数据集。将其解压到当前目录下，如下，将其加载到我们的集群里： curl -XPOST 'localhost:9200/bank/account/_bulk?pretty' --data-binary @accounts.json curl 'localhost:9200/_cat/indices?v' 响应是： curl 'localhost:9200/_cat/indices?v' health index pri rep docs.count docs.deleted store.size pri.store.size yellow bank 5 1 1000 0 424.4kb 424.4kb 这意味着我们成功批量索引了1000个文档到银行索引中（account类型）。 搜索API 现在，让我们以一些简单的搜索来开始。有两种基本的方式来运行搜索：一种是在REST请求的URI中发送搜索参数，另一种是将搜索参数发送到REST请求 体中。请求体方法的表达能力更好，并且你可以使用更加可读的JSON格式来定义搜索。我们将尝试使用一次请求URI作为例子，但是教程的后面部分，我们将 仅仅使用请求体方法。 搜索的REST API可以通过_search端点来访问。下面这个例子返回bank索引中的所有的文档： curl 'localhost:9200/bank/_search?q=*&amp;pretty' 我们仔细研究一下这个查询调用。我们在bank索引中搜索（_search端点），并且q=*参数指示Elasticsearch去匹配这个索引中所有的文档。pretty参数，和以前一样，仅仅是告诉Elasticsearch返回美观的JSON结果。 以下是响应（部分列出）： curl 'localhost:9200/bank/_search?q=*&amp;pretty' { &quot;took&quot; : 63, &quot;timed_out&quot; : false, &quot;_shards&quot; : { &quot;total&quot; : 5, &quot;successful&quot; : 5, &quot;failed&quot; : 0 }, &quot;hits&quot; : { &quot;total&quot; : 1000, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ { &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : {&quot;account_number&quot;:1,&quot;balance&quot;:39225,&quot;firstname&quot;:&quot;Amber&quot;,&quot;lastname&quot;:&quot;Duke&quot;,&quot;age&quot;:32,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;880 Holmes Lane&quot;,&quot;employer&quot;:&quot;Pyrami&quot;,&quot;email&quot;:&quot;amberduke@pyrami.com&quot;,&quot;city&quot;:&quot;Brogan&quot;,&quot;state&quot;:&quot;IL&quot;} }, { &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;6&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : {&quot;account_number&quot;:6,&quot;balance&quot;:5686,&quot;firstname&quot;:&quot;Hattie&quot;,&quot;lastname&quot;:&quot;Bond&quot;,&quot;age&quot;:36,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;671 Bristol Street&quot;,&quot;employer&quot;:&quot;Netagy&quot;,&quot;email&quot;:&quot;hattiebond@netagy.com&quot;,&quot;city&quot;:&quot;Dante&quot;,&quot;state&quot;:&quot;TN&quot;} }, { &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, 对于这个响应，我们看到了以下的部分： - took —— Elasticsearch执行这个搜索的耗时，以毫秒为单位 - timed_out —— 指明这个搜索是否超时 - _shards —— 指出多少个分片被搜索了，同时也指出了成功/失败的被搜索的shards的数量 - hits —— 搜索结果 - hits.total —— 能够匹配我们查询标准的文档的总数目 - hits.hits —— 真正的搜索结果数据（默认只显示前10个文档） - _score和max_score —— 现在先忽略这些字段 使用请求体方法的等价搜索是： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match_all&quot;: {} } }' 这里的不同之处在于，并不是向URI中传递q=*，取而代之的是，我们在_search API的请求体中POST了一个JSON格式请求体。我们将在下一部分中讨论这个JSON查询。 响应是： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match_all&quot;: {} } }' { &quot;took&quot; : 26, &quot;timed_out&quot; : false, &quot;_shards&quot; : { &quot;total&quot; : 5, &quot;successful&quot; : 5, &quot;failed&quot; : 0 }, &quot;hits&quot; : { &quot;total&quot; : 1000, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ { &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : {&quot;account_number&quot;:1,&quot;balance&quot;:39225,&quot;firstname&quot;:&quot;Amber&quot;,&quot;lastname&quot;:&quot;Duke&quot;,&quot;age&quot;:32,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;880 Holmes Lane&quot;,&quot;employer&quot;:&quot;Pyrami&quot;,&quot;email&quot;:&quot;amberduke@pyrami.com&quot;,&quot;city&quot;:&quot;Brogan&quot;,&quot;state&quot;:&quot;IL&quot;} }, { &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;6&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : {&quot;account_number&quot;:6,&quot;balance&quot;:5686,&quot;firstname&quot;:&quot;Hattie&quot;,&quot;lastname&quot;:&quot;Bond&quot;,&quot;age&quot;:36,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;671 Bristol Street&quot;,&quot;employer&quot;:&quot;Netagy&quot;,&quot;email&quot;:&quot;hattiebond@netagy.com&quot;,&quot;city&quot;:&quot;Dante&quot;,&quot;state&quot;:&quot;TN&quot;} }, { &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;13&quot;, 有一点需要重点理解一下，一旦你取回了你的搜索结果，Elasticsearch就完成了使命，它不会维护任何服务器端的资源或者在你的结果中打开游标。 这是和其它类似SQL的平台的一个鲜明的对比， 在那些平台上，你可以在前面先获取你查询结果的一部分，然后如果你想获取结果的剩余部分，你必须继续返回服务端去取，这个过程使用一种有状态的服务器端游 标技术。 介绍查询语言 Elasticsearch提供一种JSON风格的特定领域语言，利用它你可以执行查询。这杯称为查询DSL。这个查询语言相当全面，第一眼看上去可能有些咄咄逼人，但是最好的学习方法就是以几个基础的例子来开始。 回到我们上一个例子，我们执行了这个查询： { &quot;query&quot;: { &quot;match_all&quot;: {} } } 分解以上的这个查询，其中的query部分告诉我查询的定义，match_all部分就是我们想要运行的查询的类型。match_all查询，就是简单地查询一个指定索引下的所有的文档。 除了这个query参数之外，我们也可以通过传递其它的参数来影响搜索结果。比如，下面做了一次match_all并只返回第一个文档： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match_all&quot;: {} }, &quot;size&quot;: 1 }' 注意，如果没有指定size的值，那么它默认就是10。 下面的例子，做了一次match_all并且返回第11到第20个文档： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match_all&quot;: {} }, &quot;from&quot;: 10, &quot;size&quot;: 10 }' 其中的from参数（0-based）从哪个文档开始，size参数指明从from参数开始，要返回多少个文档。这个特性对于搜索结果分页来说非常有帮助。注意，如果不指定from的值，它默认就是0。 下面这个例子做了一次match_all并且以账户余额降序排序，最后返前十个文档： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match_all&quot;: {} }, &quot;sort&quot;: { &quot;balance&quot;: { &quot;order&quot;: &quot;desc&quot; } } }' 执行搜索 现在我们已经知道了几个基本的参数，让我们进一步发掘查询语言吧。首先我们看一下返回文档的字段。默认情况下，是返回完整的JSON文档的。这可以通过 source来引用（搜索hits中的_sourcei字段）。如果我们不想返回完整的源文档，我们可以指定返回的几个字段。 下面这个例子说明了怎样返回两个字段account_number和balance（当然，这两个字段都是指_source中的字段），以下是具体的搜索： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match_all&quot;: {} }, &quot;_source&quot;: }' 注意到上面的例子仅仅是简化了_source字段。它仍将会返回一个叫做_source的字段，但是仅仅包含account_number和balance来年改革字段。 如果你有SQL背景，上述查询在概念上有些像SQL的SELECT FROM。 现在让我们进入到查询部分。之前，我们看到了match_all查询是怎样匹配到所有的文档的。现在我们介绍一种新的查询，叫做match查询，这可以看成是一个简单的字段搜索查询（比如对应于某个或某些特定字段的搜索）。 下面这个例子返回账户编号为20的文档： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match&quot;: { &quot;account_number&quot;: 20 } } }' 下面这个例子返回地址中包含“mill”的所有账户： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match&quot;: { &quot;address&quot;: &quot;mill&quot; } } }' 下面这个例子返回地址中包含“mill”或者包含“lane”的账户： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match&quot;: { &quot;address&quot;: &quot;mill lane&quot; } } }' 下面这个例子是match的变体（match_phrase），它会去匹配短语“mill lane”： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;match_phrase&quot;: { &quot;address&quot;: &quot;mill lane&quot; } } }' 现在，让我们介绍一下布尔查询。布尔查询允许我们利用布尔逻辑将较小的查询组合成较大的查询。 现在这个例子组合了两个match查询，这个组合查询返回包含“mill”和“lane”的所有的账户： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;bool&quot;: { &quot;must&quot;: [ { &quot;match&quot;: { &quot;address&quot;: &quot;mill&quot; } }, { &quot;match&quot;: { &quot;address&quot;: &quot;lane&quot; } } } } }' 在上面的例子中，bool must语句指明了，对于一个文档，所有的查询都必须为真，这个文档才能够匹配成功。 相反的，下面的例子组合了两个match查询，它返回的是地址中包含“mill”或者“lane”的所有的账户: curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;bool&quot;: { &quot;should&quot;: [ { &quot;match&quot;: { &quot;address&quot;: &quot;mill&quot; } }, { &quot;match&quot;: { &quot;address&quot;: &quot;lane&quot; } } } } }' 在上面的例子中，bool should语句指明，对于一个文档，查询列表中，只要有一个查询匹配，那么这个文档就被看成是匹配的。 现在这个例子组合了两个查询，它返回地址中既不包含“mill”，同时也不包含“lane”的所有的账户信息： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;bool&quot;: { &quot;must_not&quot;: [ { &quot;match&quot;: { &quot;address&quot;: &quot;mill&quot; } }, { &quot;match&quot;: { &quot;address&quot;: &quot;lane&quot; } } } } }' 在上面的例子中， bool must_not语句指明，对于一个文档，查询列表中的的所有查询都必须都不为真，这个文档才被认为是匹配的。 我们可以在一个bool查询里一起使用must、should、must_not。此外，我们可以将bool查询放到这样的bool语句中来模拟复杂的、多等级的布尔逻辑。 下面这个例子返回40岁以上并且不生活在ID（daho）的人的账户： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;bool&quot;: { &quot;must&quot;: [ { &quot;match&quot;: { &quot;age&quot;: &quot;40&quot; } } ], &quot;must_not&quot;: [ { &quot;match&quot;: { &quot;state&quot;: &quot;ID&quot; } } } } }' 执行过滤器 在先前的章节中，我们跳过了文档得分的细节（搜索结果中的_score字段）。这个得分是与我们指定的搜索查询匹配程度的一个相对度量。得分越高，文档越相关，得分越低文档的相关度越低。 Elasticsearch中的所有的查询都会触发相关度得分的计算。对于那些我们不需要相关度得分的场景下，Elasticsearch以过滤器的形式 提供了另一种查询功能。过滤器在概念上类似于查询，但是它们有非常快的执行速度，这种快的执行速度主要有以下两个原因 - 过滤器不会计算相关度的得分，所以它们在计算上更快一些 - 过滤器可以被缓存到内存中，这使得在重复的搜索查询上，其要比相应的查询快出许多。 为了理解过滤器，我们先来介绍“被过滤”的查询，这使得你可以将一个查询（像是match_all，match，bool等）和一个过滤器结合起来。作为一个例子，我们介绍一下范围过滤器，它允许我们通过一个区间的值来过滤文档。这通常被用在数字和日期的过滤上。 这个例子使用一个被过滤的查询，其返回值是越在20000到30000之间（闭区间）的账户。换句话说，我们想要找到越大于等于20000并且小于等于30000的账户。 curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;query&quot;: { &quot;filtered&quot;: { &quot;query&quot;: { &quot;match_all&quot;: {} }, &quot;filter&quot;: { &quot;range&quot;: { &quot;balance&quot;: { &quot;gte&quot;: 20000, &quot;lte&quot;: 30000 } } } } } }' 分解上面的例子，被过滤的查询包含一个match_all查询（查询部分）和一个过滤器（filter部分）。我们可以在查询部分中放入其他查询，在 filter部分放入其它过滤器。在上面的应用场景中，由于所有的在这个范围之内的文档都是平等的（或者说相关度都是一样的），没有一个文档比另一个文档 更相关，所以这个时候使用范围过滤器就非常合适了。 通常情况下，要决定是使用过滤器还是使用查询，你就需要问自己是否需要相关度得分。如果相关度是不重要的，使用过滤器，否则使用查询。如果你有SQL背 景，查询和过滤器在概念上类似于SELECT WHERE语句， although more so for filters than queries。 除了match_all, match, bool,filtered和range查询，还有很多其它类型的查uxn/过滤器，我们这里不会涉及。由于我们已经对它们的工作原理有了基本的理解，将其应用到其它类型的查询、过滤器上也不是件难事。 执行聚合 聚合提供了分组并统计数据的能力。理解聚合的最简单的方式是将其粗略地等同为SQL的GROUP BY和SQL聚合函数。在Elasticsearch中，你可以在一个响应中同时返回命中的数据和聚合结果。你可以使用简单的API同时运行查询和多个聚 合，并以一次返回，这避免了来回的网络通信，这是非常强大和高效的。 作为开始的一个例子，我们按照state分组，按照州名的计数倒序排序： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;size&quot;: 0, &quot;aggs&quot;: { &quot;group_by_state&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;state&quot; } } } }' 在SQL中，上面的聚合在概念上类似于： SELECT COUNT(*) from bank GROUP BY state ORDER BY COUNT(*) DESC 响应（其中一部分）是： &quot;hits&quot; : { &quot;total&quot; : 1000, &quot;max_score&quot; : 0.0, &quot;hits&quot; : }, &quot;aggregations&quot; : { &quot;group_by_state&quot; : { &quot;buckets&quot; : [ { &quot;key&quot; : &quot;al&quot;, &quot;doc_count&quot; : 21 }, { &quot;key&quot; : &quot;tx&quot;, &quot;doc_count&quot; : 17 }, { &quot;key&quot; : &quot;id&quot;, &quot;doc_count&quot; : 15 }, { &quot;key&quot; : &quot;ma&quot;, &quot;doc_count&quot; : 15 }, { &quot;key&quot; : &quot;md&quot;, &quot;doc_count&quot; : 15 }, { &quot;key&quot; : &quot;pa&quot;, &quot;doc_count&quot; : 15 }, { &quot;key&quot; : &quot;dc&quot;, &quot;doc_count&quot; : 14 }, { &quot;key&quot; : &quot;me&quot;, &quot;doc_count&quot; : 14 }, { &quot;key&quot; : &quot;mo&quot;, &quot;doc_count&quot; : 14 }, { &quot;key&quot; : &quot;nd&quot;, &quot;doc_count&quot; : 14 } } } 我们可以看到AL（abama）有21个账户，TX有17个账户，ID（daho）有15个账户，依此类推。 注意我们将size设置成0，这样我们就可以只看到聚合结果了，而不会显示命中的结果。 在先前聚合的基础上，现在这个例子计算了每个州的账户的平均余额（还是按照账户数量倒序排序的前10个州）： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;size&quot;: 0, &quot;aggs&quot;: { &quot;group_by_state&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;state&quot; }, &quot;aggs&quot;: { &quot;average_balance&quot;: { &quot;avg&quot;: { &quot;field&quot;: &quot;balance&quot; } } } } } }' 注意，我们把average_balance聚合嵌套在了group_by_state聚合之中。这是所有聚合的一个常用模式。你可以任意的聚合之中嵌套聚合，这样你就可以从你的数据中抽取出想要的概述。 基于前面的聚合，现在让我们按照平均余额进行排序： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;size&quot;: 0, &quot;aggs&quot;: { &quot;group_by_state&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;state&quot;, &quot;order&quot;: { &quot;average_balance&quot;: &quot;desc&quot; } }, &quot;aggs&quot;: { &quot;average_balance&quot;: { &quot;avg&quot;: { &quot;field&quot;: &quot;balance&quot; } } } } } }' 下面的例子显示了如何使用年龄段（20-29，30-39，40-49）分组，然后在用性别分组，然后为每一个年龄段的每一个性别计算平均账户余额： curl -XPOST 'localhost:9200/bank/_search?pretty' -d ' { &quot;size&quot;: 0, &quot;aggs&quot;: { &quot;group_by_age&quot;: { &quot;range&quot;: { &quot;field&quot;: &quot;age&quot;, &quot;ranges&quot;: [ { &quot;from&quot;: 20, &quot;to&quot;: 30 }, { &quot;from&quot;: 30, &quot;to&quot;: 40 }, { &quot;from&quot;: 40, &quot;to&quot;: 50 } }, &quot;aggs&quot;: { &quot;group_by_gender&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;gender&quot; }, &quot;aggs&quot;: { &quot;average_balance&quot;: { &quot;avg&quot;: { &quot;field&quot;: &quot;balance&quot; } } } } } } } }' 有很多关于聚合的细节，我们没有涉及。如果你想做更进一步的实验，http://www.elasticsearch.org/guide/en /elasticsearch/reference/current/search-aggregations.html是一个非常好的起点。 总结 Elasticsearch既是一个简单的产品，也是一个复杂的产品。我们现在已经学习到了基础部分，它的一些原理，以及怎样用REST API来做一些工作。我希望这个教程已经使你对Elasticsearch是什么有了一个更好的理解，跟重要的是，能够激发你继续实验 Elasticsearch的其它特性。 转载： http://blog.csdn.net/cnweike/article/details/33736429","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"批处理","slug":"history/tech/5953c4d0c2b92f5665eed99c","date":"2015-12-23T03:01:50.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed99c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed99c/","excerpt":"","text":"批处理：除了能够对单个的文档进行索引、更新和删除之外，Elasticsearch也提供了以上操作的批量处理功能，这是通过使用_bulk API实现的。这个功能之所以重要，在于它提供了非常高效的机制来尽可能快的完成多个操作，与此同时使用尽可能少的网络往返。 作为一个快速的例子，以下调用在一次bulk操作中索引了两个文档（ID 1 - John Doe and ID 2 - Jane Doe）: curl -XPOST 'localhost:9200/topics/external/_bulk?pretty' -d ' {&quot;index&quot;:{&quot;_id&quot;:&quot;1&quot;}} {&quot;name&quot;: &quot;John Doe&quot; } {&quot;index&quot;:{&quot;_id&quot;:&quot;2&quot;}} {&quot;name&quot;: &quot;Jane Doe&quot; } ' 以下例子在一个bulk操作中，首先更新第一个文档（ID为1），然后删除第二个文档（ID为2）： curl -XPOST 'localhost:9200/topics/external/_bulk?pretty' -d ' {&quot;update&quot;:{&quot;_id&quot;:&quot;1&quot;}} {&quot;doc&quot;: { &quot;name&quot;: &quot;John Doe becomes Jane Doe&quot; } } {&quot;delete&quot;:{&quot;_id&quot;:&quot;2&quot;}} ' 注意上面的delete动作，由于删除动作只需要被删除文档的ID，所以并没有对应的源文档。 bulk API按顺序执行这些动作。如果其中一个动作因为某些原因失败了，将会继续处理它后面的动作。当bulk API返回时，它将提供每个动作的状态（按照同样的顺序），所以你能够看到某个动作成功与否。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"删除文档","slug":"history/tech/5953c4d0c2b92f5665eed99b","date":"2015-12-23T03:00:34.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed99b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed99b/","excerpt":"","text":"删除文档是相当直观的。以下的例子展示了我们怎样删除ID为2的文档： curl -XDELETE 'localhost:9200/customer/external/2?pretty' 我们也能够一次删除符合某个查询条件的多个文档。以下的例子展示了如何删除名字中包含“John”的所有的客户： curl -XDELETE 'localhost:9200/customer/external/_query?pretty' -d ' { &quot;query&quot;: { &quot;match&quot;: { &quot;name&quot;: &quot;John&quot; } } }' 注意，以上的URI变成了/_query，以此来表明这是一个“查询删除”API，其中删除查询标准放在请求体中，但是我们仍然使用DELETE。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"更新文档","slug":"history/tech/5953c4d0c2b92f5665eed99a","date":"2015-12-23T02:59:56.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed99a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed99a/","excerpt":"","text":"在 ElasticSearch 文件下 /config/elasticsearch.yml 中加入：script.groovy.sandbox.enabled: true否则会报错:{“error”: &quot;ElasticsearchIllegalArgumentException; nested: ScriptException[scripts of type , operation and lang are disabled]; &quot;,“status”: 400}更新文档除了可以索引、替换文档之外，我们也可以更新一个文档。但要注意，Elasticsearch底层并不支持原地更新。在我们想要做一次更新的时候，Elasticsearch先删除旧文档，然后在索引一个更新过的新文档。 下面的例子展示了怎样将我们ID为1的文档的name字段改成“Jane Doe”： curl -XPOST 'localhost:9200/topics/external/1/_update?pretty' -d ' { &quot;doc&quot;: { &quot;name&quot;: &quot;Jane Doe&quot; } }' 下面的例子展示了怎样将我们ID为1的文档的name字段改成“Jane Doe”的同时，给它加上age字段： curl -XPOST 'localhost:9200/topics/external/1/_update?pretty' -d ' { &quot;doc&quot;: { &quot;name&quot;: &quot;Jane Doe&quot;, &quot;age&quot;: 20 } }' 更新也可以通过使用简单的脚本来进行。这个例子使用一个脚本将age加5： curl -XPOST 'localhost:9200/topics/external/1/_update?pretty' -d ' { &quot;script&quot; : &quot;ctx._source.age += 5&quot; }' 在上面的例子中，ctx._source指向当前要被更新的文档。 注意，在写作本文时，更新操作只能一次应用在一个文档上。将来，Elasticsearch将提供同时更新符合指定查询条件的多个文档的功能（类似于SQL的UPDATE-WHERE语句）。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"获得节集群中的节点列表","slug":"history/tech/5953c4d0c2b92f5665eed995","date":"2015-12-23T02:55:50.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed995/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed995/","excerpt":"","text":"$curl -XGET http://😡😕_cat/nodes?vhost ip heap.percent ram.percent load node.role master namemyhost 127.0.0.1 36 40 0.00 d * TEST-1","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"elasticsearch cat","slug":"history/tech/5953c4d0c2b92f5665eed994","date":"2015-12-23T02:52:38.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed994/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed994/","excerpt":"","text":"检查集群健康：$curl -XGET http://😡😕_cat/health?v查看节点：$curl -XGET http://😡😕_cat/nodes?vhost ip heap.percent ram.percent load node.role master namemyhost 127.0.0.1 36 40 0.00 d * TEST-1查看索引:$curl -XGET http://😡😕_cat/indices?vhealth status index pri rep docs.count docs.deleted store.size pri.store.sizeyellow open profile 5 1 2 0 11.7kb 11.7kbyellow open logstash 5 1 3246 0 4.8mb 4.8mb","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"curl","slug":"history/tech/5953c4d0c2b92f5665eed993","date":"2015-12-23T02:44:27.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed993/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed993/","excerpt":"","text":"原文地址： http://www.thegeekstuff.com/2012/04/curl-examples/下载单个文件，默认将输出打印到标准输出中(STDOUT)中curl http://www.centos.org通过-o/-O选项保存下载的文件到指定的文件中：-o：将文件保存为命令行中指定的文件名的文件中-O：使用URL中默认的文件名保存文件到本地1 # 将文件下载到本地并命名为mygettext.html2 curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html34 # 将文件保存到本地并命名为gettext.html5 curl -O http://www.gnu.org/software/gettext/manual/gettext.html同样可以使用转向字符&quot;&gt;&quot;对输出进行转向输出同时获取多个文件1 curl -O URL1 -O URL2若同时从同一站点下载多个文件时，curl会尝试重用链接(connection)。通过-L选项进行重定向默认情况下CURL不会发送HTTP Location headers(重定向).当一个被请求页面移动到另一个站点时，会发送一个HTTP Loaction header作为请求，然后将请求重定向到新的地址上。例如：访问google.com时，会自动将地址重定向到google.com.hk上。复制代码1 curl http://www.google.com2345302 Moved678302 Moved9 The document has moved10here.1112复制代码上述输出说明所请求的档案被转移到了http://www.google.com.hk。这是可以通过使用-L选项进行强制重定向1 # 让curl使用地址重定向，此时会查询google.com.hk站点2 curl -L http://www.google.com断点续传通过使用-C选项可对大文件使用断点续传功能，如：复制代码1 # 当文件在下载完成之前结束该进程2 $ curl -O http://www.gnu.org/software/gettext/manual/gettext.html3 ############## 20.1%45 # 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载6 curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html7 ############### 21.1%复制代码对CURL使用网络限速通过–limit-rate选项对CURL的最大网络使用进行限制1 # 下载速度最大不会超过1000B/second23 curl --limit-rate 1000B -O http://www.gnu.org/software/gettext/manual/gettext.html下载指定时间内修改过的文件当下载一个文件时，可对该文件的最后修改日期进行判断，如果该文件在指定日期内修改过，就进行下载，否则不下载。该功能可通过使用-z选项来实现：1 # 若yy.html文件在2011/12/21之后有过更新才会进行下载2 curl -z 21-Dec-11 http://www.example.com/yy.htmlCURL授权在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权1 curl -u username:password URL23 # 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露4 curl -u username URL从FTP服务器下载文件CURL同样支持FTP下载，若在url中指定的是某个文件路径而非具体的某个要下载的文件名，CURL则会列出该目录下的所有文件名而并非下载该目录下的所有文件1 # 列出public_html下的所有文件夹和文件2 curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/34 # 下载xss.php文件5 curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php上传文件到FTP服务器通过 -T 选项可将指定的本地文件上传到FTP服务器上复制代码 将myfile.txt文件上传到服务器curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com 同时上传多个文件curl -u ftpuser:ftppass -T “{file1,file2}” ftp://ftp.testserver.com 从标准输入获取内容保存到服务器指定的文件中curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt复制代码获取更多信息通过使用 -v 和 -trace获取更多的链接信息通过字典查询单词复制代码1 # 查询bash单词的含义2 curl dict://dict.org/d:bash34 # 列出所有可用词典5 curl dict://dict.org/show:db67 # 在foldoc词典中查询bash单词的含义8 curl dict://dict.org/d:bash:foldoc复制代码为CURL设置代理-x 选项可以为CURL添加代理功能1 # 指定代理主机和端口2 curl -x proxysever.test.com:3128 http://google.co.in其他网站整理保存与使用网站cookie信息1 # 将网站的cookies信息保存到sugarcookies文件中2 curl -D sugarcookies http://localhost/sugarcrm/index.php34 # 使用上次保存的cookie信息5 curl -b sugarcookies http://localhost/sugarcrm/index.php传递请求数据默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据可以通过 --data/-d 方式指定使用POST方式传递数据复制代码1 # GET2 curl -u username https://api.github.com/user?access_token=XXXXXXXXXX34 # POST5 curl -u username --data “param1=value1&amp;param2=value” https://api.github.com67 # 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端8 curl --data @filename https://github.api.com/authorizations复制代码注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：1 curl -d “value%201” http://hostname.com在新版本的CURL中，提供了新的选项 --data-urlencode，通过该选项提供的参数会自动转义特殊字符。1 curl --data-urlencode “value 1” http://hostname.com除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：1 curl -I -X DELETE https://api.github.cim上传文件1 curl --form “fileupload=@filename.txt” http://hostname/resourcehttp://curl.haxx.se/docs/httpscripting.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"查看java 版本","slug":"history/tech/5953c4d0c2b92f5665eed992","date":"2015-12-23T02:40:13.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed992/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed992/","excerpt":"","text":"java -versionecho $JAVA_HOME","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://wangxiuwen.github.io/tags/java/"}],"author":"wangxiuwen"},{"title":"索引并查询一个文档","slug":"history/tech/5953c4d0c2b92f5665eed999","date":"2015-12-23T02:24:06.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed999/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed999/","excerpt":"","text":"现在让我们放一些东西到topics索引中。首先要知道的是，为了索引一个文档，我们必须告诉Elasticsearch这个文档要到这个索引的哪个类型（type）下。让我们将一个简单的客户文档索引到topics索引、“external”类型中，这个文档的ID是1，操作如下： curl -XPUT 'localhost:9200/topics/external/1?pretty' -d ' { &quot;name&quot;: &quot;John Doe&quot; }' 响应如下： curl -XPUT 'localhost:9200/topics/external/1?pretty' -d ' { &quot;name&quot;: &quot;John Doe&quot; }' { &quot;_index&quot; : &quot;topics&quot;, &quot;_type&quot; : &quot;external&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;created&quot; : true } 从上面的响应中，我们可以看到，一个新的客户文档在topics索引和external类型中被成功创建。文档也有一个内部id 1， 这个id是我们在索引的时候指定的。 有一个关键点需要注意，Elasticsearch在你想将文档索引到某个索引的时候，并不强制要求这个索引被显式地创建。在前面这个例子中，如果topics索引不存在，Elasticsearch将会自动地创建这个索引。 现在，让我们把刚刚索引的文档取出来： curl -XGET 'localhost:9200/topics/external/1?pretty' 响应如下： curl -XGET 'localhost:9200/topics/external/1?pretty' { &quot;_index&quot; : &quot;topics&quot;, &quot;_type&quot; : &quot;external&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;found&quot; : true, &quot;_source&quot; : { &quot;name&quot;: &quot;John Doe&quot; } } 除了一个叫做found的字段来指明我们找到了一个ID为1的文档，和另外一个字段——_source——返回我们前一步中索引的完整JSON文档之外，其它的都没有什么特别之处。删除一个文档现在让我们删除我们刚刚创建的索引，并再次列出所有的索引： curl -XDELETE 'localhost:9200/topics?pretty' curl 'localhost:9200/_cat/indices?v' 响应如下： curl -XDELETE 'localhost:9200/topics?pretty' { &quot;acknowledged&quot; : true } curl 'localhost:9200/_cat/indices?v' health index pri rep docs.count docs.deleted store.size pri.store.size 这表明我们成功地删除了这个索引，现在我们回到了集群中空无所有的状态。 再次，以上的命令将会把这个文档索引到customer索引、external类型中，其ID是1。如果我们对一个不同（或相同）的文档应用以上的命令，Elasticsearch将会用一个新的文档来替换（重新索引）当前ID为1的那个文档。 curl -XPUT ‘localhost:9200/customer/external/1?pretty’ -d ’ { “name”: “Jane Doe” }’ 以上的命令将ID为1的文档的name字段的值从“John Doe”改成了“Jane Doe”。如果我们使用一个不同的ID，一个新的文档将会被索引，当前已经在索引中的文档不会受到影响。 curl -XPUT ‘localhost:9200/customer/external/2?pretty’ -d ’ { “name”: “Jane Doe” }’ 以上的命令，将会索引一个ID为2的新文档。 在索引的时候，ID部分是可选的。如果不指定，Elasticsearch将产生一个随机的ID来索引这个文档。Elasticsearch生成的ID会作为索引API调用的一部分被返回。 以下的例子展示了怎样在没有指定ID的情况下来索引一个文档： curl -XPOST ‘localhost:9200/customer/external?pretty’ -d ’ { “name”: “Jane Doe” }’ 注意，在上面的情形中，由于我们没有指定一个ID，我们使用的是POST而不是PUT。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"创建一个索引","slug":"history/tech/5953c4d0c2b92f5665eed998","date":"2015-12-23T02:18:53.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed998/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed998/","excerpt":"","text":"现在让我们创建一个叫做&quot;topics&quot;的索引，然后再列出所有的索引： curl -XPUT ‘localhost:9200/customer?pretty’curl ‘localhost:9200/_cat/indices?v’第一个命令使用PUT创建了一个叫做&quot;topics&quot;的索引。我们简单地将pretty附加到调用的尾部，使其以美观的形式打印出JSON响应。响应如下：{ “acknowledged” : true }第二个命令的结果告知我们，我们现在有一个叫做customer的索引，并且它有5个主分片和1份复制（都是默认值），其中包含0个文档。curl ‘localhost:9200/_cat/indices?v’ health index pri rep docs.count docs.deleted store.size pri.store.size yellow customer 5 1 0 0 495b 495b你可能也注意到了这个customer索引有一个黄色健康标签。回顾我们之前的讨论，黄色意味着某些复制没有（或者还未）被分配。这个索引之所以这样，是 因为Elasticsearch默认为这个索引创建一份复制。由于现在我们只有一个节点在运行，那一份复制就分配不了了（为了高可用），直到当另外一个节 点加入到这个集群后，才能分配。一旦那份复制在第二个节点上被复制，这个节点的健康状态就会变成绿色。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"pm2 启动命令","slug":"history/tech/5953c4d0c2b92f5665eed991","date":"2015-12-23T02:10:02.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed991/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed991/","excerpt":"","text":"#!/bin/bashpm2 start /var/www/app/server.js -n app -e /var/log/app/err.log -o /var/log/app/out.log -l /var/log/app/log.log","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"elasticsearch 基础概念","slug":"history/tech/5953c4d0c2b92f5665eed990","date":"2015-12-23T02:07:42.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed990/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed990/","excerpt":"","text":"Elasticsearch有几个核心概念。从一开始理解这些概念会对整个学习过程有莫大的帮助。 接近实时（NRT） Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒）。 集群（cluster） 一个集群就是由一个或多个节点组织在一起，它们共同持有你整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是 “elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。在产品环境中显式地设定这个名字是一个好 习惯，但是使用默认值来进行测试/开发也是不错的。 节点（node） 一个节点是你集群中的一个服务器，作为集群的一部分，它存储你的数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况 下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网 络中的哪些服务器对应于Elasticsearch集群中的哪些节点。 一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意 味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。 在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。 索引（index） 一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名 字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。 在一个集群中，如果你想，可以定义任意多的索引。 类型（type） 在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个 类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类 型，当然，也可以为评论数据定义另一个类型。 文档（document） 一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以 JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。 在一个index/type里面，只要你想，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。 分片和复制（shards &amp; replicas） 一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。 为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。 分片之所以重要，主要有两方面的原因： - 允许你水平分割/扩展你的内容容量 - 允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量 至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。 在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非 常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。 复制之所以重要，有两个主要原因： - 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。 - 扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行 总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和 复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变 分片的数量。 默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"},{"title":"xml2js","slug":"history/tech/5953c4d0c2b92f5665eed997","date":"2015-12-23T02:02:19.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed997/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed997/","excerpt":"","text":"安装：npm install xml2js使用： var xml2js = require(‘xml2js’); var builder = new xml2js.Builder(); // JSON-&gt;xmlvar parser = new xml2js.Parser(); //xml -&gt; json var json = parser.parseString（xml）; 。。。。。 xml = builder.buildObject（json）;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"tcpdump","slug":"history/tech/5953c4d0c2b92f5665eed996","date":"2015-12-23T01:54:09.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed996/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed996/","excerpt":"","text":"tcpdump -i eth0 -w test.cap可以使用wireshark之类的东西打开.cap文件","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"音程","slug":"history/music/5953c4d0c2b92f5665eed98f","date":"2015-12-23T00:16:19.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5953c4d0c2b92f5665eed98f/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5953c4d0c2b92f5665eed98f/","excerpt":"","text":"音程是音与音之间高低的距离，音程决定音响效果。为了音响的效果。和声(曲调)音程旋律音程：发生在自然音阶上的音程单音程：八度之内的音程复音程：八度之外的音程，如2 3 复二度。三度： 大三度 小三度大三度明亮，小三度灰暗。四度：完全(纯)四度增四度： 4-7五度：完全(纯)5度： 三全一半减5度：2全2半完全1度完全(纯)8度大小6度大小7度","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"基本乐理","slug":"基本乐理","permalink":"https://wangxiuwen.github.io/tags/%E5%9F%BA%E6%9C%AC%E4%B9%90%E7%90%86/"}],"author":"wangxiuwen"},{"title":"自然音程","slug":"history/music/5953c4d0c2b92f5665eed98e","date":"2015-12-23T00:14:55.000Z","updated":"2020-11-29T01:42:08.743Z","comments":true,"path":"history/music/5953c4d0c2b92f5665eed98e/","link":"","permalink":"https://wangxiuwen.github.io/history/music/5953c4d0c2b92f5665eed98e/","excerpt":"","text":"发生在自然音阶(1,2,3,4,5,6,7)中的音程。","categories":[{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/categories/%E9%9F%B3%E4%B9%90/"}],"tags":[{"name":"music","slug":"music","permalink":"https://wangxiuwen.github.io/tags/music/"},{"name":"音乐","slug":"音乐","permalink":"https://wangxiuwen.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"基本乐理","slug":"基本乐理","permalink":"https://wangxiuwen.github.io/tags/%E5%9F%BA%E6%9C%AC%E4%B9%90%E7%90%86/"}],"author":"wangxiuwen"},{"title":"linux help 命令","slug":"history/tech/5953c4d0c2b92f5665eed98c","date":"2015-12-22T02:49:57.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed98c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed98c/","excerpt":"","text":"help 命令是最简洁的获取帮助的内部命令","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"man手册章节","slug":"history/tech/5953c4d0c2b92f5665eed98b","date":"2015-12-22T02:46:59.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed98b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed98b/","excerpt":"","text":"1 用户命令(/bin, /usr/bin, /usr/local/bin)2 系统调用3 库用户4 特殊文件(设备文件)5 文件格式6 游戏7 杂项(miscellaneous)8管理命令(/sbin, /usr/sbin, /usr/local/sbin)&lt;&gt; 必选[] 可选… 可以出现多次{} 分组 （哪些是一组，没有特殊意义）man：NAME 简要名称SYNOPSIS：用法说明，包括可用的选项。DESCRIPTION：命令功能的详尽说明，可能包括每一个选项的意义。OPTION：说明每一个选项的意义。FILES：此命令相关的配置文件BUGS：报告bug给谁EXAMPLES：使用示例SEE ALSO：另外参照","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"查看man手册第几章有read","slug":"history/tech/5953c4d0c2b92f5665eed98a","date":"2015-12-22T02:45:00.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed98a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed98a/","excerpt":"","text":"$whatis readread (1p) - read a line from standard inputread (2) - read from a file descriptorread (3p) - read from a fileread (1) - bash built-in commands, see bash(1)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux 获得命令的使用帮助","slug":"history/tech/5953c4d0c2b92f5665eed989","date":"2015-12-22T02:44:11.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed989/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed989/","excerpt":"","text":"内部命令：help COMMAND外部命令：COMMAND --help命令手册(manual)：man COMMAND","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux man 命令 乱码解决","slug":"history/tech/5953c4d0c2b92f5665eed988","date":"2015-12-22T02:42:18.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed988/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed988/","excerpt":"","text":"export LANG=en","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux 的基本原则","slug":"history/tech/5953c4d0c2b92f5665eed987","date":"2015-12-22T02:41:33.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed987/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed987/","excerpt":"","text":"1 由目的单一的小程序组成，适合小程序完成复杂任务2 一切皆为件3 尽量避免捕获用户接口4 配置文件保存为纯文本格式","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"访盘请求完成过程","slug":"history/tech/5953c4d0c2b92f5665eed98d","date":"2015-12-21T20:20:10.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed98d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed98d/","excerpt":"","text":"确定磁盘地址（柱面号，磁头号，扇区号），内存地址（源/目）： 当需要从磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的 控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据 在哪个磁道，哪个扇区。为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点：1）首先必须找到柱面，即磁头需要移动对准相应磁道，这个过程叫做寻道， 所耗费时间叫做寻道时间，2）然后目标扇区旋转到磁头下，即磁盘旋转将目标扇区旋转到磁头下。这个 过程耗费的时间叫做旋转时间。 即一次访盘请求（读/写）完成过程由三个动作组成：1）寻道（时间）：磁头移动定位到指定磁道2）旋转延迟（时间）：等待指定扇区从磁头下旋转经过3）数据传输（时间）：数据在磁盘与内存之间的实际传输 因此在磁盘上读取扇 区数据（一块数据）所需时间：Ti/o=tseek +tla + n *twm 其中: tseek 为寻道时间 tla为旋转时间 twm 为传输时间","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"磁盘工作原理","slug":"磁盘工作原理","permalink":"https://wangxiuwen.github.io/tags/%E7%A3%81%E7%9B%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"}],"author":"wangxiuwen"},{"title":"sublime test3 中设置不在新窗口中打开文件","slug":"history/tech/5953c4d0c2b92f5665eed986","date":"2015-12-21T03:22:18.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed986/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed986/","excerpt":"","text":"1、打开 Preferences -&gt; Setting - User（设置 - 用户）2、在最后一个花括号（即“｝”）前添加如下内容即可：“open_files_in_new_window”: false","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"sublime","slug":"sublime","permalink":"https://wangxiuwen.github.io/tags/sublime/"}],"author":"wangxiuwen"},{"title":"在Submine Text 3中要开启自动换行","slug":"history/tech/5953c4d0c2b92f5665eed985","date":"2015-12-21T03:21:24.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed985/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed985/","excerpt":"","text":"1、打开 Preferences -&gt; Setting - User（设置 - 用户）2、在最后一个花括号（即“｝”）前添加如下内容即可：“word_wrap” : true","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"sublime","slug":"sublime","permalink":"https://wangxiuwen.github.io/tags/sublime/"}],"author":"wangxiuwen"},{"title":"查看linux 命令是否为内建","slug":"history/tech/5953c4d0c2b92f5665eed984","date":"2015-12-21T02:40:22.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed984/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed984/","excerpt":"","text":"命令:type type ls","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux hash 命令","slug":"history/tech/5953c4d0c2b92f5665eed983","date":"2015-12-21T02:35:30.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed983/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed983/","excerpt":"","text":"hash用户查看命令缓存。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux 查看环境变量","slug":"history/tech/5953c4d0c2b92f5665eed982","date":"2015-12-21T02:35:00.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed982/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed982/","excerpt":"","text":"printenv","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"通过shell脚本替换属性文件中的某行记录","slug":"history/tech/5953c4d0c2b92f5665eed981","date":"2015-12-19T18:35:18.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed981/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed981/","excerpt":"","text":"假设有如下属性文件 file.confuser.name=testuser.password=123456通过shell 脚本将 user.name 和 user.password 的value值替换为实际需要的用户名和密码，sed -i “s#^user.name=.#user.name=用户名#g&quot; path/to/file.confsed -i &quot;s#^user.password=.#user.password=密码#g” path/to/file.conf","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"在文件指定行插入一行","slug":"history/tech/5953c4d0c2b92f5665eed980","date":"2015-12-19T18:27:11.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed980/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed980/","excerpt":"","text":"sed -i ‘1i\\abc’ urfile","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux  diff比较远程和本地文件","slug":"history/tech/5953c4d0c2b92f5665eed97d","date":"2015-12-19T18:05:38.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed97d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed97d/","excerpt":"","text":"ssh host “cat /dir/test.txt” | diff - /dir/test.txt","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux  sshfs 远程挂载","slug":"history/tech/5953c4d0c2b92f5665eed97c","date":"2015-12-19T18:04:24.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed97c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed97c/","excerpt":"","text":"apt-get install sshfssshfs mailto:root@192.168.1.218:/home/ /mnt/sshfs 用户名@远程主机IP:远程主机路径 本地挂载点sshfs -o transform_symlinks -o follow_symlinks mailto:user@hostname: /home/username/sshfs-o transform_symlinks 表示转换绝对链接符号为相对链接符号-o follow_symlinks 沿用服务器上的链接符号","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"ubuntu 配置 sshfs","slug":"history/tech/5953c4d0c2b92f5665eed97f","date":"2015-12-19T17:47:34.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed97f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed97f/","excerpt":"","text":"apt-get install sshfs要想挂载远程目录，使用如下命令即可：sshfs user@hostname:path mout_point这里user为远程主机用户名，hostname为远程主机IP地址，path为远程主机中想要挂载到本地的目录，mount_point为挂载到本地的目录。当不需要使用的时候，使用以下命令卸载：fusermount -u mount_point如果想要开机自动挂载，可以在/etc/fstab中加入下面一行：sshfs#user@hostname:path mount_point fuse defaults,auto,allow_other 0 0这就要求必须先把ssh自动登录配置好了，让root用户能够使用user身份登录远程主机，另外allow_other这个参数很重要，没有这个参数的话，挂载过来的目录只有root能够访问。sshfs#root@server1:/home/qianrushi /mnt/qianrushi fuse delay_connect,defaults,auto,allow_other,port=22222,nonempty 0 0","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux 免密码登录","slug":"history/tech/5953c4d0c2b92f5665eed97b","date":"2015-12-19T17:46:49.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed97b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed97b/","excerpt":"","text":"a 机器免密码登录 b 机器a机器上执行：ssh-keygen -t rsa -P ‘’scp id_rsa.pub 192.168.100.10:/root/vim /etc/hosts192.168.100.10 s1b机器上执行：cat id_rsa4.pub &gt; /root/.ssh/authorized_keysa 机器登录：ssh s1","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"centos 配置 sshfs","slug":"history/tech/5953c4d0c2b92f5665eed97e","date":"2015-12-19T17:37:02.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed97e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed97e/","excerpt":"","text":"首先，我们需要安装sshfs软件。sshfs是一个基于SSH文件传输协议的文件系统客户端，它的官方网页是：http://fuse.sourceforge.net/sshfs.html 。在CentOS下，我们可以通过yum来安装(注意使用yum安装需要安装EPEL源)：yum -y install fuse-sshfs安装好后，系统会自动建立fuse用户组，要使用sshfs的用户只要加入这个用户组即可。要想挂载远程目录，使用如下命令即可：sshfs user@hostname:path mout_point这里user为远程主机用户名，hostname为远程主机IP地址，path为远程主机中想要挂载到本地的目录，mount_point为挂载到本地的目录。当不需要使用的时候，使用以下命令卸载：fusermount -u mount_point如果想要开机自动挂载，可以在/etc/fstab中加入下面一行：sshfs#user@hostname:path mount_point fuse defaults,auto,allow_other 0 0这就要求必须先把ssh自动登录配置好了，让root用户能够使用user身份登录远程主机，另外allow_other这个参数很重要，没有这个参数的话，挂载过来的目录只有root能够访问。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"linux pptpd 客户端拨号","slug":"history/tech/5953c4d0c2b92f5665eed97a","date":"2015-12-18T22:33:08.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed97a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed97a/","excerpt":"","text":"pptpsetup --create pptpd --server 198.74.118.93 --username qianrushi–password password --encrypt --start","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"openvpn 启动脚本","slug":"history/tech/5953c4d0c2b92f5665eed979","date":"2015-12-18T22:28:48.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed979/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed979/","excerpt":"","text":"openvpn 启动脚本#!/bin/bash #File: openvpn_turn #Auth: Robin #Date: 2013/01/17 10-30-10 #Desc: Start/stop openvpn client #Vers: 1.0 # # openvpn -s --&gt; stop openvpn client # openvpn -r --&gt; start openvpn client #配置文件所在目录 CONF_DIR=&quot;/etc/openvpn&quot; #配置文件 CONF_FILE=&quot;client.conf&quot; #存放用户名和密码，格式如下 # user_name # password AUTH_FILE=&quot;auth&quot; LOG_FILE=&quot;/tmp/openvpn.log&quot; PID_FILE=&quot;/tmp/openvpn.pid&quot; function do_success { ps -ef|grep openvpn|grep -v grep|awk '{print $2}' &gt;&gt; $PID_FILE rm $LOG_FILE echo -e &quot;Start OPENVPN \\033[32msuccessfully\\033[0m!&quot; exit 0 } function do_fail { echo -e &quot;Start OPENVPN \\033[41mfailure\\033[0m!&quot; echo &quot;Maybe you can get something useful from $LOG_FILE&quot; exit 1 } function if_run { if ;then return 0 else return 1 fi } function start_openvpn { if_run if ;then ps -ef|grep '\\&lt;openvpn\\&gt;' |grep -v grep &amp;&gt; /dev/null if ;then echo -e &quot;OPENVPN is \\033[32malready running\\033[0m!!!&quot; exit 1 else rm $PID_FILE fi fi if ;then echo &gt; $LOG_FILE fi cd $CONF_DIR sudo openvpn --config $CONF_FILE --auth-user-pass $AUTH_FILE &amp;&gt; $LOG_FILE &amp; echo -e &quot;\\033[33mStarting\\033[0m OPENVPN...&quot; sleep 5 cat $LOG_FILE |grep &quot;Sequence Completed&quot; 2&gt; /dev/null &amp;&amp; do_success || do_fail } function stop_openvpn { if_run if ;then echo &quot;OPENVPN is not running!&quot; exit 1 fi for i in `ps -ef|grep '\\&lt;openvpn\\&gt;'|grep -v grep|awk '{print $2}'`;do sudo kill -9 $i done rm $PID_FILE echo -e &quot;OPENVPN is already \\033[41mstop\\033[0m.&quot; } while getopts sr SW;do case $SW in s) stop_openvpn break ;; r) start_openvpn break ;; ?) echo &quot;openvpn_turn &quot; esac done","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"ubuntu 安装OpenVPN客户端","slug":"history/tech/5953c4d0c2b92f5665eed978","date":"2015-12-18T22:27:46.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed978/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed978/","excerpt":"","text":"安装# apt-get install openvpn配置OpenVPN作为客户端，OpenVPN并没有特定的配置文件，而是由服务器提供方给出一个配置文件。对于认证，OpenVPN提供了两种认证方法：基于用户名/密码的认证与SSL证书认证。用户名/密码的认证方法无法（或较难）限制一个账号同时连接多个客户端，而采用证书，则可保证同一证书同一时间只能有一个客户端连接。当然，这些都是由服务器端决定的，不需要客户端进行选择。首先将OpenVPN服务器提供商发给你的配置文件解压，并将所有文件都复制到 /etc/openvpn/中。这些文件中至少包含一个.ovpn文件；如果服务器需要证书认证，则应该还存在另外三个证书文件。看懂OpenVPN配置格式。下面是一个.ovpn配置示例：clientdev tapproto tcp-clientremote 192.168.135.75 1194resolv-retry infinitenobindmute-replay-warningsredirect-gatewayca /etc/ca.crtcert /etc/client.crtkey /etc/client.keycomp-lzoverb 4将以下内容修改成这三个文件的实际位置：ca /etc/ca.crtcert /etc/client.crtkey /etc/client.key连接OpenVPN在配置好.ovpn文件后，执行openvpn /etc/***.ovpn即可连接服务器了。注意，上面的参数应该换成你的配置文件实际位置。此时，终端会回显很多连接日志。如果连接不成功，则可以通过这些日志来确定出错位置。如果要断开，只需要通过Ctrl+C强制终止即可。上面的命令在实际中并不方便，因为它要占用一个独立的终端。在测试成功后，使用以下命令即可在后台连接OpenVPN：openvpn /etc/***.ovpn &gt; /dev/null &amp;值得称赞的是，openvpn非常智能，在连接异常中断、无法连接服务器、断网的情况下，它会自动重连。因此，如果希望开机即自动连接OpenVPN，或者是VPN常年在线，则可将上述命令行加入/etc/rc.local","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"ubuntu 允许root远程登陆","slug":"history/tech/5953c4d0c2b92f5665eed977","date":"2015-12-18T22:24:22.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed977/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed977/","excerpt":"","text":"安装OpenSSH server：使用apt命令安装openssh server$ sudo apt-get install openssh-server可以对 openssh server进行配置$ sudo vi /etc/ssh/sshd_config找到PermitRootLogin no一行，改为PermitRootLogin yes重启 openssh server$ sudo service ssh restart","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"ahjesus Axure RP 7.0注册码","slug":"history/tech/5953c4d0c2b92f5665eed976","date":"2015-12-18T21:37:35.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed976/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed976/","excerpt":"","text":"用户名：axureuser序列号：8wFfIX7a8hHq6yAy6T8zCz5R0NBKeVxo9IKu+kgKh79FL6IyPD6lK7G6+tqEV4LG","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"axure","slug":"axure","permalink":"https://wangxiuwen.github.io/tags/axure/"}],"author":"wangxiuwen"},{"title":"运行jar包","slug":"history/tech/5953c4d0c2b92f5665eed975","date":"2015-12-18T18:11:04.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed975/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed975/","excerpt":"","text":"java -jar xxx.jar","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://wangxiuwen.github.io/tags/java/"}],"author":"wangxiuwen"},{"title":"Number 最大值","slug":"history/tech/5953c4d0c2b92f5665eed974","date":"2015-12-18T04:33:23.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed974/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed974/","excerpt":"","text":"Number.MAX_VALUE1.7976931348623157e+308","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"批量修改文件后缀","slug":"history/tech/5953c4d0c2b92f5665eed972","date":"2015-12-17T03:33:56.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed972/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed972/","excerpt":"","text":"ren * *.mp4ren *.mp4 *.avi","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"cmd 脚本","slug":"cmd-脚本","permalink":"https://wangxiuwen.github.io/tags/cmd-%E8%84%9A%E6%9C%AC/"}],"author":"wangxiuwen"},{"title":"JS获取字符串长度，汉字算两个字节","slug":"history/tech/5953c4d0c2b92f5665eed971","date":"2015-12-17T03:30:33.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed971/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed971/","excerpt":"","text":"//第一种GetLength = function(str){var realLength = 0;for (var i = 0; i &lt; str.length; i++){charCode = str.charCodeAt(i);if (charCode &gt;= 0 &amp;&amp; charCode &lt;= 128)realLength += 1;elserealLength += 2;}return realLength;}//第二种（采取将255意外的字符替换成&quot;aa&quot;的做法，取长度）GetLength = function(str){return str.replace(//g,“aa”).length;};//第三种GetLength = function(s){var len = 0;for(var i=0; i&lt;s.length; i++){var c = s.substr(i,1);var ts = escape©;if(ts.substring(0,2) == “%u”){len+=2;} else{len+=1;}}return len;}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"stdafx.h","slug":"history/tech/5953c4d0c2b92f5665eed970","date":"2015-12-17T02:51:19.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed970/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed970/","excerpt":"","text":"目录http://my.oschina.net/u/1772925/blog/396347#OSC_h1_1http://my.oschina.net/u/1772925/blog/396347#OSC_h2_2http://my.oschina.net/u/1772925/blog/396347#OSC_h2_3http://my.oschina.net/u/1772925/blog/396347#OSC_h2_4stdafx.hVC工程里面经常见到stdafx.h这个头文件，以前也没有特别注意，但是这个文件用不好经常会出错，所以就GOOGLE了一下，总算是弄清楚了。。。stdafx的英文全称为：Standard Application Framework Extensions（标准应用程序框架的扩展）。所谓头文件预编译，就是把一个工程(Project)中使用的一些MFC标准头文件(如Windows.H、Afxwin.H)预先编译，以后该工程编译时，不再编译这部分头文件，仅仅使用预编译的结果。这样可以加快编译速度，节省时间。简介预编译头文件通过编译stdafx.cpp生成，以工程名命名，由于预编译的头文件的后缀是“pch”，所以编译结果文件是projectname.pch。编译器通过一个头文件stdafx.h来使用预编译头文件。stdafx.h这个头文件名是可以在project的编译设置里指定的。编译器认为，所有在指令#include &quot;stdafx.h&quot;前的代码都是预编译的，它跳过#include &quot;stdafx. h&quot;指令，使用projectname.pch编译这条指令之后的所有代码。因此，所有的MFC实现文件第一条语句都是：#include “stdafx.h”。在它前面的所有代码将被忽略，所以其他的头文件应该在这一行后面被包含。否则，你将会得到“No such file or directory”这样让你百思不得其解的错误提示。作用stdafx.h中没有函数库，只是定义了一些环境参数，使得编译出来的程序能在32位的操作系统环境下运行。Windows和MFC的include文件都非常大，即使有一个快速的处理程序，编译程序也要花费相当长的时间来完成工作。由于每个.CPP文件都包含相同的include文件，为每个.CPP文件都重复处理这些文件就显得很傻了。为避免这种浪费，AppWizard和VisualC编译程序一起进行工作，如下所示： ◎AppWizard建立了文件stdafx.h，该文件包含了所有当前工程文件需要的MFCinclude文件。且这一文件可以随被选择的选项而变化。 ◎AppWizard然后就建立Stdafx.cpp。这个文件通常都是一样的。 ◎然后AppWizard就建立起工程文件，这样第一个被编译的文件就是stdafx.cpp。 ◎当VisualC编译stdafx.cpp文件时，它将结果保存在一个名为stdafx.pch的文件里。(扩展名pch表示预编译头文件。) ◎当VisualC编译随后的每个.cpp文件时，它阅读并使用它刚生成的.pch文件。VisualC不再分析Windowsinclude文件，除非你又编辑了stdafx.cpp或stdafx.h。在这个过程中你必须遵守以下规则： ◎你编写的任何.cpp文件都必须首先包含stdafx.h。 ◎如果你有工程文件里的大多数.cpp文件需要.h文件，顺便将它们加在stdafx.h(后部)上，然后预编译stdafx.cpp。 ◎由于.pch文件具有大量的符号信息，它是你的工程文件里最大的文件。如果你的磁盘空间有限，你就希望能将这个你从没使用过的工程文件中的.pch文件删除。执行程序时并不需要它们，且随着工程文件的重新建立，它们也自动地重新建立。原理 通俗一点说当我们使用AppWizard来自动生成某些项目的时候,系统会自动把所需要include的头文件在stdafx.h中先include一下,这样,我们只需要直接include这个stdafx.h文件即可.因为同一个项目中的不同源文件CPP都包含相同的include文件,这样,为每个.CPP文件都重复include这些文件就显得很傻了。当然如果你不用MFC的话就不用了。即：在每个.cpp文件中都include stdafx.h 就相当于包含了其他的如iostream.h等文件","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"MFC","slug":"MFC","permalink":"https://wangxiuwen.github.io/tags/MFC/"}],"author":"wangxiuwen"},{"title":"sorted set","slug":"history/tech/5953c4d0c2b92f5665eed96f","date":"2015-12-17T02:05:15.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed96f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed96f/","excerpt":"","text":"0代表第一个元素， -1 代表最后一个元素，withscores 代表插入顺序zrange myset 0 -1 withscores","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"redis set 类型","slug":"history/tech/5953c4d0c2b92f5665eed96e","date":"2015-12-17T02:02:56.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed96e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed96e/","excerpt":"","text":"数学意义上的集合，比如说处理两个人相同好友，论坛标签等功能","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"查看redis 端口","slug":"history/tech/5953c4d0c2b92f5665eed96b","date":"2015-12-16T02:54:13.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed96b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed96b/","excerpt":"","text":"netstat -tunpl | grep 6379","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"redis 数据类型 string","slug":"history/tech/5953c4d0c2b92f5665eed96d","date":"2015-12-15T18:36:19.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed96d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed96d/","excerpt":"","text":"string 二进制安全：set name qianrushisetnx name qianrushi //不存在则设置setex name 10 qianrushi//设置name 为qianrushi 有效期为10s","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"redis","slug":"redis","permalink":"https://wangxiuwen.github.io/tags/redis/"}],"author":"wangxiuwen"},{"title":"shell 快捷键","slug":"history/tech/5953c4d0c2b92f5665eed96c","date":"2015-12-15T18:11:10.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed96c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed96c/","excerpt":"","text":"整天在shell环境下操作，不积累点快捷输入的小技巧是不行的。最常用的技巧恐怕就是Tab自动补全以及上方向键来回退上几条历史命令了，这些对于csh，bash，ksh，zsh都适用。最近还找到一种快速回退上一条历史的一些小技巧，暂记录之。1、 除了方向键上，还可以用“!!”代表上一条输入的命令，用这个的好处在于可以将这两个字符放在命令行任何位置以便于构成新的命令。例如：./some−shell−command./some-shell-command./some−shell−commandcat !!则后一条命令就相当于cat ./some-shell-command，这样做比先按方向键上回退一条命令，然后定位到开始，插入cat要快捷得多。2、 除了!!，!代表得是上一条命令中最后一个parameter，这是个更有用的变量，例如： ls /some-path-to-a-directorycat!cat !cat!/some-file.txt如果some-path-to-a-directory不幸为一个非常长的路径的时候，使用!$恰好就能省去输入这个超长路径的麻烦，这条命令实际 上就相当于cat /some-path-to-a-directory/some-file.txt3、 !str代表以历史命令中最近一条以str开头的命令。比如!ssh 就是最后一次执行ssh的命令4、 !?str?代表历史命令中最近一条包含str的命令。5、 !n和!-n，前者代表history命令显示出来前面的条目数为n的那条命令，后者代表当前命令条目数减去n的那条命令，例如!-3就代表3 条前的那个命令。对比起来，1和2是相当实用的，剩下3条记得住就用，记不住也无妨了。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"查看 连接列表","slug":"history/tech/5953c4d0c2b92f5665eed963","date":"2015-12-12T04:19:39.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed963/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed963/","excerpt":"","text":"show processlist;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"tar 排除某个目录","slug":"history/tech/5953c4d0c2b92f5665eed96a","date":"2015-12-12T03:15:51.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed96a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed96a/","excerpt":"","text":"tar -zcvf test.tar.gz --exclude=aa --exclude=bb test/*","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"go import 下划线","slug":"history/tech/5953c4d0c2b92f5665eed969","date":"2015-12-12T00:01:20.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed969/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed969/","excerpt":"","text":"下划线：import 下划线（如：import _ hello/imp）的作用：当导入一个包时，该包下的文件里所有init()函数都会被执行，然而，有些时候我们并不需要把整个包都导入进来，仅仅是是希望它执行init()函数而已。这个时候就可以使用 import _ 引用该包。即使用只是引用该包，仅仅是为了调用init()函数，所以无法通过包名来调用包中的其他函数。目录结构：test/main.gotest/hello/init.gomain.go：package mainimport _ “./hello/”func main() {}init.go:package helloimport “fmt”func init() {fmt.Println(“hello-init()”)}func Print() {fmt.Println(“Hello-Print!”)}编译输出：C:/opt/Go/bin/go.exe build -i成功: 进程退出代码 0.D:/workspace/test/test.exehello-init()成功: 进程退出代码 0.点操作import( “fmt”) 这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，也就是前面你调用的fmt.Println(“hello world”)可以省略的写成Println(“hello world”)别名操作别名操作顾名思义我们可以把包命名成另一个我们用起来容易记忆的名字import( f “fmt” ) 别名操作的话调用包函数时前缀变成了我们的前缀，即f.Println(“hello world”)","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"go","slug":"go","permalink":"https://wangxiuwen.github.io/tags/go/"}],"author":"wangxiuwen"},{"title":"go 各种编辑器插件","slug":"history/tech/5953c4d0c2b92f5665eed968","date":"2015-12-11T23:11:50.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed968/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed968/","excerpt":"","text":"https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"go","slug":"go","permalink":"https://wangxiuwen.github.io/tags/go/"}],"author":"wangxiuwen"},{"title":"git -u","slug":"history/tech/5953c4d0c2b92f5665eed967","date":"2015-12-11T22:50:11.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed967/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed967/","excerpt":"","text":"git push -u origin master 相当于git push origin mastergit branch --set-upstream-to=origin/master master","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"refusing to update checked out branch","slug":"history/tech/5953c4d0c2b92f5665eed966","date":"2015-12-11T21:53:49.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed966/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed966/","excerpt":"","text":"&quot;remote:error:refusing to update checked out branch:refs/heads/master&quot;的解决办法这是由于git默认拒绝了push操作，需要进行设置，修改.git/config文件后面添加如下代码denyCurrentBranch = ignore无法查看push后的git中文件的原因与解决方法在初始化远程仓库时最好使用git --bare init一般个人使用，用git init，这时候你的工作区也在这里。你要是想建立一个固定的地址让大家一起用，就在服务器上用git --bare init。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"git","slug":"git","permalink":"https://wangxiuwen.github.io/tags/git/"}],"author":"wangxiuwen"},{"title":"ab 压力测试","slug":"history/tech/5953c4d0c2b92f5665eed965","date":"2015-12-11T21:50:56.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed965/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed965/","excerpt":"","text":"ab -c 1 -n 1 -T 'application/x-www-form-urlencoded' -p /tmp/abpost -H '33:55' http://127.0.0.1:3000/test","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"压力测试","slug":"压力测试","permalink":"https://wangxiuwen.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"}],"author":"wangxiuwen"},{"title":"windows 安装go","slug":"history/tech/5953c4d0c2b92f5665eed964","date":"2015-12-11T20:35:06.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed964/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed964/","excerpt":"","text":"下载：https://golang.org环境变量：新建GOARCH=386新建GOBIN=D:\\go\\bin （你Go安装目录）新建GOOS=windows新建GOROOT=D:\\goPath追加 ;%GOBIN%; （注意要用分号;分隔各个Path项）访问Go安装包中的文档：cmd &gt; godoc --http=:6060打开 http://localhost:6060/doc/install.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"go","slug":"go","permalink":"https://wangxiuwen.github.io/tags/go/"}],"author":"wangxiuwen"},{"title":"awk 过滤log","slug":"history/tech/5953c4d0c2b92f5665eed962","date":"2015-12-10T20:42:14.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed962/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed962/","excerpt":"","text":"cat xxx.log |awk -F ‘(&lt;\\|&gt;)’ ‘{ print $2}’ |head -n 1cat log.log |awk -F ‘(&lt;\\|&gt;)’ ‘{if ($2 ~ /test/) printf(&quot;%s&quot;%s\\n&quot;,$22,$1)}’ |awk -F’(&quot;| - )’ ‘{printf(“内容：%s------时间：%s\\n”,$8,$26)}’ &gt;&gt; a.txt","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"zcat","slug":"history/tech/5953c4d0c2b92f5665eed961","date":"2015-12-10T20:06:05.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed961/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed961/","excerpt":"","text":"查看压缩包","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"innodb myisam 区别","slug":"history/tech/5953c4d0c2b92f5665eed960","date":"2015-12-10T02:35:20.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed960/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed960/","excerpt":"","text":"innodb myisam 区别","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"nodejs buffer 限制","slug":"history/tech/5953c4d0c2b92f5665eed95f","date":"2015-12-10T02:02:49.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed95f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed95f/","excerpt":"","text":"1G","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"string 改整型","slug":"history/tech/5953c4d0c2b92f5665eed95e","date":"2015-12-09T20:41:14.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed95e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed95e/","excerpt":"","text":"db.shop.find({$type:2}).forEach(function(order){var price = new NumberInt(order.price);db.price.update({_id :order._id}, {$set:{price: price}}, {}); });","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"是否是数组","slug":"history/tech/5953c4d0c2b92f5665eed95d","date":"2015-12-09T20:34:48.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed95d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed95d/","excerpt":"","text":"function isArray(arr) {return Object.prototype.toString.call(arr) === “”;}","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"nodejs aes 加密","slug":"history/tech/5953c4d0c2b92f5665eed95c","date":"2015-12-09T20:32:25.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed95c/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed95c/","excerpt":"","text":"加密function aesEncrypt(data, key) {var algorithm = ‘aes-128-ecb’;var clearEncoding = ‘utf8’;var iv = “”;var cipherEncoding = ‘hex’;var key = key || ‘22222222222222222’;//key = new Buffer(keyHex, ‘hex’)try {var cipher = crypto.createCipheriv(algorithm, key, iv);var cipherChunks = [];cipherChunks.push(cipher.update(data, clearEncoding, cipherEncoding));cipherChunks.push(cipher.final(cipherEncoding));return cipherChunks.join(’’);} catch (e) {return ‘’;}}解密：function aesDecrypt(data, key) {var algorithm = ‘aes-128-ecb’;var clearEncoding = ‘utf8’;var iv = “”;var cipherEncoding = ‘hex’;var key = key || ‘1111111111111111’;//key = new Buffer(keyHex, ‘hex’)try {var decipher = crypto.createDecipheriv(algorithm, key, iv);var plainChunks = [], cipherChunks = ;for (var i = 0; i &lt; cipherChunks.length; i++) {plainChunks.push(decipher.update(cipherChunks, cipherEncoding, clearEncoding));}plainChunks.push(decipher.final(clearEncoding));return plainChunks.join(’’);} catch (e) {return ‘’;}};","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"nodejs thrift","slug":"history/tech/5953c4d0c2b92f5665eed95b","date":"2015-12-09T20:30:23.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed95b/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed95b/","excerpt":"","text":"nodejs.thriftstruct User {1: i64 uid,2: string username}service Nodejs {User index(1: User user)}client.jsvar thrift = require(‘thrift’);var Nodejs = require(’./gen-nodejs/Nodejs.js’);var ttypes = require(’./gen-nodejs/nodejs_types.js’);var connection = thrift.createConnection(‘127.0.0.1’, 15300);connection.on(“error”,function(e){console.log(e);});var client = thrift.createClient(Nodejs, connection);var user = new ttypes.User({uid: 123,username: “wangxiuwen”,info: ‘jiaban’});client.index(user, function(err, res){console.log(res, typeof res);});server.jsvar thrift = require(‘thrift’);var Nodejs = require(’./gen-nodejs/Nodejs.js’);var ttypes = require(’./gen-nodejs/nodejs_types.js’);var tf_methods = require(’…/models/tf_methods.js’);var server = thrift.createServer(Nodejs, tf_methods);server.listen(15300);server.on(‘error’,function(e){console.log(‘e’,e);});module.exports = tf_methods;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wangxiuwen.github.io/tags/nodejs/"}],"author":"wangxiuwen"},{"title":"aggregate","slug":"history/tech/5953c4d0c2b92f5665eed958","date":"2015-12-09T03:50:08.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed958/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed958/","excerpt":"","text":"这里count就是个键值db.users.aggregate()示例：用户表查询指定条件的人的手机号码var cursor = db.users.aggregate();var mobiles = [];cursor.forEach(function©{mobiles.push(c._id);});mobiles = mobiles.filter(function(a){return !!a});","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"w 选项","slug":"history/tech/5953c4d0c2b92f5665eed957","date":"2015-12-09T03:47:45.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed957/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed957/","excerpt":"","text":"w，wtimeout选项，w为2的话就是数据写入到primary和secondary才返回，那么failover的时候就不怕丢数据","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mongodb","slug":"mongodb","permalink":"https://wangxiuwen.github.io/tags/mongodb/"}],"author":"wangxiuwen"},{"title":"svn 服务器退版本","slug":"history/tech/5953c4d0c2b92f5665eed956","date":"2015-12-09T03:41:52.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed956/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed956/","excerpt":"","text":"由于误操作，不小心将错误的代码提交到了svn上，于是想在服务器上撤销本次提交，经过尝试，发现进行以下步骤的操作即可彻底删除本次提交:1.首先找到本次提交后生成的版本号，例如为r224.2.登录到svn服务器上，进入到项目的svn目录.3.进入db目录，删除此目录下的rep-cache.db。并修改此目录下的current文件，将其修改为上一个版本，例如233.4.删除db/revs/0/目录下的224文件。5.删除db/revprops/0/目录下的224文件。至此，服务器端已经回退到r223版本，此时可以将本地下载到的代码删除，重新从svn服务器上下载一份代码，然后基于此代码继续修改提交。如果在windows下使用TortoiseSVN,还需要删除本地的缓存，不然会出现再次提交后，其日志显示出现错误的情况，删除方法为点击TortoiseSVN的settings,在选择&quot;Saved Data&quot;，点击Clear清除Log message即可。","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"svn","slug":"svn","permalink":"https://wangxiuwen.github.io/tags/svn/"}],"author":"wangxiuwen"},{"title":"加密方式","slug":"history/tech/5953c4d0c2b92f5665eed95a","date":"2015-12-09T02:47:44.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed95a/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed95a/","excerpt":"","text":"一般我们的加密都是采用md5加密方式：md5(变量)。但是昨天需要整合discuz的论坛，看他的加密方式也像是md5，但是简单的123加密后竟然解密不出来。后来在网上查了一下，发现他不只是简单的md5加密，而是“md5+随机”。当然这样更安全了。网站安全了，程序自然也就复杂了…discuz的加密方式：md5(md5(password).password).password).salt)，salt是一个6位随机数。 注册的时候，把用户的密码用md5(md5(password).salt)加密，salt是一个6位随机数字，下面是我的一个获取6位随机数的一个方法：function randstr($len=6) {$chars=‘abcdefghijklmnopqrstuvwxyz0123456789’;// characters to build the password frommt_srand((double)microtime()1000000getmypid());// seed the random number generater (must be done)password=′′;while(strlen(password=&#x27;&#x27;; while(strlen(password=​′′​​;while(strlen(password)&lt;$len)password.=substr(password.=substr(password.=substr(chars,(mt_rand()%strlen($chars)),1);return $password;}salt=randstr();把randstr()赋值给salt，然后用md5(md5(会员提交的密码).salt)加密就可以了，但是千万不要忘了把salt入库哦（uc_members表）。登陆的时候根据用户名把salt取出来，用md5(md5(会员提交的密码).salt)匹配密码，如果一样就登陆成功了","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"discuz","slug":"discuz","permalink":"https://wangxiuwen.github.io/tags/discuz/"}],"author":"wangxiuwen"},{"title":"nodejs thrift","slug":"history/tech/5953c4d0c2b92f5665eed955","date":"2015-12-09T02:37:41.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed955/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed955/","excerpt":"","text":"http://linmomo02.iteye.com/blog/1306920https://cnodejs.org/topic/51bec17760af11cd336d5831http://uule.iteye.com/blog/2223730http://www.cnblogs.com/johnc/archive/2011/06/19/2084508.htmlhttp://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167669.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"thrift","slug":"thrift","permalink":"https://wangxiuwen.github.io/tags/thrift/"}],"author":"wangxiuwen"},{"title":"多级目录解决方案","slug":"history/tech/5953c4d0c2b92f5665eed954","date":"2015-12-09T02:30:53.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed954/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed954/","excerpt":"","text":"function __format(data){var tmp = {},lvIdArr = [];for(i in data){if(!lvIdArr[data.lv]){lvIdArr[data.lv] = [];}lvIdArr[data.lv].push(data.id);tmp[data.id] = data;}var dataArr = [],len = lvIdArr.length;for(i = len;i &gt;0;i–){lvIdArr.forEach(function(id){if(dataArr){dataArr.child.push(tmp);}else{dataArr = tmp[tmp.pid];dataArr.child = [];}});}return dataArr;}var data = ;function __format(data){var tmp = {},lvIdArr = [];for(i in data){if(!lvIdArr[data.lv]){lvIdArr[data.lv] = [];}lvIdArr[data.lv].push(data.id);tmp[data.id] = data;}var dataArr = [],len = lvIdArr.length;for(i = len - 1;i &gt;=0;–i){(lvIdArr || []).forEach(function(id){if(dataArr){dataArr.child.push(tmp);}else{dataArr = tmp[tmp.pid] || tmp;dataArr.child = [];}});}return dataArr;}__format(data);var data = ;function __format(data){var tmp = {},lvIdArr = [];for(i in data){if(!lvIdArr[data.lv]){lvIdArr[data.lv] = [];}lvIdArr[data.lv].push(data.id);tmp[data.id] = data;}var dataArr = [],len = lvIdArr.length;for(i = len - 1;i &gt;=0;–i){(lvIdArr || []).forEach(function(id){//item的idif(i == 0){dataArr.push(tmp);}else{if(!tmp[tmp.pid].child){tmp[tmp.pid].child = [];}tmp[tmp.pid].child.push(tmp);}});}return dataArr;}__format(data);","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"缓存","slug":"history/tech/5953c4d0c2b92f5665eed953","date":"2015-12-09T02:27:02.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed953/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed953/","excerpt":"","text":"add_header X-Cache $upstream_cache_status;http://zyan.cc/nginx_cache/2/1/http://linux.it.net.cn/e/server/nginx/2015/0314/13930.htmlhttp://www.dnzsb.com/article-3943-1.html1）./configure: error: ngx_http_lua_module requires the Lua library.解决方法：yum install -y lua-develsudo apt-get install libluajit-5.1-devhttp://stackoverflow.com/questio … h-lua-on-rpm-system","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"Linux 配置权限受限制的SFTP用户","slug":"history/tech/5953c4d0c2b92f5665eed952","date":"2015-12-09T02:23:21.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed952/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed952/","excerpt":"","text":"http://be-evil.org/how-to-restrict-lime-sftp-user.htmlhttp://www.zhukun.net/archives/7641http://itindex.net/detail/50730-ssh-sftphttp://www.chinaunix.net/old_jh/4/701381.html","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"linux","slug":"linux","permalink":"https://wangxiuwen.github.io/tags/linux/"}],"author":"wangxiuwen"},{"title":"获取当前script","slug":"history/tech/5953c4d0c2b92f5665eed951","date":"2015-12-09T02:21:17.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed951/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed951/","excerpt":"","text":"function getCurrentScript() {if (document.currentScript) {return document.currentScript;}// For IE6-9 browsers, the script onload event may not fire right // after the script is evaluated. Kris Zyp found that it // could query the script nodes and the one that is in &quot;interactive&quot; // mode indicates the current script // ref: http://goo.gl/JHfFW var scripts = document.getElementsByTagName(&quot;script&quot;) for (var i = scripts.length - 1; i &gt;= 0; i--) { var script = scripts if (script.readyState === &quot;interactive&quot;) { interactiveScript = script return interactiveScript } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"nginx 配置代理服务器","slug":"history/tech/5953c4d0c2b92f5665eed950","date":"2015-12-09T02:02:58.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed950/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed950/","excerpt":"","text":"nginx 配置代理服务器server { listen 8090; resolver 8.8.8.8; location /{ #proxy_pass http://$http_host$request_uri; proxy_pass $scheme://$host$request_uri; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; client_max_body_size 100m; #allow 127.0.0.1; #deny all; } access_log /var/log/nginx/proxy-access.log; error_log /var/log/nginx/proxy-error.log; }","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"nginx","slug":"nginx","permalink":"https://wangxiuwen.github.io/tags/nginx/"}],"author":"wangxiuwen"},{"title":"mysql 安装完毕无法登陆","slug":"history/tech/5953c4d0c2b92f5665eed959","date":"2015-12-09T01:35:31.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed959/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed959/","excerpt":"","text":"mysql&gt; use mysql;mysql&gt; select host,user from user;mysql&gt; update user set host = ‘%’ where user = ‘root’;mysql&gt; select host,user from user;mysql&gt; flush privileges;root对应的host成了%,表示可以任意IP地址登录了.还需修改my.cnfbind-address = 0.0.0.0","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"mysql","slug":"mysql","permalink":"https://wangxiuwen.github.io/tags/mysql/"}],"author":"wangxiuwen"},{"title":"js之事件冒泡和事件捕获","slug":"history/tech/5953c4d0c2b92f5665eed94e","date":"2015-12-08T04:53:20.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed94e/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed94e/","excerpt":"","text":"js之事件冒泡和事件捕获","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"javascript","slug":"javascript","permalink":"https://wangxiuwen.github.io/tags/javascript/"}],"author":"wangxiuwen"},{"title":"REPLACE INTO common_connect_guest SET `conuintoken`='xxxxxxx''","slug":"history/tech/5953c4d0c2b92f5665eed94d","date":"2015-12-08T04:45:40.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed94d/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed94d/","excerpt":"","text":"REPLACE INTO common_connect_guest SET conuintoken=‘xxxxxxx’'解决方案：ALTER TABLE pre_common_member_connect ADD COLUMN conuintoken char(32) NOT NULL DEFAULT ‘’;ALTER TABLE pre_common_connect_guest ADD COLUMN conuintoken char(32) NOT NULL DEFAULT ‘’;","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"discuz","slug":"discuz","permalink":"https://wangxiuwen.github.io/tags/discuz/"}],"author":"wangxiuwen"},{"title":"elasticsearch 启动命令","slug":"history/tech/5953c4d0c2b92f5665eed94f","date":"2015-12-07T17:16:44.000Z","updated":"2020-11-29T01:42:08.747Z","comments":true,"path":"history/tech/5953c4d0c2b92f5665eed94f/","link":"","permalink":"https://wangxiuwen.github.io/history/tech/5953c4d0c2b92f5665eed94f/","excerpt":"","text":"我们可以覆盖集群或者节点的名字。我们可以在启动Elasticsearch的时候通过命令行来指定，如下：./elasticsearch --cluster.name my_cluster_name --node.name my_node_name$ elasticsearch-1.6.0/bin/elasticsearch -Des.node.name=QIANRUSHI -Des.http.port=8888 -d","categories":[{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tech","slug":"tech","permalink":"https://wangxiuwen.github.io/tags/tech/"},{"name":"技术","slug":"技术","permalink":"https://wangxiuwen.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wangxiuwen.github.io/tags/elasticsearch/"}],"author":"wangxiuwen"}]}